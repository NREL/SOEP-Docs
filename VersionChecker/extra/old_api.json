{"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl120_ECM":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl120_ECM","comment":"Aluminum cable 120mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.278e-003"},{"name":"XCha","value":"0.071e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 120mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.278e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.071e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.Functions.sublimationPressureIce":{"name":"Buildings.Utilities.Psychrometrics.Functions.sublimationPressureIce","comment":"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"TSat","comment":"Saturation temperature","modifications":[{"name":"displayUnit","value":"\"degC\""},{"name":"nominal","value":"300"}]},{"className":"Modelica.SIunits.AbsolutePressure","qualifiers":["output"],"name":"pSat","comment":"Saturation pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"nominal","value":"1000"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSublimation pressure of water below the triple point temperature, computed from temperature,\naccording to Wagner \u003ci\u003eet al.\u003c/i\u003e (1993).\nThe range of validity is between\n\u003ci\u003e190\u003c/i\u003e and \u003ci\u003e273.16\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nWagner W., A. Saul, A. Pruss.\n \u003ci\u003eInternational equations for the pressure along the melting and along the sublimation curve of ordinary water substance\u003c/i\u003e,\nequation 3.5. 1993.\n\u003ca href\u003d\\\"http://www.nist.gov/data/PDFfiles/jpcrd477.pdf\\\"\u003e\nhttp://www.nist.gov/data/PDFfiles/jpcrd477.pdf\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Types.VoltageLevel":{"name":"Buildings.Electrical.Types.VoltageLevel","comment":"Enumeration that defines the type of voltage level","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Low","comment":"Low voltage"},{"className":"EnumType","qualifiers":["constant"],"name":"Medium","comment":"Medium voltage"},{"className":"EnumType","qualifiers":["constant"],"name":"High","comment":"High voltage"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type is used to define which type of voltage level is used.\nThis is typically used for computing or selecting the line cables.\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.winTExteriorIrradiatrionExteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.winTExteriorIrradiatrionExteriorShading","comment":"Angular and hemispherical transmittance of a window system (glass + shading device) for exterior irradiation with exterior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"traExtIrrExtSha","comment":"Angular and hemispherical transmittance of a window system (glass + shading device) for exterior irradiation with exterior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular and hemispherical transmittance of a window system (glass + shading device) for exterior irradiation with exterior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.DC.Sources.PVSimpleOriented":{"name":"Buildings.Electrical.DC.Sources.PVSimpleOriented","comment":"Simple PV model with orientation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialPVOriented","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal"},{"name":"panel"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nThis model computes the power as\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003dA \u0026nbsp; f\u003csub\u003eact\u003c/sub\u003e \u0026nbsp; \u0026eta; \u0026nbsp; G\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eA\u003c/i\u003e is the panel area,\n\u003ci\u003ef\u003csub\u003eact\u003c/sub\u003e\u003c/i\u003e is the fraction of the aperture area,\n\u003ci\u003e\u0026eta;\u003c/i\u003e is the panel efficiency and\n\u003ci\u003eG\u003c/i\u003e is the total solar irradiation, which is the sum\nof direct and diffuse irradiation.\nThe model takes into account the location and the orientation of the PV panel,\nspecified by the surface tilt, latitude and azimuth.\n\u003c/p\u003e\n\u003cp\u003e\nThis power is equal to \u003ci\u003eP \u003d v \u0026nbsp; i\u003c/i\u003e,\nwhere \u003ci\u003ev\u003c/i\u003e is the voltage across the panel and\n\u003ci\u003ei\u003c/i\u003e is the current that flows through the panel.\n\u003c/p\u003e\n\u003cp\u003e\nTo avoid a large voltage drop the panel electric connector,\nit is recommended to use this model together\nwith a model that prescribes the voltage.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.DC.Sources.Examples.PVSimpleOriented\\\"\u003e\nBuildings.Electrical.DC.Sources.Examples.PVSimpleOriented\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as an input the direct and diffuse solar radiation from\nthe weather data bus.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Line(),Text(),Text()})"}},"Buildings.Electrical.DC.Lines.Line":{"name":"Buildings.Electrical.DC.Lines.Line","comment":"Model of a DC electrical line","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialLine","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal_n"},{"name":"terminal_p"},{"name":"modelMode","qualifiers":["final"],"value":"Types.Load.FixedZ_steady_state"},{"name":"commercialCable","value":"Buildings.Electrical.Transmission.Functions.selectCable_low(P_nominal,V_nominal)"}]}],"components":[{"className":"TwoPortRCLine","name":"lineRC","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"R","qualifiers":["final"],"value":"R"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"C","qualifiers":["final"],"value":"C"},{"name":"use_C","qualifiers":["final"],"value":"use_C"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,10},{10,-10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a DC cable. The model is based on\n\u003ca href\u003d\\\"Buildings.Electrical.DC.Lines.TwoPortRCLine\\\"\u003e\nBuildings.Electrical.DC.Lines.TwoPortRCLine\u003c/a\u003e\nand provides functionalities to parametrize the values of \u003ci\u003eR\u003c/i\u003e and \u003ci\u003eC\u003c/i\u003e either\nusing commercial cables or using default values.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Rectangle(),Ellipse(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.Line":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.Line","comment":"Model of an electrical line","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Lines.Line","modifications":[{"name":"terminal_n"},{"name":"terminal_p"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]},{"name":"line"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a cable for three-phase balanced AC systems. The model is based on\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortRLC\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortRLC\u003c/a\u003e\nand provides functionalities to parametrize the values of \u003ci\u003eR\u003c/i\u003e, \u003ci\u003eL\u003c/i\u003e and \u003ci\u003eC\u003c/i\u003e either\nusing commercial cables or using default values.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Lines.Line\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Lines.Line\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Rectangle(),Ellipse(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.Utilities.Controllers.StateMachineVoltCtrl":{"name":"Buildings.Electrical.Utilities.Controllers.StateMachineVoltCtrl","comment":"This model represents a simple voltage controller that unplug a load when\n  there is a voltage fluctuation higher that a given threshold.","qualifiers":["model"],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"V","comment":"Voltage of the node to be controlled"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage of the node to be controlled"},{"className":"Real","qualifiers":["parameter"],"name":"vThresh","comment":"Threshold that activates voltage ctrl (ratio of nominal voltage)","value":"0.1","modifications":[{"name":"min","value":"0.0"},{"name":"max","value":"1.0"}]},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tDelay","comment":"Time to wait before plugging the load back","value":"300"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Output signal that represents whether the load should be connected to the grid or not"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction that implements a state machine that detects voltage\ndeviations. If the voltage input \u003ccode\u003eV\u003c/code\u003e exceeds the\nnominal value \u003ccode\u003eV_nominal\u003c/code\u003e by more than \u003ci\u003e1+V\u003csub\u003etr\u003c/sub\u003e\u003c/i\u003e\nthen the control signal \u003ccode\u003ey\u003c/code\u003e becones zero for\na period equal to \u003ccode\u003etDelay\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nA signal \u003ccode\u003ey \u003d 0\u003c/code\u003e can be used to turn off a load.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Generator":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Generator","comment":"Model of a generator","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Sources.Generator","modifications":[{"name":"terminal"},{"name":"f","modifications":[{"name":"start","value":"60"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of an inductive generator.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.Generator\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.Generator\u003c/a\u003e for\nmore information.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.DC.Lines.TwoPortResistance":{"name":"Buildings.Electrical.DC.Lines.TwoPortResistance","comment":"Model of a two port DC resistance","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialTwoPortResistance","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"diagram":"Diagram(graphics \u003d {Rectangle(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a resistance that connect two DC interfaces. This model can be used\nto represent a cable in a DC grid.\n\u003c/p\u003e\n\u003cp\u003e\nThe model represents the lumped resistance as shown in the figure below.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/DC/Lines/twoPortR.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Line(),Line(),Rectangle()})"}},"Buildings.Electrical.DC.Sources.WindTurbine":{"name":"Buildings.Electrical.DC.Sources.WindTurbine","comment":"Wind turbine with power output based on table as a function of wind speed","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialWindTurbine","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"Buildings.Electrical.PhaseSystems.TwoConductor"},{"name":"terminal"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a wind turbine whose power is computed as a function of wind-speed as defined in a table.\n\u003c/p\u003e\n\u003cp\u003e\nInput to the model is the local wind speed.\nThe model requires the specification of a table that maps wind speed in meters per second to generated\npower \u003ci\u003eP\u003csub\u003et\u003c/sub\u003e\u003c/i\u003e in Watts.\nThe model has a parameter called \u003ccode\u003escale\u003c/code\u003e with a default value of one\nthat can be used to scale the power generated by the wind turbine.\nThe generated DC electrical power is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP \u003d P\u003csub\u003et\u003c/sub\u003e scale \u003d v i,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003ev\u003c/i\u003e is the voltage and \u003ci\u003ei\u003c/i\u003e is the current.\nFor example, the following specification (with default \u003ccode\u003escale\u003d1\u003c/code\u003e) of a wind turbine\n\u003c/p\u003e\n\u003cpre\u003e\n  WindTurbine_Table tur(\n    table\u003d[3.5, 0;\n           5.5,   100;\n           12, 900;\n           14, 1000;\n           25, 1000]) \\\"Wind turbine\\\";\n\u003c/pre\u003e\n\u003cp\u003e\nyields the performance shown below. In this example, the cut-in wind speed is \u003ci\u003e3.5\u003c/i\u003e meters per second,\nand the cut-out wind speed is \u003ci\u003e25\u003c/i\u003e meters per second,\nas entered by the first and last entry of the wind speed column.\nBelow and above these wind speeds, the generated power is zero.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"alt-image\\\"  src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/DC/Sources/WindTurbine_Table.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text()})"}},"Buildings.Fluid.FMI.Interfaces.PressureOutput":{"name":"Buildings.Fluid.FMI.Interfaces.PressureOutput","comment":"Output pressure as a connector","qualifiers":["output"],"superClasses":[{"nameOfExtendedClass":"Modelica.SIunits.AbsolutePressure","modifications":[{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}, initialScale \u003d 0.1), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one output signal of type \u003ccode\u003eModelica.SIunits.AbsolutePressure\u003c/code\u003e.\nThis connector has been implemented to conditionally remove\nthe pressure if no pressure drop calculation is requested.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}, initialScale \u003d 0.1), graphics \u003d {Polygon()})"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}, initialScale \u003d 0.1), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one output signal of type \u003ccode\u003eModelica.SIunits.AbsolutePressure\u003c/code\u003e.\nThis connector has been implemented to conditionally remove\nthe pressure if no pressure drop calculation is requested.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}, initialScale \u003d 0.1), graphics \u003d {Polygon()})"}},"Buildings.Media.Specialized.Air.PerfectGas.saturationPressureLiquid_der":{"name":"Buildings.Media.Specialized.Air.PerfectGas.saturationPressureLiquid_der","comment":"Time derivative of saturationPressureLiquid","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"Tsat","comment":"Saturation temperature"},{"className":"Real","qualifiers":["input"],"name":"dTsat","comment":"Saturation temperature derivative","modifications":[{"name":"unit","value":"\"K/s\""}]},{"className":"Real","qualifiers":["output"],"name":"psat_der","comment":"Saturation pressure","modifications":[{"name":"unit","value":"\"Pa/s\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nDerivative function of\n\u003ca href\u003d\\\"modelica://Buildings.Media.Specialized.Air.PerfectGases.saturationPressureLiquid\\\"\u003e\nBuildings.Media.Specialized.Air.PerfectGases.saturationPressureLiquid\u003c/a\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.glassAbsExteriorIrradiationNoShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassAbsExteriorIrradiationNoShading","comment":"Angular and hemispherical absorptance of each glass pane for exterior irradiation without shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"abs","comment":"Angular and hemispherical absorptance of each glass pane for exterior irradiation without shading.\n     Indices: abs[1 to N : ] -\u003e pane 1 to N;\n     abs[ : 1 to HEM] -\u003e angular (1:HEM-1) and hemispherical (HEM)","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes specular and hemispherical absorptance of each glass pane for exterior irradiation without shading.\nIt counts the transmittance and reflectance among different panes.\nPane \u003ccode\u003e1\u003c/code\u003e is facing the outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.FMI.Interfaces.FluidProperties":{"name":"Buildings.Fluid.FMI.Interfaces.FluidProperties","comment":"Type definition for fluid properties","qualifiers":["connector"],"components":[{"className":"Medium.Temperature","name":"T","comment":"Temperature"},{"className":"Buildings.Fluid.FMI.Interfaces.MassFractionConnector","name":"X_w","comment":"Water vapor mass fractions per kg total air","conditionalClause":" if Medium.nXi\u003e0"},{"className":"Medium.ExtraProperty","qualifiers":["array"],"name":"C","comment":"Properties c_i/m","arraySubscripts":"[Medium.nC]"}],"classes":[{"name":"Buildings.Fluid.FMI.Interfaces.FluidProperties.Medium","comment":"Medium model","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a connector that declares the following fluid properties:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe temperature \u003ccode\u003eT\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe mass fraction of water vapor \u003ccode\u003eX_w\u003c/code\u003e per kg of total air,\nunless \u003ccode\u003eMedium.nXi\u003d0\u003c/code\u003e.\nNote that the mass fraction is not per kg of dry air, but rather\nper kg of total air as is customary in Modelica.\n\u003c/li\u003e\n\u003cli\u003e\nThe trace substances\n\u003ccode\u003eC\u003c/code\u003e, \nunless \u003ccode\u003eMedium.nC\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThese quantities are used in the connectors\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.Interfaces.Inlet\\\"\u003e\nBuildings.Fluid.FMI.Interfaces.Inlet\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.Interfaces.Outlet\\\"\u003e\nBuildings.Fluid.FMI.Interfaces.Outlet\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nNote that none of these quantities is declared to be an\n\u003ccode\u003einput\u003c/code\u003e or \u003ccode\u003eoutput\u003c/code\u003e, because the role\nis reversed whether the properties are in inlet or\noutlet connector.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepUpYD":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepUpYD","comment":"AC AC transformer simplified equivalent circuit (YD step up)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepUpYD","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Real","qualifiers":["parameter"],"name":"XoverR","comment":"Ratio between the complex and real components of the impedance (XL/R)"},{"className":"Real","qualifiers":["parameter"],"name":"Zperc","comment":"Short circuit impedance"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of transformer to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of transformer to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a simplified equivalent transformer model with Y-Delta connection\n(voltage step up).\nThe model accounts for winding Joule losses and leakage reactances\nthat are represented by a series of a resistance \u003ci\u003eR\u003c/i\u003e and an\ninductance \u003ci\u003eL\u003c/i\u003e. The resistance and the inductance represent the\neffects of the secondary and primary side of the transformer.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVhigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVlow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVAbase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXoverR\u003c/code\u003e - ratio between reactance and resistance, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZperc\u003c/code\u003e - the short circuit impedance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the resistance and inductance.\n\u003c/p\u003e\n\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/YD_b.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepUpYD\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepUpYD\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text(),Line(),Line(),Line(),Line(),Polygon()})"}},"Buildings.Utilities.Math.SmoothExponential":{"name":"Buildings.Utilities.Math.SmoothExponential","comment":"Once continuously differentiable approximation to exp(-|x|) in interval |x| \u003c delta","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"delta","comment":"Transition point where approximation occurs"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eFunction to provide a once continuously differentiable approximation to \u003ci\u003eexp(- |x| )\u003c/i\u003e in the interval \u003ci\u003e|x| for some positive \u0026delta; \u003c/i\u003e\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Utilities.Math.Functions.polynomial":{"name":"Buildings.Utilities.Math.Functions.polynomial","comment":"Polynomial function","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Independent variable"},{"className":"Real","qualifiers":["array","input"],"name":"a","comment":"Coefficients","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis function computes a polynomial of arbitrary order.\nThe polynomial has the form\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  y \u003d a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e x + a\u003csub\u003e3\u003c/sub\u003e x\u003csup\u003e2\u003c/sup\u003e + ...\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.Gases.dynamicViscosity":{"name":"Buildings.HeatTransfer.Data.Gases.dynamicViscosity","comment":"Function to compute the dynamic viscosity for gases","components":[{"className":"Buildings.HeatTransfer.Data.Gases.Generic","qualifiers":["input"],"name":"gas","comment":"Record of gas data"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Gas temperature"},{"className":"Modelica.SIunits.DynamicViscosity","qualifiers":["output"],"name":"mu","comment":"Dynamic viscosity"}]},"Buildings.Fluid.Movers.FlowControlled_m_flow":{"name":"Buildings.Fluid.Movers.FlowControlled_m_flow","comment":"Fan or pump with ideally controlled mass flow rate as input signal","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine","modifications":[{"name":"preVar","qualifiers":["final"],"value":"Buildings.Fluid.Movers.BaseClasses.Types.PrescribedVariable.FlowRate"},{"name":"computePowerUsingSimilarityLaws","qualifiers":["final"],"value":"per.havePressureCurve"},{"name":"stageInputs","qualifiers":["final"],"value":"massFlowRates","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"kg/s\""}]},{"name":"constInput","qualifiers":["final"],"value":"constantMassFlowRate","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}]},{"name":"filter","modifications":[{"name":"y_start","qualifiers":["final"],"value":"m_flow_start"},{"name":"u_nominal","value":"m_flow_nominal"},{"name":"u","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}]},{"name":"y","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}]}]},{"name":"eff","modifications":[{"name":"per","modifications":[{"name":"pressure","qualifiers":["final"],"value":"if per.havePressureCurve then per.pressure else Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters()"},{"name":"use_powerCharacteristic","qualifiers":["final"],"value":"if per.havePressureCurve then per.use_powerCharacteristic else false"}]}]},{"name":"preSou","modifications":[{"name":"m_flow_start","value":"m_flow_start"}]}]}],"components":[{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp_nominal","comment":"Nominal pressure raise, used for default pressure curve if not specified in record per","value":"if rho_default\u003c500 then 500 else 10000","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_start","comment":"Initial value of mass flow rate","value":"0","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Filtered speed\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"constantMassFlowRate","comment":"Constant pump mass flow rate, used when inputType\u003dConstant","value":"m_flow_nominal","annotations":{"dialog":"Dialog(enable \u003d inputType\u003d\u003dBuildings.Fluid.Types.InputType.Constant)"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["array","parameter"],"name":"massFlowRates","comment":"Vector of mass flow rate set points, used when inputType\u003dStage","value":"m_flow_nominal*{0}","arraySubscripts":"[:]","annotations":{"dialog":"Dialog(enable \u003d inputType\u003d\u003dBuildings.Fluid.Types.InputType.Stages)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"m_flow_in","comment":"Prescribed mass flow rate","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""},{"name":"nominal","value":"m_flow_nominal"}],"conditionalClause":" if inputType\u003d\u003dBuildings.Fluid.Types.InputType.Continuous","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {0,120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {-2,120}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"m_flow_actual","comment":"Actual mass flow rate","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""},{"name":"nominal","value":"m_flow_nominal"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,10},{120,30}}), iconTransformation(extent \u003d {{100,10},{120,30}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes a fan or pump with prescribed mass flow rate.\nThe efficiency of the device is computed based\non the efficiency and pressure curves that are defined\nin record \u003ccode\u003eper\u003c/code\u003e, which is of type\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.SpeedControlled_Nrpm\\\"\u003e\nBuildings.Fluid.Movers.SpeedControlled_Nrpm\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.UsersGuide\\\"\u003e\nUser\u0027s Guide\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Line(),Text(),Text()})"}},"Buildings.HeatTransfer.Conduction.MultiLayer":{"name":"Buildings.HeatTransfer.Conduction.MultiLayer","comment":"Model for heat conductance through a solid with multiple material layers","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Conduction.BaseClasses.PartialConductor","modifications":[{"name":"R","qualifiers":["final"],"value":"sum(layers.material[i].Ri in 1:size(layers.material,1))"}]},{"nameOfExtendedClass":"Buildings.HeatTransfer.Conduction.BaseClasses.PartialConstruction"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"T","comment":"Temperature at the states","modifications":[{"name":"nominal","qualifiers":["each"],"value":"300"},{"name":"start","qualifiers":["each"],"value":"293.15"}],"arraySubscripts":"[sum(nSta)]"},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["array"],"name":"Q_flow","comment":"Heat flow rate from state i to i+1","arraySubscripts":"[sum(nSta)+nLay]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a heat conductor with multiple material layers and energy storage.\nThe construction has at least one material layer, and each layer has\nat least one temperature node. The layers are modeled using an instance of\n\u003ca href\u003d\\\"Buildings.HeatTransfer.Conduction.SingleLayer\\\"\u003e\nBuildings.HeatTransfer.Conduction.SingleLayer\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe construction material is defined by a record of the package\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.OpaqueConstructions\\\"\u003e\nBuildings.HeatTransfer.Data.OpaqueConstructions\u003c/a\u003e.\nThis record allows specifying materials that store energy, and material\nthat are a thermal conductor only with no heat storage.\nTo assign the material properties to this model, do the following:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nCreate an instance of a record of\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.OpaqueConstructions\\\"\u003e\nBuildings.HeatTransfer.Data.OpaqueConstructions\u003c/a\u003e, for example\nby dragging the record into the schematic model editor.\n\u003c/li\u003e\n\u003cli\u003e\nMake sure the instance has the attribute \u003ccode\u003eparameter\u003c/code\u003e, which may not be\nassigned automatically when you drop the model in a graphical editor. For\nexample, an instanciation may look like\n\u003cpre\u003e\n parameter Data.OpaqueConstructions.Insulation100Concrete200 layers\n   \\\"Material layers of construction\\\"\n   annotation (Placement(transformation(extent\u003d{{-80,60},{-60,80}})));\n\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\nAssign the instance of the material to the instance of the heat transfer\nmodel as shown in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Examples.ConductorMultiLayer\\\"\u003e\nBuildings.HeatTransfer.Examples.ConductorMultiLayer\u003c/a\u003e.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nTo obtain the surface temperature of the construction, use \u003ccode\u003eport_a.T\u003c/code\u003e (or \u003ccode\u003eport_b.T\u003c/code\u003e)\nand not the variable \u003ccode\u003eT[1]\u003c/code\u003e because there is a thermal resistance between the surface\nand the temperature state.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Polygon(),Polygon(),Rectangle(),Polygon(),Polygon(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Electrical.AC.OnePhase.Loads.Inductive":{"name":"Buildings.Electrical.AC.OnePhase.Loads.Inductive","comment":"Model of an inductive and resistive load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.InductiveLoad","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\n\u003cp\u003e\nModel of an inductive load. It may be used to model an inductive motor.\n\u003c/p\u003e\n\u003cp\u003e\nThe model computes the complex power vector as\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nS \u003d P + jQ \u003d V \u0026sdot; i\u003csup\u003e*\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u003c/i\u003e is the voltage phasor and \u003ci\u003ei\u003csup\u003e*\u003c/sup\u003e\u003c/i\u003e is the complex\nconjugate of the current phasor. The voltage and current phasors are shifted\nby an angle \u003ci\u003e\u0026phi;\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe load model takes as input the power consumed by the inductive load and\nthe power factor \u003ci\u003epf\u003dcos(\u0026phi;)\u003c/i\u003e. The power\ncan be either fixed using the parameter \u003ccode\u003eP_nominal\u003c/code\u003e, or\nit is possible to specify a variable power using the inputs \u003ccode\u003ey\u003c/code\u003e or\n\u003ccode\u003ePow\u003c/code\u003e.\n\nThe power factor can be either specified by the parameter \u003ccode\u003epf\u003c/code\u003e\nor using the input connector \u003ccode\u003epf_in\u003c/code\u003e.\n\nThe different modes can be selected with the parameter\n\u003ccode\u003emode\u003c/code\u003e and \u003ccode\u003euse_pf_in\u003c/code\u003e, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Load\\\"\u003e\nBuildings.Electrical.Interfaces.Load\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.InductiveLoad\\\"\u003e\nBuildings.Electrical.Interfaces.InductiveLoad\u003c/a\u003e for more information.\n\u003c/p\u003e\n\n\u003cp\u003e\nGiven the active power \u003ci\u003eP\u003c/i\u003e and the power factor \u003ci\u003epf\u003c/i\u003e, the complex\npower \u003ci\u003eQ\u003c/i\u003e is computed as\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nQ \u003d P  tan(arccos(pf)).\n\u003c/p\u003e\n\n\u003cp\u003e\nThe equations of the model can be rewritten as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e1\u003c/sub\u003e \u003d (P V\u003csub\u003e1\u003c/sub\u003e + Q V\u003csub\u003e2\u003c/sub\u003e)/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e),\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e2\u003c/sub\u003e \u003d (P V\u003csub\u003e2\u003c/sub\u003e - Q V\u003csub\u003e1\u003c/sub\u003e)/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e),\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003ei\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003ei\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003eV\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, and \u003ci\u003eV\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e\nare the real and imaginary parts of the current and voltage phasors.\n\u003c/p\u003e\n\u003cp\u003e\nThe nonlinearity of the model is due to the fact that the load consumes the power specified by the variables \u003ci\u003eP\u003c/i\u003e\nand \u003ci\u003eQ\u003c/i\u003e, irrespectively of the voltage of the load.\n\u003c/p\u003e\n\u003cp\u003e\nWhen multiple loads are connected in a grid through cables that cause voltage drops,\nthe dimension of the system of nonlinear equations increases linearly with the number of loads.\nThis nonlinear system of equations introduces challenges during the initialization,\nas Newton solvers may diverge if initialized far from a solution, as well during the simulation.\nIn this situation, the model can be parameterized to use a linear approximation\nas discussed in the next section.\n\u003c/p\u003e\n\n\u003ch4\u003eLinearized model\u003c/h4\u003e\n\u003cp\u003e\nGiven the constraints and the two-dimensional nature of the problem, it is difficult to\nfind a linearized version of the AC load model. A solution could be to divide the voltage\ndomain into sectors, and for each sector compute the best linear approximation.\nHowever the selection of the proper approximation depending on the value of the\nvoltage can generate events that increase the simulation time. For these reasons, the\nlinearized model assumes a voltage that is equal to the nominal value\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e1\u003c/sub\u003e \u003d (P V\u003csub\u003e1\u003c/sub\u003e + Q V\u003csub\u003e2\u003c/sub\u003e)/V\u003csub\u003eRMS\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e2\u003c/sub\u003e \u003d (P V\u003csub\u003e2\u003c/sub\u003e - Q V\u003csub\u003e1\u003c/sub\u003e)/V\u003csub\u003eRMS\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003eRMS\u003c/sub\u003e\u003c/i\u003e is the Root Mean Square voltage of the AC system.\nEven though this linearized version of the load model introduces an approximation\nerror in the current, it satisfies the contraints related to the ratio of the\nactive and reactive powers.\n\u003c/p\u003e\n\n\u003ch4\u003eInitialization\u003c/h4\u003e\n\u003cp\u003e\nThe initialization problem can be simplified using the homotopy operator. The homotopy operator\nuses two different types of equations to compute the value of a variable: the actual one\nand a simplified one. The actual equation is the one used during the normal operation.\nDuring initialization, the simplified equation is first solved and then slowly replaced\nwith the actual equation to compute the initial values for the nonlinear systems of\nequations. The load model uses the homotopy operator, with the linearized model being used\nas the simplified equation. This numerical expedient has proven useful when simulating models\nwith more than ten connected loads.\n\u003c/p\u003e\n\u003cp\u003e\nThe load model has a parameter \u003ccode\u003einitMode\u003c/code\u003e that can be used to select\nthe assumption to use during the initialization phase by the homotopy operator.\nThe choices are between a null current or the linearized model.\n\u003c/p\u003e\n\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Line(),Text()})"}},"Buildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc":{"name":"Buildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc","comment":"Cooling tower with variable speed using the York calculation for the approach temperature","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.CoolingTowers.BaseClasses.CoolingTower"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TAirInWB_nominal","comment":"Design inlet air wet bulb temperature","value":"273.15+25.55","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.TemperatureDifference","qualifiers":["parameter"],"name":"TApp_nominal","comment":"Design approach temperature","value":"3.89","modifications":[{"name":"displayUnit","value":"\"K\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.TemperatureDifference","qualifiers":["parameter"],"name":"TRan_nominal","comment":"Design range temperature (water in - water out)","value":"5.56","modifications":[{"name":"displayUnit","value":"\"K\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Real","qualifiers":["parameter"],"name":"fraPFan_nominal","comment":"Fan power divived by water mass flow rate at design condition","value":"275/(0.15)","modifications":[{"name":"unit","value":"\"W/(kg/s)\""}]},{"className":"Modelica.SIunits.Power","qualifiers":["parameter"],"name":"PFan_nominal","comment":"Fan power","value":"fraPFan_nominal*m_flow_nominal"},{"className":"cha.efficiencyParameters","qualifiers":["parameter"],"name":"fanRelPow","comment":"Fan relative power consumption as a function of control signal, fanRelPow\u003dP(y)/P(y\u003d1)","modifications":[{"name":"r_V","value":"{0,0.1,0.3,0.6,1}"},{"name":"eta","value":"{0,0.1^(3),0.3^(3),0.6^(3),1}"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,60},{80,80}}))"}},{"className":"Real","qualifiers":["parameter"],"name":"yMin","comment":"Minimum control signal until fan is switched off (used for smoothing between forced and free convection regime)","value":"0.3","modifications":[{"name":"min","value":"0.01"},{"name":"max","value":"1"}]},{"className":"Real","qualifiers":["parameter"],"name":"fraFreCon","comment":"Fraction of tower capacity in free convection regime","value":"0.125","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TAir","comment":"Entering air wet bulb temperature","modifications":[{"name":"min","value":"0"},{"name":"unit","value":"\"K\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.BoundsYorkCalc","name":"bou","comment":"Bounds for correlation"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y","comment":"Fan control signal","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.SIunits.TemperatureDifference","name":"TRan","comment":"Range temperature","modifications":[{"name":"nominal","value":"1"},{"name":"displayUnit","value":"\"K\""}]},{"className":"Modelica.SIunits.MassFraction","name":"FRWat","comment":"Ratio actual over design water mass flow ratio"},{"className":"Modelica.SIunits.MassFraction","name":"FRAir","comment":"Ratio actual over design air mass flow ratio"},{"className":"Modelica.SIunits.Power","name":"PFan","comment":"Fan power"}],"classes":[{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for a steady-state or dynamic cooling tower with variable speed fan using the York calculation for the\napproach temperature at off-design conditions.\n\u003c/p\u003e\n\u003ch4\u003eThermal performance\u003c/h4\u003e\n\u003cp\u003e\nTo compute the thermal performance, this model takes as parameters\nthe approach temperature, the range temperature and the inlet air wet bulb temperature\nat the design condition. Since the design mass flow rate (of the chiller condenser loop)\nis also a parameter, these parameters define the rejected heat.\n\u003c/p\u003e\n\u003cp\u003e\nFor off-design conditions, the model uses the actual range temperature and a polynomial\nto compute the approach temperature for free convection and for forced convection, i.e.,\nwith the fan operating. The polynomial is valid for a York cooling tower.\nIf the fan input signal \u003ccode\u003ey\u003c/code\u003e is below the minimum fan revolution \u003ccode\u003eyMin\u003c/code\u003e,\nthen the cooling tower operates in free convection mode, otherwise it operates in\nthe forced convection mode.\nFor numerical reasons, this transition occurs in the range of \u003ccode\u003ey \u0026isin; [0.9*yMin, yMin]\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eFan power consumption\u003c/h4\u003e\n\u003cp\u003e\nThe fan power consumption at the design condition can be specified as follows:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe parameter \u003ccode\u003efraPFan_nominal\u003c/code\u003e can be used to specify at the\nnominal conditions the fan power divided by the water flow rate. The default value is\n\u003ci\u003e275\u003c/i\u003e Watts for a water flow rate of \u003ci\u003e0.15\u003c/i\u003e kg/s.\n\u003c/li\u003e\n\u003cli\u003e\nThe parameter \u003ccode\u003ePFan_nominal\u003c/code\u003e can be set to the fan power at nominal conditions.\nIf a user does not set this parameter, then the fan power will be\n\u003ccode\u003ePFan_nominal \u003d fraPFan_nominal * m_flow_nominal\u003c/code\u003e, where \u003ccode\u003em_flow_nominal\u003c/code\u003e\nis the nominal water flow rate.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIn the forced convection mode, the actual fan power is\ncomputed as \u003ccode\u003ePFan\u003dfanRelPow(y) * PFan_nominal\u003c/code\u003e, where\nthe default value for the fan relative power consumption at part load is\n\u003ccode\u003efanRelPow(y)\u003dy\u003csup\u003e3\u003c/sup\u003e\u003c/code\u003e.\nIn the free convection mode, the fan power consumption is zero.\nFor numerical reasons, the transition of fan power from the part load mode\nto zero power consumption in the free convection mode occurs in the range\n\u003ccode\u003ey \u0026isin; [0.9*yMin, yMin]\u003c/code\u003e.\n\u003cbr/\u003e\nTo change the fan relative power consumption at part load in the forced convection mode,\npoints of fan controls signal and associated relative power consumption can be specified.\nIn between these points, the values are interpolated using cubic splines.\n\u003c/p\u003e\n\u003ch4\u003eComparison the cooling tower model of EnergyPlus\u003c/h4\u003e\n\u003cp\u003e\nThis model is similar to the model \u003ccode\u003eCooling Tower:Variable Speed\u003c/code\u003e that\nis implemented in the EnergyPlus building energy simulation program version 6.0.\nThe main differences are\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nNot implemented are the basin heater power consumption, and\nthe make-up water usage.\n\u003c/li\u003e\n\u003cli\u003e\nThe model has no built-in control to switch individual cells of the tower on or off.\nTo switch cells on or off, use multiple instances of this model, and use your own\ncontrol law to compute the input signal \u003ccode\u003ey\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003eAssumptions and limitations\u003c/h4\u003e\n\u003cp\u003e\nThis model requires a medium that has the same computation of the enthalpy as\n\u003ca href\u003d\\\"Buildings.Media.Water\\\"\u003e\nBuildings.Media.Water\u003c/a\u003e,\nwhich computes\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n h \u003d c\u003csub\u003ep\u003c/sub\u003e (T-T\u003csub\u003e0\u003c/sub\u003e),\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003eh\u003c/i\u003e is the enthalpy,\n\u003ci\u003ec\u003csub\u003ep\u003c/sub\u003e \u003d 4184\u003c/i\u003e J/(kg K) is the specific heat capacity,\n\u003ci\u003eT\u003c/i\u003e is the temperature in Kelvin and\n\u003ci\u003eT\u003csub\u003e0\u003c/sub\u003e \u003d 273.15\u003c/i\u003e Kelvin.\nIf this is not the case, the simulation will stop with an error message.\nThe reason for this limitation is that as of January 2015, OpenModelica\nfailed to translate the model if \u003ccode\u003eMedium.temperature()\u003c/code\u003e is used\ninstead of\n\u003ccode\u003eWater.temperature()\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca href\u003d\\\"http://www.energyplus.gov\\\"\u003eEnergyPlus 2.0.0 Engineering Reference\u003c/a\u003e, April 9, 2007.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Text(),Rectangle()})"}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.Roofs.CA_T24_2013Roof":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.Roofs.CA_T24_2013Roof","comment":"Construction model for a roof minimally compliant with CA Title 24-2013.\n      Used in test cells X2A and X2B","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.GypsumBoard(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a roof construction which is minimally compliant with\n    CA Title 24-2013. It is used in test bed 90X2.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Note: This model is currently a work in progress. For more information see\n    the documentation available at\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n    Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a roof construction which is minimally compliant with\n    CA Title 24-2013. It is used in test bed 90X2.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Note: This model is currently a work in progress. For more information see\n    the documentation available at\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n    Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACDCConverter":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACDCConverter","comment":"AC DC converter","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Conversion.ACDCConverter","modifications":[{"name":"terminal_n"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a simplified conversion between a three-phase\nbalanced AC system and a DC systems.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACDCConverter\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACDCConverter\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Capacitive":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Capacitive","comment":"Model of a three-phase unbalanced capacitive load without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_pf_in","comment":"If true, the power factor is defined by an input","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.8","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_1","comment":"Power factor of load on phase 1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase1","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_2","comment":"Power factor of load on phase 2","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase2","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {30,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {0,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_3","comment":"Power factor of load on phase 3","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase3","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {80,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {60,-100}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced capacitive load.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Capacitive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Capacitive\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Line(),Line(),Line(),Text(),Rectangle(),Line(),Line(),Rectangle(),Rectangle(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.PhaseSystems.OnePhase.product":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.product","comment":"Multiply two complex numbers represented by vectors x[2] and y[2]","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.product"}]},"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS25slash10":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS25slash10","comment":"Pump data for a staged Wilo-Top-S 25/10 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2650"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{3.51617440225e-06,0.000523909985935,0.000847398030942,0.00115682137834,0.00148382559775,0.00177918424754,0.00206047819972,0.00229254571027,0.0025,0.00271097046414,0.00282700421941}"},{"name":"P","value":"{192.787993617,238.762280675,272.937843988,301.381574494,326.18493197,344.613937245,359.220335761,369.040720135,376.979332273,382.887700535,382.887700535}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{3.51617440225e-06,0.000523909985935,0.000847398030942,0.00115682137834,0.00148382559775,0.00177918424754,0.00206047819972,0.00229254571027,0.0025,0.00271097046414,0.00282700421941}"},{"name":"dp","value":"{110125.414283,106765.16619,100392.787862,92220.6199738,81651.34693,70879.932776,60307.3708281,50930.4520427,41152.0339559,29575.0912725,22388.3296727}"}]},{"name":"speeds_rpm","value":"{0,1950,2250,2650}"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/0000001000029c210002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000001000029c210002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\n\""}},"Buildings.Electrical.AC.OnePhase.Sources.Generator":{"name":"Buildings.Electrical.AC.OnePhase.Sources.Generator","comment":"Model of a generator","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Source","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"}]}],"components":[{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Frequency of the source","modifications":[{"name":"start","value":"60"}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phiGen","comment":"Phase shift of the source","value":"0","modifications":[{"name":"displayUnit","value":"\"deg\""}]},{"className":"Modelica.SIunits.Current","name":"I","comment":"value of current"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"P","comment":"Variable power generated by the source","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, origin \u003d {-100,0}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, origin \u003d {-100,0}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a generator that produces real power\n\u003ccode\u003eP\u003c/code\u003e with a given phase shift \u003ccode\u003ephiGen\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model must be used with\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.Sources.Grid\\\"\u003e\nBuildings.Electrical.AC.Sources.Grid\u003c/a\u003e\nor with a voltage source from the package\n\u003ca href\u003d\\\"modelica://Modelica.Electrical.QuasiStationary.SinglePhase.Sources\\\"\u003e\nModelica.Electrical.QuasiStationary.SinglePhase.Sources\u003c/a\u003e.\nOtherwise, there will be no equation that defines the phase\nangle of the voltage.\n\u003c/p\u003e\n\u003cp\u003e\nThe boolean flags \u003ccode\u003epotentialReference\u003c/code\u003e and\n\u003ccode\u003edefiniteReference\u003c/code\u003e allows to select the phase angle of the\ngenerator as reference for the models connected to it. More info about\nthese flags are available in\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.UsersGuide\\\"\u003e\nBuildings.Electrical.AC.UsersGuide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Polygon(),Text(),Line(),Line(),Line()})"}},"Buildings.Utilities.Math.Average":{"name":"Buildings.Utilities.Math.Average","comment":"Average of a vector","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.MISO"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThis block outputs the average of the vector. \u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.Interfaces.VariableVoltageSource":{"name":"Buildings.Electrical.Interfaces.VariableVoltageSource","comment":"Partial model of a generic variable voltage source.","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Source"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_V_in","comment":"If true, the voltage is an input","value":"true"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"Value of constant voltage","value":"1","annotations":{"dialog":"Dialog(enable \u003d not use_V_in)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"V_in","comment":"Input voltage","modifications":[{"name":"unit","value":"\"V\""},{"name":"min","value":"0"},{"name":"start","value":"1"}],"conditionalClause":" if use_V_in","annotations":{"placement":"Placement(transformation(extent \u003d {{20,-20},{-20,20}}, rotation \u003d 180, origin \u003d {-100,60}), iconTransformation(extent \u003d {{20,-20},{-20,20}}, rotation \u003d 180, origin \u003d {-100,60}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generic variable voltage source. The model has a boolean\nflag \u003ccode\u003euse_V_in\u003c/code\u003e, when this flag is equal to \u003ccode\u003etrue\u003c/code\u003e\nthe voltage of the source is imposed by the input variable \u003ccode\u003eV_in\u003c/code\u003e.\nWhen the flag is equal to \u003ccode\u003efalse\u003c/code\u003e the voltage source is equal to the parameter \u003ccode\u003eV\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIn case the phase system adopted has \u003ccode\u003ePhaseSystem.m \u0026gt; 0\u003c/code\u003e and\nthus the connectors are over determined,\nthe source can be selected to serve as reference point.\nThe parameters \u003ccode\u003epotentialReference\u003c/code\u003e and \u003ccode\u003edefiniteReference\u003c/code\u003e are used to define if the\nsource model should be selected as source for the reference angles or not.\nMore information about overdetermined connectors can be found\nin \u003ca href\u003d\\\"#Olsson2008\\\"\u003eOlsson Et Al. (2008)\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"Olsson2008\\\"/\u003e\nHans Olsson, Martin Otter, Sven Erik Mattson and Hilding Elmqvist.\u003cbr/\u003e\n\u003ca href\u003d\\\"http://elib-v3.dlr.de/55892/1/otter2008-modelica-balanced-models.pdf\\\"\u003e\nBalanced Models in Modelica 3.0 for Increased Model Quality\u003c/a\u003e.\u003cbr/\u003e\nProc. of the 7th Modelica Conference, Bielefeld, Germany, March 2008.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Types.PerUnit":{"name":"Buildings.Electrical.Types.PerUnit","comment":"Used to represent electric quantities with respect to reference value","superClasses":[{"nameOfExtendedClass":"Real","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Per unit\""},{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type is used to declare whether an electric quantity such as voltage\nis expressed in SI units or in per units (i.e., the value divided by its nominal\nvalue).\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type is used to declare whether an electric quantity such as voltage\nis expressed in SI units or in per units (i.e., the value divided by its nominal\nvalue).\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Sources.FixedTemperature":{"name":"Buildings.HeatTransfer.Sources.FixedTemperature","comment":"Fixed temperature boundary condition in Kelvin","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T","comment":"Fixed temperature at port"},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"port","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Text(),Polygon()})","documentationInfo":"info \u003d \"\u003cHTML\u003e\n\u003cp\u003e\nThis model defines a fixed temperature T at its port in Kelvin,\ni.e., it defines a fixed temperature as a boundary condition.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Rectangle(),Text(),Line(),Polygon()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_1_6_build1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_6_build1","comment":"Version 1.6 build 1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.6 build 1 updates the \u003ccode\u003eBuildings\u003c/code\u003e library to the\nModelica Standard Library 3.2.1 and to \u003ccode\u003eModelica_StateGraph2\u003c/code\u003e 2.0.2.\n\u003c/p\u003e\n\u003cp\u003e\nThis is the first version of the \u003ccode\u003eBuildings\u003c/code\u003e library\nthat contains models from the\n\u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60\\\"\u003e\nIEA EBC Annex 60 library\u003c/a\u003e,\na Modelica library for building and community energy systems that is\ncollaboratively developed within the project\n\u003ca href\u003d\\\"http://www.iea-annex60.org\\\"\u003e\n\\\"New generation computational tools for building and community energy systems\nbased on the Modelica and Functional Mockup Interface standards\\\"\u003c/a\u003e,\na project that is conducted under the\nEnergy in Buildings and Communities Programme (EBC) of the\nInternational Energy Agency (IEA).\n\u003c/p\u003e\n\u003c!-- New libraries --\u003e\n\u003c!-- New components for existing libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Valves.TwoWayTable\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eTwo way valve for which the opening characteristics\n                       is specified by a table.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Math\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Math.Examples.Average\n                       Buildings.Utilities.Math.Examples.InverseXRegularized\n                       Buildings.Utilities.Math.Examples.Polynominal\n                       Buildings.Utilities.Math.Examples.PowerLinearized\n                       Buildings.Utilities.Math.Examples.QuadraticLinear\n                       Buildings.Utilities.Math.Examples.RegNonZeroPower\n                       Buildings.Utilities.Math.Examples.SmoothExponential\n                       Buildings.Utilities.Math.Functions.average\n                       Buildings.Utilities.Math.Functions.booleanReplicator\n                       Buildings.Utilities.Math.Functions.Examples.IsMonotonic\n                       Buildings.Utilities.Math.Functions.Examples.TrapezoidalIntegration\n                       Buildings.Utilities.Math.Functions.integerReplicator\n                       Buildings.Utilities.Math.InverseXRegularized\n                       Buildings.Utilities.Math.Polynominal\n                       Buildings.Utilities.Math.PowerLinearized\n                       Buildings.Utilities.Math.QuadraticLinear\n                       Buildings.Utilities.Math.RegNonZeroPower\n                       Buildings.Utilities.Math.SmoothExponential\n                       Buildings.Utilities.Math.TrapezoidalIntegration\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eVarious functions and blocks for mathematical operations.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Psychrometrics\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.Examples.SaturationPressureLiquid\n                       Buildings.Utilities.Psychrometrics.Examples.SaturationPressure\n                       Buildings.Utilities.Psychrometrics.Examples.SublimationPressureIce\n                       Buildings.Utilities.Psychrometrics.Functions.BaseClasses.der_saturationPressureLiquid\n                       Buildings.Utilities.Psychrometrics.Functions.BaseClasses.der_sublimationPressureIce\n                       Buildings.Utilities.Psychrometrics.Functions.BaseClasses.Examples.SaturationPressureDerivativeCheck\n                       Buildings.Utilities.Psychrometrics.Functions.Examples.SaturationPressure\n                       Buildings.Utilities.Psychrometrics.Functions.saturationPressureLiquid\n                       Buildings.Utilities.Psychrometrics.Functions.saturationPressure\n                       Buildings.Utilities.Psychrometrics.Functions.sublimationPressureIce\n                       Buildings.Utilities.Psychrometrics.SaturationPressureLiquid\n                       Buildings.Utilities.Psychrometrics.SaturationPressure\n                       Buildings.Utilities.Psychrometrics.SublimationPressureIce\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eVarious functions and blocks for psychrometric calculations.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Backward compatible changes --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialTwoPortInterface\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.PartialFourPortInterface\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved call to homotopy function\n                       in the computation of the connector variables as\n                       these are conditionally enabled variables and\n                       therefore must not be used in any equation. They\n                       are only for output reporting.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Dampers.Exponential\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved documentation of the flow resistance.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\u003cbr/\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded the option to use a constant, an input signal or the weather file as the source\n                       for the ceiling height, the total sky cover, the opaque sky cover, the dew point temperature,\n                       and the infrared horizontal radiation \u003ccode\u003eHInfHor\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Non-backward compatible changes to existing components --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.FlowMachinePolynomial\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eMoved the model to the package\n                       \u003ccode\u003eBuildings.Obsolete\u003c/code\u003e,\n                       as this model is planned to be removed in future versions.\n                       The conversion script should update old instances of\n                       this model automatically in Dymola.\n                       Users should change their models to use a flow machine from\n                       the package \u003ccode\u003eBuildings.Fluid.Movers\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.ExpansionVessel\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eSimplified the model to have a constant pressure.\n                       The following non-backward compatible changes\n                       have been made.\n                       \u003col\u003e\n                       \u003cli\u003eThe parameter \u003ccode\u003eVTot\u003c/code\u003e was renamed to \u003ccode\u003eV_start\u003c/code\u003e.\u003c/li\u003e\n                       \u003cli\u003eThe following parameters were removed: \u003ccode\u003eVGas0\u003c/code\u003e,\n                           \u003ccode\u003epMax\u003c/code\u003e, \u003ccode\u003eenergyDynamics\u003c/code\u003e and \u003ccode\u003emassDynamics\u003c/code\u003e.\u003c/li\u003e\n                       \u003c/ol\u003e\n                       The conversion script should update old instances of\n                       this model automatically in Dymola.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.StratifiedEnhancedInternalHex\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRevised the model as the old version required the port\u003csub\u003ea\u003c/sub\u003e\n                       of the heat exchanger to be located higher than port\u003csub\u003eb\u003c/sub\u003e.\n                       This makes sense if the heat exchanger is used to heat up the tank,\n                       but not if it is used to cool down a tank, such as in a cooling plant.\n                       The following parameters were changed:\n                       \u003col\u003e\n                         \u003cli\u003eChanged \u003ccode\u003ehexTopHeight\u003c/code\u003e to \u003ccode\u003ehHex_a\u003c/code\u003e.\u003c/li\u003e\n                         \u003cli\u003eChanged \u003ccode\u003ehexBotHeight\u003c/code\u003e to \u003ccode\u003ehHex_b\u003c/code\u003e.\u003c/li\u003e\n                         \u003cli\u003eChanged \u003ccode\u003etopHexSeg\u003c/code\u003e to \u003ccode\u003esegHex_a\u003c/code\u003e,\n                          and made it protected as this is deduced from \u003ccode\u003ehHex_a\u003c/code\u003e.\u003c/li\u003e\n                         \u003cli\u003eChanged \u003ccode\u003ebotHexSeg\u003c/code\u003e to \u003ccode\u003esegHex_b\u003c/code\u003e,\n                          and made it protected as this is deduced from \u003ccode\u003ehHex_b\u003c/code\u003e.\u003c/li\u003e\n                       \u003c/ol\u003e\n                       The names of the following ports have been changed:\n                       \u003col\u003e\n                         \u003cli\u003eChanged \u003ccode\u003eport_a1\u003c/code\u003e to \u003ccode\u003eportHex_a\u003c/code\u003e.\u003c/li\u003e\n                         \u003cli\u003eChanged \u003ccode\u003eport_b1\u003c/code\u003e to \u003ccode\u003eportHex_b\u003c/code\u003e.\u003c/li\u003e\n                       \u003c/ol\u003e\n                       The conversion script should update old instances of\n                       this model automatically in Dymola for all of the above changes.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.Boreholes.UTube\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReimplemented the resistor network inside the borehole\n                       as the old implementation led to too slow a transient\n                       response. This change also led to the removal of the\n                       parameters \u003ccode\u003eB0\u003c/code\u003e and \u003ccode\u003eB1\u003c/code\u003e\n                       as the new implementation does not require them.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.Boreholes.BaseClasses.HexInternalElement\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error in documentation which stated a wrong default value\n                       for the pipe spacing.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.BaseClasses.ntu_epsilonZ()\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded dummy argument to function call of \u003ccode\u003eInternal.solve\u003c/code\u003e\n                       to avoid a warning during model check in Dymola 2015.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryEffectivenessNTU\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged \u003ccode\u003eassert\u003c/code\u003e statement to avoid comparing\n                       enumeration with an integer, which triggers a warning\n                       in Dymola 2015.\n    \u003c/td\u003e\n\n    \u003c/tr\u003e    \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.Constructions.Examples.ExteriorWall\u003cbr/\u003e\n                           Buildings.Rooms.Constructions.Examples.ExteriorWallWithWindow\u003cbr/\u003e\n                           Buildings.Rooms.Constructions.Examples.ExteriorWallTwoWindows\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong assignment of parameter in instance \u003ccode\u003ebouConExt(conMod\u003d...)\u003c/code\u003e\n                       which was set to an interior instead of an exterior convection model.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.Functions.TDewPoi_pW()\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded dummy argument to function call of \u003ccode\u003eInternal.solve\u003c/code\u003e\n                       to avoid a warning during model check in Dymola 2015.\n    \u003c/td\u003e\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable border\u003d\\\"1\\\" summary\u003d\\\"github issues\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/196\\\"\u003e#196\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChange capacity location in borehole grout.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Interfaces.PartialTwoPortTransport":{"name":"Buildings.Fluid.Interfaces.PartialTwoPortTransport","comment":"Partial element transporting fluid between two ports without storage of mass or energy","qualifiers":["model","partial"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPort"}],"components":[{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp_start","comment":"Guess value of dp \u003d port_a.p - port_b.p","value":"0","modifications":[{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(tab \u003d \"Advanced\", enable \u003d from_dp)"}},{"className":"Medium.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_start","comment":"Guess value of m_flow \u003d port_a.m_flow","value":"0","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\", enable \u003d not from_dp)"}},{"className":"Medium.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_small","comment":"Small mass flow rate for regularization of zero flow","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"show_T","comment":"\u003d true, if temperatures at port_a and port_b are computed","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\", group \u003d \"Diagnostics\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"show_V_flow","comment":"\u003d true, if volume flow rate at inflowing port is computed","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\", group \u003d \"Diagnostics\")"}},{"className":"Medium.MassFlowRate","name":"m_flow","comment":"Mass flow rate in design flow direction","modifications":[{"name":"min","value":"if allowFlowReversal then -Modelica.Constants.inf else 0"},{"name":"start","value":"m_flow_start"}]},{"className":"Modelica.SIunits.PressureDifference","name":"dp","comment":"Pressure difference between port_a and port_b (\u003d port_a.p - port_b.p)","modifications":[{"name":"start","value":"dp_start"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Modelica.SIunits.VolumeFlowRate","name":"V_flow","comment":"Volume flow rate at inflowing port (positive when flow from port_a to port_b)","value":"m_flow/(Modelica.Fluid.Utilities.regStep(m_flow,Medium.density(Medium.setState_phX()),Medium.density(Medium.setState_phX()),m_flow_small))","conditionalClause":" if show_V_flow"},{"className":"Medium.Temperature","name":"port_a_T","comment":"Temperature close to port_a, if show_T \u003d true","value":"Modelica.Fluid.Utilities.regStep(port_a.m_flow,Medium.temperature(Medium.setState_phX()),Medium.temperature(Medium.setState_phX(port_a.p,port_a.h_outflow,port_a.Xi_outflow)),m_flow_small)","conditionalClause":" if show_T"},{"className":"Medium.Temperature","name":"port_b_T","comment":"Temperature close to port_b, if show_T \u003d true","value":"Modelica.Fluid.Utilities.regStep(port_b.m_flow,Medium.temperature(Medium.setState_phX()),Medium.temperature(Medium.setState_phX(port_b.p,port_b.h_outflow,port_b.Xi_outflow)),m_flow_small)","conditionalClause":" if show_T"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component transports fluid between its two ports, without storing mass or energy.\nEnergy may be exchanged with the environment though, e.g., in the form of work.\n\u003ccode\u003ePartialTwoPortTransport\u003c/code\u003e is intended as base class for devices like orifices, valves and simple fluid machines.\u003c/p\u003e\n\u003cp\u003e\nThree equations need to be added by an extending class using this component:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe momentum balance specifying the relationship between the pressure drop \u003ccode\u003edp\u003c/code\u003e and the mass flow rate \u003ccode\u003em_flow\u003c/code\u003e,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eport_b.h_outflow\u003c/code\u003e for flow in design direction, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eport_a.h_outflow\u003c/code\u003e for flow in reverse direction.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nMoreover appropriate values shall be assigned to the following parameters:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edp_start\u003c/code\u003e for a guess of the pressure drop\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003em_flow_small\u003c/code\u003e for regularization of zero flow.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThis is similar to\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.Interfaces.PartialTwoPortTransport\\\"\u003e\nModelica.Fluid.Interfaces.PartialTwoPortTransport\u003c/a\u003e\nexcept that it does not use the \u003ccode\u003eouter system\u003c/code\u003e declaration.\nThis declaration is omitted as in building energy simulation,\nmany models use multiple media, an in practice,\nusers have not used this global definition to assign parameters.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive","comment":"Model of an inductive and resistive load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Loads.Inductive","modifications":[{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of an inductive load. See\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Inductive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Inductive\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Line(),Text(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Line(),Line(),Line(),Line()})"}},"Buildings.Utilities.Math.QuadraticLinear":{"name":"Buildings.Utilities.Math.QuadraticLinear","comment":"Function that is quadratic in first argument and linear in second argument","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SI2SO"}],"components":[{"className":"Real","qualifiers":["array","parameter"],"name":"a","comment":"Coefficients","arraySubscripts":"[6]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eBlock for function quadraticLinear, which computes \u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\u003ci\u003ey \u003d a1 + a2 x1 + a3 x12 + (a4 + a5 x1 + a6 x12) x2 \u003c/i\u003e\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Rooms.UsersGuide.MixedAir":{"name":"Buildings.Rooms.UsersGuide.MixedAir","comment":"Room model with instantaneously mixed air","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Information"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThe model \u003ca href\u003d\\\"modelica://Buildings.Rooms.MixedAir\\\"\u003eBuildings.Rooms.MixedAir\u003c/a\u003e is\na model of a room with completely mixed air.\nThe room can have any number of constructions and surfaces that participate in the\nheat exchange through convection, conduction, infrared radiation and solar radiation.\u003c/p\u003e\n\u003ch4\u003ePhysical description\u003c/h4\u003e\n\u003cp\u003e\nA description of the model assumptions and the implemention and validation of this room model can be found in\n\u003ca href\u003d\\\"#WetterEtAl2011\\\"\u003eWetter et al. (2011)\u003c/a\u003e.\nNote that this paper describes a previous version of the room model.\nThe equations have not changed. However, what is shown in Figure 2 in the paper has in this version\nof the model been integrated directly into what is shown in Figure 1.\u003c/p\u003e\n\u003cp\u003e\nThe room models the following physical processes:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nTransient or steady-state heat conduction through opaque surfaces, using\nthe model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Conduction.MultiLayer\\\"\u003e\nBuildings.HeatTransfer.Conduction.MultiLayer\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\nHeat transfer through glazing system, taking into account\nsolar radiation, infrared radiation, heat conduction and heat convection.\nThe solar radiation is modeled using\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.BaseClasses.WindowRadiation\\\"\u003e\nBuildings.HeatTransfer.Windows.BaseClasses.WindowRadiation\u003c/a\u003e.\nThe overall heat transfer is modeled using the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Window\\\"\u003e\nBuildings.HeatTransfer.Windows.Window\u003c/a\u003e\nfor the glass assembly, and the models\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.ExteriorHeatTransfer\\\"\u003e\nBuildings.HeatTransfer.Windows.ExteriorHeatTransfer\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.InteriorHeatTransfer\\\"\u003e\nBuildings.HeatTransfer.Windows.InteriorHeatTransfer\u003c/a\u003e\nfor the exterior and interior heat transfer.\nA window can have both, an overhang and a side fin.\nOverhangs and side fins are modeled using\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Overhang\\\"\u003e\nBuildings.HeatTransfer.Windows.Overhang\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.SideFins\\\"\u003e\nBuildings.HeatTransfer.Windows.SideFins\u003c/a\u003e, respectively.\nThese models compute the reduction in direct solar irradiation\ndue to the external shading device.\n\u003c/li\u003e\n\u003cli\u003e\nConvective heat transfer between the outside air and outside-facing surfaces using\neither a wind-speed, wind-direction and temperature-dependent heat transfer coefficient,\nor using a constant heat transfer coefficient, as described in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Exterior\\\"\u003e\nBuildings.HeatTransfer.Convection.Exterior\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nSolar and infrared heat transfer between the room enclosing surfaces,\nconvective heat transfer between the room enclosing surfaces and the room air,\nand temperature, pressure and species balance inside the room volume.\nThese effects are modeled as follows:\n\u003col\u003e\n\u003cli\u003e\nThe model\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.AirHeatMassBalanceMixed\\\"\u003e\nBuildings.Rooms.BaseClasses.AirHeatMassBalanceMixed\u003c/a\u003e\nis used to compute heat convection between the room air\nand the surface of opaque constructions. It is also used to compute the\nheat and mass balance of the room air.\nThis model is a composite model that contains\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.InteriorHeatTransferConvective\\\"\u003e\nBuildings.HeatTransfer.Windows.InteriorHeatTransferConvective\u003c/a\u003e to compute the convective\nheat balance of the window and a shade, if present.\nThe convective heat transfer coefficient can be selected to be\neither temperature-dependent or constant.\nThe convective heat transfer is computed using\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Interior\\\"\u003e\nBuildings.HeatTransfer.Convection.Interior\u003c/a\u003e.\nThe heat and mass balance of the room air is computed using\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\\\"\u003e\nBuildings.Fluid.MixingVolumes.MixingVolume\u003c/a\u003e,\nwhich assumes the room air to be completely mixed.\nDepending on the medium model, moisture and species concentrations,\nsuch as CO\u003csub\u003e2\u003c/sub\u003e, can be modeled transiently.\n\u003c/li\u003e\n\u003cli\u003e\nThe latent heat gain of the room, which is a user-input,\nis converted to a moisture source using\nthe model\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.MixedAirHeatGain\\\"\u003e\nBuildings.Rooms.BaseClasses.MixedAirHeatGain\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe radiant heat gains in the infrared spectrum are also a user\ninput. They are distributed to the room enclosing surfaces using\nthe model\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.InfraredRadiationGainDistribution\\\"\u003e\nBuildings.Rooms.BaseClasses.InfraredRadiationGainDistribution\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe infrared radiative heat exchange between the room enclosing\nsurfaces is modeled in\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.InfraredRadiationExchange\\\"\u003e\nBuildings.Rooms.BaseClasses.InfraredRadiationExchange\u003c/a\u003e.\nThis model takes into account the absorptivity of the surfaces and\nthe surface area. However, the view factors are assumed to be\nproportional to the area of the receiving surface, without taking\ninto account the location of the surfaces.\n\u003c/li\u003e\n\u003cli\u003e\nThe solar radiation exchange is modeled in\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.SolarRadiationExchange\\\"\u003e\nBuildings.Rooms.BaseClasses.SolarRadiationExchange\u003c/a\u003e.\nThe assumptions in this model is that all solar radiation\nfirst hits the floor, and is then partially absorbed and partially reflected by the floor.\nThe reflectance are diffuse, and the reflected radiation is distributed\nin proportion to the product of the receiving areas times their\nsolar absorptivity.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003eModel instantiation\u003c/h4\u003e\n\u003cp\u003eThe next paragraphs describe how to instantiate a room model.\nTo instantiate a room model,\n\u003col\u003e\n\u003cli\u003e\nmake an instance of the room model in your model,\n\u003c/li\u003e\n\u003cli\u003e\nmake instances of constructions from the package\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.OpaqueConstructions\\\"\u003e\nBuildings.HeatTransfer.Data.OpaqueConstructions\u003c/a\u003e to model opaque constructions such as walls, floors,\nceilings and roofs,\n\u003c/li\u003e\n\u003cli\u003e\nmake an instance of constructions from the package\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.GlazingSystems\\\"\u003e\nBuildings.HeatTransfer.Data.GlazingSystems\u003c/a\u003e to model glazing systems, and\n\u003c/li\u003e\n\u003cli\u003e\nenter the parameters of the room.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nEntering parameters may be easiest in a textual editor.\n\u003c/p\u003e\n\u003cp\u003e\nIn the here presented example, we assume we made several instances\nof data records for the construction material by dragging them from\nthe package \u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data\\\"\u003e\nBuildings.HeatTransfer.Data\u003c/a\u003e to create the following list of declarations:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e  \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eBuildings.HeatTransfer.Data.OpaqueConstructions.Insulation100Concrete200\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    matLayExt \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#006400;\\\"\u003e\\\"Construction material for exterior walls\\\"\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eannotation \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(Placement(transformation(extent\u003d{{-60,140},{-40,160}})));\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e  \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eBuildings.HeatTransfer.Data.OpaqueConstructions.Brick120\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e matLayPar \u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#006400;\\\"\u003e    \\\"Construction material for partition walls\\\"\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eannotation \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(Placement(transformation(extent\u003d{{-20,140},{0,160}})));\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e  \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eBuildings.HeatTransfer.Data.OpaqueConstructions.Generic\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e matLayRoo(\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e        material\u003d{\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e          \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eHeatTransfer.Data.Solids.InsulationBoard\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(x\u003d0.2),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e          \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eHeatTransfer.Data.Solids.Concrete\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(x\u003d0.2)},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e        \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003efinal \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003enLay\u003d2) \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#006400;\\\"\u003e\\\"Construction material for roof\\\"\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eannotation \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(Placement(transformation(extent\u003d{{20,140},{40,160}})));\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e  \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eBuildings.HeatTransfer.Data.OpaqueConstructions.Generic\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e matLayFlo(\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e        material\u003d{\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e          \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eHeatTransfer.Data.Solids.Concrete\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(x\u003d0.2),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e          \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eHeatTransfer.Data.Solids.InsulationBoard\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(x\u003d0.1),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#000000;\\\"\u003e      \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eHeatTransfer.Data.Solids.Concrete(x\u003d0.05)\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#000000;\\\"\u003e}\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e        \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003efinal \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003enLay\u003d3) \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#006400;\\\"\u003e\\\"Construction material for floor\\\"\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eannotation \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(Placement(transformation(extent\u003d{{60,140},{80,160}})));\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e  \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eBuildings.HeatTransfer.Data.GlazingSystems.DoubleClearAir13Clear\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e glaSys(\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    UFra\u003d2,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    shade\u003d\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eBuildings.HeatTransfer.Data.Shades.Gray\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    haveExteriorShade\u003dfalse,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    haveInteriorShade\u003dtrue) \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#006400;\\\"\u003e\\\"Data record for the glazing system\\\"\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eannotation \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(Placement(transformation(extent\u003d{{100,140},{120,160}})));\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\nNote that construction layers are assembled from the outside to the room-side. Thus, the construction\n\u003ccode\u003ematLayRoo\u003c/code\u003e has an exterior insulation. This constructions can then be used in the room model.\n\u003c/p\u003e\n\u003cp\u003e\nBefore we explain how to declare and parametrize a room model,\nwe explain the different models that can be used to compute heat transfer through the room enclosing surfaces\nand constructions. The room model\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.MixedAir\\\"\u003eBuildings.Rooms.MixedAir\u003c/a\u003e contains the constructions shown\nin the table below.\nThe first row of the table lists the name of the data record that is used by the user\nto assign the model parameters.\nThe second row lists the name of the instance of the model that simulates the equations.\nThe third column provides a reference to the class definition that implements the equations.\nThe forth column describes the main applicability of the model.\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eRecord name\u003c/th\u003e\n\u003cth\u003eModel instance name\u003c/th\u003e\n\u003cth\u003eClass name\u003c/th\u003e\n\u003cth\u003eDescription of the model\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.ParameterConstruction\\\"\u003e\ndatConExt\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nmodConExt\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.Constructions.Construction\\\"\u003eBuildings.Rooms.Constructions.Construction\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nExterior constructions that have no window.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.ParameterConstructionWithWindow\\\"\u003e\ndatConExtWin\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nmodConExtWin\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.Constructions.ConstructionWithWindow\\\"\u003eBuildings.Rooms.Constructions.ConstructionWithWindow\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nExterior constructions that have a window. Each construction of this type must have one window.\n\u003cbr/\u003e\nWithin the same room, all windows can either have an interior shade, an exterior shade or no shade.\nEach window has its own control signal for the shade. This signal is exposed by the port \u003ccode\u003euSha\u003c/code\u003e, which\nhas the same dimension as the number of windows. The values for \u003ccode\u003euSha\u003c/code\u003e must be between\n\u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e. Set \u003ccode\u003euSha\u003d0\u003c/code\u003e to open the shade, and \u003ccode\u003euSha\u003d1\u003c/code\u003e\nto close the shade.\u003cbr/\u003e\nWindows can also have an overhang, side fins, both (overhang and sidefins) or no external shading device.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.ParameterConstruction\\\"\u003e\ndatConPar\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nmodConPar\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.Constructions.Construction\\\"\u003eBuildings.Rooms.Constructions.Construction\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nInterior constructions such as partitions within a room. Both surfaces of this construction are inside the room model\nand participate in the infrared and solar radiation balance.\nSince the view factor between these surfaces is zero, there is no infrared radiation from one surface to the other\nof the same construction.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.ParameterConstruction\\\"\u003e\ndatConBou\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nmodConBou\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.Constructions.Construction\\\"\u003eBuildings.Rooms.Constructions.Construction\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nConstructions that expose the other boundary conditions of the other surface to the outside of this room model.\nThe heat conduction through these constructions is modeled in this room model.\nThe surface at the port \u003ccode\u003eopa_b\u003c/code\u003e is connected to the models for convection, infrared and solar radiation exchange\nwith this room model and with the other surfaces of this room model.\nThe surface at the port \u003ccode\u003eopa_a\u003c/code\u003e is connected to the port \u003ccode\u003esurf_conBou\u003c/code\u003e of this room model. This could be used, for example,\nto model a floor inside this room and connect to other side of this floor model to a model that computes heat transfer in the soil.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.OpaqueSurfaces.Generic\\\"\u003e\nsurBou\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nN/A\n\u003c/td\u003e\n\u003ctd\u003e\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.OpaqueSurfaces.Generic\\\"\u003eBuildings.HeatTransfer.Data.OpaqueSurfaces.Generic\u003c/a\u003e\n\u003c/td\u003e\n\u003ctd\u003e\nOpaque surfaces of this room model whose heat transfer through the construction is modeled outside of this room model.\nThis object is modeled using a data record that contains the area, solar and infrared emissivities and surface tilt.\nThe surface then participates in the convection and radiation heat balance of the room model. The heat flow rate and temperature\nof this surface are exposed at the heat port \u003ccode\u003esurf_surBou\u003c/code\u003e.\nAn application of this object may be to connect the port \u003ccode\u003esurf_surBou\u003c/code\u003e of this room model with the port\n\u003ccode\u003esurf_conBou\u003c/code\u003e of another room model in order to couple two room models.\nAnother application would be to model a radiant ceiling outside of this room model, and connect its surface to the port\n\u003ccode\u003esurf_conBou\u003c/code\u003e in order for the radiant ceiling model to participate in the heat balance of this room.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\nWith these constructions, we may define a room as follows: \u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e  \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eBuildings.Rooms.MixedAir\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e roo(\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eredeclare package\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e Medium \u003d \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eMediumA\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    AFlo\u003d6*4,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    hRoo\u003d2.7,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConExt\u003d2,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConExt(layers\u003d{matLayRoo, matLayExt},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           A\u003d{6*4, 6*3},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           til\u003d{Buildings.Types.Tilt.Ceiling, Buildings.Types.Tilt.Wall},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           azi\u003d{Buildings.Types.Azimuth.S, Buildings.Types.Azimuth.W}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConExtWin\u003dnConExtWin,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConExtWin(layers\u003d{matLayExt}, A\u003d{4*3},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              glaSys\u003d{glaSys},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              hWin\u003d{2},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              wWin\u003d{2},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              fFra\u003d{0.1},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              til\u003d{Buildings.Types.Tilt.Wall},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              azi\u003d{Buildings.Types.Azimuth.S}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConPar\u003d1,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConPar(layers\u003d{matLayPar}, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eA\u003d10,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003etil\u003dBuildings.Types.Tilt.Wall),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConBou\u003d1,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConBou(layers\u003d{matLayFlo}, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eA\u003d6*4,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003etil\u003dBuildings.Types.Tilt.Floor),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nSurBou\u003d1,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    surBou(\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eA\u003d6*3, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eabsIR\u003d0.9, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eabsSol\u003d0.9, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003etil\u003dBuildings.Types.Tilt.Wall),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    linearizeRadiation \u003d true ,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    energyDynamics\u003dModelica.Fluid.Types.Dynamics.FixedInitial,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    lat\u003d0.73268921998722) \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#006400;\\\"\u003e\\\"Room model\\\"\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eannotation \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e(Placement(transformation(extent\u003d{{46,20},{86,60}})));\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\nThe following paragraphs explain the different declarations.\n\u003c/p\u003e\n\u003cp\u003e\nThe statement\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eredeclare package\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e Medium \u003d \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#ff0000;\\\"\u003eMediumA\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    AFlo\u003d20,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    V\u003d20*2.5,\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\ndeclares that the medium of the room air is set to \u003ccode\u003eMediumA\u003c/code\u003e,\nthat the floor area is \u003ci\u003e20 m\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e and that\nthe room air volume is \u003ci\u003e20*2.5 m\u003csup\u003e3\u003c/sup\u003e\u003c/i\u003e.\nThe floor area is used to scale the internal heat\ngains, which are declared with units of \u003ci\u003eW/m\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e\nusing the input signal \u003ccode\u003eqGai_flow\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe next entries specify constructions and surfaces\nthat participate in the heat exchange.\n\u003c/p\u003e\n\u003cp\u003e\nThe entry\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConExt\u003d2,\u003c/span\u003e\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\ndeclares that there are two exterior constructions.\n\u003c/p\u003e\n\u003cp\u003e\nThe lines\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConExt(layers\u003d{matLayRoo, matLayExt},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           A\u003d{6*4, 6*3},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           til\u003d{Buildings.Types.Tilt.Ceiling, Buildings.Types.Tilt.Wall},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           azi\u003d{Buildings.Types.Azimuth.S, Buildings.Types.Azimuth.W}),\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\ndeclare that the material layers\"+\" in these constructions are\nset the records \u003ccode\u003ematLayRoo\u003c/code\u003e and \u003ccode\u003ematLayExt\u003c/code\u003e.\nWhat follows are the declarations for the surface area,\nthe tilt of the surface and the azimuth of the surfaces. Thus, the\nsurface with construction \u003ccode\u003ematLayExt\u003c/code\u003e is \u003ci\u003e6*3 m\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e large\nand it is a west-facing wall.\n\u003c/p\u003e\n\u003cp\u003e\nNext, the declaration\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConExtWin\u003dnConExtWin,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConExtWin(layers\u003d{matLayExt}, A\u003d{4*3},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              glaSys\u003d{glaSys},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              hWin\u003d{2},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              wWin\u003d{2},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0p; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              fFra\u003d{0.1},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              til\u003d{Buildings.Types.Tilt.Wall},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              azi\u003d{Buildings.Types.Azimuth.S}),\u003c/span\u003e\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\ndeclares the construction that contains a window. This construction is built\nusing the materials defined in the record \u003ccode\u003ematLayExt\u003c/code\u003e. Its total area,\nincluding the window, is \u003ci\u003e4*3 m\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e.\nThe glazing system is built using the construction defined in the record\n\u003ccode\u003eglaSys\u003c/code\u003e. The window area is \u003ci\u003eh\u003csub\u003ewin\u003c/sub\u003e\u003d2 m\u003c/i\u003e high\nand\n\u003ci\u003ew\u003csub\u003ewin\u003c/sub\u003e\u003d2 m\u003c/i\u003e wide.\nThe ratio of frame\nto total glazing system area is \u003ci\u003e10%\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nOptionally, each window can have an overhang, side fins or both.\nIf the above window were to have an overhang of\n\u003ci\u003e2.5 m\u003c/i\u003e width that is centered above the window,\nand hence extends each side of the window by \u003ci\u003e0.25 m\u003c/i\u003e, and has a depth of\n\u003ci\u003e1 m\u003c/i\u003e and a gap between window and overhang of\n\u003ci\u003e0.1 m\u003c/i\u003e, then\nits declaration would be\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              ove(wL\u003d{0.25}, wR\u003d{0.25}, gap\u003d{0.1}, dep\u003d{1}),\u003c/span\u003e\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nThis line can be placed below the declaration of \u003ccode\u003ewWin\u003c/code\u003e.\nThis would instanciate the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Overhang\\\"\u003e\nBuildings.HeatTransfer.Windows.Overhang\u003c/a\u003e to model the overhang. See this class for a picture of the above dimensions.\n\u003c/p\u003e\n\u003cp\u003e\nIf the window were to have side fins that are\n\u003ci\u003e2.5 m\u003c/i\u003e high, measured from the bottom of the windows,\nand hence extends \u003ci\u003e0.5 m\u003c/i\u003e above the window, are\n\u003ci\u003e1 m\u003c/i\u003e depth and are placed\n\u003ci\u003e0.1 m\u003c/i\u003e to the left and right of the window,\nthen its declaration would be\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              sidFin(h\u003d{0.5}, gap\u003d{0.1}, dep\u003d{1}),\u003c/span\u003e\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nThis would instanciate the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.SideFins\\\"\u003e\nBuildings.HeatTransfer.Windows.SideFins\u003c/a\u003e to model the side fins. See this class for a picture of the above dimensions.\n\u003c/p\u003e\n\u003cp\u003e\nThe lines\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              til\u003d{Buildings.Types.Tilt.Wall},\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              azi\u003d{Buildings.Types.Azimuth.S}),\u003c/span\u003e\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\ndeclare that the construction is a wall that is south exposed.\n\u003c/p\u003e\n\u003cp\u003e\nNote that if the room were to have two windows, and one window has side fins and the other window has an overhang, the\nfollowing declaration could be used, which sets the value of \u003ccode\u003edep\u003c/code\u003e to \u003ccode\u003e0\u003c/code\u003e for the non-present side fins or overhang, respectively:\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              sidFin(h  \u003d {0.5, 0}, gap \u003d {0.1, 0.0}, dep \u003d {1, 0}),\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e              ove(wL \u003d {0.0, 0.25}, wR \u003d {0.0, 0.25}, gap \u003d {0.0, 0.1}, dep \u003d {0, 1}),\u003c/span\u003e\u003c/span\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nWhat follows is the declaration of the partition constructions, as declared by\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConPar\u003d1,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConPar(layers\u003d{matLayPar}, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eA\u003d10,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003etil\u003dBuildings.Types.Tilt.Wall),\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\nThus, there is one partition construction. Its area is \u003ci\u003e10 m\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e for \u003cem\u003eeach\u003c/em\u003e\nsurface, to form a total surface area inside this thermal zone of \u003ci\u003e20 m\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nNext, the declaration\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nConBou\u003d1,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    datConBou(layers\u003d{matLayFlo}, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eA\u003d6*4,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e           \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003etil\u003dBuildings.Types.Tilt.Floor),\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\ndeclares one construction whose other surface boundary condition is exposed by this\nroom model (through the connector \u003ccode\u003esurf_conBou\u003c/code\u003e).\n\u003c/p\u003e\n\u003cp\u003e\nThe declaration\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    nSurBou\u003d1,\u003c/span\u003e\u003c/span\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    surBou(\u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eA\u003d6*3, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eabsIR\u003d0.9, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003eabsSol\u003d0.9, \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#0000ff;\\\"\u003eeach \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003etil\u003dBuildings.Types.Tilt.Wall),\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\nis used to instantiate a model for a surface that is in this room.\nThe surface has an area of \u003ci\u003e6*3 m\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e, absorptivity in the infrared and the solar\nspectrum of \u003ci\u003e0.9\u003c/i\u003e and it is a wall.\nThe room model will compute infrared radiative heat exchange, solar radiative heat gains\nand infrared radiative heat gains of this surface. The surface temperature and\nheat flow rate are exposed by this room model at the heat port\n\u003ccode\u003esurf_surBou\u003c/code\u003e.\nA model builder may use this construct\nto couple this room model to another room model that may model the construction.\n\u003c/p\u003e\n\u003cp\u003e\nThe declaration\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    linearizeRadiation \u003d true,\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\ncauses the equations for radiative heat transfer to be linearized. This can\nreduce computing time at the expense of accuracy.\n\u003c/p\u003e\n\u003cp\u003e\nThe declaration\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    energyDynamics\u003dModelica.Fluid.Types.Dynamics.FixedInitial,\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\nis used to initialize the air volume inside the thermal zone.\n\u003c/p\u003e\n\u003cp\u003e\nFinally, the declaration\n\u003c/p\u003e\n\u003cpre\u003e\n\u003cspan style\u003d\\\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; -qt-user-state:8;\\\"\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027;\\\"\u003e    lat\u003d0.73268921998722) \u003c/span\u003e\u003cspan style\u003d\\\" font-family:\u0027Courier New,courier\u0027; color:#006400;\\\"\u003e\\\"Room model\\\"\u003c/span\u003e\u003c/span\u003e\n\n\u003c/pre\u003e\n\u003cp\u003e\nsets the latitude of the building which needs to correspond with the latitude of the weather data file.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"WetterEtAl2011\\\"/\u003e\nMichael Wetter, Wangda Zuo and Thierry Stephane Nouidui.\u003cbr/\u003e\n\u003ca href\u003d\\\"modelica://Buildings/Resources/Images/Rooms/2011-ibpsa-BuildingsLib.pdf\\\"\u003e\nModeling of Heat Transfer in Rooms in the Modelica \\\"Buildings\\\" Library.\u003c/a\u003e\u003cbr/\u003e\nProc. of the 12th IBPSA Conference, p. 1096-1103. Sydney, Australia, November 2011.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Functions.smoothMax":{"name":"Buildings.Utilities.Math.Functions.smoothMax","comment":"Once continuously differentiable approximation to the maximum function","components":[{"className":"Real","qualifiers":["input"],"name":"x1","comment":"First argument"},{"className":"Real","qualifiers":["input"],"name":"x2","comment":"Second argument"},{"className":"Real","qualifiers":["input"],"name":"deltaX","comment":"Width of transition interval"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce continuously differentiable approximation to the \u003ccode\u003emax(.,.)\u003c/code\u003e function.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the maximum need not be respected, such as illustrated in\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothMin\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothMin\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_1500":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_1500","comment":"Annealed Al cable - AWG 1500","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"size","value":"\"1500\""},{"name":"Rdc","value":"3.87139e-5"},{"name":"T_ref","value":"298.15"},{"name":"d","value":"34.798e-3"},{"name":"D","value":"53.34e-3"},{"name":"GMR","value":"Buildings.Electrical.Transmission.Functions.computeGMR(d)"},{"name":"GMD","value":"Buildings.Electrical.Transmission.Functions.computeGMD(0.1905)"},{"name":"Amp","value":"800"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAnnealed aluminium cable with a cross-sectional kcmil 1500\n(thousand of Circular Mils).\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRdc  \u003d 3.87139e-5 // Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref\u003d 298.15      // Reference temperature of the material [K]\nd    \u003d 34.798e-3   // Inner diameter [m]\nD    \u003d 53.34e-3   // Outer diameter [m]\nAmp  \u003d 800         // Ampacity [A]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.BoundaryConditions.SolarGeometry.ProjectedShadowLength":{"name":"Buildings.BoundaryConditions.SolarGeometry.ProjectedShadowLength","comment":"Lenght of shadow projected onto a direction","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"String","qualifiers":["parameter"],"name":"filNam","comment":"Name of weather data file (used to read longitude, latitude and time zone)","value":"\"\"","annotations":{"dialog":"Dialog(loadSelector(filter \u003d \"Weather files (*.mos)\", caption \u003d \"Select weather file\"), group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lon","comment":"Longitude","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getLongitudeTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"deg\""}],"annotations":{"dialog":"Dialog(group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getLatitudeTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"deg\""}],"annotations":{"dialog":"Dialog(group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"timZon","comment":"Time zone","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getTimeZoneTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"h\""}],"annotations":{"dialog":"Dialog(group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"h","comment":"Height of surface"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"Projected shadow length","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Length\""},{"name":"unit","qualifiers":["final"],"value":"\"m\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{180,-10},{200,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-180,-160},{180,160}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the length of a shadow projected onto a horizontal plane\ninto the direction that is perpendicular to the surface azimuth \u003ccode\u003eazi\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eazi\u003c/code\u003e is the azimuth of the surface that is perpendicular\nto the direction of the view. For example, if\n\u003ccode\u003eazi\u003dBuildings.Types.Azimuth.S\u003c/code\u003e,\nthen one is looking towards South. Hence, in the Northern hemisphere, at\nnoon, the length of the shadow is \u003cem\u003enegative\u003c/em\u003e as one is looking\ntowards South but the shadow is in ones back.\nSimilarly, for\n\u003ccode\u003eazi\u003dBuildings.Types.Azimuth.E\u003c/code\u003e, there is a shade of negative length\nin the morning, and of positive length in the afternoon.\nThe example\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.SolarGeometry.Examples.ProjectedShadowLength\\\"\u003e\nBuildings.BoundaryConditions.SolarGeometry.Examples.ProjectedShadowLength\u003c/a\u003e\nillustrates this.\n\u003c/p\u003e\n\u003cp\u003e\nFor a definition of the parameters, see the User\u0027s Guide\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.UsersGuide\\\"\u003e\nBuildings.BoundaryConditions.UsersGuide\u003c/a\u003e.\nThe surface azimuth is defined in\n\u003ca href\u003d\\\"modelica://Buildings.Types.Azimuth\\\"\u003e\nBuildings.Types.Azimuth\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe component requires as parameters the longitude, latitude and time zone.\nThese can automatically be assigned by setting the parameter \u003ccode\u003efilNam\u003c/code\u003e\nto a weather data file, in which case these values are read from the weather data file.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Polygon(),Polygon(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.Transmission.Types.Material":{"name":"Buildings.Electrical.Transmission.Types.Material","comment":"Material of the cable","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Cu","comment":"Copper"},{"className":"EnumType","qualifiers":["constant"],"name":"Al","comment":"Aluminium"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnumeration for materials that can be used\nfor cables.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.MediumVoltageCables.Generic":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","comment":"Data record for a generic medium voltage cable","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.MaterialProperty"},{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.BaseCable"}],"components":[{"className":"String","qualifiers":["parameter"],"name":"size","comment":"AWG or kcmil code representing the conductor size","modifications":[{"name":"start","value":"\"\""}]},{"className":"Buildings.Electrical.Types.CharacteristicResistance","qualifiers":["parameter"],"name":"Rdc","comment":"Characteristic DC resistance of the cable @ T_ref","modifications":[{"name":"start","value":"0"}]},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"d","comment":"Inner diameter"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"D","comment":"Outer diameter"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"GMR","comment":"Geometrical Mean Radius of the cable"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"GMD","comment":"Geometrical Mean Diameter of the cable"}],"classes":[{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineResistance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineResistance"}],"components":[{"className":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall resistance of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is medium or high, the cables have a DC resistance that needs\nto be corrected to account for the effects cause by the AC voltage.\nThe correction is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR \u003d l\u003csub\u003eCABLE\u003c/sub\u003e R\u003csub\u003eDC\u003c/sub\u003e f\u003csub\u003eCORR\u003c/sub\u003e(s, m),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eR\u003csub\u003eDC\u003c/sub\u003e \u003c/i\u003e is the characteristic DC resistance per unit lenght,\n\u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable, and\n\u003ci\u003ef\u003csub\u003eCORR\u003c/sub\u003e(s, m)\u003c/i\u003e is a function that corrects the DC value and depends on the\nsize of the cable \u003ci\u003es\u003c/i\u003e and its material \u003ci\u003em\u003c/i\u003e. See\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.Functions.R_AC_correction\\\"\u003e\nBuildings.Electrical.Transmission.Functions.R_AC_correction\u003c/a\u003e for more details.\n\u003c/p\u003e\n\n\u003c/html\u003e\""}},{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineInductance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineInductance"}],"components":[{"className":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall inductance of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is medium or high, the cables have geometric parameters that can\nbe used to compute the inductance as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR \u003d l\u003csub\u003eCABLE\u003c/sub\u003e 2 10\u003csup\u003e-7\u003c/sup\u003e log(GMD/GMR),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable, and\n\u003ci\u003eGMD\u003c/i\u003e and \u003ci\u003eGMR\u003c/i\u003e are the geometric mean distance and the geometric mean radius\nof the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineCapacitance","comment":"Function that computes the capacitance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineCapacitance"}],"components":[{"className":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall capacity of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is medium or high, the cables have geometric parameters that can\nbe used to compute the capacity as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nC \u003d l\u003csub\u003eCABLE\u003c/sub\u003e 2 \u0026pi; \u0026epsilon;\u003csub\u003e0\u003c/sub\u003e/log(GMD/r),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable,\n\u003ci\u003e\u0026epsilon;\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e is the dielectric constant of the air, \u003ci\u003eGMD\u003c/i\u003e\nis the geometric mean distance, and \u003ci\u003er \u003d d/2\u003c/i\u003e where \u003ci\u003ed\u003c/i\u003e is the inner\ndiameter of the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a base record for specifying physical properties for medium\nvoltage commercial cables. New cables can be added by extending\nit.\n\u003c/p\u003e\n\u003cp\u003e\nFor medium voltage cables, the geometric properties of the cable and the material are\nspecified. For example some of the properties that are specified are:\n\u003c/p\u003e\n\u003cpre\u003e\nRdc   : Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref : Reference temperature of the material [K]\nd     : Inner diameter [m]\nD     : Outer diameter [m]\nAmp   : Ampacity [A]\n\u003c/pre\u003e\n\u003cp\u003e\nother properties such as the geometric mean diameter GMD and the\ngeometric mean radius GMR are by default computed using functions,\nbut this can be overriden.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.pW_X":{"name":"Buildings.Utilities.Psychrometrics.pW_X","comment":"Water vapor pressure for given humidity ratio","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.Utilities.Psychrometrics.BaseClasses.HumidityRatioVaporPressure"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"X_w","comment":"Water concentration at dry bulb temperature","modifications":[{"name":"min","value":"0"},{"name":"max","value":"0.99999"},{"name":"nominal","value":"0.1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}), iconTransformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"p_w","comment":"Water vapor pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.SIunits.MassFraction","qualifiers":["output"],"name":"x_w","comment":"Water mass fraction per mass of dry air","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"nominal","value":"0.1"},{"name":"start","value":"0.001"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock to compute the water vapor partial pressure for a given humidity ratio.\n\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003euse_p_in\u003c/code\u003e is false (default option), the \u003ccode\u003ep\u003c/code\u003e parameter\nis used as atmospheric pressure,\nand the \u003ccode\u003ep_in\u003c/code\u003e input connector is disabled;\nif \u003ccode\u003euse_p_in\u003c/code\u003e is true, then the \u003ccode\u003ep\u003c/code\u003e parameter is ignored,\nand the value provided by the input connector is used instead.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text()})"}},"Buildings.Fluid.Sensors.RelativeTemperature":{"name":"Buildings.Fluid.Sensors.RelativeTemperature","comment":"Ideal relative temperature sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.TranslationalSensor"}],"components":[{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a","comment":"Fluid connector of stream a","modifications":[{"name":"m_flow","modifications":[{"name":"min","value":"0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b","comment":"Fluid connector of stream b","modifications":[{"name":"m_flow","modifications":[{"name":"min","value":"0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{110,-10},{90,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"T_rel","comment":"Temperature difference of port_a minus port_b","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"K\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,-90}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 90))"}}],"classes":[{"name":"Buildings.Fluid.Sensors.RelativeTemperature.Medium","comment":"Medium in the sensor","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThe relative temperature \u003ccode\u003eT(port_a) - T(port_b)\u003c/code\u003e is determined between\nthe two ports of this component and is provided as output signal. The\nsensor should be connected in parallel with other equipment.\nThere is no flow through the sensor.\n\u003c/p\u003e\n\u003cp\u003e\nNote that this sensor should only be connected to fluid volumes, such as\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\\\"\u003e\nBuildings.Fluid.MixingVolumes.MixingVolume\u003c/a\u003e. Otherwise, numerical\nproblems may occur if one of the mass flow rates are close to zero.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Line(),Text(),Text(),Line(),Polygon()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.WindTurbine_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.WindTurbine_N","comment":"Simple wind turbine source with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.UnbalancedWindTurbine_N","modifications":[{"name":"wt_phase1"},{"name":"wt_phase2"},{"name":"wt_phase3"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple wind turbine model for three-phase unbalanced systems\nwith neutral cable connection.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.WindTurbine\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.WindTurbine\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Chillers.Carnot_TEva":{"name":"Buildings.Fluid.Chillers.Carnot_TEva","comment":"Chiller with prescribed evaporator leaving temperature and performance curve adjusted based on Carnot efficiency","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Chillers.BaseClasses.PartialCarnot_T","modifications":[{"name":"COP_is_for_cooling","qualifiers":["final"],"value":"true"},{"name":"QCon_flow_nominal","qualifiers":["final"],"value":"-QEva_flow_nominal*(1+COP_nominal)/(COP_nominal)"},{"name":"effInpEva","value":"Buildings.Fluid.Types.EfficiencyInput.port_b"},{"name":"effInpCon","value":"Buildings.Fluid.Types.EfficiencyInput.port_a"},{"name":"PEle","modifications":[{"name":"y","value":"-QEva_flow/(COP)"}]},{"name":"con"},{"name":"eva"}]}],"components":[{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"QEva_flow_min","comment":"Maximum heat flow rate for cooling (negative)","value":"-Modelica.Constants.inf","modifications":[{"name":"max","value":"0"}]},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TSet","comment":"Evaporator leaving water temperature","modifications":[{"name":"unit","value":"\"K\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,70},{-100,110}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a chiller whose coefficient of performance COP changes\nwith temperatures in the same way as the Carnot efficiency changes.\nThe control input is the setpoint of the evaporator leaving temperature, which\nis met exactly at steady state if the chiller has sufficient capacity.\n\u003c/p\u003e\n\u003cp\u003e\nThe model allows to either specify the Carnot effectivness\n\u003ci\u003e\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e\u003c/i\u003e, or\na \u003ci\u003eCOP\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e\nat the nominal conditions, together with\nthe evaporator temperature \u003ci\u003eT\u003csub\u003eeva,0\u003c/sub\u003e\u003c/i\u003e and\nthe condenser temperature \u003ci\u003eT\u003csub\u003econ,0\u003c/sub\u003e\u003c/i\u003e, in which\ncase the model computes the Carnot effectivness as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e \u003d \n  COP\u003csub\u003e0\u003c/sub\u003e\n\u0026frasl;  (T\u003csub\u003eeva,0\u003c/sub\u003e \u0026frasl; (T\u003csub\u003econ,0\u003c/sub\u003e-T\u003csub\u003eeva,0\u003c/sub\u003e)).\n\u003c/p\u003e\n\u003cp\u003e\nOn the \u003ccode\u003eAdvanced\u003c/code\u003e tab, a user can specify the temperatures that\nwill be used as the evaporator and condenser temperature.\n\u003c/p\u003e\n\u003cp\u003e\nDuring the simulation, the chiller COP is computed as the product\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  COP \u003d \u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e COP\u003csub\u003eCarnot\u003c/sub\u003e \u0026eta;\u003csub\u003ePL\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eCOP\u003csub\u003eCarnot\u003c/sub\u003e\u003c/i\u003e is the Carnot efficiency and\n\u003ci\u003e\u0026eta;\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e is a polynomial in the cooling part load ratio \u003ci\u003ey\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e\nthat can be used to take into account a change in \u003ci\u003eCOP\u003c/i\u003e at part load\nconditions.\nThis polynomial has the form\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta;\u003csub\u003ePL\u003c/sub\u003e \u003d a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + ...\n\u003c/p\u003e\n\u003cp\u003e\nwhere the coefficients \u003ci\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e\nare declared by the parameter \u003ccode\u003ea\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nOn the \u003ccode\u003eDynamics\u003c/code\u003e tag, the model can be parametrized to compute a transient\nor steady-state response.\nThe transient response of the model is computed using a first\norder differential equation for the evaporator and condenser fluid volumes.\nThe chiller outlet temperatures are equal to the temperatures of these lumped volumes.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nWhen using this component, make sure that the condenser has sufficient mass flow rate.\nBased on the evaporator mass flow rate, temperature difference and the efficiencies,\nthe model computes how much heat will be added to the condenser.\nIf the mass flow rate is too small, very high outlet temperatures can result.\n\u003c/p\u003e\n\u003cp\u003e\nThe evaporator heat flow rate \u003ccode\u003eQEva_flow_nominal\u003c/code\u003e is used to assign\nthe default value for the mass flow rates, which are used for the pressure drop\ncalculations.\nIt is also used to compute the part load efficiency.\nHence, make sure that \u003ccode\u003eQEva_flow_nominal\u003c/code\u003e is set to a reasonable value.\n\u003c/p\u003e\n\u003cp\u003e\nThe maximum cooling capacity is set by the parameter \u003ccode\u003eQEva_flow_min\u003c/code\u003e,\nwhich is by default set to negative infinity.\n\u003c/p\u003e\n\u003cp\u003e\nBy default, the coefficient of performance depends on the\nevaporator leaving temperature and the condenser entering\ntemperature.\nThis can be changed with the parameters\n\u003ccode\u003eeffInpEva\u003c/code\u003e and\n\u003ccode\u003eeffInpCon\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eNotes\u003c/h4\u003e\n\u003cp\u003e\nFor a similar model that can be used as a heat pump, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatPumps.Examples.Carnot_TCon\\\"\u003e\nBuildings.Fluid.HeatPumps.Examples.Carnot_TCon\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line()})"}},"Buildings.HeatTransfer.Radiosity.IndoorRadiosity":{"name":"Buildings.HeatTransfer.Radiosity.IndoorRadiosity","comment":"Model for indoor radiosity","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Radiosity.BaseClasses.RadiosityOneSurface"},{"nameOfExtendedClass":"Buildings.HeatTransfer.Radiosity.BaseClasses.ParametersOneSurface","modifications":[{"name":"absIR","qualifiers":["final"],"value":"1"},{"name":"tauIR","qualifiers":["final"],"value":"0"},{"name":"rhoIR","qualifiers":["final"],"value":"0"}]}],"components":[{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heatPort","comment":"Heat port of the surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-108},{10,-88}}), iconTransformation(extent \u003d {{-2,-108},{18,-88}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for the indoor emissive power that hits a window.\nThe computation is according to TARCOG 2006.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nTARCOG 2006: Carli, Inc., TARCOG: Mathematical models for calculation\nof thermal performance of glazing systems with our without\nshading devices, Technical Report, Oct. 17, 2006.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Line(),Line(),Line(),Line(),Line(),Rectangle(),Rectangle()})"}},"Buildings.Controls.Continuous.PIDHysteresis":{"name":"Buildings.Controls.Continuous.PIDHysteresis","comment":"PID controller with anti-windup, output limiter and output hysteresis","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SVcontrol"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"eOn","comment":"if off and control error \u003e eOn, switch to set point tracking","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Hysteresis\")"}},{"className":"Real","qualifiers":["parameter"],"name":"eOff","comment":"if on and control error \u003c eOff, set y\u003d0","value":"-eOn","annotations":{"dialog":"Dialog(group \u003d \"Hysteresis\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"pre_y_start","comment":"Value of hysteresis output at initial time","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Hysteresis\")"}},{"className":"Modelica.Blocks.Types.SimpleController","qualifiers":["parameter"],"name":"controllerType","comment":"Type of controller","value":"Modelica.Blocks.Types.SimpleController.PID","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"k","comment":"Gain of controller","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"Ti","comment":"Time constant of Integrator block","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"Td","comment":"Time constant of Derivative block","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"yMax","comment":"Upper limit of output","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"yMin","comment":"Lower limit of output","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"wp","comment":"Set-point weight for Proportional block (0..1)","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"wd","comment":"Set-point weight for Derivative block (0..1)","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"Ni","comment":"Ni*Ti is time constant of anti-windup compensation","value":"0.9","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"Nd","comment":"The higher Nd, the more ideal the derivative block","value":"10","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"reverseAction","comment":"Set to true to enable reverse action (such as for a cooling coil controller)","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Modelica.Blocks.Types.InitPID","qualifiers":["parameter"],"name":"initType","comment":"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)","value":"Modelica.Blocks.Types.InitPID.DoNotUse_InitialIntegratorState","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"limitsAtInit","comment":"\u003d false, if limits are ignored during initializiation","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Real","qualifiers":["parameter"],"name":"xi_start","comment":"Initial or guess value value for integrator output (\u003d integrator state)","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Real","qualifiers":["parameter"],"name":"xd_start","comment":"Initial or guess value for state of derivative block","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Real","qualifiers":["parameter"],"name":"y_start","comment":"Initial value of output","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"strict","comment":"\u003d true, if strict limits with noEvent(..)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"LimPID","name":"PID","comment":"Controller for room temperature","modifications":[{"name":"controllerType","qualifiers":["final"],"value":"controllerType"},{"name":"k","qualifiers":["final"],"value":"k"},{"name":"Ti","qualifiers":["final"],"value":"Ti"},{"name":"yMax","qualifiers":["final"],"value":"yMax"},{"name":"yMin","qualifiers":["final"],"value":"yMin"},{"name":"wp","qualifiers":["final"],"value":"wp"},{"name":"wd","qualifiers":["final"],"value":"wd"},{"name":"Ni","qualifiers":["final"],"value":"Ni"},{"name":"Nd","qualifiers":["final"],"value":"Nd"},{"name":"initType","qualifiers":["final"],"value":"initType"},{"name":"limitsAtInit","qualifiers":["final"],"value":"limitsAtInit"},{"name":"xi_start","qualifiers":["final"],"value":"xi_start"},{"name":"xd_start","qualifiers":["final"],"value":"xd_start"},{"name":"y_start","qualifiers":["final"],"value":"y_start"},{"name":"Td","qualifiers":["final"],"value":"Td"},{"name":"reverseAction","qualifiers":["final"],"value":"reverseAction"},{"name":"strict","qualifiers":["final"],"value":"strict"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-30,-2},{-10,18}}))"}},{"className":"Modelica.Blocks.Logical.Hysteresis","name":"hys","comment":"Hysteresis element to switch controller on and off","modifications":[{"name":"pre_y_start","qualifiers":["final"],"value":"pre_y_start"},{"name":"uLow","qualifiers":["final"],"value":"eOff"},{"name":"uHigh","qualifiers":["final"],"value":"eOn"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-30,50},{-10,70}}))"}},{"className":"Modelica.Blocks.Logical.Switch","name":"swi","annotations":{"placement":"Placement(transformation(extent \u003d {{60,-10},{80,10}}))"}},{"className":"Modelica.Blocks.Sources.Constant","name":"zer","comment":"Zero signal","modifications":[{"name":"k","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{20,-40},{40,-20}}))"}},{"className":"Modelica.Blocks.Math.Feedback","name":"feeBac","annotations":{"placement":"Placement(transformation(extent \u003d {{-70,50},{-50,70}}))"}},{"className":"Modelica.Blocks.Logical.Switch","name":"swi1","annotations":{"placement":"Placement(transformation(extent \u003d {{40,50},{60,70}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock of a controller for set point tracking with a hysteresis element that switches the\ncontroller on and off.\n\u003c/p\u003e\n\u003cp\u003e\nIf the controller is off, and the control error becomes larger than \u003ccode\u003eeOn\u003c/code\u003e, then\nthe controller switches to on and remains on until the control error is smaller than \u003ccode\u003eeOff\u003c/code\u003e.\nWhen the controller is on, the set point tracking can be done using a P-, PI-, or PID-controller.\nIn its off-mode, the control output is zero. Thus, the parameters \u003ccode\u003eyMin\u003c/code\u003e and \u003ccode\u003eyMax\u003c/code\u003e are\nused to constrain the output of the controller during its on mode only. This can be used, for\nexample, to modulate a device between 0.3 and 1.0, and switch it to off when the control error\nis small enough.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Line(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Inductive_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Inductive_N","comment":"Model of a three-phase unbalanced inductive load with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_pf_in","comment":"If true, the power factor is defined by an input","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.8","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_1","comment":"Power factor of load on phase 1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase1","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {80,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_2","comment":"Power factor of load on phase 2","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase2","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {40,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {0,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_3","comment":"Power factor of load on phase 3","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase3","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {62,-100}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced inductive load.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003cp\u003e\nThis model has a connector with four cables and it represents the neutral cable.\nThe current in the neutral cable is computed as the algebraic sum of the currents\nof the loads.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Inductive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Inductive\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Line(),Text(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Line(),Line(),Line(),Line()})"}},"Buildings.Media.Specialized.Air.PerfectGas.setState_pTX":{"name":"Buildings.Media.Specialized.Air.PerfectGas.setState_pTX","comment":"Thermodynamic state as function of p, T and composition X","superClasses":[{"nameOfExtendedClass":"Modelica.Media.Air.MoistAir.setState_pTX"}]},"Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer":{"name":"Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer","comment":"AC AC transformer simplified equivalent circuit","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Icons.RefAngleConversion"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialConversion","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Real","qualifiers":["parameter"],"name":"XoverR","comment":"Ratio between the complex and real components of the impedance (XL/R)"},{"className":"Real","qualifiers":["parameter"],"name":"Zperc","comment":"Short circuit impedance"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"If true, connect side 1 of converter to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"If true, connect side 2 of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phi_1","comment":"Angle of the voltage side 1 at initialization","value":"0","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phi_2","comment":"Angle of the voltage side 2 at initialization","value":"phi_1","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Efficiency","name":"eta","comment":"Efficiency"},{"className":"Modelica.SIunits.Power","qualifiers":["array"],"name":"PLoss","comment":"Loss power","arraySubscripts":"[2]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a simplified equivalent transformer model.\nThe model accounts for winding Joule losses and leakage reactances\nthat are represented by a series of a resistance \u003ci\u003eR\u003c/i\u003e and an\ninductance \u003ci\u003eL\u003c/i\u003e. The resistance and the inductance represent both the\neffects of the secondary and primary side of the transformer.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVHigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVLow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVABase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXoverR\u003c/code\u003e - ratio between reactance and resistance, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZperc\u003c/code\u003e - the short circuit impedance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions,the model computes the values of the resistance and the inductance.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Fluid.Actuators.Valves.ThreeWayLinear":{"name":"Buildings.Fluid.Actuators.Valves.ThreeWayLinear","comment":"Three way valve with linear characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve","modifications":[{"name":"res1"},{"name":"res3"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThree way valve with linear opening characteristic.\n\u003c/p\u003e\u003cp\u003e\nThis model is based on the partial valve models\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\u003c/a\u003e\nfor the implementation of the three way valve\nand see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e\nfor the implementation of the regularization near the origin.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Types.HeatExchangerConfiguration":{"name":"Buildings.Fluid.Types.HeatExchangerConfiguration","comment":"Enumeration for heat exchanger construction","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"ParallelFlow","comment":"Parallel flow"},{"className":"EnumType","qualifiers":["constant"],"name":"CounterFlow","comment":"Counter flow"},{"className":"EnumType","qualifiers":["constant"],"name":"CrossFlowUnmixed","comment":"Cross flow, both streams unmixed"},{"className":"EnumType","qualifiers":["constant"],"name":"CrossFlowStream1MixedStream2Unmixed","comment":"Cross flow, stream 1 mixed, stream 2 unmixed"},{"className":"EnumType","qualifiers":["constant"],"name":"CrossFlowStream1UnmixedStream2Mixed","comment":"Cross flow, stream 1 unmixed, stream 2 mixed"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\n Enumeration that defines the heat exchanger construction.\n\u003c/p\u003e\n\u003cp\u003e\nThe following heat exchanger configurations are available in this enumeration:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\u003cth\u003eEnumeration\u003c/th\u003e\u003cth\u003eDescription\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eParallelFlow\u003c/td\u003e\u003ctd\u003eParallel flow\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCounterFlow\u003c/td\u003e\u003ctd\u003eCounter flow\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCrossFlowUnmixed\u003c/td\u003e\u003ctd\u003eCross flow, both streams unmixed\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCrossFlowStream1MixedStream2Unmixed\u003c/td\u003e\u003ctd\u003eCross flow, stream 1 mixed, stream 2 unmixed\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCrossFlowStream1UnmixedStream2Mixed\u003c/td\u003e\u003ctd\u003eCross flow, stream 1 unmixed, stream 2 mixed\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\nNote that for a given heat exchanger, the\n \u003ccode\u003eHeatExchangerConfiguration\u003c/code\u003e is fixed. However, if the capacity\n flow rates change, then the\n \u003ca href\u003d\\\"modelica://Buildings.Fluid.Types.HeatExchangerFlowRegime\\\"\u003e\n HeatExchangerFlowRegime\u003c/a\u003e may change. For example,\n a counter flow heat exchanger has \u003ccode\u003eHeatExchangerConfiguration\u003dCounterFlow\u003c/code\u003e,\n but the \u003ca href\u003d\\\"modelica://Buildings.Fluid.Types.HeatExchangerFlowRegime\\\"\u003e\n HeatExchangerFlowRegime\u003c/a\u003e can change to parallel flow if one of the two capacity flow rates reverts\n its direction.\n \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.OnePhase.activePower":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.activePower","comment":"Return total power as function of phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.activePower"}]},"Buildings.Fluid.HeatExchangers.DXCoils.MultiStage":{"name":"Buildings.Fluid.HeatExchangers.DXCoils.MultiStage","comment":"Multi-stage DX cooling coil","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.PartialDXCoil","modifications":[{"name":"dxCoo","modifications":[{"name":"variableSpeedCoil","qualifiers":["final"],"value":"false"}]}]}],"components":[{"className":"Modelica.Blocks.Interfaces.IntegerInput","name":"stage","comment":"Stage of cooling coil (0: off, 1: first stage, 2: second stage...)","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}), iconTransformation(extent \u003d {{-120,70},{-100,90}}))"}},{"className":"BaseClasses.SpeedSelect","name":"speSel","modifications":[{"name":"nSta","value":"datCoi.nSta"},{"name":"speSet","value":"datCoi.sta.spe"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-80,60},{-68,72}}))"}},{"className":"Modelica.Blocks.Math.IntegerToBoolean","name":"onSwi","comment":"On/off switch","modifications":[{"name":"threshold","qualifiers":["final"],"value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-56,-68},{-44,-56}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model can be used to simulate a DX cooling coil with multiple\noperating stages. Depending on the used performance curves, each\nstage could be a different compressor speed, or a different mode\nof operation, such as with or without hot gas reheat.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DXCoils.UsersGuide\\\"\u003e\nBuildings.Fluid.HeatExchangers.DXCoils.UsersGuide\u003c/a\u003e\nfor an explanation of the model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.HeatTransfer.Windows.Functions.glassAbsExteriorIrradiationInteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassAbsExteriorIrradiationInteriorShading","comment":"Angular and hemispherical absorptance of each glass pane for exterior irradiation with interior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"absExtIrrNoSha","comment":"Absorptance for exterior irradiation without shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,HEM,NSta]"},{"className":"Real","qualifiers":["array","output"],"name":"absExtIrrNoShaIntSha","comment":"Angular and hemispherical absorptance of each glass pane for exterior irradiation with interior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes angular and hemispherical absorptance of each glass pane for exterior irradiation with interior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing the outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir":{"name":"Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir","comment":"Mixing volume with heat port for latent heat exchange, to be used with media that contain water","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume","modifications":[{"name":"Medium","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"},{"name":"dynBal","modifications":[{"name":"use_mWat_flow","qualifiers":["final"],"value":"true"}]},{"name":"steBal","modifications":[{"name":"use_mWat_flow","qualifiers":["final"],"value":"true"}]}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"mWat_flow","comment":"Water flow rate added into the medium","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"MassFlowRate\""},{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TWat","comment":"Temperature of liquid that is drained from or injected into volume","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"260"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,28},{-100,68}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"X_w","comment":"Species composition of medium","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-60},{140,-20}}))"}},{"className":"Modelica.Blocks.Math.Product","name":"QLat_flow","comment":"Latent heat flow rate added to the fluid stream","annotations":{"placement":"Placement(transformation(extent \u003d {{20,62},{40,82}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for an ideally mixed fluid volume and the ability\nto store mass and energy. The volume is fixed,\nand latent and sensible heat can be exchanged.\n\u003c/p\u003e\n\u003cp\u003e\nThis model represents the same physics as\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\\\"\u003e\nBuildings.Fluid.MixingVolumes.MixingVolume\u003c/a\u003e, but in addition, it allows\nadding or subtracting water in liquid phase.\nThe mass flow rate of the added or subtracted water is\nspecified at the port \u003ccode\u003emWat_flow\u003c/code\u003e.\nThe water flow rate is assumed to be added or subtracted at the\ntemperature of the input port \u003ccode\u003eTWat\u003c/code\u003e.\nAdding water causes a change in\nenthalpy and species concentration in the volume.\n\u003c/p\u003e\n\u003cp\u003e\nNote that this model can only be used with medium models that include water\nas a substance. In particular, the medium model needs to implement the function\n\u003ccode\u003eenthalpyOfLiquid(T)\u003c/code\u003e and the integer variable \u003ccode\u003eWater\u003c/code\u003e that\ncontains the index to the water substance. For medium that do not provide this\nfunctionality, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\\\"\u003e\nBuildings.Fluid.MixingVolumes.MixingVolume\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nTo increase the numerical robustness of the model, the constant\n\u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e can be set by the user.\nThis constant only has an effect if the model has exactly two fluid ports connected,\nand if it is used as a steady-state model.\nUse the following settings:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e if the \u003ci\u003eonly\u003c/i\u003e means of heat transfer\nat the \u003ccode\u003eheatPort\u003c/code\u003e is a prescribed heat flow rate that\nis \u003ci\u003enot\u003c/i\u003e a function of the temperature difference\nbetween the medium and an ambient temperature. Examples include an ideal electrical heater,\na pump that rejects heat into the fluid stream, or a chiller that removes heat based on a performance curve.\nIf the \u003ccode\u003eheatPort\u003c/code\u003e is not connected, then set \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e as\nin this case, \u003ccode\u003eheatPort.Q_flow\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e if there is heat flow at the \u003ccode\u003eheatPort\u003c/code\u003e\ncomputed as \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e, for some temperature \u003ci\u003eT\u003c/i\u003e and some conductance \u003ci\u003eK\u003c/i\u003e,\nwhich may itself be a function of temperature or mass flow rate.\u003cbr/\u003e\nIf there is a combination of \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e and a prescribed heat flow rate,\nfor example a solar collector that dissipates heat to the ambient and receives heat from\nthe solar radiation, then set \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eOptions\u003c/h4\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003emSenFac\u003c/code\u003e can be used to increase the thermal mass of this model\nwithout increasing its volume. This way, species concentrations are still calculated\ncorrectly even though the thermal mass increases. The additional thermal mass is calculated\nbased on the density and the value of the function \u003ccode\u003eHeatCapacityCp\u003c/code\u003e\nof the medium state \u003ccode\u003estate_default\u003c/code\u003e. \u003cbr/\u003e\nThis parameter can for instance be useful in a pipe model when the developer wants to\nlump the pipe thermal mass to the fluid volume. By default \u003ccode\u003emSenFac \u003d 1\u003c/code\u003e, hence\nthe mass is unchanged. For higher values of \u003ccode\u003emSenFac\u003c/code\u003e, the mass will be scaled proportionally.\n\u003c/p\u003e\n\u003cp\u003e\nSet the parameter \u003ccode\u003euse_C_flow \u003d true\u003c/code\u003e to enable an input connector for the trace substance flow rate.\nThis allows to directly add or subtract trace substances such as\nCO2 to the volume.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.Examples.PPM\\\"\u003eBuildings.Fluid.Sensors.Examples.PPM\u003c/a\u003e\nfor an example.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.OnePhase.Sources.WindTurbine":{"name":"Buildings.Electrical.AC.OnePhase.Sources.WindTurbine","comment":"Simple wind turbine model","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialWindTurbine","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"Buildings.Electrical.PhaseSystems.OnePhase"},{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.9","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"AC-Conversion\")"}},{"className":"Real","qualifiers":["parameter"],"name":"eta_DCAC","comment":"Efficiency of DC/AC conversion","value":"0.9","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"AC-Conversion\")"}},{"className":"Buildings.Electrical.AC.OnePhase.Loads.Capacitive","qualifiers":["replaceable"],"name":"load","comment":"Load model","modifications":[{"name":"mode","qualifiers":["final"],"value":"Buildings.Electrical.Types.Load.VariableZ_P_input"},{"name":"pf","qualifiers":["final"],"value":"pf"},{"name":"P_nominal","qualifiers":["final"],"value":"0"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{12,-10},{32,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a wind turbine whose power is computed as a function of wind-speed as defined in a table.\n\u003c/p\u003e\n\u003cp\u003e\nInput to the model is the local wind speed.\nThe model requires the specification of a table that maps wind speed in meters per second to generated\npower \u003ci\u003eP\u003csub\u003et\u003c/sub\u003e\u003c/i\u003e in Watts.\nThe model has a parameter called \u003ccode\u003escale\u003c/code\u003e with a default value of one\nthat can be used to scale the power generated by the wind turbine.\nThe generated active electrical power is\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP \u003d P\u003csub\u003et\u003c/sub\u003e scale \u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003e\u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e\u003c/i\u003e is the efficiency of the conversion of the DC electrical power to AC.\nFor example, the following specification (with default \u003ccode\u003escale\u003d1\u003c/code\u003e) of a wind turbine\n\u003c/p\u003e\n\u003cpre\u003e\n  WindTurbine_Table tur(\n    table\u003d[3.5, 0;\n           5.5,   100;\n           12, 900;\n           14, 1000;\n           25, 1000]) \\\"Wind turbine\\\";\n\u003c/pre\u003e\n\u003cp\u003e\nyields the performance shown below. In this example, the cut-in wind speed is \u003ci\u003e3.5\u003c/i\u003e meters per second,\nand the cut-out wind speed is \u003ci\u003e25\u003c/i\u003e meters per second,\nas entered by the first and last entry of the wind speed column.\nBelow and above these wind speeds, the generated power is zero.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"alt-image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/DC/Sources/WindTurbine_Table.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Functions.smoothMin":{"name":"Buildings.Utilities.Math.Functions.smoothMin","comment":"Once continuously differentiable approximation to the minimum function","components":[{"className":"Real","qualifiers":["input"],"name":"x1","comment":"First argument"},{"className":"Real","qualifiers":["input"],"name":"x2","comment":"Second argument"},{"className":"Real","qualifiers":["input"],"name":"deltaX","comment":"Width of transition interval"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce continuously differentiable approximation to the \u003ccode\u003emin(.,.)\u003c/code\u003e function.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the minimum need not be respected, such as illustrated in\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothMin\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothMin\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.rotate":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.rotate","comment":"Rotate a vector of an angle theta (anti-counterclock)","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"x","arraySubscripts":"[n]"},{"className":"Modelica.SIunits.Angle","qualifiers":["input"],"name":"theta"},{"className":"Real","qualifiers":["array","output"],"name":"y","arraySubscripts":"[n]"}]},"Buildings.UsersGuide.ReleaseNotes.Version_1_1_build1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_1_build1","comment":"Version 1.1 build 1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.1 build 1 contains improvements to models that address numerical problems.\nIn particular, flow machines and actuators now have an optional filter\nthat converts step changes in the input signal to a smooth change in\nspeed or actuator position.\nAlso, (\u003ca href\u003d\\\"modelica://Buildings.Examples.Tutorial\\\"\u003e\nBuildings.Examples.Tutorial\u003c/a\u003e)\nhas been added to provide step-by-step instruction for how to build\nsystem models.\n\u003c!-- New libraries --\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\"\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.Tutorial\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eTutorial with step by step instructions for how to\n                       build system models.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- New components for existing libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.FixedResistances.Pipe\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a model for a pipe with transport delay and optional heat\n                       exchange with the environment.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.UsersGuide\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a user\u0027s guide for actuator models.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.ConservationEquation\u003cbr/\u003e\n                     Buildings.Fluid.Interfaces.StaticConservationEquation\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThese base classes have been added to simplify the implementation\n                     of dynamic and steady-state thermofluid models.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Data.Fuels\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003ePackage with physical properties of fuels that are used by the\n                     boiler model.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Backward compatible changes --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Dampers.Exponential\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Dampers.VAVBoxExponential\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Dampers.MixingBox\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Dampers.MixingBoxMinimumFlow\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.ThreeWayLinear\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.TwoWayLinear\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.TwoWayQuickOpening\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded an optional 2nd order lowpass filter for the input signal.\n                       The filter approximates the travel time of the actuators.\n                       It also makes the system of equations easier to solve\n                       because a step change in the input signal causes a gradual change in the actuator\n                       position.\u003cbr/\u003e\n                       Note that this filter affects the time response of closed loop control.\n                       Therefore, enabling the filter may require retuning of control loops.\n                       See the user\u0027s guide of the Buildings.Fluid.Actuators package.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Boilers.BoilerPolynomial\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded computation of fuel usage and improved the documentation.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.SpeedControlled_y\u003cbr/\u003e\n                       Buildings.Fluid.Movers.SpeedControlled_Nrpm\u003cbr/\u003e\n                       Buildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                       Buildings.Fluid.Movers.FlowControlled_m_flow\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a 2nd order lowpass filter to the input signal.\n                       The filter approximates the startup and shutdown transients of fans or pumps.\n                       It also makes the system of equations easier to solve\n                       because a step change in the input signal causes a gradual change in the\n                       mass flow rate.\u003cbr/\u003e\n                       Note that this filter affects the time response of closed loop control.\n                       Therefore, enabling the filter may require retuning of control loops.\n                       See the user\u0027s guide of the Buildings.Fluid.Movers package.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged model to use graphical implementation of models for\n                       pressure drop and conservation equations.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.BaseClasses.PartialResistance\u003cbr/\u003e\n                       Buildings.Fluid.FixedResistances.FixedResistanceDpM\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.BaseClasses.PartialDamperExponential\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRevised base classes and models to simplify object inheritance tree.\n                       Set \u003ccode\u003em_flow_small\u003c/code\u003e to \u003ccode\u003efinal\u003c/code\u003e in Buildings.Fluid.BaseClasses.PartialResistance,\n                       and removed its assignment in the other classes.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.FixedResistances.FixedResistanceDpM\u003cbr/\u003e\n                       Buildings.Fluid.FixedResistances.SplitterFixedResistanceDpM\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved documentation.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.Functions.glassProperty\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded the function \u003ccode\u003eglassPropertyUncoated\u003c/code\u003e that calculates the property for uncoated glass.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged model to use new implementation of\n                       Buildings.HeatTransfer.Radiosity.OutdoorRadiosity\n                       in its base classes.\n                       This change leads to the use of the same equations for the radiative\n                       heat transfer between window and ambient as is used for\n                       the opaque constructions.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Non-backward compatible changes to existing components --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.ThreeWayLinear\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.TwoWayLinear\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.TwoWayQuickOpening\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged models to allow modeling of a fixed resistance that is\n                       within the controlled flow leg. This allows in some cases\n                       to avoid a nonlinear equation if a flow resistance is\n                       in series to the valve.\n                       This change required changing the parameter for the valve resistance\n                       \u003ccode\u003edp_nominal\u003c/code\u003e to \u003ccode\u003edpValve_nominal\u003c/code\u003e,\n                       and introducing the parameter\n                       \u003ccode\u003edpFixed_nominal\u003c/code\u003e, with \u003ccode\u003edpFixed_nominal\u003d0\u003c/code\u003e\n                       as its default value.\n                       Previous models that instantiate these components need to change the\n                       assignment of \u003ccode\u003edp_nominal\u003c/code\u003e to an assignment of\n                       \u003ccode\u003edpValve_nominal\u003c/code\u003e.\n                       See also \u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.UsersGuide\\\"\u003e\n                       Buildings.Fluid.Actuators.UsersGuide\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Radiosity.OutdoorRadiosity\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.ExteriorHeatTransfer\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged model to use new implementation of\n                       Buildings.HeatTransfer.Radiosity.OutdoorRadiosity.\n                       This change leads to the use of the same equations for the radiative\n                       heat transfer between window and ambient as is used for\n                       the opaque constructions.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Controls\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.SetPoints.OccupancySchedule\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged model to fix a bug that caused the output of the block\n                       to be incorrect when the simulation started\n                       at a time different from zero.\n                       When fixing this bug, the parameter \u003ccode\u003estartTime\u003c/code\u003e was removed,\n                       and the parameter \u003ccode\u003eendTime\u003c/code\u003e was renamed to \u003ccode\u003eperiod\u003c/code\u003e.\n                       The period always starts at \u003ci\u003et\u003d0\u003c/i\u003e seconds.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Controls\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.SetPoints.OccupancySchedule\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe output of the block was incorrect when the simulation started\n                       at a time different from zero.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.HeatExchangers\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryCoilCounterFlow\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.WetCoilCounterFlow\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error in assignment of \u003ccode\u003edp2_nominal\u003c/code\u003e.\n                       The previous assignment caused a pressure drop in all except one element,\n                       instead of the opposite. This caused too high a flow resistance\n                       of the heat exchanger.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SkyTemperature.BlackBody\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed error in BlackBody model that was causing a translation error when \u003ccode\u003ecalTSky\u003c/code\u003e was set to \u003ccode\u003eBuildings.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.TwoPortHeatMassExchanger\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed wrong class reference in information section.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.IO.BCVTB.Examples.MoistAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eUpdated fan parameters, which were still for\n                       version 0.12 of the Buildings library and hence caused\n                       a translation error with version 1.0 or higher.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eExterior longwave radiation exchange in window model\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/51\\\"\u003e\u0026#35;51\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged model to use new implementation of\n                       Buildings.HeatTransfer.Radiosity.OutdoorRadiosity.\n                       This change leads to the use of the same equations for the radiative\n                       heat transfer between window and ambient as is used for\n                       the opaque constructions.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/53\\\"\u003e\u0026#35;53\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug in Buildings.Controls.SetPoints.OccupancySchedule that\n                       led to wrong results when the simulation started at a time different from zero.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\nNote:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe use of filters for actuator and flow machine input\nsignals changes the dynamic response of feedback control loops.\nTherefore, control gains may need to be retuned.\nSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.UsersGuide\\\"\u003e\nBuildings.Fluid.Actuators.UsersGuide\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.UsersGuide\\\"\u003e\nBuildings.Fluid.Movers.UsersGuide\u003c/a\u003e for recommended control\ngains and further details.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS40slash7":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS40slash7","comment":"Pump data for a staged Wilo-Top-S 40/7 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2800"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{9.97406742472e-07,0.000621384400559,0.00113006183922,0.00162078595651,0.00206961899062,0.00244663873928,0.0029074406543,0.00330241372432,0.00375723119888,0.00418212647117,0.00466686614802}"},{"name":"P","value":"{254.806788065,282.40881459,303.06122449,330.952380952,347.819548872,360.093167702,372.657450077,380.261136713,386.328725038,390.607012036,391.047619048}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{9.97406742472e-07,0.000621384400559,0.00113006183922,0.00162078595651,0.00206961899062,0.00244663873928,0.0029074406543,0.00330241372432,0.00375723119888,0.00418212647117,0.00466686614802}"},{"name":"dp","value":"{70951.3953488,69946.0659263,67225.7989228,63706.4291679,59843.4165588,54951.3185253,48807.3201536,42775.1388251,34577.6798464,26835.4759718,17270.2037493}"}]},{"name":"speeds_rpm","value":"{0,2200,2450,2650}"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/000000120001ad1f0001003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/000000120001ad1f0001003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.OpaqueSurfaces.Generic":{"name":"Buildings.HeatTransfer.Data.OpaqueSurfaces.Generic","comment":"Thermal properties of opaque surfaces","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"A","comment":"Area"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"til","comment":"Surface tilt (0: ceiling, pi/2: wall, pi: floor"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIR","comment":"Infrared absorptivity","value":"0.84"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absSol","comment":"Solar absorptivity","value":"0.84"},{"className":"Boolean","qualifiers":["final","parameter"],"name":"isFloor","comment":"Flag, true if construction is a floor","value":"til\u003e2.74889125 and til\u003c3.53428875"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis record implements thermophysical properties for opaque surfaces.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eabsIR\u003c/code\u003e\nis used to compute infrared heat radiation (in the infrared spectrum).\nThe parameter \u003ccode\u003eabsSol\u003c/code\u003e\nis used to compute solar heat radiation (in the solar spectrum).\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.temperature":{"name":"Buildings.Media.Specialized.Air.PerfectGas.temperature","comment":"Gas temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nTemperature is returned from the thermodynamic state record input as a simple assignment.\n\u003c/html\u003e\""}},"Buildings.BoundaryConditions.WeatherData.ReaderTMY3.Longitude":{},"Buildings.Fluid.Utilities.polynomial":{"name":"Buildings.Fluid.Utilities.polynomial","comment":"Polynomial, used because OpenModelica 1.4.3 does not expand the sum() into a scalar","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"c","comment":"Coefficients","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["input"],"name":"x","comment":"Independent variable"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Dependent variable"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction that computes\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n y \u003d \u0026sum;\u003csub\u003ei\u003d1\u003c/sub\u003e\u003csup\u003en\u003c/sup\u003e c\u003csub\u003ei\u003c/sub\u003e x\u003csup\u003ei-1\u003c/sup\u003e\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.enthalpyOfLiquid":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.enthalpyOfLiquid","comment":"Return the specific enthalpy of liquid","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Temperature"},{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"Specific enthalpy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific enthalpy of liquid water.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.WetCoilDiscretized":{"name":"Buildings.Fluid.HeatExchangers.WetCoilDiscretized","comment":"Coil with discretization along the flow paths and humidity condensation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.DryCoilDiscretized","modifications":[{"name":"hexReg","qualifiers":["each"],"modifications":[{"name":"ele","qualifiers":["final"]}]},{"name":"temSen_1","modifications":[{"name":"m_flow_nominal","value":"m1_flow_nominal"}]},{"name":"temSen_2","modifications":[{"name":"m_flow_nominal","value":"m2_flow_nominal"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a discretized coil with humidity condensation.\nThis model is identical to\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DryCoilDiscretized\\\"\u003e\nBuildings.Fluid.HeatExchangers.DryCoilDiscretized\u003c/a\u003e\nbut in addition, the mass transfer from fluid 2 to the metal is computed.\nThe mass transfer is computed using a similarity law between\nheat and mass transfer, as implemented by the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.MassExchange\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.MassExchange\u003c/a\u003e.\nSee this model for details.\n\u003c/p\u003e\n\u003cp\u003e\nThis model can only be used with medium models that\nimplement the function \u003ccode\u003eenthalpyOfLiquid\u003c/code\u003e and that contain\nan integer variable \u003ccode\u003eWater\u003c/code\u003e whose value is the element number where\nthe water vapor is stored in the species concentration vector. Examples for\nsuch media are\n\u003ca href\u003d\\\"modelica://Buildings.Media.Air\\\"\u003e\nBuildings.Media.Air\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Modelica.Media.Air.MoistAir\\\"\u003e\nModelica.Media.Air.MoistAir\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Actuators.Motors.IdealMotor":{"name":"Buildings.Fluid.Actuators.Motors.IdealMotor","comment":"Ideal motor model with hysteresis","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"delta","comment":"Hysteresis","value":"0.05","modifications":[{"name":"min","value":"0"},{"name":"max","value":"0.5"}]},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tOpe","comment":"Opening time","value":"120","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tClo","comment":"Closing time","value":"tOpe","modifications":[{"name":"min","value":"0"}]},{"className":"Real","qualifiers":["parameter"],"name":"y_start","comment":"Start position","value":"0.5","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.Blocks.Logical.Hysteresis","name":"uppHys","modifications":[{"name":"uLow","qualifiers":["final"],"value":"0"},{"name":"uHigh","value":"delta"},{"name":"pre_y_start","qualifiers":["final"],"value":"false"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-60,20},{-40,40}}))"}},{"className":"Modelica.Blocks.Logical.Hysteresis","name":"lowHys","comment":"Lower hysteresis","modifications":[{"name":"uLow","value":"-delta"},{"name":"uHigh","qualifiers":["final"],"value":"0"},{"name":"pre_y_start","qualifiers":["final"],"value":"true"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-60,-40},{-40,-20}}))"}},{"className":"Modelica.Blocks.Logical.Switch","name":"uppSwi","annotations":{"placement":"Placement(transformation(extent \u003d {{0,20},{20,40}}))"}},{"className":"Modelica.Blocks.Continuous.LimIntegrator","name":"int","comment":"Integrator for valve opening position","modifications":[{"name":"y_start","qualifiers":["final"],"value":"y_start"},{"name":"k","qualifiers":["final"],"value":"1"},{"name":"outMax","value":"1"},{"name":"outMin","value":"0"},{"name":"initType","value":"Modelica.Blocks.Types.Init.InitialState"},{"name":"limitsAtInit","value":"true"},{"name":"y","modifications":[{"name":"stateSelect","value":"StateSelect.always"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,-10},{80,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIdeal actuator motor model with hysteresis and finite actuation speed.\nIf the current actuator position \u003ccode\u003ey\u003c/code\u003e is below (or above) the\ninput signal \u003ccode\u003eu\u003c/code\u003e by an amount bigger than the hysteresis\n\u003ccode\u003edelta\u003c/code\u003e, then the position \u003ccode\u003ey\u003c/code\u003e is increased (decreased)\nuntil it reaches \u003ccode\u003eu\u003c/code\u003e.\nThe output \u003ccode\u003ey\u003c/code\u003e is bounded between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e This model can introduce state events which increase the computation time.\nFor a more efficient implementation that approximates a motor, set in\nthe valve or damper model the parameter \u003ccode\u003efilteredOpening\u003dtrue\u003c/code\u003e\ninstead of using this motor model.\nSee also\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.UsersGuide\\\"\u003e\nBuildings.Fluid.Actuators.UsersGuide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Polygon(),Line(),Polygon(),Text(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Text(),Text(),Line(),Line(),Text(),Text(),Line(),Line()})"}},"Buildings.Utilities.Math.Functions.average":{"name":"Buildings.Utilities.Math.Functions.average","comment":"Average of a vector","components":[{"className":"Integer","qualifiers":["input"],"name":"nin","comment":"Number of inputs"},{"className":"Real","qualifiers":["array","input"],"name":"u","comment":"Input vector","arraySubscripts":"[nin]"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThis block outputs the average of the vector. \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionWall":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionWall","comment":"Model of a partition wall. Air is neglected","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.GypsumBoard(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"2"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a partition wall. It is used in every test cell to\n    separate the test cell itself and the attached closet.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a partition wall. It is used in every test cell to\n    separate the test cell itself and the attached closet.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.Types.InputType":{"name":"Buildings.Fluid.Types.InputType","comment":"Input options for movers","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Constant","comment":"Use parameter to set stage"},{"className":"EnumType","qualifiers":["constant"],"name":"Stages","comment":"Use integer input to select stage"},{"className":"EnumType","qualifiers":["constant"],"name":"Continuous","comment":"Use continuous, real input"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis type allows defining which type of input should be used for movers. \nThis can either be\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\na constant set point declared by a parameter,\n\u003c/li\u003e\n\u003cli\u003e\na series of possible set points that can be switched using an integer input, or\n\u003c/li\u003e\n\u003cli\u003e\na continuously variable set point.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.jj":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.jj","comment":"Vectorized version of j","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"xx","comment":"array of voltage or current vectors","arraySubscripts":"[:,:]"},{"className":"Real","qualifiers":["array","output"],"name":"yy","comment":"array of rotated vectors","arraySubscripts":"[size(xx,1),size(xx,2)]"}]},"Buildings.Fluid.Storage.StratifiedEnhancedInternalHex":{"name":"Buildings.Fluid.Storage.StratifiedEnhancedInternalHex","comment":"A model of a water storage tank with a secondary loop and intenral heat exchanger","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Storage.StratifiedEnhanced"}],"components":[{"className":"Modelica.SIunits.Height","qualifiers":["parameter"],"name":"hHex_a","comment":"Height of portHex_a of the heat exchanger, measured from tank bottom","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}},{"className":"Modelica.SIunits.Height","qualifiers":["parameter"],"name":"hHex_b","comment":"Height of portHex_b of the heat exchanger, measured from tank bottom","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"hexSegMult","comment":"Number of heat exchanger segments in each tank segment","value":"2","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}},{"className":"Modelica.SIunits.Diameter","qualifiers":["parameter"],"name":"dExtHex","comment":"Exterior diameter of the heat exchanger pipe","value":"0.025","annotations":{"dialog":"Dialog(group \u003d \"Heat exchanger\")"}},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"Q_flow_nominal","comment":"Heat transfer at nominal conditions","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TTan_nominal","comment":"Temperature of fluid inside the tank at nominal heat transfer conditions","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"THex_nominal","comment":"Temperature of fluid inside the heat exchanger at nominal heat transfer conditions","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}},{"className":"Real","qualifiers":["parameter"],"name":"r_nominal","comment":"Ratio between coil inside and outside convective heat transfer at nominal heat transfer conditions","value":"0.5","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mHex_flow_nominal","comment":"Nominal mass flow rate through the heat exchanger","annotations":{"dialog":"Dialog(group \u003d \"Heat exchanger\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dpHex_nominal","comment":"Pressure drop across the heat exchanger at nominal conditions","value":"2500","modifications":[{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Heat exchanger\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"computeFlowResistance","comment":"\u003dtrue, compute flow resistance. Set to false to assume no friction","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Flow resistance heat exchanger\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"from_dp","comment":"\u003d true, use m_flow \u003d f(dp) else dp \u003d f(m_flow)","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Flow resistance heat exchanger\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearizeFlowResistance","comment":"\u003d true, use linear relation between m_flow and dp for any flow rate","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Flow resistance heat exchanger\")"}},{"className":"Real","qualifiers":["parameter"],"name":"deltaM","comment":"Fraction of nominal flow rate where flow transitions to laminar","value":"0.1","annotations":{"dialog":"Dialog(tab \u003d \"Flow resistance heat exchanger\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamicsHex","comment":"Formulation of energy balance for heat exchanger internal fluid mass","value":"Modelica.Fluid.Types.Dynamics.DynamicFreeInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"massDynamicsHex","comment":"Formulation of mass balance for heat exchanger","value":"energyDynamicsHex","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamicsHexSolid","comment":"Formulation of energy balance for heat exchanger solid mass","value":"energyDynamicsHex","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"lHex","comment":"Approximate length of the heat exchanger","value":"rTan*abs(segHex_a-segHex_b)*Modelica.Constants.pi","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"ACroHex","comment":"Cross sectional area of the heat exchanger","value":"(dExtHex^(2)-(0.8*dExtHex)^(2))*Modelica.Constants.pi/(4)","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Modelica.SIunits.SpecificHeatCapacity","qualifiers":["parameter"],"name":"cHex","comment":"Specific heat capacity of the heat exchanger material","value":"490","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Modelica.SIunits.Density","qualifiers":["parameter"],"name":"dHex","comment":"Density of the heat exchanger material","value":"8000","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Modelica.SIunits.HeatCapacity","qualifiers":["parameter"],"name":"CHex","comment":"Capacitance of the heat exchanger without the fluid","value":"ACroHex*lHex*dHex*cHex","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics heat exchanger\", group \u003d \"Equations\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversalHex","comment":"\u003d true to allow flow reversal in heat exchanger, false restricts to design direction (portHex_a -\u003e portHex_b)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\", group \u003d \"Heat exchanger\")"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"portHex_a","comment":"Heat exchanger inlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"MediumHex"},{"name":"m_flow","modifications":[{"name":"min","value":"if allowFlowReversalHex then -Modelica.Constants.inf else 0"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-48},{-90,-28}}), iconTransformation(extent \u003d {{-110,-48},{-90,-28}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"portHex_b","comment":"Heat exchanger outlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"MediumHex"},{"name":"m_flow","modifications":[{"name":"max","value":"if allowFlowReversalHex then Modelica.Constants.inf else 0"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-90},{-90,-70}}), iconTransformation(extent \u003d {{-110,-90},{-90,-70}}))"}},{"className":"BaseClasses.IndirectTankHeatExchanger","name":"indTanHex","comment":"Heat exchanger inside the tank","modifications":[{"name":"MediumTan","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"MediumHex","qualifiers":["redeclare","package","final"],"value":"MediumHex"},{"name":"nSeg","qualifiers":["final"],"value":"nSegHex"},{"name":"CHex","qualifiers":["final"],"value":"CHex"},{"name":"volHexFlu","qualifiers":["final"],"value":"volHexFlu"},{"name":"Q_flow_nominal","qualifiers":["final"],"value":"Q_flow_nominal"},{"name":"TTan_nominal","qualifiers":["final"],"value":"TTan_nominal"},{"name":"THex_nominal","qualifiers":["final"],"value":"THex_nominal"},{"name":"r_nominal","qualifiers":["final"],"value":"r_nominal"},{"name":"dExtHex","qualifiers":["final"],"value":"dExtHex"},{"name":"dp_nominal","qualifiers":["final"],"value":"dpHex_nominal"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"mHex_flow_nominal"},{"name":"energyDynamics","qualifiers":["final"],"value":"energyDynamicsHex"},{"name":"energyDynamicsSolid","qualifiers":["final"],"value":"energyDynamicsHexSolid"},{"name":"massDynamics","qualifiers":["final"],"value":"massDynamicsHex"},{"name":"computeFlowResistance","qualifiers":["final"],"value":"computeFlowResistance"},{"name":"from_dp","value":"from_dp"},{"name":"linearizeFlowResistance","qualifiers":["final"],"value":"linearizeFlowResistance"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversalHex"},{"name":"m_flow_small","qualifiers":["final"],"value":"1e-4*abs(mHex_flow_nominal)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-15},{10,15}}, rotation \u003d 180, origin \u003d {-87,32}))"}},{"className":"Modelica.SIunits.HeatFlowRate","name":"QHex_flow","comment":"Heat transfered from the heat exchanger to the tank","value":"-sum(indTanHex.port.Q_flow)"}],"classes":[{"name":"Buildings.Fluid.Storage.StratifiedEnhancedInternalHex.MediumHex","comment":"Medium in the heat exchanger","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}}],"annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Heat exchanger\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a stratified storage tank for thermal energy storage with built-in heat exchanger.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.UsersGuide\\\"\u003e\nBuildings.Fluid.Storage.UsersGuide\u003c/a\u003e\nfor more information.\n\u003c/p\u003e\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nThe model requires at least 4 fluid segments. Hence, set \u003ccode\u003enSeg\u003c/code\u003e to 4 or higher.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Fluid.Data.Pipes.Generic":{"name":"Buildings.Fluid.Data.Pipes.Generic","comment":"Generic record for pipes","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"dOut","comment":"Outer diameter","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"dIn","comment":"Inner diameter","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.Length","qualifiers":["final","parameter"],"name":"s","comment":"Wall thickness","value":"(dOut-dIn)/(2)","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"roughness","comment":"Roughness","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.Density","qualifiers":["parameter"],"name":"d","comment":"Mass density"},{"className":"Modelica.SIunits.ThermalConductivity","qualifiers":["parameter"],"name":"k","comment":"Thermal conductivity"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a generic record for pipes.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimple":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimple","comment":"Simple PV source without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.UnbalancedPV","modifications":[{"name":"pv_phase1"},{"name":"pv_phase2"},{"name":"pv_phase3"}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"G","comment":"Total solar irradiation per unit area","modifications":[{"name":"unit","value":"\"W/m2\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,110}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple PV model for three-phase unbalanced systems without neutral cable connection.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.PVSimple\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.PVSimple\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.PartialConversion":{"name":"Buildings.Electrical.Interfaces.PartialConversion","comment":"Model representing a generic two port system for conversion","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialTwoPort"}],"components":[{"className":"Modelica.SIunits.Voltage","name":"v_p","comment":"Voltage drop between the two positive pins"},{"className":"Modelica.SIunits.Voltage","name":"v_n","comment":"Voltage drop between the two negative pins"},{"className":"Modelica.SIunits.Current","name":"i_p","comment":"Current flowing through the positive pins"},{"className":"Modelica.SIunits.Current","name":"i_n","comment":"Current flowing through the negative pins"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model extends the base class\n\u003ca href\u003d\\\"Buildings.Electrical.Interfaces.PartialTwoPort\\\"\u003e\nBuildings.Electrical.Interfaces.PartialTwoPort\u003c/a\u003e\nmodel and declares the variables\n\u003ccode\u003ev_p\u003c/code\u003e and \u003ccode\u003ei_p\u003c/code\u003e that represents the voltage and the\ncurrent at the \u003ccode\u003eterminal_p\u003c/code\u003e, and the variables\n\u003ccode\u003ev_n\u003c/code\u003e and \u003ccode\u003ei_n\u003c/code\u003e that represents the voltage and the\ncurrent at the \u003ccode\u003eterminal_n\u003c/code\u003e.\nThese variables are used in conversion models such as transformers and AC/DC converters.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.j":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.j","comment":"Rotation(pi/2) of vector around {0,0,1} and projection on North plane","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.j"}]},"Buildings.Fluid.Actuators.Dampers.Exponential":{"name":"Buildings.Fluid.Actuators.Dampers.Exponential","comment":"Air damper with exponential opening characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialDamperExponential","modifications":[{"name":"dp_nominal","qualifiers":["final"],"value":"(m_flow_nominal/(kDam_default))^(2)"},{"name":"dp","modifications":[{"name":"nominal","value":"10"}]},{"name":"kFixed","qualifiers":["final"],"value":"0"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model is an air damper with flow coefficient that is an exponential function\nof the opening angle. The model is as in ASHRAE 825-RP.\nA control signal of \u003ccode\u003ey\u003d0\u003c/code\u003e means the damper is closed, and \u003ccode\u003ey\u003d1\u003c/code\u003e means the damper\nis open. This is opposite of the implementation of ASHRAE 825-RP, but used here\nfor consistency within this library.\n\u003c/p\u003e\n\u003cp\u003e\nFor \u003ccode\u003eyL \u0026lt; y \u0026lt; yU\u003c/code\u003e, the damper characteristics is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  k\u003csub\u003ed\u003c/sub\u003e(y) \u003d exp(a+b (1-y)).\n\u003c/p\u003e\n\u003cp\u003e\nOutside this range, the damper characteristic is defined by a quadratic polynomial that\nmatches the damper resistance at \u003ccode\u003ey\u003d0\u003c/code\u003e and \u003ccode\u003ey\u003dyL\u003c/code\u003e or \u003ccode\u003ey\u003dyU\u003c/code\u003e and\n\u003ccode\u003ey\u003d1\u003c/code\u003e, respectively. In addition, the polynomials are such that\n\u003ci\u003ek\u003csub\u003ed\u003c/sub\u003e(y)\u003c/i\u003e is\ndifferentiable in \u003ci\u003ey\u003c/i\u003e and the derivative is continuous.\n\u003c/p\u003e\n\u003cp\u003e\nThe damper characteristics \u003ci\u003ek\u003csub\u003ed\u003c/sub\u003e(y)\u003c/i\u003e is then used to\ncompute the flow coefficient \u003ci\u003ek(y)\u003c/i\u003e as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nk(y) \u003d (2 \u0026rho; \u0026frasl; k\u003csub\u003ed\u003c/sub\u003e(y))\u003csup\u003e1/2\u003c/sup\u003e A,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eA\u003c/i\u003e is the face area. The flow coefficient \u003ci\u003ek(y)\u003c/i\u003e\nis used to compute the mass flow rate versus pressure\ndrop relation as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  m \u003d sign(\u0026Delta;p) k(y)  \u0026radic;\u003cspan style\u003d\\\"text-decoration:overline;\\\"\u003e\u0026nbsp;\u0026Delta;p \u0026nbsp;\u003c/span\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwith regularization near the origin.\n\u003c/p\u003e\n\u003cp\u003e\nASHRAE 825-RP lists the following parameter values as typical:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\u003cth\u003eopposed blades\u003c/th\u003e\u003cth\u003esingle blades\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eyL\u003c/td\u003e\u003ctd\u003e15/90\u003c/td\u003e\u003ctd\u003e15/90\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eyU\u003c/td\u003e\u003ctd\u003e55/90\u003c/td\u003e\u003ctd\u003e65/90\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ek0\u003c/td\u003e\u003ctd\u003e1E6\u003c/td\u003e\u003ctd\u003e1E6\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ek1\u003c/td\u003e\u003ctd\u003e0.2 to 0.5\u003c/td\u003e\u003ctd\u003e0.2 to 0.5\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ea\u003c/td\u003e\u003ctd\u003e-1.51\u003c/td\u003e\u003ctd\u003e-1.51\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eb\u003c/td\u003e\u003ctd\u003e0.105*90\u003c/td\u003e\u003ctd\u003e0.0842*90\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nP. Haves, L. K. Norford, M. DeSimone and L. Mei,\n\u003ci\u003eA Standard Simulation Testbed for the Evaluation of Control Algorithms \u0026amp; Strategies\u003c/i\u003e,\nASHRAE Final Report 825-RP, Atlanta, GA.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Polygon(),Polygon()})"}},"Buildings.HeatTransfer.Convection.Exterior":{"name":"Buildings.HeatTransfer.Convection.Exterior","comment":"Model for a exterior (outside) convective heat transfer","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Convection.BaseClasses.PartialConvection"}],"components":[{"className":"Buildings.HeatTransfer.Types.ExteriorConvection","qualifiers":["parameter"],"name":"conMod","comment":"Convective heat transfer model","value":"Buildings.HeatTransfer.Types.ExteriorConvection.TemperatureWind"},{"className":"Buildings.HeatTransfer.Types.SurfaceRoughness","qualifiers":["parameter"],"name":"roughness","comment":"Surface roughness","value":"Buildings.HeatTransfer.Types.SurfaceRoughness.Medium","annotations":{"dialog":"Dialog(enable \u003d conMod\u003c\u003eBuildings.HeatTransfer.Types.InteriorConvection.Fixed)"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"v","comment":"Wind speed","modifications":[{"name":"unit","value":"\"m/s\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,80},{-100,120}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"dir","comment":"Wind direction (0\u003dwind from North)","modifications":[{"name":"unit","value":"\"rad\""},{"name":"displayUnit","value":"\"deg\""},{"name":"min","value":"0"},{"name":"max","value":"2*Modelica.Constants.pi"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,30},{-100,70}}))"}},{"className":"Modelica.SIunits.CoefficientOfHeatTransfer","name":"hF","comment":"Convective heat transfer coefficient due to forced convection"},{"className":"Modelica.SIunits.HeatFlux","name":"qN_flow","comment":"Convective heat flux from solid -\u003e fluid due to natural convection"},{"className":"Modelica.SIunits.HeatFlux","name":"qF_flow","comment":"Convective heat flux from solid -\u003e fluid due to forced convection"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model for a convective heat transfer for exterior, outside-facing surfaces.\nThe parameter \u003ccode\u003econMod\u003c/code\u003e determines the model that is used to compute\nthe heat transfer coefficient:\n\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eIf \u003ccode\u003econMod\u003d\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Types.ExteriorConvection\\\"\u003e\nBuildings.HeatTransfer.Types.ExteriorConvection.Fixed\u003c/a\u003e\n\u003c/code\u003e, then\nthe convective heat transfer coefficient is set to the value specified by the parameter\n\u003ccode\u003ehFixed\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\nIf \u003ccode\u003econMod\u003d\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Types.ExteriorConvection\\\"\u003e\nBuildings.HeatTransfer.Types.ExteriorConvection.TemperatureWind\u003c/a\u003e\n\u003c/code\u003e,\nthen the convective heat transfer coefficient is\ncomputed based on wind speed, wind direction and temperature difference.\n\u003c/p\u003e\n\u003cp\u003e\nThe total convection coefficient \u003ci\u003eh\u003csub\u003et\u003c/sub\u003e\u003c/i\u003e is the sum of the\ntemperature-driven free convection coefficient \u003ci\u003eh\u003csub\u003en\u003c/sub\u003e\u003c/i\u003e\nand the wind-driven forced convection coefficient \u003ci\u003eh\u003csub\u003ef\u003c/sub\u003e\u003c/i\u003e,\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n h\u003csub\u003et\u003c/sub\u003e \u003d h\u003csub\u003en\u003c/sub\u003e + h\u003csub\u003ef\u003c/sub\u003e\n\u003c/p\u003e\nThe free convection coefficient \u003ci\u003eh\u003csub\u003en\u003c/sub\u003e\u003c/i\u003e is computed in the same way as in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Interior\\\"\u003e\nBuildings.HeatTransfer.Convection.Interior\u003c/a\u003e.\nThe forced convection coefficient \u003ci\u003eh\u003csub\u003ef\u003c/sub\u003e\u003c/i\u003e\nis computed based on a correlation by Sparrow, Ramsey, and Mass\n(1979), which is\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n h\u003csub\u003ef\u003c/sub\u003e \u003d 2.537 W R \u0026radic;( P v \u0026frasl; A )\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eW\u003d1\u003c/i\u003e for windward surfaces and\n\u003ci\u003eW\u003d0.5\u003c/i\u003e for leeward surfaces, with leeward defined as greater than 100 degrees\nfrom normal incidence,\n\u003ci\u003eR\u003c/i\u003e is a surface roughness multiplier,\n\u003ci\u003eP\u003c/i\u003e is the perimeter of the surface and\n\u003ci\u003eA\u003c/i\u003e is the area of the surface.\nThis is the same equation as implemented in EnergyPlus 6.0.\n\u003c/p\u003e\n\u003cp\u003e\nWe make the simplified assumption that the surface is square, and hence we set\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n h\u003csub\u003ef\u003c/sub\u003e \u003d 2.537 W R \u0026radic;( 4 v \u0026frasl; \u0026radic;(A) )\n\u003c/p\u003e\n\u003cp\u003e\nThe surface roughness is specified by the parameter \u003ccode\u003esurfaceRoughness\u003c/code\u003e\nwhich has to be set to a type of\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Types.SurfaceRoughness\\\"\u003e\nBuildings.HeatTransfer.Types.SurfaceRoughness\u003c/a\u003e.The coefficients for the surface roughness are\n\u003c/p\u003e\n\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eRoughness index\u003c/th\u003e\n\u003cth\u003e\u003ci\u003eR\u003c/i\u003e\u003c/th\u003e\n\u003cth\u003eExample material\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eVeryRough\u003c/td\u003e   \u003ctd\u003e2.17\u003c/td\u003e  \u003ctd\u003eStucco\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eRough\u003c/td\u003e        \u003ctd\u003e1.67\u003c/td\u003e  \u003ctd\u003eBrick\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eMediumRough\u003c/td\u003e \u003ctd\u003e1.52\u003c/td\u003e  \u003ctd\u003eConcrete\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eMediumSmooth\u003c/td\u003e\u003ctd\u003e1.13\u003c/td\u003e  \u003ctd\u003eClear pine\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eSmooth\u003c/td\u003e       \u003ctd\u003e1.11\u003c/td\u003e  \u003ctd\u003eSmooth plaster\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eVerySmooth\u003c/td\u003e  \u003ctd\u003e1.00\u003c/td\u003e  \u003ctd\u003eGlass\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nSparrow, E. M., J. W. Ramsey, and E. A. Mass. 1979. Effect of Finite Width on Heat Transfer\nand Fluid Flow about an Inclined Rectangular Plate. Journal of Heat Transfer, Vol. 101, p.\n204.\n\u003c/p\u003e\n\u003cp\u003e\nWalton, G. N. 1981. Passive Solar Extension of the Building Loads Analysis and System\nThermodynamics (BLAST) Program, Technical Report, United States Army Construction\nEngineering Research Laboratory, Champaign, IL.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Line(),Line(),Line(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Fluid.SolarCollectors.Types.SystemConfiguration":{"name":"Buildings.Fluid.SolarCollectors.Types.SystemConfiguration","comment":"Enumeration of options for how the panels are connected","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Parallel","comment":"Panels connected in parallel"},{"className":"EnumType","qualifiers":["constant"],"name":"Series","comment":"Panels connected in series"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n      Enumeration used to define the different configurations of\n      solar thermal systems.\n    \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.RadiantSlabs.Types.SystemType":{"name":"Buildings.Fluid.HeatExchangers.RadiantSlabs.Types.SystemType","comment":"System type for radiant slab","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Ceiling_Wall_or_Capillary","comment":"Radiant heating or cooling system (ceiling or wall)"},{"className":"EnumType","qualifiers":["constant"],"name":"Floor","comment":"Floor heating system"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis type definition is used to specify\nthe type of radiant system to be modeled.\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.RadiantSlabs.UsersGuide\\\"\u003e\nuser\u0027s guide\u003c/a\u003e\nfor more information.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.j":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.j","comment":"Return vector rotated by 90 degrees","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"x","arraySubscripts":"[n]"},{"className":"Real","qualifiers":["array","output"],"name":"y","arraySubscripts":"[n]"}]},"Buildings.Fluid.Sources.Outside_Cp":{"name":"Buildings.Fluid.Sources.Outside_Cp","comment":"Boundary that takes weather data, and optionally the wind pressure coefficient and trace substances, as an input","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sources.BaseClasses.Outside"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_Cp_in","comment":"Get the wind pressure coefficient from the input connector","value":"false"},{"className":"Real","qualifiers":["parameter"],"name":"Cp","comment":"Fixed value of wind pressure coefficient","value":"0.6","annotations":{"dialog":"Dialog(enable \u003d not use_Cp_in)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Cp_in","comment":"Prescribed wind pressure coefficient","modifications":[{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_Cp_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Modelica.SIunits.Pressure","name":"pWin","comment":"Change in pressure due to wind force","modifications":[{"name":"displayUnit","value":"\"Pa\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes boundary conditions for\npressure, enthalpy, and species concentration that can be obtained\nfrom weather data. The model is identical to\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources.Outside\\\"\u003e\nBuildings.Fluid.Sources.Outside\u003c/a\u003e,\nexcept that it allows adding the wind pressure to the\npressure at the fluid port \u003ccode\u003eports\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe pressure \u003ci\u003ep\u003c/i\u003e at the port \u003ccode\u003eports\u003c/code\u003e is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  p \u003d p\u003csub\u003ew\u003c/sub\u003e + C\u003csub\u003ep\u003c/sub\u003e 1 \u0026frasl; 2 v\u003csup\u003e2\u003c/sup\u003e \u0026rho;\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ep\u003csub\u003ew\u003c/sub\u003e\u003c/i\u003e is the atmospheric pressure from the weather bus,\n\u003ci\u003eC\u003csub\u003ep\u003c/sub\u003e\u003c/i\u003e is the wind pressure coefficient,\n\u003ci\u003ev\u003c/i\u003e is the wind speed from the weather bus, and\n\u003ci\u003e\u0026rho;\u003c/i\u003e is the fluid density.\nIf \u003ccode\u003euse_Cp_in\u003dtrue\u003c/code\u003e, then the\nwind pressure coefficient is obtained from the input connector\n\u003ccode\u003eCp_in\u003c/code\u003e. Otherwise, it is set to the parameter\n\u003ccode\u003eCp\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_0_9_1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_9_1","comment":"Version 0.9.1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical error\u003c/b\u003e has been fixed (i.e. error\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Storage.\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.StratifiedEnhanced\\\"\u003e\n  Buildings.Fluid.Storage.StratifiedEnhanced\u003c/a\u003e\u003c/td\u003e\n      \u003ctd valign\u003d\\\"top\\\"\u003eThe model \u003ccode\u003eBuildings.Fluid.Storage.BaseClasses.Stratifier\u003c/code\u003e\n      had a sign error that lead to a wrong energy balance.\n      The model that was affected by this error is\n      \u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.StratifiedEnhanced\\\"\u003e\n      Buildings.Fluid.Storage.StratifiedEnhanced\u003c/a\u003e.\n      The model\n      \u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.Stratified\\\"\u003e\n      Buildings.Fluid.Storage.Stratified\u003c/a\u003e was not affected.\u003cbr/\u003e\n      The bug has been fixed by using the newly introduced model\n      \u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.BaseClasses.ThirdOrderStratifier\\\"\u003e\n        Buildings.Fluid.Storage.BaseClasses.ThirdOrderStratifier\u003c/a\u003e. This model\n      uses a third-order upwind scheme to reduce the numerical dissipation instead of the\n      correction term that was used in \u003ccode\u003eBuildings.Fluid.Storage.BaseClasses.Stratifier\u003c/code\u003e.\n      The model \u003ccode\u003eBuildings.Fluid.Storage.BaseClasses.Stratifier\u003c/code\u003e has been removed since it\n      also led to significant overshoot in temperatures when the stratification was pronounced.\n      \u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.systemVoltage":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.systemVoltage","comment":"Return system voltage as function of phase voltages","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.systemVoltage"}]},"Buildings.UsersGuide.ReleaseNotes.Version_0_9_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_9_0","comment":"Version 0.9.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nAdded the following heat exchanger models\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DryEffectivenessNTU\\\"\u003e\nBuildings.Fluid.HeatExchangers.DryEffectivenessNTU\u003c/a\u003e\nfor a sensible heat exchanger that uses the \u003ccode\u003eepsilon-NTU\u003c/code\u003e\nrelations to compute the heat transfer.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DryCoilCounterFlow\\\"\u003e\nBuildings.Fluid.HeatExchangers.DryCoilCounterFlow\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.WetCoilCounterFlow\\\"\u003e\nBuildings.Fluid.HeatExchangers.WetCoilCounterFlow\u003c/a\u003e\nto model a coil without and with water vapor condensation. These models\napproximate the coil as a counterflow heat exchanger.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli\u003e\nRevised air damper\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.exponentialDamper\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.exponentialDamper\u003c/a\u003e.\nThe new implementation avoids warnings and leads to faster convergence\nsince the solver does not attempt anymore to solve for a variable that\nneeds to be strictly positive.\n\u003c/li\u003e\n\u003cli\u003e\nRevised package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers\\\"\u003e\nBuildings.Fluid.Movers\u003c/a\u003e\nto allow zero flow for some pump or fan models.\nIf the input to the model is the control signal \u003ccode\u003ey\u003c/code\u003e, then\nthe flow is equal to zero if \u003ccode\u003ey\u003d0\u003c/code\u003e. This change required rewriting\nthe package to avoid division by the rotational speed.\n\u003c/li\u003e\n\u003cli\u003e\nRevised package\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer\\\"\u003e\nBuildings.HeatTransfer\u003c/a\u003e\nto include a model for a multi-layer construction, and to\nallow individual material layers to be computed steady-state or\ntransient.\n\u003c/li\u003e\n\u003cli\u003e\nIn package  \u003ca href\u003d\\\"modelica://Buildings.Fluid\\\"\u003e\nBuildings.Fluid\u003c/a\u003e, changed models so that\nif the parameter \u003ccode\u003edp_nominal\u003c/code\u003e is set to zero,\nthen the pressure drop equation is removed. This allows, for example,\nto model a heating and a cooling coil in series, and lump there pressure drops\ninto a single element, thereby reducing the dimension of the nonlinear system\nof equations.\n\u003c/li\u003e\n\u003cli\u003e\nAdded model \u003ca href\u003d\\\"modelica://Buildings.Controls.Continuous.LimPID\\\"\u003e\nBuildings.Controls.Continuous.LimPID\u003c/a\u003e, which is identical to\n\u003ca href\u003d\\\"modelica://Modelica.Blocks.Continuous.LimPID\\\"\u003e\nModelica.Blocks.Continuous.LimPID\u003c/a\u003e, except that it\nallows reverse control action. This simplifies use of the controller\nfor cooling applications.\n\u003c/li\u003e\n\u003cli\u003e\nAdded model \u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Dampers.MixingBox\\\"\u003e\nBuildings.Fluid.Actuators.Dampers.MixingBox\u003c/a\u003e for an outside air\nmixing box with air dampers.\n\u003c/li\u003e\n\u003cli\u003e\nChanged implementation of flow resistance in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Dampers.MixingBoxMinimumFlow\\\"\u003e\nBuildings.Fluid.Actuators.Dampers.MixingBoxMinimumFlow\u003c/a\u003e. Instead of using a\nfixed resistance and a damper model in series, only one model is used\nthat internally adds these two resistances. This leads to smaller systems\nof nonlinear equations.\n\u003c/li\u003e\n\u003cli\u003e\nChanged\n\u003ca href\u003d\\\"modelica://Buildings.Media.PerfectGases.MoistAir.T_phX\\\"\u003e\nBuildings.Media.PerfectGases.MoistAir.T_phX\u003c/a\u003e (and by inheritance all\nother moist air medium models) to first compute \u003ccode\u003eT\u003c/code\u003e\nin closed form assuming no saturation. Then, a check is done to determine\nwhether the state is in the fog region. If the state is in the fog region,\nthen \u003ccode\u003eInternal.solve\u003c/code\u003e is called. This new implementation\ncan lead to significantly shorter computing\ntime in models that frequently call \u003ccode\u003eT_phX\u003c/code\u003e.\n\u003cli\u003e\nAdded package\n\u003ca href\u003d\\\"modelica://Buildings.Media.GasesConstantDensity\\\"\u003e\nBuildings.Media.GasesConstantDensity\u003c/a\u003e which contains medium models\nfor dry air and moist air.\nThe use of a constant density avoids having pressure as a state variable in mixing volumes. Hence, fast transients\nintroduced by a change in pressure are avoided.\nThe drawback is that the dimensionality of the coupled\nnonlinear equation system is typically larger for flow\nnetworks.\n\u003c/li\u003e\n\u003cli\u003e\nIn\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialDamperExponential\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialDamperExponential\u003c/a\u003e,\nadded default value for parameter \u003ccode\u003eA\u003c/code\u003e to avoid compilation error\nif the parameter is disabled but not specified.\n\u003c/li\u003e\n\u003cli\u003e\nSimplified the mixing volumes in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes\\\"\u003e\nBuildings.Fluid.MixingVolumes\u003c/a\u003e by removing the port velocity,\npressure drop and height.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phaseCurrents":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phaseCurrents","comment":"Return phase currents","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Current","qualifiers":["input"],"name":"I","comment":"system current"},{"className":"SI.Angle","qualifiers":["input"],"name":"phi","comment":"phase angle","value":"0"},{"className":"SI.Current","qualifiers":["array","output"],"name":"i","comment":"phase currents","arraySubscripts":"[n]"}]},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.thetaRel":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.thetaRel","comment":"Return absolute angle of rotating system as offset to thetaRef","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Angle","qualifiers":["array","input"],"name":"theta","arraySubscripts":"[m]"},{"className":"SI.Angle","qualifiers":["output"],"name":"thetaRel"}]},"Buildings.HeatTransfer.Types.InteriorConvection":{"name":"Buildings.HeatTransfer.Types.InteriorConvection","comment":"Enumeration defining the convective heat transfer model for interior surfaces","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Fixed","comment":"Fixed coefficient (a user-specified parameter is used)"},{"className":"EnumType","qualifiers":["constant"],"name":"Temperature","comment":"Temperature dependent"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis enumeration is used to set the function\nthat is used to compute the convective\nheat transfer coefficient for interior (room-side facing) surfaces.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.thetaRef":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.thetaRef","comment":"Return absolute angle of rotating reference system","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Angle","qualifiers":["array","input"],"name":"theta","arraySubscripts":"[m]"},{"className":"SI.Angle","qualifiers":["output"],"name":"thetaRef"}]},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort","comment":"Partial model interface for a two port component without neutral cable","qualifiers":["model","partial"],"components":[{"className":"Terminal_p","name":"terminal_p","comment":"Electric terminal side p","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Terminal_n","name":"terminal_n","comment":"Electric terminal side n","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nInterface model for an AC three-phase unbalanced component with two ports\nand without neutral cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfGas":{"name":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfGas","comment":"Enthalpy of gas mixture per unit mass of gas mixture","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfGas"}]},"Buildings.Fluid.Actuators.Valves.Data.Generic":{"name":"Buildings.Fluid.Actuators.Valves.Data.Generic","comment":"Generic record for valve parameters","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Real","qualifiers":["array","parameter"],"name":"y","comment":"Valve position, starting with 0 and ending with 1","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[:]"},{"className":"Real","qualifiers":["array","parameter"],"name":"phi","comment":"Normalized volume flow rates for the positions y","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[size(y,1)]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a generic record for the normalized volume flow\nrates for different valve opening positions.\nSee the documentation of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Valves.Data\\\"\u003e\nBuildings.Fluid.Actuators.Valves.Data\u003c/a\u003e\nfor how to use this record.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.PartialTwoPort":{"name":"Buildings.Electrical.Interfaces.PartialTwoPort","comment":"Model of a generic two port component with phase systems","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialBaseTwoPort","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"classes":[{"name":"Buildings.Electrical.Interfaces.PartialTwoPort.PhaseSystem_p","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]},{"name":"Buildings.Electrical.Interfaces.PartialTwoPort.PhaseSystem_n","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a component with two electric terminals.\nIt represents a common interface that is extended by other models.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.density":{"name":"Buildings.Media.Air.density","comment":"Gas density","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"ThermodynamicState","qualifiers":["input"],"name":"state"},{"className":"Density","qualifiers":["output"],"name":"d","comment":"Density"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nDensity is computed from pressure, temperature and composition in the thermodynamic state record applying the ideal gas law.\n\u003c/html\u003e\""}},"Buildings.Electrical.Types.InitMode":{"name":"Buildings.Electrical.Types.InitMode","comment":"Enumeration that defines the type of initialization assumption can be used for a load model","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"zero_current","comment":"Assume i\u003d0 during homotopy initialization"},{"className":"EnumType","qualifiers":["constant"],"name":"linearized","comment":"Uses linear model during homotopy initialization"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type is used to indicate how a model\nshould be initialized.\n\u003c/html\u003e\""}},"Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear":{"name":"Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear","comment":"Three way valve with equal percentage and linear characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve","modifications":[{"name":"res1"},{"name":"res3"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"R","comment":"Rangeability, R\u003d50...100 typically","value":"50"},{"className":"Real","qualifiers":["parameter"],"name":"delta0","comment":"Range of significant deviation from equal percentage law","value":"0.01"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThree way valve with equal percentage characteristics\nbetween \u003ccode\u003eport_1\u003c/code\u003e and \u003ccode\u003eport_2\u003c/code\u003e\nand linear opening characteristic between \u003ccode\u003eport_1\u003c/code\u003e and \u003ccode\u003eport_2\u003c/code\u003e.\nSuch opening characteristics were typical for valves from Landis \u0026amp; Gyr (now\nSiemens).\n\u003c/p\u003e\u003cp\u003e\nThis model is based on the partial valve models\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\u003c/a\u003e\nfor the implementation of the three way valve\nand see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e\nfor the implementation of the regularization near the origin.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Controls.Types.Day":{"name":"Buildings.Controls.Types.Day","comment":"Enumeration for the day types","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"WorkingDay","comment":"Working day, such as Monday through Friday"},{"className":"EnumType","qualifiers":["constant"],"name":"NonWorkingDay","comment":"Non-working day, such as week-ends, but not holidays"},{"className":"EnumType","qualifiers":["constant"],"name":"Holiday","comment":"Holiday"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnumeration for the type of days that are used in the demand response models.\nThe possible values are\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nWorkingDay\n\u003c/li\u003e\n\u003cli\u003e\nNonWorkingDay\n\u003c/li\u003e\n\u003cli\u003e\nHoliday\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phaseVoltages":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phaseVoltages","comment":"Return phase to neutral voltages","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phaseVoltages"}]},"Buildings.Controls.Interfaces.DayTypeInput":{"name":"Buildings.Controls.Interfaces.DayTypeInput","comment":"Input connector for demand response day","qualifiers":["input"],"superClasses":[{"nameOfExtendedClass":"Buildings.Controls.Types.Day","annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, initialScale \u003d 0.2, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one input signal of type\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Types.Day\\\"\u003e\nBuildings.Controls.Types.Day\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()}, coordinateSystem(extent \u003d {{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio \u003d true, initialScale \u003d 0.2))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, initialScale \u003d 0.2, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one input signal of type\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Types.Day\\\"\u003e\nBuildings.Controls.Types.Day\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()}, coordinateSystem(extent \u003d {{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio \u003d true, initialScale \u003d 0.2))"}},"Buildings.Electrical.PhaseSystems.DirectCurrent.systemVoltage":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.systemVoltage","comment":"Return system voltage as function of phase voltages","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.systemVoltage"}]},"Buildings.Fluid.MassExchangers.ConstantEffectiveness":{"name":"Buildings.Fluid.MassExchangers.ConstantEffectiveness","comment":"Heat and moisture exchanger with constant effectiveness","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.BaseClasses.PartialEffectiveness","modifications":[{"name":"Medium1","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"},{"name":"Medium2","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"},{"name":"sensibleOnly1","value":"false"},{"name":"sensibleOnly2","value":"false"},{"name":"Q1_flow","value":"epsS*QMax_flow"},{"name":"Q2_flow","value":"-Q1_flow"},{"name":"mWat1_flow","value":"mWat_flow"},{"name":"mWat2_flow","value":"-mWat_flow"}]}],"components":[{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"epsS","comment":"Sensible heat exchanger effectiveness","value":"0.8","modifications":[{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"epsL","comment":"Latent heat exchanger effectiveness","value":"0.8","modifications":[{"name":"max","value":"1"}]},{"className":"Medium1.MassFraction","name":"X_w_in1","comment":"Inlet water mass fraction of medium 1"},{"className":"Medium2.MassFraction","name":"X_w_in2","comment":"Inlet water mass fraction of medium 2"},{"className":"Modelica.SIunits.MassFlowRate","name":"mWat_flow","comment":"Water flow rate from medium 2 to medium 1"},{"className":"Modelica.SIunits.MassFlowRate","name":"mMax_flow","comment":"Maximum water flow rate from medium 2 to medium 1"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for a heat and moisture exchanger with constant effectiveness.\n\u003c/p\u003e\n\u003cp\u003e\nThis model transfers heat and moisture in the amount of \u003c/p\u003e\n\u003cpre\u003e\n  Q \u003d epsS * Q_max,\n  m \u003d epsL * mWat_max,\n\u003c/pre\u003e\n\u003cp\u003e\nwhere \u003ccode\u003eepsS\u003c/code\u003e and \u003ccode\u003eepsL\u003c/code\u003e are constant effectiveness\nfor the sensible and latent heat transfer,\n\u003ccode\u003eQ_max\u003c/code\u003e is the maximum heat that can be transferred and\n\u003ccode\u003emWat_max\u003c/code\u003e is the maximum moisture that can be transferred.\n\u003c/p\u003e\n\u003cp\u003e\nFor a sensible heat exchanger, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.ConstantEffectiveness\\\"\u003e\nBuildings.Fluid.HeatExchangers.ConstantEffectiveness\u003c/a\u003e\ninstead of this model.\n\u003c/p\u003e\n\u003cp\u003e\nThis model can only be used with medium models that define the integer constant\n\u003ccode\u003eWater\u003c/code\u003e which needs to be equal to the index of the water mass fraction\nin the species vector.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Rectangle(),Text(),Text()})"}},"Buildings.Fluid.Sources.TraceSubstancesFlowSource":{"name":"Buildings.Fluid.Sources.TraceSubstancesFlowSource","comment":"Source with mass flow that does not take part in medium mass balance (such as CO2)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Fluid.Sources.BaseClasses.PartialSource"}],"components":[{"className":"String","qualifiers":["parameter"],"name":"substanceName","comment":"Name of trace substance","value":"\"CO2\""},{"className":"Boolean","qualifiers":["parameter"],"name":"use_m_flow_in","comment":"Get the trace substance mass flow rate from the input connector","value":"false"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow","comment":"Fixed mass flow rate going out of the fluid port","value":"0","annotations":{"dialog":"Dialog(enable \u003d not use_m_flow_in)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"m_flow_in","comment":"Prescribed mass flow rate for extra property","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}],"conditionalClause":" if use_m_flow_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-141,-20},{-101,20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model can be used to inject trace substances into a system.\nThe model adds a mass flow rate to its port with a\ntrace substance concentration of \u003ci\u003e1\u003c/i\u003e.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nA typical use of this model is to add carbon dioxide to room air, since the\ncarbon dioxide concentration is typically so small that it need not be\nadded to the room mass balance, and since the mass flow rate can be\nmade small compared to the room volume if the medium that leaves this\ncomponent has a carbon dioxide concentration of \u003ci\u003e1\u003c/i\u003e.\nThe parameter \u003ccode\u003esubstanceName\u003c/code\u003e must be set to the name of the substance\nthat is injected into the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nNote however that mixing volumes from the package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes\\\"\u003eBuildings.Fluid.MixingVolumes\u003c/a\u003e\nallow to directly add a trace substance mass flow rate,\nwhich is more efficient than using this model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Ellipse(),Polygon(),Text(),Ellipse(),Text(),Text()})"}},"Buildings.Utilities.Psychrometrics.Functions.saturationPressureLiquid":{"name":"Buildings.Utilities.Psychrometrics.Functions.saturationPressureLiquid","comment":"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"TSat","comment":"Saturation temperature","modifications":[{"name":"displayUnit","value":"\"degC\""},{"name":"nominal","value":"300"}]},{"className":"Modelica.SIunits.AbsolutePressure","qualifiers":["output"],"name":"pSat","comment":"Saturation pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"nominal","value":"1000"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSaturation pressure of water above the triple point temperature computed from temperature\naccording to Wagner \u003ci\u003eet al.\u003c/i\u003e (1993). The range of validity is between\n\u003ci\u003e273.16\u003c/i\u003e and \u003ci\u003e373.16\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nWagner W., A. Saul, A. Pruss.\n \u003ci\u003eInternational equations for the pressure along the melting and along the sublimation curve of ordinary water substance\u003c/i\u003e,\nequation 3.5. 1993.\n\u003ca href\u003d\\\"http://www.nist.gov/data/PDFfiles/jpcrd477.pdf\\\"\u003e\nhttp://www.nist.gov/data/PDFfiles/jpcrd477.pdf\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.DC.Lines.TwoPortRCLine":{"name":"Buildings.Electrical.DC.Lines.TwoPortRCLine","comment":"Model of a two port DC resistance and capacity (T-model)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialTwoPortRLC","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal_n"},{"name":"terminal_p"},{"name":"L","qualifiers":["final"],"value":"0"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_C","comment":"Set to true to add a capacitance in the center of the line","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Model\", group \u003d \"Assumptions\")"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"Vc_start","comment":"Initial value of the voltage of the capacitance in the middle of the line","value":"V_nominal"},{"className":"Modelica.SIunits.Voltage","name":"Vc","comment":"Voltage of the capacitor","modifications":[{"name":"start","value":"Vc_start"},{"name":"stateSelect","value":"StateSelect.prefer"}]}],"annotations":{"diagram":"Diagram(graphics \u003d {Rectangle(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a series of two resistances and a capacitance that connect two DC interfaces.\nThis model can be used to represent a cable in a DC grid.\n\u003c/p\u003e\n\u003cp\u003e\nThe model represents the lumped resistances and capacity (T-model) as shown in the figure below.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/DC/Lines/twoPortRC.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nAs can be seen in the figure, the resistance \u003ci\u003eR\u003c/i\u003e is split in two halves\nand the capacitance is located in the center.\nThe capacitance in the center is optional and can be selected using the\nboolean flag \u003ccode\u003euse_C \u003d true\u003c/code\u003e. The model is either dynamic or static depending on the\npresence of the capacitive effect.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Rectangle()})"}},"Buildings.Media.Air.temperature_phX":{"name":"Buildings.Media.Air.temperature_phX","comment":"Compute temperature from specific enthalpy and mass fraction","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"AbsolutePressure","qualifiers":["input"],"name":"p","comment":"Pressure"},{"className":"SpecificEnthalpy","qualifiers":["input"],"name":"h","comment":"specific enthalpy"},{"className":"MassFraction","qualifiers":["array","input"],"name":"X","comment":"mass fractions of composition","arraySubscripts":"[:]"},{"className":"Temperature","qualifiers":["output"],"name":"T","comment":"temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nTemperature as a function of specific enthalpy and species concentration.\nThe pressure is input for compatibility with the medium models, but the temperature\nis independent of the pressure.\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Functions.bicubic":{"name":"Buildings.Utilities.Math.Functions.bicubic","comment":"Bicubic function","components":[{"className":"Real","qualifiers":["array","input"],"name":"a","comment":"Coefficients","arraySubscripts":"[10]"},{"className":"Real","qualifiers":["input"],"name":"x1","comment":"Independent variable"},{"className":"Real","qualifiers":["input"],"name":"x2","comment":"Independent variable"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis function computes\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n y \u003d a\u003csub\u003e1\u003c/sub\u003e\n    + a\u003csub\u003e2\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n    + a\u003csub\u003e4\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e5\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n    + a\u003csub\u003e6\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\n    + a\u003csub\u003e7\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e^3\n    + a\u003csub\u003e8\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e^3\n    + a\u003csub\u003e9\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e  x\u003csub\u003e2\u003c/sub\u003e\n    + a\u003csub\u003e1\u003c/sub\u003e0  x\u003csub\u003e1\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificEntropy":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificEntropy","comment":"Return the specific entropy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificEntropy"},{"nameOfExtendedClass":"Modelica.Icons.Function"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific entropy.\n\u003c/p\u003e\n\u003cp\u003e\nTo obtain the state for a given pressure, entropy and mass fraction, use\n\u003ca href\u003d\\\"modelica://Buildings.Media.Air.setState_psX\\\"\u003e\nBuildings.Media.Air.setState_psX\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.DirectCurrent.phasePowers_vi":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.phasePowers_vi","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.phasePowers_vi"}]},"Buildings.Fluid.SolarCollectors.Data.Concentrating.C_CogenraSunDeck":{"name":"Buildings.Fluid.SolarCollectors.Data.Concentrating.C_CogenraSunDeck","comment":"C - Cogenra Solar, Inc., SunDeck 1.0","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","modifications":[{"name":"ATyp","qualifiers":["final"],"value":"Types.Area.Aperture"},{"name":"A","qualifiers":["final"],"value":"4.302"},{"name":"V","qualifiers":["final"],"value":"4.4/(1000)"},{"name":"mperA_flow_nominal","qualifiers":["final"],"value":"0.0241"},{"name":"y_intercept","qualifiers":["final"],"value":"0.720"},{"name":"IAMDiff","qualifiers":["final"],"value":"0.133"},{"name":"C1","qualifiers":["final"],"value":"2.8312"},{"name":"C2","qualifiers":["final"],"value":"0.00119"},{"name":"B0","qualifiers":["final"],"value":"0"},{"name":"B1","qualifiers":["final"],"value":"0"},{"name":"mDry","qualifiers":["final"],"value":"484"},{"name":"slope","qualifiers":["final"],"value":"0"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n      \u003cp\u003e\n        Necessary data for calculating \u003ccode\u003edp_nominal\u003c/code\u003e, \u003ccode\u003eG_nominal\n        \u003c/code\u003e and \u003ccode\u003edT_nominal\u003c/code\u003e is not provided in the EN12975 test\n        data. All are left blank.\n      \u003c/p\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2011127A.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n      \u003cp\u003e\n        Necessary data for calculating \u003ccode\u003edp_nominal\u003c/code\u003e, \u003ccode\u003eG_nominal\n        \u003c/code\u003e and \u003ccode\u003edT_nominal\u003c/code\u003e is not provided in the EN12975 test\n        data. All are left blank.\n      \u003c/p\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2011127A.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Media.Air.thermalConductivity":{"name":"Buildings.Media.Air.thermalConductivity","comment":"Thermal conductivity of dry air as a polynomial in the temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.thermalConductivity"}]},"Buildings.Media.Air.specificEnthalpy_pTX":{"name":"Buildings.Media.Air.specificEnthalpy_pTX","comment":"Specific enthalpy","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p","comment":"Pressure"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Temperature"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["array","input"],"name":"X","comment":"Mass fractions of moist air","arraySubscripts":"[:]"},{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"Specific enthalpy at p, T, X"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nSpecific enthalpy as a function of temperature and species concentration.\nThe pressure is input for compatibility with the medium models, but the specific enthalpy\nis independent of the pressure.\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.pressure":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.pressure","comment":"Return the pressure","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.pressure"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Capacitive":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Capacitive","comment":"Model of a capacitive and resistive load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Loads.Capacitive","modifications":[{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a capacitive load. See\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Capacitive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Capacitive\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Text(),Rectangle(),Line(),Line(),Rectangle(),Rectangle(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers"}]},"Buildings.Fluid.Actuators.Dampers.MixingBox":{"name":"Buildings.Fluid.Actuators.Dampers.MixingBox","comment":"Outside air mixing box with interlocked air dampers","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.ActuatorSignal"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (port_a -\u003e port_b)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"VAVBoxExponential","name":"damOA","modifications":[{"name":"A","value":"AOut"},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"dp_nominal","value":"dpOut_nominal"},{"name":"dp_nominalIncludesDamper","value":"dp_nominalIncludesDamper"},{"name":"from_dp","value":"from_dp"},{"name":"linearized","value":"linearized"},{"name":"use_deltaM","value":"use_deltaM"},{"name":"deltaM","value":"deltaM"},{"name":"use_v_nominal","value":"use_v_nominal"},{"name":"v_nominal","value":"v_nominal"},{"name":"roundDuct","value":"roundDuct"},{"name":"ReC","value":"ReC"},{"name":"a","value":"a"},{"name":"b","value":"b"},{"name":"yL","value":"yL"},{"name":"yU","value":"yU"},{"name":"k0","value":"k0"},{"name":"k1","value":"k1"},{"name":"use_constant_density","value":"use_constant_density"},{"name":"allowFlowReversal","value":"allowFlowReversal"},{"name":"m_flow_nominal","value":"mOut_flow_nominal"},{"name":"filteredOpening","qualifiers":["final"],"value":"false"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-40,20},{-20,40}}))"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_deltaM","comment":"Set to true to use deltaM for turbulent transition, else ReC is used","value":"true"},{"className":"Real","qualifiers":["parameter"],"name":"deltaM","comment":"Fraction of nominal mass flow rate where transition to turbulent occurs","value":"0.3","annotations":{"dialog":"Dialog(enable \u003d use_deltaM)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_v_nominal","comment":"Set to true to use face velocity to compute area","value":"true"},{"className":"Modelica.SIunits.Velocity","qualifiers":["parameter"],"name":"v_nominal","comment":"Nominal face velocity","value":"1","annotations":{"dialog":"Dialog(enable \u003d use_v_nominal)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"roundDuct","comment":"Set to true for round duct, false for square cross section","value":"false","annotations":{"dialog":"Dialog(enable \u003d not use_deltaM)"}},{"className":"Real","qualifiers":["parameter"],"name":"ReC","comment":"Reynolds number where transition to turbulent starts","value":"4000","annotations":{"dialog":"Dialog(enable \u003d not use_deltaM)"}},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"AOut","comment":"Face area outside air damper","value":"mOut_flow_nominal/(rho_default)/(v_nominal)","annotations":{"dialog":"Dialog(enable \u003d not use_v_nominal)"}},{"className":"VAVBoxExponential","name":"damExh","comment":"Exhaust air damper","modifications":[{"name":"A","value":"AExh"},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow_nominal","value":"mExh_flow_nominal"},{"name":"dp_nominal","value":"dpExh_nominal"},{"name":"dp_nominalIncludesDamper","value":"dp_nominalIncludesDamper"},{"name":"from_dp","value":"from_dp"},{"name":"linearized","value":"linearized"},{"name":"use_deltaM","value":"use_deltaM"},{"name":"deltaM","value":"deltaM"},{"name":"use_v_nominal","value":"use_v_nominal"},{"name":"v_nominal","value":"v_nominal"},{"name":"roundDuct","value":"roundDuct"},{"name":"ReC","value":"ReC"},{"name":"a","value":"a"},{"name":"b","value":"b"},{"name":"yL","value":"yL"},{"name":"yU","value":"yU"},{"name":"k0","value":"k0"},{"name":"k1","value":"k1"},{"name":"use_constant_density","value":"use_constant_density"},{"name":"allowFlowReversal","value":"allowFlowReversal"},{"name":"filteredOpening","qualifiers":["final"],"value":"false"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-70},{-40,-50}}))"}},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"AExh","comment":"Face area exhaust air damper","value":"mExh_flow_nominal/(rho_default)/(v_nominal)","annotations":{"dialog":"Dialog(enable \u003d not use_v_nominal)"}},{"className":"VAVBoxExponential","name":"damRec","comment":"Recirculation air damper","modifications":[{"name":"A","value":"ARec"},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow_nominal","value":"mRec_flow_nominal"},{"name":"dp_nominal","value":"dpRec_nominal"},{"name":"dp_nominalIncludesDamper","value":"dp_nominalIncludesDamper"},{"name":"from_dp","value":"from_dp"},{"name":"linearized","value":"linearized"},{"name":"use_deltaM","value":"use_deltaM"},{"name":"deltaM","value":"deltaM"},{"name":"use_v_nominal","value":"use_v_nominal"},{"name":"v_nominal","value":"v_nominal"},{"name":"roundDuct","value":"roundDuct"},{"name":"ReC","value":"ReC"},{"name":"a","value":"a"},{"name":"b","value":"b"},{"name":"yL","value":"yL"},{"name":"yU","value":"yU"},{"name":"k0","value":"k0"},{"name":"k1","value":"k1"},{"name":"use_constant_density","value":"use_constant_density"},{"name":"allowFlowReversal","value":"allowFlowReversal"},{"name":"filteredOpening","qualifiers":["final"],"value":"false"}],"annotations":{"placement":"Placement(transformation(origin \u003d {30,0}, extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90))"}},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"ARec","comment":"Face area recirculation air damper","value":"mRec_flow_nominal/(rho_default)/(v_nominal)","annotations":{"dialog":"Dialog(enable \u003d not use_v_nominal)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"dp_nominalIncludesDamper","comment":"set to true if dp_nominal includes the pressure loss of the open damper","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mOut_flow_nominal","comment":"Mass flow rate outside air damper","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dpOut_nominal","comment":"Pressure drop outside air leg","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mRec_flow_nominal","comment":"Mass flow rate recirculation air damper","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dpRec_nominal","comment":"Pressure drop recirculation air leg","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mExh_flow_nominal","comment":"Mass flow rate exhaust air damper","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dpExh_nominal","comment":"Pressure drop exhaust air leg","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"from_dp","comment":"\u003d true, use m_flow \u003d f(dp) else dp \u003d f(m_flow)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearized","comment":"\u003d true, use linear relation between m_flow and dp for any flow rate","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_constant_density","comment":"Set to true to use constant density for flow friction","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Real","qualifiers":["parameter"],"name":"a","comment":"Coefficient a for damper characteristics","value":"-1.51","annotations":{"dialog":"Dialog(tab \u003d \"Damper coefficients\")"}},{"className":"Real","qualifiers":["parameter"],"name":"b","comment":"Coefficient b for damper characteristics","value":"0.105*90","annotations":{"dialog":"Dialog(tab \u003d \"Damper coefficients\")"}},{"className":"Real","qualifiers":["parameter"],"name":"yL","comment":"Lower value for damper curve","value":"15/(90)","annotations":{"dialog":"Dialog(tab \u003d \"Damper coefficients\")"}},{"className":"Real","qualifiers":["parameter"],"name":"yU","comment":"Upper value for damper curve","value":"55/(90)","annotations":{"dialog":"Dialog(tab \u003d \"Damper coefficients\")"}},{"className":"Real","qualifiers":["parameter"],"name":"k0","comment":"Flow coefficient for y\u003d0, k0 \u003d pressure drop divided by dynamic pressure","value":"1E6","annotations":{"dialog":"Dialog(tab \u003d \"Damper coefficients\")"}},{"className":"Real","qualifiers":["parameter"],"name":"k1","comment":"Flow coefficient for y\u003d1, k1 \u003d pressure drop divided by dynamic pressure","value":"0.45","annotations":{"dialog":"Dialog(tab \u003d \"Damper coefficients\")"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_Out","comment":"Fluid connector a (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"start","value":"0"},{"name":"min","value":"if allowFlowReversal then -Constants.inf else 0"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,50},{-90,70}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_Exh","comment":"Fluid connector b (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"start","value":"0"},{"name":"max","value":"if allowFlowReversal then Constants.inf else 0"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-90,-70},{-110,-50}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_Ret","comment":"Fluid connector a (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"start","value":"0"},{"name":"min","value":"if allowFlowReversal then -Constants.inf else 0"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{110,-70},{90,-50}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_Sup","comment":"Fluid connector b (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"start","value":"0"},{"name":"max","value":"if allowFlowReversal then Constants.inf else 0"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{110,50},{90,70}}))"}},{"className":"Modelica.Blocks.Sources.Constant","name":"uni","comment":"Unity signal","modifications":[{"name":"k","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-90,-4},{-70,16}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"add","comment":"Adder","modifications":[{"name":"k2","value":"-1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-10},{-20,10}}))"}}],"classes":[{"name":"Buildings.Fluid.Actuators.Dampers.MixingBox.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of an outside air mixing box with air dampers.\nSet \u003ccode\u003ey\u003d0\u003c/code\u003e to close the outside air and exhast air dampers.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003edp_nominalIncludesDamper\u003dtrue\u003c/code\u003e, then the parameter \u003ccode\u003edp_nominal\u003c/code\u003e\nis equal to the pressure drop of the damper plus the fixed flow resistance at the nominal\nflow rate.\nIf \u003ccode\u003edp_nominalIncludesDamper\u003dfalse\u003c/code\u003e, then \u003ccode\u003edp_nominal\u003c/code\u003e\ndoes not include the flow resistance of the air damper.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Polygon(),Polygon(),Rectangle(),Polygon(),Text(),Rectangle(),Polygon(),Polygon(),Rectangle(),Rectangle(),Line(),Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.saturationPressure":{"name":"Buildings.Media.Specialized.Air.PerfectGas.saturationPressure","comment":"Saturation curve valid for 223.16 \u003c\u003d T \u003c\u003d 373.16 (and slightly outside with less accuracy)","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.saturationPressure"}]},"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic":{"name":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","comment":"Thermal properties of opaque constructions","components":[{"className":"Integer","qualifiers":["parameter"],"name":"nLay","comment":"Number of layers","modifications":[{"name":"min","value":"1"}]},{"className":"Buildings.HeatTransfer.Data.BaseClasses.Material","qualifiers":["array","parameter"],"name":"material","comment":"Layer by layer declaration of material, starting from outside to room-side","arraySubscripts":"[nLay]","annotations":{"placement":"Placement(transformation(extent \u003d {{60,60},{80,80}}))"}},{"className":"Real","qualifiers":["final","parameter"],"name":"R","comment":"Thermal resistance per unit area","value":"sum(material[i].Ri in 1:nLay)","modifications":[{"name":"unit","value":"\"m2.K/W\""}]},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIR_a","comment":"Infrared absorptivity of surface a (usually outside-facing surface)","value":"0.9"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIR_b","comment":"Infrared absorptivity of surface b (usually room-facing surface)","value":"0.9"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absSol_a","comment":"Solar absorptivity of surface a (usually outside-facing surface)","value":"0.5"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absSol_b","comment":"Solar absorptivity of surface b (usually room-facing surface)","value":"0.5"},{"className":"Buildings.HeatTransfer.Types.SurfaceRoughness","qualifiers":["parameter"],"name":"roughness_a","comment":"Exterior surface roughness","value":"Buildings.HeatTransfer.Types.SurfaceRoughness.Medium"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nGeneric record with material definitions for constructions\nwith one or more layers of material.\nBy convention, \u003ccode\u003elayer[1]\u003c/code\u003e is facing the outside, and the last\nlayer is facing the room-side.\nThis is the same convention as is used in EnergyPlus and in Window 6.\n\n\u003cp\u003e\nThe parameters \u003ccode\u003eabsIR_a\u003c/code\u003e and \u003ccode\u003eabsIR_b\u003c/code\u003e\nare used to compute infrared heat radiation (in the infrared spectrum).\nThe parameters \u003ccode\u003eabsSol_a\u003c/code\u003e and \u003ccode\u003eabsSol_b\u003c/code\u003e\nare used to compute solar heat radiation (in the solar spectrum).\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eroughness_a\u003c/code\u003e is used if the convective heat transfer\ncoefficient of the exterior surface is computed based on the wind-speed, wind-direction\nand temperature difference. See\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Exterior\\\"\u003e\nBuildings.HeatTransfer.Convection.Exterior\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Text(),Rectangle()})"}},"Buildings.Utilities.Math.Functions.trapezoidalIntegration":{"name":"Buildings.Utilities.Math.Functions.trapezoidalIntegration","comment":"Integration using the trapezoidal rule","components":[{"className":"Integer","qualifiers":["input"],"name":"N","comment":"Number of integrand points"},{"className":"Real","qualifiers":["array","input"],"name":"f","comment":"Integrands","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["input"],"name":"deltaX","comment":"Width of interval for Trapezoidal integration"},{"className":"Real","qualifiers":["output"],"name":"result","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes a definite integral using the trapezoidal rule.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.DC.Sources.ConstantVoltage":{"name":"Buildings.Electrical.DC.Sources.ConstantVoltage","comment":"Model of a constant DC voltage source","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Source","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal"},{"name":"potentialReference","qualifiers":["final"],"value":"true"},{"name":"definiteReference","qualifiers":["final"],"value":"false"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"Value of constant voltage","modifications":[{"name":"start","value":"1"}]},{"className":"Modelica.Electrical.Analog.Interfaces.NegativePin","name":"n","comment":"Negative pin","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a simple DC voltage source with constant voltage.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Line(),Line(),Text(),Text(),Text()})"}},"Buildings.Electrical.DC.Sources.PVSimple":{"name":"Buildings.Electrical.DC.Sources.PVSimple","comment":"Simple PV model","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialPV","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nThis model computes the power as\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003dA \u0026nbsp; f\u003csub\u003eact\u003c/sub\u003e \u0026nbsp; \u0026eta; \u0026nbsp; G\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eA\u003c/i\u003e is the panel area, \u003ci\u003ef\u003csub\u003eact\u003c/sub\u003e\u003c/i\u003e is the fraction of the aperture area,\n\u003ci\u003e\u0026eta;\u003c/i\u003e is the panel efficiency and \u003ci\u003eG\u003c/i\u003e is the total solar irradiation.\nThis power is equal to \u003ci\u003eP \u003d v \u0026nbsp; i\u003c/i\u003e, where \u003ci\u003ev\u003c/i\u003e is the voltage across the panel and\n\u003ci\u003ei\u003c/i\u003e is the current that flows through the panel.\n\u003c/p\u003e\n\u003cp\u003e\nTo avoid a large voltage drop the panel electric connector, it is recommended to use this model together\nwith a model that prescribes the voltage.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.DC.Sources.Examples.PVSimple\\\"\u003e\nBuildings.Electrical.DC.Sources.Examples.PVSimple\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e This model takes as input the total solar irradiation on the panel. This has to be\ncomputed converting the incoming radiation to take tilt and azimuth into account.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Line(),Text(),Text()})"}},"Buildings.Electrical.PhaseSystems.TwoConductor.j":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.j","comment":"Direct current has no complex component","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.j"}]},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.ReferenceAngle.equalityConstraint":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.ReferenceAngle.equalityConstraint","comment":"Assert that angles are equal","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"ReferenceAngle","qualifiers":["array","input"],"name":"theta1","arraySubscripts":"[:]"},{"className":"ReferenceAngle","qualifiers":["array","input"],"name":"theta2","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["array","output"],"name":"residue","arraySubscripts":"[0]"}]},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.molarMass":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.molarMass","comment":"Return the molar mass","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.molarMass"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the molar mass,\nwhich is assumed to be constant.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACACConverter":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACACConverter","comment":"AC AC converter three phase balanced systems","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Conversion.ACACConverter","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a simplified conversion between two AC\nthree-phase balanced systems. The conversion losses are represented by a\nconstant efficiency \u003ci\u003e\u0026eta;\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACConverter\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACConverter\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_1975Roof":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_1975Roof","comment":"Construction model for a roof minimally compliant with ASHRAE 90.1-1975.\n      Used in test cells X1A and X1B","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.GypsumBoard(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a roof which is minimally compliant with ASHRAE 90.1-1975. It is used\n    to model the roof in test bed X1.\n    \u003c/p\u003e\n    \u003cp\u003e\n    This model is not currently completed. For more information see the future work list at\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n    Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e.\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a roof which is minimally compliant with ASHRAE 90.1-1975. It is used\n    to model the roof in test bed X1.\n    \u003c/p\u003e\n    \u003cp\u003e\n    This model is not currently completed. For more information see the future work list at\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n    Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e.\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.product":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.product","comment":"Multiply two vectors","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"x","arraySubscripts":"[n]"},{"className":"Real","qualifiers":["array","input"],"name":"y","arraySubscripts":"[n]"},{"className":"Real","qualifiers":["array","output"],"name":"z","arraySubscripts":"[n]"}]},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_pTX":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_pTX","comment":"Return the thermodynamic state as function of p, T and composition X or Xi","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_pTX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the thermodynamic state for a given pressure,\ntemperature and composition.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.Shades.Generic":{"name":"Buildings.HeatTransfer.Data.Shades.Generic","comment":"Thermal properties of window shades","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["parameter"],"name":"tauSol_a","comment":"Solar transmissivity of shade surface a (surface that faces the outside or the room)","value":"0.1"},{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["parameter"],"name":"tauSol_b","comment":"Solar transmissivity of shade surface b (surface that faces the glass)","value":"0.1"},{"className":"Modelica.SIunits.ReflectionCoefficient","qualifiers":["parameter"],"name":"rhoSol_a","comment":"Solar reflection coefficient of shade surface a (surface that faces the outside or the room)","value":"0.8"},{"className":"Modelica.SIunits.ReflectionCoefficient","qualifiers":["parameter"],"name":"rhoSol_b","comment":"Solar reflection coefficient of shade surface b (surface that faces the glass)","value":"0.8"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIR_a","comment":"Infrared absorptivity of surface a (surface that faces the outside or the room)","value":"0.84"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIR_b","comment":"Infrared absorptivity of surface b (surface that faces the glass)","value":"0.84"},{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["parameter"],"name":"tauIR_a","comment":"Infrared transmissivity of surface a (surface that faces the outside or the room)","value":"0"},{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["parameter"],"name":"tauIR_b","comment":"Infrared transmissivity of surface b (surface that faces the glass)","value":"0"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nRecords that implements thermophysical properties for window shades.\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Biquadratic":{"name":"Buildings.Utilities.Math.Biquadratic","comment":"Biquadratic function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SI2SO"}],"components":[{"className":"Real","qualifiers":["array","parameter"],"name":"a","comment":"Coefficients","arraySubscripts":"[6]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block computes\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  y \u003d   a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\n        + a\u003csub\u003e3\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n        + a\u003csub\u003e4\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e5\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n        + a\u003csub\u003e6\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Fluid.Chillers.Data.ElectricEIR":{"name":"Buildings.Fluid.Chillers.Data.ElectricEIR"},"Buildings.Rooms.Constructions.Construction":{"name":"Buildings.Rooms.Constructions.Construction","comment":"Model for an opaque construction that has no window","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.Constructions.BaseClasses.PartialConstruction","modifications":[{"name":"AOpa","qualifiers":["final"],"value":"A"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-300,-300},{300,300}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\nThis model is used to compute heat transfer through opaque constructions inside the\nroom model.\nThe model uses the record \u003ccode\u003elayers\u003c/code\u003e to access the material properties\nof the opaque construction. The heat transfer is computed in the instance\n\u003ccode\u003eopa\u003c/code\u003e, which uses the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Conduction.MultiLayer\\\"\u003e\nBuildings.HeatTransfer.Conduction.MultiLayer\u003c/a\u003e.\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-300,-300},{300,300}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Utilities.Psychrometrics.WetBul_pTX":{"name":"Buildings.Utilities.Psychrometrics.WetBul_pTX","comment":"Block to compute the wet bulb condition for given dry bulb temperature and humidity","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TDryBul","comment":"Dry bulb temperature","modifications":[{"name":"start","value":"303"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"XDryBul","comment":"Dry bulb temperature","modifications":[{"name":"start","value":"0.01"},{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p","comment":"Pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-90},{-100,-70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"TWetBul","comment":"Wet bulb temperature","modifications":[{"name":"start","value":"293"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,70},{120,90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"XWetBul","comment":"Water vapor mass fraction at wet bulb temperature","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"start","value":"0.012"},{"name":"unit","value":"\"1\""},{"name":"nominal","value":"0.01"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock to compute the temperature and mass fraction at the wet bulb condition\nfor a given dry bulb state.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Text(),Line(),Line(),Line(),Line(),Polygon(),Text()})"}},"Buildings.Airflow.Multizone.Orifice":{"name":"Buildings.Airflow.Multizone.Orifice","comment":"Orifice","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Airflow.Multizone.BaseClasses.PowerLawResistance","modifications":[{"name":"m","value":"0.5"},{"name":"k","value":"CD*A*sqrt(2.0/(rho_default))"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"CD","comment":"|Orifice characteristics|Discharge coefficient","value":"0.65"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes the mass flow rate and pressure difference relation\nof an orifice in the form\n\u003c/p\u003e\n\u003cpre\u003e\n    V_flow \u003d k * dp^m,\n\u003c/pre\u003e\n\u003cp\u003e\nwhere \u003ccode\u003ek\u003c/code\u003e is a variable and\n\u003ccode\u003em\u003c/code\u003e a parameter. For turbulent flow, set \u003ccode\u003em\u003d1/2\u003c/code\u003e and\nfor laminar flow, set \u003ccode\u003em\u003d1\u003c/code\u003e.\nLarge openings are characterized by values close to \u003ccode\u003e0.5\u003c/code\u003e,\nwhile values near \u003ccode\u003e0.65\u003c/code\u003e have been found for small\ncrack-like openings (Dols and Walton, 2002).\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\nW. Stuart Dols and George N. Walton, \u003ci\u003eCONTAMW 2.0 User Manual,\nMultizone Airflow and Contaminant Transport Analysis Software\u003c/i\u003e,\nBuilding and Fire Research Laboratory,\nNational Institute of Standards and Technology,\nTech. Report NISTIR 6921,\nNovember, 2002.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Text()})"}},"Buildings.Fluid.Actuators.Dampers.MixingBoxMinimumFlow":{"name":"Buildings.Fluid.Actuators.Dampers.MixingBoxMinimumFlow","comment":"Outside air mixing box with parallel damper for minimum outside air flow rate","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.Dampers.MixingBox"}],"components":[{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"AOutMin","comment":"Face area minimum outside air damper"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mOutMin_flow_nominal","comment":"Mass flow rate minimum outside air damper","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dpOutMin_nominal","comment":"Pressure drop minimum outside air leg","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Real","qualifiers":["parameter"],"name":"yOutMin_start","comment":"Initial value of signal for minimum outside air damper","value":"y_start","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Filtered opening\", enable \u003d filteredOpening)"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_OutMin","comment":"Fluid connector a (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"start","value":"0"},{"name":"min","value":"if allowFlowReversal then -Constants.inf else 0"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,90},{-90,110}}), iconTransformation(extent \u003d {{-110,90},{-90,110}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"yOutMin","comment":"Damper position minimum outside air (0: closed, 1: open)","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {-60,120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {-60,120}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"yOutMin_actual","comment":"Actual valve position","annotations":{"placement":"Placement(transformation(extent \u003d {{-52,58},{-32,78}}), iconTransformation(extent \u003d {{-52,58},{-32,78}}))"}},{"className":"Buildings.Fluid.Actuators.Dampers.VAVBoxExponential","name":"damOAMin","comment":"Damper for minimum outside air intake","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"dp_nominalIncludesDamper","value":"dp_nominalIncludesDamper"},{"name":"from_dp","value":"from_dp"},{"name":"linearized","value":"linearized"},{"name":"use_deltaM","value":"use_deltaM"},{"name":"deltaM","value":"deltaM"},{"name":"use_v_nominal","value":"use_v_nominal"},{"name":"v_nominal","value":"v_nominal"},{"name":"roundDuct","value":"roundDuct"},{"name":"ReC","value":"ReC"},{"name":"a","value":"a"},{"name":"b","value":"b"},{"name":"yL","value":"yL"},{"name":"yU","value":"yU"},{"name":"k0","value":"k0"},{"name":"k1","value":"k1"},{"name":"use_constant_density","value":"use_constant_density"},{"name":"allowFlowReversal","value":"allowFlowReversal"},{"name":"m_flow_nominal","value":"mOutMin_flow_nominal"},{"name":"dp_nominal","value":"dpOutMin_nominal"},{"name":"A","value":"AOutMin"},{"name":"filteredOpening","qualifiers":["final"],"value":"false"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{48,32},{68,52}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of an outside air mixing box with air dampers and a flow path for the minimum outside air flow rate.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003edp_nominalIncludesDamper\u003dtrue\u003c/code\u003e, then the parameter \u003ccode\u003edp_nominal\u003c/code\u003e\nis equal to the pressure drop of the damper plus the fixed flow resistance at the nominal\nflow rate.\nIf \u003ccode\u003edp_nominalIncludesDamper\u003dfalse\u003c/code\u003e, then \u003ccode\u003edp_nominal\u003c/code\u003e\ndoes not include the flow resistance of the air damper.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Rectangle(),Rectangle(),Polygon()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phaseVoltages":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phaseVoltages","comment":"Return phase to neutral voltages","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phaseVoltages"}]},"Buildings.UsersGuide.ReleaseNotes.Version_0_7_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_7_0","comment":"Version 0.7.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nUpdated library from Modelica_Fluid to Modelica.Fluid 1.0\n\u003cli\u003e\nMerged sensor and source models from Modelica.Fluid to Buildings.Fluid.\n\u003c/li\u003e\n\u003cli\u003e Added sensor for sensible and latent enthalpy flow rate,\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.SensibleEnthalpyFlowRate\\\"\u003e\nBuildings.Fluid.Sensors.SensibleEnthalpyFlowRate\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.LatentEnthalpyFlowRate\\\"\u003e\nBuildings.Fluid.Sensors.LatentEnthalpyFlowRate\u003c/a\u003e.\nThese sensors are needed, for example, to interface air-conditioning\nsystems that are modeled with Modelica with the Building Controls\nVirtual Test Bed.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phaseCurrents":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phaseCurrents","comment":"Return phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phaseCurrents"}]},"Buildings.HeatTransfer.Radiosity.RadiositySplitter":{"name":"Buildings.HeatTransfer.Radiosity.RadiositySplitter","comment":"Splits the incoming radiosity into two flows based on an input signal","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Interfaces.RadiosityInflow","name":"JIn","comment":"Inflowing radiosity","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,50},{-100,70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"u","comment":"u times incoming radiosity","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-80},{-100,-40}}), iconTransformation(extent \u003d {{-140,-80},{-100,-40}}))"}},{"className":"Interfaces.RadiosityOutflow","name":"JOut_1","comment":"u times incoming radiosity","annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Interfaces.RadiosityOutflow","name":"JOut_2","comment":"(1-u) times incoming radiosity","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-70},{120,-50}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis blocks splits the incoming radiosity into two fluxes according to\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  J\u003csub\u003eOut,1\u003c/sub\u003e \u003d u J\u003csub\u003eIn\u003c/sub\u003e,\u003cbr/\u003e\n  J\u003csub\u003eOut,2\u003c/sub\u003e \u003d (1-u)  J\u003csub\u003eIn\u003c/sub\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis block may be used to split the radiosity flux into a fraction that\nstrikes the shaded part of a window, and a fraction that strikes the\nnon-shaded part.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Line(),Line()})"}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorUninsulated":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorUninsulated","comment":"Model of an uninsulated exterior door","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"2"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of an uninsulated exterior door. It is used in all\n    FLEXLAB electrical room models.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of an uninsulated exterior door. It is used in all\n    FLEXLAB electrical room models.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Electrical.Types.CharacteristicResistance":{"name":"Buildings.Electrical.Types.CharacteristicResistance","comment":"Resistance per unit length","superClasses":[{"nameOfExtendedClass":"Real","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Resistance per meter\""},{"name":"unit","qualifiers":["final"],"value":"\"Ohm/m\""}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type defines the resistance per unit length and it typically used\nto describe physical properties of the line cables.\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type defines the resistance per unit length and it typically used\nto describe physical properties of the line cables.\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phase":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phase","comment":"Return phase","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phase"}]},"Buildings.Utilities.Math.Functions.quadraticLinear":{"name":"Buildings.Utilities.Math.Functions.quadraticLinear","comment":"Function that is quadratic in first argument and linear in second argument","components":[{"className":"Real","qualifiers":["array","input"],"name":"a","comment":"Coefficients","arraySubscripts":"[6]"},{"className":"Real","qualifiers":["input"],"name":"x1","comment":"Independent variable for quadratic part"},{"className":"Real","qualifiers":["input"],"name":"x2","comment":"Independent variable for linear part"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis function computes\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  y \u003d   a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\n        + a\u003csub\u003e3\u003c/sub\u003e x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n        + (a\u003csub\u003e4\u003c/sub\u003e + a\u003csub\u003e5\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\n        + a\u003csub\u003e6\u003c/sub\u003e x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e)  x\u003csub\u003e2\u003c/sub\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.FMI.Interfaces.MassFractionConnector":{"name":"Buildings.Fluid.FMI.Interfaces.MassFractionConnector","comment":"Mass fraction of water vapor per kg total mass as a connector","superClasses":[{"nameOfExtendedClass":"Modelica.SIunits.MassFraction","annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, initialScale \u003d 0.2, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with variable of type \u003ccode\u003eModelica.SIunits.MassFraction\u003c/code\u003e.\nNote that the mass fraction is in kg water vapor per total mass\nof air, rathern than per kg of dry air.\n\u003c/p\u003e\n\u003cp\u003e\nThis connector has been implemented to conditionally remove\nthe mass fraction if the medium has only one species.\nWhile this could have been done using a vector of mass fractions\nwith zero length, as is used in fluid connectors,\nthis implemantation uses a scalar to avoid vectorized inputs\nand outputs of FMUs.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics, coordinateSystem(extent \u003d {{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio \u003d true, initialScale \u003d 0.2))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, initialScale \u003d 0.2, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with variable of type \u003ccode\u003eModelica.SIunits.MassFraction\u003c/code\u003e.\nNote that the mass fraction is in kg water vapor per total mass\nof air, rathern than per kg of dry air.\n\u003c/p\u003e\n\u003cp\u003e\nThis connector has been implemented to conditionally remove\nthe mass fraction if the medium has only one species.\nWhile this could have been done using a vector of mass fractions\nwith zero length, as is used in fluid connectors,\nthis implemantation uses a scalar to avoid vectorized inputs\nand outputs of FMUs.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics, coordinateSystem(extent \u003d {{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio \u003d true, initialScale \u003d 0.2))"}},"Buildings.Electrical.Interfaces.CapacitiveLoad":{"name":"Buildings.Electrical.Interfaces.CapacitiveLoad","comment":"Partial model of a capacitive load","qualifiers":["model","partial"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Load"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_pf_in","comment":"If true, the power factor is defined by an input","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.8","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in","comment":"Power factor","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,60}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,60}))"}}],"classes":[{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a generic capacitive load. This model is an extension of the base load model\n\u003ca href\u003d\\\"Buildings.Electrical.Interfaces.PartialLoad\\\"\u003eBuildings.Electrical.Interfaces.PartialLoad\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model assumes a fixed power factor \u003ccode\u003epf\u003c/code\u003e when the flag \u003ccode\u003euse_pf_in \u003d false\u003c/code\u003e\notherwise it uses the power factor specified by the input \u003ccode\u003epf_in\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eThe power factor (either the input or the parameter) is used to compute the reactive power\n\u003ccode\u003eQ\u003c/code\u003e given the active power \u003ccode\u003eP\u003c/code\u003e\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nQ \u003d - P * tan(arccos(pf))\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.gasConstant":{"name":"Buildings.Media.Air.gasConstant","comment":"Return ideal gas constant as a function from thermodynamic state, only valid for phi\u003c1","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.gasConstant"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThe ideal gas constant for moist air is computed from \u003ca href\u003d\\\"modelica://Modelica.Media.Air.MoistAir.ThermodynamicState\\\"\u003ethermodynamic state\u003c/a\u003e assuming that all water is in the gas phase.\n\u003c/html\u003e\""}},"Buildings.UsersGuide.Conventions":{"name":"Buildings.UsersGuide.Conventions","comment":"Conventions","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Information"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis library follows the conventions of the\n\u003ca href\u003d\\\"modelica://Modelica.UsersGuide.Conventions\\\"\u003e\nModelica Standard Library\u003c/a\u003e, which are as follows:\n\u003c/p\u003e\n\n\u003cp\u003e\nNote, in the html documentation of any Modelica library,\nthe headings \\\"h1, h2, h3\\\" should not be used,\nbecause they are utilized from the automatically generated\ndocumentation and headings.\nAdditional headings in the html documentation should start with \\\"h4\\\".\n\u003c/p\u003e\n\n\u003cp\u003e\nIn the Modelica package the following conventions are used:\n\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Class and instance names are written in upper and lower case\n  letters, e.g., \\\"ElectricCurrent\\\". An underscore is only used\n  at the end of a name to characterize a lower or upper index,\n  e.g., \\\"pin_a\\\".\u003c/li\u003e\n\n\u003cli\u003e \u003cb\u003eClass names\u003c/b\u003e start always with an upper case letter.\u003c/li\u003e\n\n\u003cli\u003e \u003cb\u003eInstance names\u003c/b\u003e, i.e., names of component instances and\n  of variables (with the exception of constants),\n  start usually with a lower case letter with only\n  a few exceptions if this is common sense\n  (such as \\\"T\\\" for a temperature variable).\u003c/li\u003e\n\n\u003cli\u003e \u003cb\u003eConstant names\u003c/b\u003e, i.e., names of variables declared with the\n  \\\"constant\\\" prefix, follow the usual naming conventions\n  (\u003d upper and lower case letters) and start usually with an\n  upper case letter, e.g. UniformGravity, SteadyState.\u003c/li\u003e\n\u003cli\u003e The two connectors of a domain that have identical declarations\n  and different icons are usually distinguished by \\\"_a\\\", \\\"_b\\\"\n  or \\\"_p\\\", \\\"_n\\\", e.g., Flange_a/Flange_b, HeatPort_a, HeatPort_b.\u003c/li\u003e\n\n\u003cli\u003e The \u003cb\u003einstance name\u003c/b\u003e of a component is always displayed in its icon\n  (\u003d text string \\\"%name\\\") in \u003cb\u003eblue color\u003c/b\u003e. A connector class has the instance\n  name definition in the diagram layer and not in the icon layer.\n  \u003cb\u003eParameter\u003c/b\u003e values, e.g., resistance, mass, gear ratio, are displayed\n  in the icon in \u003cb\u003eblack color\u003c/b\u003e in a smaller font size as the instance name.\n \u003c/li\u003e\n\n\u003cli\u003e A main package has usually the following subpackages:\n  \u003cul\u003e\n  \u003cli\u003e\u003cb\u003eUsersGuide\u003c/b\u003e containing an overall description of the library\n   and how to use it.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eExamples\u003c/b\u003e containing models demonstrating the\n   usage of the library.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eInterfaces\u003c/b\u003e containing connectors and partial\n   models.\u003c/li\u003e\n  \u003cli\u003e\u003cb\u003eTypes\u003c/b\u003e containing type, enumeration and choice\n   definitions.\u003c/li\u003e\n  \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\nThe \u003ccode\u003eBuildings\u003c/code\u003e library uses the following conventions\nin addition to the ones of the Modelica Standard Library:\n\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\nThe nomenclature used in the package\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics\\\"\u003e\nBuildings.Utilities.Psychrometrics\u003c/a\u003e\n is as follows,\n\u003cul\u003e\n\u003cli\u003e\nUppercase \u003ccode\u003eX\u003c/code\u003e denotes mass fraction per total mass.\n\u003c/li\u003e\n\u003cli\u003e\nLowercase \u003ccode\u003ex\u003c/code\u003e denotes mass fraction per mass of dry air.\n\u003c/li\u003e\n\u003cli\u003e\nThe notation \u003ccode\u003ez_xy\u003c/code\u003e denotes that the function or block has output\n\u003ccode\u003ez\u003c/code\u003e and inputs \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe symbol \u003ccode\u003epW\u003c/code\u003e denotes water vapor pressure, \u003ccode\u003eTDewPoi\u003c/code\u003e\ndenotes dew point temperature, \u003ccode\u003eTWetBul\u003c/code\u003e denotes wet bulb temperature,\nand \u003ccode\u003eTDryBul\u003c/code\u003e (or simply \u003ccode\u003eT\u003c/code\u003e) denotes dry bulb temperature.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cli\u003e\nNames of models, blocks and packages should start with an upper-case letter and be a\nnoun or a noun with a combination of adjectives and nouns.\nUse camel-case notation to combine multiple words, such as \u003ccode\u003eHeatTransfer\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nParameter and variables names are usually a character, such as \u003ccode\u003eT\u003c/code\u003e\nfor temperature and \u003ccode\u003ep\u003c/code\u003e for pressure, or a combination of the first three\ncharacters of a word, such as \u003ccode\u003ehigPreSetPoi\u003c/code\u003e for high pressure set point.\n\u003c/li\u003e\n\u003cli\u003e\nComments should be added to each class (package, model, function etc.).\nThe first character should be upper case.\nFor one-line comments of parameters, variables and classes, no period should be used at the end of the comment.\n\u003c/li\u003e\n\u003cli\u003e\nWhere applicable, all variable must have units, also if the variable is protected.\n\u003c/li\u003e\n\u003cli\u003e\nTo indicate that a class (i.e., a package, model, block etc.) has not been extensively tested or validated,\nits class name ends with the string \u003ccode\u003eBeta\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.Grids.IEEE_34_AL120":{"name":"Buildings.Electrical.Transmission.Grids.IEEE_34_AL120","comment":"Grid model inspired to the IEEE 34 Node test feeder","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.Grids.PartialGrid","modifications":[{"name":"nNodes","value":"34"},{"name":"nLinks","value":"33"},{"name":"l","value":"[48; 16; 16; 40; 32; 16; 16; 16; 16; 16; 16; 32; 32; 16; 32; 32; 32; 48; 48; 32; 32; 16; 16; 16; 16; 16; 32; 32; 16; 32; 16; 16; 16]"},{"name":"fromTo","value":"[[1, 2]; [2, 3]; [3, 4]; [4, 5]; [4, 6]; [6, 7]; [7, 8]; [9, 26]; [10, 26]; [11, 9]; [12, 11]; [13, 10]; [14, 10]; [15, 14]; [16, 15]; [17, 27]; [18, 27]; [19, 31]; [20, 31]; [21, 32]; [22, 32]; [23, 20]; [24, 23]; [25, 24]; [26, 8]; [27, 29]; [28, 16]; [29, 16]; [30, 17]; [31, 17]; [32, 19]; [33, 22]; [34, 18]]"},{"name":"cables"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e This model represents a grid inspired by the IEEE 34 node test feeder.\nIn this example, the cable types and lengths have been modified in order to\nrepresent a typical distribution feeder.\u003c/p\u003e\n\u003cp\u003eThe following three type of cables are in the grid: AL120, AL70, and Al35.\n\u003c/p\u003e\n\u003cp\u003e\u003cimg alt\u003d\\\"alt-image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/Transmission/Grids/IEEE_34.png\\\"/\u003e\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Line_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Line_N","comment":"Model of an electrical line with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N"},{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialBaseLine","modifications":[{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]},{"name":"commercialCable","value":"Buildings.Electrical.Transmission.Functions.selectCable_low(P_nominal,V_nominal)"}]}],"components":[{"className":"OnePhase.Lines.TwoPortRL","name":"phase1","comment":"Impedance line 1","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"mode","qualifiers":["final"],"value":"modelMode"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase2","comment":"Impedance line 1","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"mode","qualifiers":["final"],"value":"modelMode"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase3","comment":"Impedance line 1","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"mode","qualifiers":["final"],"value":"modelMode"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"neutral","comment":"Impedance of the neutral cable","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"mode","qualifiers":["final"],"value":"modelMode"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-70},{10,-50}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents an AC three-phase unbalanced cable with\nneutral connection. The model is based on\n\u003ca href\u003d\\\"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC\u003c/a\u003e\nand provides functionalities to parametrize the values of \u003ci\u003eR\u003c/i\u003e, \u003ci\u003eL\u003c/i\u003e and \u003ci\u003eC\u003c/i\u003e\nusing either commercial cables or default values.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Rectangle(),Ellipse(),Line(),Line(),Line(),Line()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_1_3_build1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_3_build1","comment":"Version 1.3 build 1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIn version 1.3 build 1, models for direct evaporative cooling coils with multiple stages or with\na variable speed compressor have been added.\nThis version also contains improvements to the fan and pump models to better treat zero mass flow rate.\nVarious other improvements have been made to improve the numerics and to use consistent variable names.\nA detailed list of changes is shown below.\n\u003c!-- New libraries --\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\"\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DXCoils\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eLibrary with direct evaporative cooling coils.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- New components for existing libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Examples\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.ChillerPlant.DataCenterContinuousTimeControl\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded chilled water plant model with continuous time control that\n                       replaces the discrete time control in\n                       \u003ccode\u003eBuildings.Examples.ChillerPlant.DataCenterDiscreteTimeControl\u003c/code\u003e.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.Functions.X_pSatpphi\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFunction that computes moisture concentration based\n                       on saturation pressure, total pressure and relative\n                       humidity.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eBlock that computes the wet bulb temperature for given\n                     dry bulb temperature, relative humidity and atmospheric pressure.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.WetBul_pTX\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eBlock that computes the temperature and mass fraction\n                       at the wet bulb state for given dry bulb temperature,\n                       species concentration and atmospheric pressure.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Backward compatbile changes --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded computation of the wet bulb temperature.\n                       Computing the wet bulb temperature introduces a nonlinear\n                       equation. As we have not observed an increase in computing time\n                       because of computing the wet bulb temperature, it is computed\n                       by default. By setting the parameter\n                       \u003ccode\u003ecomputeWetBulbTemperature\u003dfalse\u003c/code\u003e, the computation of the\n                       wet bulb temperature can be removed.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Controls\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.SetPoints.OccupancySchedule\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded \u003ccode\u003epre\u003c/code\u003e operator and relaxed tolerance in \u003ccode\u003eassert\u003c/code\u003e statement.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                       Buildings.Fluid.Movers.FlowControlled_m_flow\u003cbr/\u003e\n                       Buildings.Fluid.Movers.SpeedControlled_Nrpm\u003cbr/\u003e\n                       Buildings.Fluid.Movers.SpeedControlled_y\u003cbr/\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReformulated implementation of efficiency model\n                       to avoid a division by zero at zero mass flow rate\n                       for models in which a user specifies\n                       a power instead of an efficiency performance curve.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.TWetBul_TDryBulXi\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded option to approximate the wet bulb temperature using an\n                     explicit equation.\n                     Reformulated the original model to change the dimension of the\n                     nonlinear system of equations from two to one.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Non-backward compatible changes to existing components --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\u003cbr/\u003e\n                       Buildings.BoundaryConditions.Types\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved the optional inputs for the radiation data global horizontal, diffuse horizontal and direct normal radiation.\n    If a user specifies two of them, the third will be automatically calculated.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SkyTemperature.BlackBody\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed \u003ccode\u003eradHor\u003c/code\u003e to \u003ccode\u003eradHorIR\u003c/code\u003e\n                       to indicate that the radiation is in the infrared\n                       spectrum.\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.BaseClasses.DoorDiscretized\u003cbr/\u003e\n                     Buildings.Airflow.Multizone.DoorDiscretizedOpen\u003cbr/\u003e\n                     Buildings.Airflow.Multizone.DoorDiscretizedOperable\u003cbr/\u003e\n                     Buildings.Airflow.Multizone.Orifice\u003cbr/\u003e\n                     Buildings.Airflow.Multizone.ZonalFlow_ACS\u003cbr/\u003e\n                     Buildings.Fluid.Actuators.BaseClasses.PartialDamperExponential\u003cbr/\u003e\n                     Buildings.Fluid.Actuators.Dampers.MixingBox\u003cbr/\u003e\n                     Buildings.Fluid.Actuators.Dampers.VAVBoxExponential\u003cbr/\u003e\n                     Buildings.Fluid.BaseClasses.PartialResistance\u003cbr/\u003e\n                     Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\u003cbr/\u003e\n                     Buildings.Fluid.Movers.BaseClasses.PowerInterface\u003cbr/\u003e\n                     Buildings.Fluid.Storage.BaseClasses.Buoyancy\u003cbr/\u003e\n                     Buildings.Fluid.HeatExchangers.BaseClasses.MassExchange\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed protected parameters for consistency with the naming conventions.\n                     In previous releases, fluid properties had the suffix \u003ccode\u003e0\u003c/code\u003e\n                     or \u003ccode\u003e_nominal\u003c/code\u003e instead of \u003ccode\u003e_default\u003c/code\u003e when they\n                     where computed based on the medium default properties.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.SensibleEnthalpyFlowRate\u003cbr/\u003e\n                     Buildings.Fluid.Sensors.LatentEnthalpyFlowRate\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eMoved computation of parameter \u003ccode\u003ei_w\u003c/code\u003e to new base class\n                     \u003ccode\u003eBuildings.Fluid.BaseClasses.IndexWater\u003c/code\u003e\n                     The value of this parameter is now assigned dynamically and does not require to be specified\n                     by the user.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.BaseClasses.ThirdOrderStratifier\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved unused protected parameters \u003ccode\u003esta0\u003c/code\u003e and \u003ccode\u003ecp0\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Examples\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.ChillerPlant.DataCenterDiscreteTimeControl\u003cbr/\u003e\n                       Buildings.Examples.ChillerPlant.BaseClasses.Controls.TrimAndRespond\u003cbr/\u003e\n                       Buildings.Examples.ChillerPlant.BaseClasses.Controls.ZeroOrderHold\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRe-implemented the controls for setpoint reset.\n    Revised the model \u003ccode\u003eTrimAndRespond\u003c/code\u003e and deleted the model \u003ccode\u003eZeroOrderHold\u003c/code\u003e.\n    Improved the documentation.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Examples\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.ChillerPlant.DataCenterDiscreteTimeControl\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed error in wet bulb temperature. The previous version used\n                     a model to compute the wet bulb temperature that takes as an\n                     input the relative humidity, but required mass fraction as an input.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\u003cbr/\u003e\n                       Buildings.BoundaryConditions.SkyTemperature.BlackBody\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed \u003ccode\u003eradHor\u003c/code\u003e to \u003ccode\u003eradHorIR\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.BaseClasses.FlowModels.Examples.InverseFlowFunction\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed error in the documentation.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.TwoPortHeatMassExchanger\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed broken link in the documentation.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.BaseClasses.Characteristics.powerParameters\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed wrong \u003ccode\u003edisplayUnit\u003c/code\u003e and\n                       \u003ccode\u003emax\u003c/code\u003e attribute for power.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eIn documentation, removed reference to the parameter\n                       \u003ccode\u003euse_HeatTransfer\u003c/code\u003e which no longer exists.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.Functions.glassPropertyUncoated\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved the documentation for implementation and added comments for model limitations.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\u003c!-- none --\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.specificHeatCapacityCv":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificHeatCapacityCv","comment":"Specific heat capacity of gas mixture at constant volume","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.specificHeatCapacityCv"}]},"Buildings.Utilities.Psychrometrics.SaturationPressure":{"name":"Buildings.Utilities.Psychrometrics.SaturationPressure","comment":"Saturation pressure as a function of temperature","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TSat","comment":"Saturation temperature","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"nominal","value":"300"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"pSat","comment":"Saturation pressure","modifications":[{"name":"unit","value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""},{"name":"nominal","value":"1000"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSaturation pressure of water, computed from temperature,\naccording to Wagner \u003ci\u003eet al.\u003c/i\u003e (1993).\nThe range of validity is between\n\u003ci\u003e190\u003c/i\u003e and \u003ci\u003e373.16\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nWagner W., A. Saul, A. Pruss.\n \u003ci\u003eInternational equations for the pressure along the melting and along the sublimation curve of ordinary water substance\u003c/i\u003e,\nequation 3.5. 1993.\n\u003ca href\u003d\\\"http://www.nist.gov/data/PDFfiles/jpcrd477.pdf\\\"\u003e\nhttp://www.nist.gov/data/PDFfiles/jpcrd477.pdf\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Media.Specialized.Air.PerfectGas.specificHeatCapacityCp":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificHeatCapacityCp","comment":"Specific heat capacity of gas mixture at constant pressure","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.specificHeatCapacityCp"}]},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phasePowers_vi":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phasePowers_vi","comment":"Return phase powers","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Voltage","qualifiers":["array","input"],"name":"v","comment":"phase voltages","arraySubscripts":"[n]"},{"className":"SI.Current","qualifiers":["array","input"],"name":"i","comment":"phase currents","arraySubscripts":"[n]"},{"className":"SI.Power","qualifiers":["array","output"],"name":"p","comment":"phase powers","arraySubscripts":"[n]"}]},"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineInductance":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineInductance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineInductance"}],"components":[{"className":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall inductance of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is medium or high, the cables have geometric parameters that can\nbe used to compute the inductance as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR \u003d l\u003csub\u003eCABLE\u003c/sub\u003e 2 10\u003csup\u003e-7\u003c/sup\u003e log(GMD/GMR),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable, and\n\u003ci\u003eGMD\u003c/i\u003e and \u003ci\u003eGMR\u003c/i\u003e are the geometric mean distance and the geometric mean radius\nof the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Adapter3to3":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Adapter3to3","comment":"Adapter from 3 single phase connectors to a connector with 3 phases","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["array"],"name":"terminals","comment":"Generalized terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package","final"],"value":"PhaseSystems.OnePhase"}],"arraySubscripts":"[3]","annotations":{"placement":"Placement(transformation(extent \u003d {{-92,-6},{-108,10}}), iconTransformation(extent \u003d {{-106,8},{-90,-8}}))"}},{"className":"Interfaces.Terminal_p","name":"terminal","comment":"Connector with 3 lines","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAdapter that connect 3 single phase connectors with a connector that has 3 phases.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false), graphics \u003d {Line()})"}},"Buildings.HeatTransfer.Windows.Functions.glassAbsInteriorIrradiationNoShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassAbsInteriorIrradiationNoShading","comment":"Hemispherical absorptance of each glass pane for interior irradiation without shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"absIntIrrNoSha","comment":"Hemispherical absorptance of each glass layer for interior irradiation without shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the hemispherical absorptance of each glass pane for interior irradiation without no shading.\nThe angular irradiation is not considered since the interior irradiation (from the room) is assumed to be diffusive.\nIt is a reverse of the function\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Functions.glassAbsInterirorIrradiationNoShading\\\"\u003e\nBuildings.HeatTransfer.Windows.Functions.glassAbsInterirorIrradiationNoShading\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.SmoothMax":{"name":"Buildings.Utilities.Math.SmoothMax","comment":"Once continuously differentiable approximation to the maximum function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SI2SO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"deltaX","comment":"Width of transition interval"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce continuously differentiable approximation to the \u003ci\u003emax(.,.)\u003c/i\u003e function.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the maximum need not be respected, such as illustrated in\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothMin\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothMin\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text()})"}},"Buildings.Utilities.IO.Python27.Real_Real":{"name":"Buildings.Utilities.IO.Python27.Real_Real","comment":"Block that exchanges a vector of real values with a Python function","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.DiscreteBlock","modifications":[{"name":"startTime","value":"0"},{"name":"firstTrigger","modifications":[{"name":"fixed","value":"true"},{"name":"start","value":"false"}]}]}],"components":[{"className":"String","qualifiers":["parameter"],"name":"moduleName","comment":"Name of the python module that contains the function"},{"className":"String","qualifiers":["parameter"],"name":"functionName","comment":"Name of the python function","value":"moduleName"},{"className":"Integer","qualifiers":["parameter"],"name":"nDblWri","comment":"Number of double values to write to Python","modifications":[{"name":"min","value":"1"}]},{"className":"Integer","qualifiers":["parameter"],"name":"nDblRea","comment":"Number of double values to be read from the Python","modifications":[{"name":"min","value":"1"}]},{"className":"Integer","qualifiers":["array","parameter"],"name":"flaDblWri","comment":"Flag for double values (0: use current value, 1: use average over interval, 2: use integral over interval)","value":"zeros(nDblWri)","arraySubscripts":"[nDblWri]"},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"uR","comment":"Real inputs to be sent to Python","arraySubscripts":"[nDblWri]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"yR","comment":"Real outputs received from Python","arraySubscripts":"[nDblRea]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Real","qualifiers":["array"],"name":"uRInt","comment":"Value of integral","arraySubscripts":"[nDblWri]"},{"className":"Real","qualifiers":["array"],"name":"uRIntPre","comment":"Value of integral at previous sampling instance","arraySubscripts":"[nDblWri]"},{"className":"Real","qualifiers":["array"],"name":"uRWri","comment":"Value to be sent to Python","arraySubscripts":"[nDblWri]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nBlock that exchanges data with a Python function.\u003cbr/\u003e\n\u003cp\u003e\nFor each element in the input vector \u003ccode\u003euR[nDblWri]\u003c/code\u003e,\nthe value of the flag \u003ccode\u003eflaDblWri[nDblWri]\u003c/code\u003e determines whether\nthe current value, the average over the sampling interval or the integral\nover the sampling interval is sent to Python. The following three options are allowed:\n\u003c/p\u003e\n\u003cbr/\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003ctd\u003e\nflaDblWri[i]\n\u003c/td\u003e\n\u003ctd\u003e\nValue sent to Python\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n0\n\u003c/td\u003e\n\u003ctd\u003e\nCurrent value of uR[i]\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n1\n\u003c/td\u003e\n\u003ctd\u003e\nAverage value of uR[i] over the sampling interval\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n2\n\u003c/td\u003e\n\u003ctd\u003e\nIntegral of uR[i] over the sampling interval\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cbr/\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Bitmap()})"}},"Buildings.Utilities.Math.TrapezoidalIntegration":{"name":"Buildings.Utilities.Math.TrapezoidalIntegration","comment":"Integration using the trapezoidal rule","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.MISO"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"N","comment":"Number of integrand points"},{"className":"Real","qualifiers":["parameter"],"name":"deltaX","comment":"Width of interval for Trapezoidal integration"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThis function computes a definite integral using the trapezoidal rule. \u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Fluid.Interfaces.PartialTwoPortInterface":{"name":"Buildings.Fluid.Interfaces.PartialTwoPortInterface","comment":"Partial model transporting fluid between two ports without storing mass or energy","qualifiers":["model","partial"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPort","modifications":[{"name":"port_a","modifications":[{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]}]},{"name":"port_b","modifications":[{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]}]}]}],"components":[{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_nominal","comment":"Nominal mass flow rate","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_small","comment":"Small mass flow rate for regularization of zero flow","value":"1E-4*abs(m_flow_nominal)","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"show_T","comment":"\u003d true, if actual temperature at port is computed","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\", group \u003d \"Diagnostics\")"}},{"className":"Modelica.SIunits.MassFlowRate","name":"m_flow","comment":"Mass flow rate from port_a to port_b (m_flow \u003e 0 is design flow direction)","value":"port_a.m_flow","modifications":[{"name":"start","value":"0"}]},{"className":"Modelica.SIunits.PressureDifference","name":"dp","comment":"Pressure difference between port_a and port_b","modifications":[{"name":"start","value":"0"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Medium.ThermodynamicState","name":"sta_a","comment":"Medium properties in port_a","value":"Medium.setState_phX(port_a.p,noEvent(actualStream(port_a.h_outflow)),noEvent(actualStream(port_a.Xi_outflow)))","conditionalClause":" if show_T"},{"className":"Medium.ThermodynamicState","name":"sta_b","comment":"Medium properties in port_b","value":"Medium.setState_phX(port_b.p,noEvent(actualStream(port_b.h_outflow)),noEvent(actualStream(port_b.Xi_outflow)))","conditionalClause":" if show_T"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component defines the interface for models that\ntransports a fluid between two ports. It is similar to\n\u003ca href\u003d\\\"Modelica://Modelica.Fluid.Interfaces.PartialTwoPortTransport\\\"\u003e\nModelica.Fluid.Interfaces.PartialTwoPortTransport\u003c/a\u003e, but it does not\ninclude the species balance\n\u003c/p\u003e\n\u003cpre\u003e\n  port_b.Xi_outflow \u003d inStream(port_a.Xi_outflow);\n\u003c/pre\u003e\n\u003cp\u003e\nThus, it can be used as a base class for a heat \u003ci\u003eand\u003c/i\u003e mass transfer component\n\u003c/p\u003e\n\u003cp\u003e\nThe model is used by other models in this package that add heat transfer,\nmass transfer and pressure drop equations. See for example\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\nBuildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.GasProperties":{},"Buildings.UsersGuide.ReleaseNotes.Version_2_1_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_2_1_0","comment":"Version 2.1.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n   \u003cp\u003e\n   Version 2.1.0 is fully compatible with version 2.0.0.\n   It adds the package \u003ccode\u003eBuildings.Fluid.FMI\u003c/code\u003e that provides containers\n   for exporting thermofluid flow components as FMUs.\n   It also updates the temperature sensor to optionally simulate heat losses,\n   and it contains bug fixes for the trace substance sensor if used without flow reversal.\n   Improvements have been made to various models to reduce the simulation time, and\n   to \u003ccode\u003eBuildings.Examples.Tutorial.Boiler\u003c/code\u003e to simplify the control implementation.\n   \u003c/p\u003e\n   \u003c!-- New libraries --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.FMI\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eThis package contains blocks that serve as containers for exporting\n                          models from \u003ccode\u003eBuildings.Fluid\u003c/code\u003e as a Functional Mockup Unit (FMU).\u003cbr/\u003e\n                          This allows using models from \u003ccode\u003eBuildings.Fluid\u003c/code\u003e, add them\n                          to a block that only has input and output signals, but no acausal connectors,\n                          and then export the model as a Functional Mockup Unit.\n                          Models can be individual models or systems that are composed of various\n                          models.\n                          For more information, see the\n                          \u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.UsersGuide\\\"\u003eUser\u0027s Guide\u003c/a\u003e.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c!-- New components for existing libraries --\u003e\n\n   \u003c!-- Backward compatible changes --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\n   have been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n   \u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Examples\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.Tutorial.Boiler.System5\u003cbr/\u003e\n                        Buildings.Examples.Tutorial.Boiler.System6\u003cbr/\u003e\n                        Buildings.Examples.Tutorial.Boiler.System7\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eChanged control input for \u003ccode\u003econPIDBoi\u003c/code\u003e and set\n                        \u003ccode\u003ereverseAction\u003dtrue\u003c/code\u003e\n                        to address issue\n                        \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/436\\\"\u003e#436\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Chillers.Carnot\u003cbr/\u003e\n                          Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.PartialDXCoil\u003cbr/\u003e\n                          Buildings.Fluid.HeatExchangers.HeaterCooler_u\u003cbr/\u003e\n                          Buildings.Fluid.MassExchangers.Humidifier_u\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eSet parameter \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e\n                          which causes a simpler energy balance to be used.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.TemperatureTwoPort\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eAdded option to simulate thermal loss, which is\n                        useful if the sensor is used to measure\n                        the fluid temperature in a system with on/off control\n                        for the mass flow rate.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.SolarCollectors.ASHRAE93\u003cbr/\u003e\n                          Buildings.Fluid.SolarCollectors.EN12975\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected sign error in computation of heat loss\n                          that prevents the medium to exceed \u003ccode\u003eMedium.T_min\u003c/code\u003e\n                          or \u003ccode\u003eMedium.T_max\u003c/code\u003e. With the previous implementation,\n                          an assertion may be generated unnecessarily rather than\n                          the model guiding against the violation of these bounds.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume\n\n\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eAdded test on \u003ccode\u003eallowFlowReversal\u003c/code\u003e in criteria\n                          about what energy balance implementation to use.\n                          This causes simpler models, for example when exporting\n                          \u003ccode\u003eBuildings.Fluid.HeatExchangers.HeaterCooler_u\u003c/code\u003e\n                          as an FMU.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c!-- Non-backward compatible changes to existing components --\u003e\n\n   \u003c!-- Errors that have been fixed --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\n   that can lead to wrong simulation results):\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.TraceSubstanceTwoPort\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong sensor signal if \u003ccode\u003eallowFlowReversal\u003dfalse\u003c/code\u003e.\n                          For this setting, the sensor output was for the wrong flow direction.\n                          This corrects\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/249\\\"\u003eissue 249\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c!-- Uncritical errors --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\n   that do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\n   units are wrong or errors in documentation):\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.ConservationEquation\u003cbr/\u003e\n                          Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected documentation.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c/html\u003e\""}},"Buildings.Media.Air.density_derX":{"name":"Buildings.Media.Air.density_derX","comment":"Return the partial derivative of density with respect to mass fractions at constant pressure and temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.density_derX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the partial derivative of density\nwith respect to mass fraction.\nThis value is zero because in this medium, density is proportional\nto pressure, but independent of the species concentration.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.OnePhase.Lines.TwoPortResistance":{"name":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortResistance","comment":"Model of a resistance with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialTwoPortResistance","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a resistance that connects two AC one phase interfaces.\nThis model can be used to represent a single phase cable in a AC grid.\n\u003c/p\u003e\n\u003cp\u003e\nThe model represents the lumped resistance as shown in the figure below.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/OnePhase/Lines/twoPortR.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.HeatTransfer.Windows.FixedShade":{"name":"Buildings.HeatTransfer.Windows.FixedShade","comment":"Model for exterior shade due to overhang and/or side fin","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.BaseClasses.ShadeInterface_weatherBus"}],"components":[{"className":"Buildings.Rooms.BaseClasses.ParameterConstructionWithWindow","qualifiers":["parameter"],"name":"conPar","comment":"Construction parameters"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth; azi\u003d -90 degree East; azi\u003d 0 South","modifications":[{"name":"displayUnit","value":"\"deg\""}]},{"className":"Modelica.Blocks.Routing.Multiplex4","name":"mulFraSun","comment":"Multiplex for fraction of shaded area","modifications":[{"name":"n1","value":"1"},{"name":"n2","value":"1"},{"name":"n3","value":"1"},{"name":"n4","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{32,0},{52,20}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"sumFraSun","comment":"Addition of sun exposed window area fractions","annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-40},{-28,-28}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"resFraSun","comment":"Calculates resultant sun exposed window area fraction","modifications":[{"name":"k2","value":"1.0"},{"name":"k1","value":"-1.0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-6},{-28,6}}))"}},{"className":"Modelica.Blocks.Sources.Constant","name":"overlap","comment":"Overlap of sun exposed window area fraction","modifications":[{"name":"k","value":"1.0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-40,20},{-28,32}}))"}},{"className":"Modelica.Blocks.Sources.Constant","name":"noSunCond","comment":"Condition when the sun is not in front of window","modifications":[{"name":"k","value":"small"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-40},{-8,-28}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the fraction of the window area that is sun exposed\nfor a window that may have an overhang and sidefins.\nDepending on the record with construction data \u003ccode\u003econPar\u003c/code\u003e,\nan overhang, side fins or no external shade is modeled.\nThe model allows having an overhang and side fins at the same time.\nIn such a case, the overhang width should be\nmeasured from the window edge to the sidefin,\nbecause the overhang width beyond the sidefin will\ncast a shadow on the side fin and not on the window.\nSimilarly, the side fin height should be measured\nfrom the upper window edge to the overhang,\nbecause the side fin height above the\noverhang will not cast a shadow on the window.\nThe parameters for the dimensions of the overhang and side fins are as\ndescribed in the models\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Overhang\\\"\u003e\nBuildings.HeatTransfer.Windows.Overhang\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.SideFins\\\"\u003e\nBuildings.HeatTransfer.Windows.SideFins\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nFor overhangs, the model assumes that\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nthe overhang is at least as wide as the window, i.e.,\n\u003ci\u003ew\u003csub\u003eL\u003c/sub\u003e \u0026ge; 0\u003c/i\u003e and\n\u003ci\u003ew\u003csub\u003eR\u003c/sub\u003e \u0026ge; 0\u003c/i\u003e, and\n\u003c/li\u003e\n\u003cli\u003e\nthe overhang is horizontal.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nFor side fins, the model assumes that\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nthe side fins are placed symmetrically to the left and right of the window,\n\u003c/li\u003e\n\u003cli\u003e\nthe top of the side fins must be at an equal or greater height than the window, and\n\u003c/li\u003e\n\u003cli\u003e\nthe side fins extends at least to the lower edge of the window.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe detailed calculation method is explained in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.BaseClasses.SideFins\\\"\u003e\nBuildings.HeatTransfer.Windows.BaseClasses.SideFins\u003c/a\u003e\nand in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.BaseClasses.Overhang\\\"\u003e\nBuildings.HeatTransfer.Windows.BaseClasses.Overhang\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Bitmap()})"}},"Buildings.Fluid.Actuators.Valves.TwoWayLinear":{"name":"Buildings.Fluid.Actuators.Valves.TwoWayLinear","comment":"Two way valve with linear flow characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValveKv","modifications":[{"name":"phi","value":"l+y_actual*(1-l)"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nTwo way valve with linear opening characteristic.\n\u003c/p\u003e\u003cp\u003e\nThis model is based on the partial valve model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e.\nCheck this model for more information, such\nas the regularization near the origin.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Impedance_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Impedance_N","comment":"Model of a three-phase unbalanced impedance with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.Impedance_N","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced impedance with neutral cable.\nThe current in the neutral cable is computed as the algebraic sum of the currents\nof the loads.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.Impedance_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.Impedance_N\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Impedance\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Impedance\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Line(),Line(),Text(),Line(),Rectangle(),Line(),Line(),Line(),Rectangle(),Line(),Line(),Rectangle(),Line()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isentropicEnthalpy":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isentropicEnthalpy","comment":"Return the isentropic enthalpy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isentropicEnthalpy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific enthalpy for\nan isentropic state change from the temperature\nthat corresponds to the state \u003ccode\u003erefState\u003c/code\u003e\nto \u003ccode\u003ereference_T\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Rooms.X3B.Closet":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3B.Closet","comment":"Model of the closet connected to test cell X3A","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"hRoo","value":"3.6576"},{"name":"AFlo","value":"3.93"},{"name":"lat","value":"0.66098585832754"},{"name":"nConExt","value":"2"},{"name":"nConBou","value":"3"},{"name":"nSurBou","value":"2"},{"name":"nConExtWin","value":"0"},{"name":"nConPar","value":"0"},{"name":"surBou","modifications":[{"name":"A","value":"{3.6576*2.886075-2.39*1.22,2.39*1.22}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","qualifiers":["each"],"value":"Buildings.Types.Tilt.Wall"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{higIns,roo}"},{"name":"A","value":"{3.6576*1.667,AFlo}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{higIns,celDiv,slaCon}"},{"name":"A","value":"{3.6576*1.524,3.6576*1.524,3.93}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Floor}"},{"name":"azi","value":"{Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.E,Buildings.Types.Azimuth.N}"}]}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall","qualifiers":["replaceable"],"name":"higIns","comment":"High insulation wall. Between X3A closet and exterior, X3A closet and electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-208},{450,-188}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall","qualifiers":["replaceable"],"name":"celDiv","comment":"Wall dividing the X3A closet and the X3B closet","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-178},{450,-158}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"roo","comment":"Construction of the roof of the closet in X3A","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-148},{450,-128}}))"}},{"className":"HeatTransfer.Data.OpaqueConstructions.Generic","name":"slaCon","comment":"Construction of the slab","modifications":[{"name":"nLay","value":"3"},{"name":"material","value":"{Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic()}"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{432,-118},{452,-98}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model for the closet attached to test cell 3B in the LBNL User Facility.\n    This documentation describes the wall constructions used in the closet. Documentation\n    describing how it should be connected to other models in the package to form a\n    complete model of test cell X3B can be found in\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3B\\\"\u003e\n    Buildings.Rooms.FLEXLAB.Rooms.X3B\u003c/a\u003e.\n    \u003c/p\u003e\n    \u003cp\u003e\n    There are four different wall sections connected to the closet modeled here. They are shown\n    in the figure below.\n    \u003c/p\u003e\n    \u003cp align\u003d\\\"center\\\"\u003e\n    \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3B/Closet.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in Closet model\\\"/\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\n    The different wall sections are represented in the model according to the following table.\n    \u003c/p\u003e\n    \u003ctable border \u003d \\\"1\\\" summary \u003d \\\"Wall sections in Closet model\\\"\u003e\n    \u003ctr\u003e\n    \u003cth\u003eWall Section Number\u003c/th\u003e\n    \u003cth\u003eDescription\u003c/th\u003e\n    \u003cth\u003eLocation in Model\u003c/th\u003e\n    \u003cth\u003eCorresponding Layer\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e1\u003c/td\u003e\n    \u003ctd\u003eWest wall connected to X3A.Closet\u003c/td\u003e\n    \u003ctd\u003edatConBou[2]\u003c/td\u003e\n    \u003ctd\u003ecelDiv\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e2\u003c/td\u003e\n    \u003ctd\u003eNorth wall on the exterior of the buildings\u003c/td\u003e\n    \u003ctd\u003edatConExt[1]\u003c/td\u003e\n    \u003ctd\u003ehigIns\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e3\u003c/td\u003e\n    \u003ctd\u003eEast wall connected to Electrical\u003c/td\u003e\n    \u003ctd\u003edatConBou[1]\u003c/td\u003e\n    \u003ctd\u003ehigIns\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e4\u003c/td\u003e\n    \u003ctd\u003eAir space connected to partition wall and door in TestCell model\u003c/td\u003e\n    \u003ctd\u003eWall: datSurBou[1]\u003cbr/\u003e\n    Door: datSurBou[2]\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003c/table\u003e\n    \u003cp\u003e\n    There are two additional surfaces which are not included in the diagram. One is the model of the roof. It is\n    modeled in datConExt[2] using the layer \u003ccode\u003eroo\u003c/code\u003e. The other is the floor, which is modeled in\n    datConBou[3] using the layer \u003ccode\u003eslaCon\u003c/code\u003e.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n    The following table describes the connections to models outside of the X3B package. The connections in datConExt\n    are not described in the table because they are connected to the external environment, and no additional heat\n    port connections are necessary. A rationale for why the model is created this way is also provided if it is\n    considered necessary.\n    \u003c/p\u003e\n    \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Intended connections including the Closet model\\\"\u003e\n    \u003ctr\u003e\n    \u003cth\u003eLocation in Closet\u003c/th\u003e\n    \u003cth\u003eDescription of External Connection\u003c/th\u003e\n    \u003cth\u003eLocation in External Model\u003c/th\u003e\n    \u003cth\u003eRationale\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003esurf_conBou[2]\u003c/td\u003e\n    \u003ctd\u003eX3A.Closet\u003c/td\u003e\n    \u003ctd\u003eX3A.ClosetNoCelDiv.surf_surBou[3]\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003esurf_conBou[3]\u003c/td\u003e\n    \u003ctd\u003eGround temperature\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd\u003eThere is no specific connection which is appropriate connection for this construction. surf_conBou[3] represents\n    the floor of the room, and must be connected to a heat port representing the ground temperature.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003c/table\u003e\n    \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Electrical.PhaseSystems.DirectCurrent.j":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.j","comment":"Direct current has no complex component","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.j"}]},"Buildings.Utilities.Math.Splice":{"name":"Buildings.Utilities.Math.Splice","comment":"Block for splice function opertation","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"x","comment":"Independent value","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"u1","comment":"Argument of u \u003e 0 (pos)","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,40},{-100,80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"u2","comment":"Argument of u \u003c 0 (neg)","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-80},{-100,-40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"Smoothed value","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Real","qualifiers":["parameter"],"name":"deltax","comment":"Half width of transition interval"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block implements \u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.spliceFunction\\\"\u003e\nBuildings.Utilities.Math.Functions.spliceFunction\u003c/a\u003e, which provides a continuously differentiable transition between two arguments.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Text(),Line(),Line(),Text(),Text(),Line(),Line(),Text(),Text(),Text(),Text()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_0_5_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_5_0","comment":"Version 0.5.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nUpdated library to Modelica.Fluid 1.0.\n\u003c/li\u003e\n\u003cli\u003e\nMoved most examples from package \u003ca href\u003d\\\"modelica://Buildings.Fluid.Examples\\\"\u003e\nBuildings.Fluid.Examples\u003c/a\u003e to the example directory in the package of the\nindividual model.\n\u003c/li\u003e\n\u003cli\u003e\nRenamed package \u003ca href\u003d\\\"modelica://Buildings.Utilites.Controls\\\"\u003e\nBuildings.Utilites.Controls\u003c/a\u003e to\n\u003ca href\u003d\\\"modelica://Buildings.Utilites.Diagnostics\\\"\u003e\nBuildings.Utilites.Diagnostics\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nIntroduced packages\n\u003ca href\u003d\\\"modelica://Buildings.Controls\\\"\u003eBuildings.Controls\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer\\\"\u003eBuildings.HeatTransfer\u003c/a\u003e\n(which contains models for heat transfer that generally does not involve\nmodeling of the fluid flow),\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Boilers\\\"\u003eBuildings.Fluid.Boilers\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Radiators\\\"\u003e\nBuildings.Fluid.HeatExchangers.Radiators\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nChanged valve models in \u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Valves\\\"\u003e\nBuildings.Fluid.Actuators.Valves\u003c/a\u003e so that \u003ccode\u003eKv\u003c/code\u003e or \u003ccode\u003eCv\u003c/code\u003e can\nbe used as the flow coefficient (in [m3/h] or [USG/min]).\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.SublimationPressureIce":{"name":"Buildings.Utilities.Psychrometrics.SublimationPressureIce","comment":"Saturation pressure as a function of temperature","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TSat","comment":"Saturation temperature","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"nominal","value":"300"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"pSat","comment":"Saturation pressure","modifications":[{"name":"unit","value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""},{"name":"nominal","value":"1000"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSublimation pressure of water below the triple point temperature, computed from temperature,\naccording to Wagner \u003ci\u003eet al.\u003c/i\u003e (1993).\nThe range of validity is between\n\u003ci\u003e190\u003c/i\u003e and \u003ci\u003e273.16\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nWagner W., A. Saul, A. Pruss.\n \u003ci\u003eInternational equations for the pressure along the melting and along the sublimation curve of ordinary water substance\u003c/i\u003e,\nequation 3.5. 1993.\n\u003ca href\u003d\\\"http://www.nist.gov/data/PDFfiles/jpcrd477.pdf\\\"\u003e\nhttp://www.nist.gov/data/PDFfiles/jpcrd477.pdf\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Controls.Predictors.ElectricalLoad.getTypeOfDays":{},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Resistive":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Resistive","comment":"Model of a three-phase unbalanced resistive load without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced resistive load.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Resistive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Resistive\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Line(),Line(),Text(),Line(),Rectangle(),Line(),Line(),Line(),Rectangle(),Line(),Line(),Rectangle(),Line()})"}},"Buildings.Fluid.HeatExchangers.DryCoilCounterFlow":{"name":"Buildings.Fluid.HeatExchangers.DryCoilCounterFlow","comment":"Counterflow coil with discretization along the flow paths and without humidity condensation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialFourPortInterface","modifications":[{"name":"show_T","value":"false"}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.FourPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance1","qualifiers":["final"],"value":"false"},{"name":"computeFlowResistance2","qualifiers":["final"],"value":"false"},{"name":"from_dp1","value":"false"},{"name":"from_dp2","value":"false"}]}],"components":[{"className":"Modelica.SIunits.ThermalConductance","qualifiers":["parameter"],"name":"UA_nominal","comment":"Thermal conductance at nominal flow, used to compute heat capacity","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Nominal condition\")"}},{"className":"Real","qualifiers":["parameter"],"name":"r_nominal","comment":"Ratio between air-side and water-side convective heat transfer coefficient","value":"2/(3)","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"nEle","comment":"Number of pipe segments used for discretization","value":"4","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Geometry\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamics","comment":"Formulation of energy balance","value":"Modelica.Fluid.Types.Dynamics.DynamicFreeInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau1","comment":"Time constant at nominal flow for medium 1","value":"20","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\", enable \u003d not energyDynamics\u003d\u003dModelica.Fluid.Types.Dynamics.SteadyState)"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau2","comment":"Time constant at nominal flow for medium 2","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\", enable \u003d not energyDynamics\u003d\u003dModelica.Fluid.Types.Dynamics.SteadyState)"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau_m","comment":"Time constant of metal at nominal UA value","value":"20","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"waterSideFlowDependent","comment":"Set to false to make water-side hA independent of mass flow rate","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"airSideFlowDependent","comment":"Set to false to make air-side hA independent of mass flow rate","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"waterSideTemperatureDependent","comment":"Set to false to make water-side hA independent of temperature","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"airSideTemperatureDependent","comment":"Set to false to make air-side hA independent of temperature","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Modelica.SIunits.HeatFlowRate","name":"Q1_flow","comment":"Heat transferred from solid into medium 1","value":"sum(ele[i].Q1_flowi in 1:nEle)"},{"className":"Modelica.SIunits.HeatFlowRate","name":"Q2_flow","comment":"Heat transferred from solid into medium 2","value":"sum(ele[i].Q2_flowi in 1:nEle)"},{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"T1","comment":"Water temperature","value":"ele[:].vol1.T","arraySubscripts":"[nEle]"},{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"T2","comment":"Air temperature","value":"ele[:].vol2.T","arraySubscripts":"[nEle]"},{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"T_m","comment":"Metal temperature","value":"ele[:].con1.solid.T","arraySubscripts":"[nEle]"},{"className":"BaseClasses.HADryCoil","name":"hA","comment":"Model for convective heat transfer coefficient","modifications":[{"name":"UA_nominal","qualifiers":["final"],"value":"UA_nominal"},{"name":"m_flow_nominal_a","qualifiers":["final"],"value":"m2_flow_nominal"},{"name":"m_flow_nominal_w","qualifiers":["final"],"value":"m1_flow_nominal"},{"name":"waterSideTemperatureDependent","qualifiers":["final"],"value":"waterSideTemperatureDependent"},{"name":"waterSideFlowDependent","qualifiers":["final"],"value":"waterSideFlowDependent"},{"name":"airSideTemperatureDependent","qualifiers":["final"],"value":"airSideTemperatureDependent"},{"name":"airSideFlowDependent","qualifiers":["final"],"value":"airSideFlowDependent"},{"name":"r_nominal","value":"r_nominal"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-60,80},{-40,100}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}, initialScale \u003d 0.5), graphics \u003d {Text(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a discretized coil without water vapor condensation.\nThe coil consists of two flow paths which are, at the design flow direction,\nin opposite direction to model a counterflow heat exchanger.\nThe flow paths are discretized into \u003ccode\u003enEle\u003c/code\u003e elements.\nEach element is modeled by an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.HexElement\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.HexElement\u003c/a\u003e.\nEach element has a state variable for the metal.\n\u003c/p\u003e\n\u003cp\u003e\nThe convective heat transfer coefficients can, for each fluid individually, be\ncomputed as a function of the flow rate and/or the temperature,\nor assigned to a constant. This computation is done using an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.HADryCoil\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.HADryCoil\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nTo model humidity condensation, use the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.WetCoilCounterFlow\\\"\u003e\nBuildings.Fluid.HeatExchangers.WetCoilCounterFlow\u003c/a\u003e instead of this model, as\nthis model computes only sensible heat transfer.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Electrical.Interfaces.PartialBaseTwoPort":{"name":"Buildings.Electrical.Interfaces.PartialBaseTwoPort","comment":"Model of a generic two port component","qualifiers":["model"],"components":[{"className":"Buildings.Electrical.Interfaces.BaseTerminal","qualifiers":["replaceable"],"name":"terminal_n","comment":"Electric terminal side p","annotations":{"placement":"Placement(transformation(extent \u003d {{-108,-8},{-92,8}}))"}},{"className":"Buildings.Electrical.Interfaces.BaseTerminal","qualifiers":["replaceable"],"name":"terminal_p","comment":"Electric terminal side n","annotations":{"placement":"Placement(transformation(extent \u003d {{92,-8},{108,8}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model declares connectors for electrical components with two terminals.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.IO.FLEXLAB.CalBayComm.lightingController":{"name":"Buildings.Utilities.IO.FLEXLAB.CalBayComm.lightingController","comment":"Block for control law","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"samplePeriod","comment":"Sample period of component"},{"className":"Modelica.Blocks.Math.Gain","name":"gain","modifications":[{"name":"k","value":"10"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-68,-10},{-48,10}}))"}},{"className":"Modelica.Blocks.Nonlinear.Limiter","name":"limiter","comment":"Output limiter to constrain control signal","modifications":[{"name":"uMax","value":"100"},{"name":"uMin","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{40,-10},{60,10}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"add","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"Modelica.Blocks.Discrete.ZeroOrderHold","name":"zeroOrderHold","comment":"Zero order hold for feedback","modifications":[{"name":"samplePeriod","qualifiers":["final"],"value":"samplePeriod"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{10,-50},{-10,-30}}))"}}]},"Buildings.Fluid.Actuators.Valves.TwoWayTable":{"name":"Buildings.Fluid.Actuators.Valves.TwoWayTable","comment":"Two way valve with table-specified flow characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValveKv","modifications":[{"name":"phi","value":"phiLooUp.y[1]"},{"name":"l","qualifiers":["final"],"value":"phiLooUp.table[1,2]"}]}],"components":[{"className":"Data.Generic","qualifiers":["parameter"],"name":"flowCharacteristics","comment":"Table with flow characteristics","annotations":{"placement":"Placement(transformation(extent \u003d {{-80,60},{-60,80}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nTwo way valve with opening characteristic that is configured through\na table.\n\u003c/p\u003e\n\u003cp\u003e\nThe mass flow rate for the fully open valve is determined based\non the value of the parameter \u003ccode\u003eCvData\u003c/code\u003e.\nFor the different valve positions \u003ci\u003ey \u0026isin; [0, 1]\u003c/i\u003e, this nominal flow rate is\nscaled by the values of the parameter\n\u003ccode\u003eflowCharacteristics\u003c/code\u003e.\nThe parameter \u003ccode\u003eflowCharacteristics\u003c/code\u003e declares a table of the form\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci\u003ey\u003c/i\u003e\u003c/td\u003e  \u003ctd\u003e0\u003c/td\u003e  \u003ctd\u003e...\u003c/td\u003e  \u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci\u003e\u0026phi;\u003c/i\u003e\u003c/td\u003e  \u003ctd\u003e\u003ci\u003el\u003c/i\u003e\u003c/td\u003e  \u003ctd\u003e...\u003c/td\u003e  \u003ctd\u003e1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\nwhere \u003ci\u003el \u003d K\u003csub\u003ev\u003c/sub\u003e(y\u003d0)/K\u003csub\u003ev\u003c/sub\u003e(y\u003d1) \u0026gt; 0\u003c/i\u003e is the valve leakage.\nThe first row is the valve opening, and the second row is the\nmass flow rate, relative to the mass flow rate of the fully open\nvalve, under the assumption of a constant pressure difference across the\nvalve.\nA suggested value for the valve leakage is \u003ci\u003el\u003d0.0001\u003c/i\u003e.\nIf \u003ci\u003el \u003d 0\u003c/i\u003e, then this model will replace it with\n\u003ci\u003el \u003d 10\u003csup\u003e-8\u003c/sup\u003e\u003c/i\u003e for numerical reasons.\nFor example, if a valve has \u003ci\u003eK\u003csub\u003ev\u003c/sub\u003e\u003d0.5\u003c/i\u003e [m\u003csup\u003e3\u003c/sup\u003e/h/bar\u003csup\u003e1/2\u003c/sup\u003e] and\na linear opening characteristics and\na valve leakage of \u003ci\u003el\u003d0.0001\u003c/i\u003e, then one would set\n\u003c/p\u003e\n\u003cpre\u003e\n CvData\u003dBuildings.Fluid.Types.CvTypes.Kv\n Kv \u003d 0.5\n flowCharacteristics(y\u003d{0,1}, phi\u003d{0.0001,1})\n \u003c/pre\u003e\n\u003cp\u003e\nNote, however, that\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Valves.TwoWayLinear\\\"\u003e\nBuildings.Fluid.Actuators.Valves.TwoWayLinear\u003c/a\u003e provides a more\nefficient implementation for this simple case.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eflowCharacteristics\u003c/code\u003e must meet the following\nrequirements, otherwise the model stops with an error:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe arrays in\n\u003ccode\u003eflowCharacteristics.y\u003c/code\u003e and \u003ccode\u003eflowCharacteristics.phi\u003c/code\u003e\nmust be strictly monotonic increasing.\n\u003c/li\u003e\n\u003cli\u003e\nThe first value must satisfy\n\u003ccode\u003eflowCharacteristics.y[1]\u003d0\u003c/code\u003e, and\n\u003ccode\u003eflowCharacteristics.phi[1]\u003c/code\u003e must be equal to the\nleakage flow rate, which must be bigger than zero.\nOtherwise, a default value of \u003ccode\u003e1E-8\u003c/code\u003e is used.\n\u003c/li\u003e\n\u003cli\u003e\nThe last values must satisfy\n\u003ccode\u003eflowCharacteristics.y[end]\u003d1\u003c/code\u003e and\n\u003ccode\u003eflowCharacteristics.phi[end]\u003d1\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThis model is based on the partial valve model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e.\nCheck this model for more information, such\nas the regularization near the origin.\n\u003c/p\u003e\n\u003cp\u003e\nFor an example that specifies an opening characteristics, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Valves.Examples.TwoWayValveTable\\\"\u003e\nBuildings.Fluid.Actuators.Valves.Examples.TwoWayValveTable\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Line(),Line()})"}},"Buildings.Media.Air.density_derT_p":{"name":"Buildings.Media.Air.density_derT_p","comment":"Return the partial derivative of density with respect to temperature at constant pressure","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.density_derT_p"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the derivative of density with respect to temperature\nat constant pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.IO.BCVTB.BCVTB":{"name":"Buildings.Utilities.IO.BCVTB.BCVTB","comment":"Block that exchanges data with the Building Controls Virtual Test Bed","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.DiscreteBlock","modifications":[{"name":"startTime","qualifiers":["final"],"value":"0"},{"name":"samplePeriod","qualifiers":["final"],"value":"if activateInterface then timeStep else Modelica.Constants.inf"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"activateInterface","comment":"Set to false to deactivate interface and use instead yFixed as output","value":"true"},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"timeStep","comment":"Time step used for the synchronization","annotations":{"dialog":"Dialog(enable \u003d activateInterface)"}},{"className":"String","qualifiers":["parameter"],"name":"xmlFileName","comment":"Name of the file that is generated by the BCVTB and that contains the socket information","value":"\"socket.cfg\""},{"className":"Integer","qualifiers":["parameter"],"name":"nDblWri","comment":"Number of double values to write to the BCVTB","modifications":[{"name":"min","value":"0"}]},{"className":"Integer","qualifiers":["parameter"],"name":"nDblRea","comment":"Number of double values to be read from the BCVTB","modifications":[{"name":"min","value":"0"}]},{"className":"Integer","qualifiers":["array","parameter"],"name":"flaDblWri","comment":"Flag for double values (0: use current value, 1: use average over interval, 2: use integral over interval)","value":"zeros(nDblWri)","arraySubscripts":"[nDblWri]"},{"className":"Real","qualifiers":["array","parameter"],"name":"uStart","comment":"Initial input signal, used during first data transfer with BCVTB","arraySubscripts":"[nDblWri]"},{"className":"Real","qualifiers":["array","parameter"],"name":"yRFixed","comment":"Fixed output, used if activateInterface\u003dfalse","value":"zeros(nDblRea)","arraySubscripts":"[nDblRea]","annotations":{"dialog":"Dialog(enable \u003d not activateInterface)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"uR","comment":"Real inputs to be sent to the BCVTB","arraySubscripts":"[nDblWri]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"yR","comment":"Real outputs received from the BCVTB","arraySubscripts":"[nDblRea]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Integer","name":"flaRea","comment":"Flag received from BCVTB"},{"className":"Modelica.SIunits.Time","name":"simTimRea","comment":"Current simulation time received from the BCVTB"},{"className":"Integer","name":"retVal","comment":"Return value from the BSD socket data exchange"},{"className":"Real","qualifiers":["array"],"name":"uRWri","comment":"Value to be sent to the interface","arraySubscripts":"[nDblWri]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nBlock that exchanges data with the\n\u003ca href\u003d\\\"http://simulationresearch.lbl.gov/bcvtb\\\"\u003eBuilding Controls Virtual Test Bed\u003c/a\u003e (BCVTB).\n\u003cp\u003e\nAt the start of the simulation, this block establishes a socket connection\nusing the Berkeley Software Distribution socket (BSD socket).\nAt each sampling interval, data are exchanged between Modelica\nand the BCVTB.\nWhen Dymola terminates, a signal is sent to the BCVTB\nso that it can terminate gracefully.\n\u003c/p\u003e\n\u003cp\u003e\nFor each element in the input vector \u003ccode\u003euR[nDblWri]\u003c/code\u003e,\nthe value of the flag \u003ccode\u003eflaDblWri[nDblWri]\u003c/code\u003e determines whether\nthe current value, the average over the sampling interval or the integral\nover the sampling interval is sent to the BCVTB. The following three options are allowed:\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\n\u003ctd\u003e\nflaDblWri[i]\n\u003c/td\u003e\n\u003ctd\u003e\nValue sent to the BCVTB\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n0\n\u003c/td\u003e\n\u003ctd\u003e\nCurrent value of uR[i]\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n1\n\u003c/td\u003e\n\u003ctd\u003e\nAverage value of uR[i] over the sampling interval\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n2\n\u003c/td\u003e\n\u003ctd\u003e\nIntegral of uR[i] over the sampling interval\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cbr/\u003e\n\u003cp\u003e\nFor the first call to the BCVTB interface, the value of the parameter \u003ccode\u003euStart[nDblWri]\u003c/code\u003e\nwill be used instead of \u003ccode\u003euR[nDblWri]\u003c/code\u003e. This avoids an algebraic loop when determining\nthe initial conditions. If \u003ccode\u003euR[nDblWri]\u003c/code\u003e were to be used, then computing the initial conditions\nmay require an iterative solution in which the function \u003ccode\u003eexchangeWithSocket\u003c/code\u003e may be called\nmultiple times.\nUnfortunately, it does not seem possible to use a parameter that would give a user the option to either\nselect \u003ccode\u003euR[i]\u003c/code\u003e or \u003ccode\u003euStart[i]\u003c/code\u003e in the first data exchange. The reason is that the symbolic solver does not evaluate\nthe test that picks \u003ccode\u003euR[i]\u003c/code\u003e or \u003ccode\u003euStart[i]\u003c/code\u003e, and hence there would be an algebraic loop.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003eactivateInterface\u003c/code\u003e is set to false, then no data is exchanged with the BCVTB.\nThe output of this block is then equal to the value of the parameter \u003ccode\u003eyRFixed[nDblRea]\u003c/code\u003e.\nThis option can be helpful during debugging. Since during model translation, the functions are\nstill linked to the C library, the header files and libraries need to be present in the current working\ndirectory even if \u003ccode\u003eactivateInterface\u003dfalse\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Polygon(),Text()})"}},"Buildings.Controls.Predictors.ElectricalLoad.isMidNight":{},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRL":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRL","comment":"Model of a resistive-inductive element with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort"},{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort"}],"components":[{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance at temperature T_ref"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_ref","comment":"Reference temperature","value":"298.15"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"M","comment":"Temperature constant (R_actual \u003d R*(M + T_heatPort)/(M + T_ref))","value":"507.65"},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"L","comment":"Inductance"},{"className":"Modelica.SIunits.Current","qualifiers":["array","parameter"],"name":"i1_start","comment":"Initial current phasor of phase 1 (positive if entering from terminal p)","value":"{0,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Current","qualifiers":["array","parameter"],"name":"i2_start","comment":"Initial current phasor of phase 2 (positive if entering from terminal p)","value":"{0,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Current","qualifiers":["array","parameter"],"name":"i3_start","comment":"Initial current phasor of phase 3 (positive if entering from terminal p)","value":"{0,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.FixedZ_dynamic"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase1","comment":"Impedance line 1","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"i_start","value":"i1_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase2","comment":"Impedance line 2","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"i_start","value":"i2_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase3","comment":"Impedance line 3","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"i_start","value":"i3_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistive-inductive model that connects two AC three-phase\nunbalanced interfaces. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRL.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped impedances as shown in the figure above.\nAssuming that the overall cable has a resistance \u003ci\u003eR\u003c/i\u003e and an inductance\n\u003ci\u003eL\u003c/i\u003e, each line has an inductance equal to \u003ci\u003eL/3\u003c/i\u003e and a resistance\nequal to \u003ci\u003eR/3\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Rectangle(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Text()})"}},"Buildings.Fluid.SolarCollectors.Types.NumberSelection":{"name":"Buildings.Fluid.SolarCollectors.Types.NumberSelection","comment":"Enumeration of options for how users will specify\n      the number of solar collectors in a system","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Number","comment":"Number of panels"},{"className":"EnumType","qualifiers":["constant"],"name":"Area","comment":"Total panel area"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n      Enumeration used to define the different methods of declaring solar thermal\n      system size.\n    \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phasePowers":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phasePowers","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phasePowers"}]},"Buildings.Fluid.FMI.Interfaces.Inlet":{"name":"Buildings.Fluid.FMI.Interfaces.Inlet","comment":"Connector for fluid inlet","qualifiers":["connector"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Medium.MassFlowRate","qualifiers":["input"],"name":"m_flow","comment":"Mass flow rate from the connection point into the component"},{"className":"Buildings.Fluid.FMI.Interfaces.PressureInput","name":"p","comment":"Thermodynamic pressure in the connection point","conditionalClause":" if use_p_in"},{"className":"Buildings.Fluid.FMI.Interfaces.FluidProperties","qualifiers":["input"],"name":"forward","comment":"Inflowing properties","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"}]},{"className":"Buildings.Fluid.FMI.Interfaces.FluidProperties","qualifiers":["output"],"name":"backward","comment":"Outflowing properties","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"}],"conditionalClause":" if allowFlowReversal"}],"classes":[{"name":"Buildings.Fluid.FMI.Interfaces.Inlet.Medium","comment":"Medium model","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a connector for a fluid inlet.\nThe connector takes as an input the \nfollowing quantities:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe mass flow rate \u003ccode\u003em_flow\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe pressure \u003ccode\u003ep\u003c/code\u003e,\nunless \u003ccode\u003euse_p_in\u003dfalse\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe temperature of the inflowing fluid\n\u003ccode\u003eforward.T\u003c/code\u003e, \ne.g., the temperature of the fluid that streams out of the component if \u003ccode\u003em_flow \u0026gt; 0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe mass fraction of the inflowing fluid\n\u003ccode\u003eforward.Xi\u003c/code\u003e,\nunless \u003ccode\u003eMedium.nXi\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe trace substances of the inflowing fluid\n\u003ccode\u003eforward.C\u003c/code\u003e, \nunless \u003ccode\u003eMedium.nC\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf \u003ccode\u003eallowFlowReversal \u003d true\u003c/code\u003e,\nthe connector also outputs the following quantities.\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe temperature of the outflowing fluid\n\u003ccode\u003ebackward.T\u003c/code\u003e,\ne.g., if \u003ccode\u003em_flow \u0026le; 0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe mass fraction of the outflowing fluid\n\u003ccode\u003ebackward.Xi\u003c/code\u003e,\nunless \u003ccode\u003eMedium.nXi\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe trace substances of the outflowing fluid \n\u003ccode\u003ebackward.C\u003c/code\u003e,\nunless \u003ccode\u003eMedium.nC\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf \u003ccode\u003eallowFlowReversal \u003d false\u003c/code\u003e, then these outputs are not present.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Text()})"}},"Buildings.Fluid.HeatPumps.Carnot_TCon":{"name":"Buildings.Fluid.HeatPumps.Carnot_TCon","comment":"Heat pump with prescribed condenser leaving temperature and performance curve adjusted based on Carnot efficiency","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Chillers.BaseClasses.PartialCarnot_T","modifications":[{"name":"COP_is_for_cooling","qualifiers":["final"],"value":"false"},{"name":"QEva_flow_nominal","qualifiers":["final"],"value":"-QCon_flow_nominal*(COP_nominal-1)/(COP_nominal)"},{"name":"effInpEva","value":"Buildings.Fluid.Types.EfficiencyInput.port_a"},{"name":"effInpCon","value":"Buildings.Fluid.Types.EfficiencyInput.port_b"},{"name":"PEle","modifications":[{"name":"y","value":"QCon_flow/(COP)"}]},{"name":"con"},{"name":"eva"}]}],"components":[{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"QCon_flow_max","comment":"Maximum heat flow rate for heating (positive)","value":"Modelica.Constants.inf","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TSet","comment":"Condenser leaving water temperature","modifications":[{"name":"unit","value":"\"K\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,70},{-100,110}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a heat pump whose coefficient of performance COP changes\nwith temperatures in the same way as the Carnot efficiency changes.\nThe control input is the setpoint of the condenser leaving temperature, which\nis met exactly at steady state if the heat pump has sufficient capacity.\n\u003c/p\u003e\n\u003cp\u003e\nThe model allows to either specify the Carnot effectivness\n\u003ci\u003e\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e\u003c/i\u003e, or\na \u003ci\u003eCOP\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e\nat the nominal conditions, together with\nthe evaporator temperature \u003ci\u003eT\u003csub\u003eeva,0\u003c/sub\u003e\u003c/i\u003e and\nthe condenser temperature \u003ci\u003eT\u003csub\u003econ,0\u003c/sub\u003e\u003c/i\u003e, in which\ncase the model computes the Carnot effectivness as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e \u003d \n  COP\u003csub\u003e0\u003c/sub\u003e\n\u0026frasl;  (T\u003csub\u003econ,0\u003c/sub\u003e \u0026frasl; (T\u003csub\u003econ,0\u003c/sub\u003e-T\u003csub\u003eeva,0\u003c/sub\u003e)).\n\u003c/p\u003e\n\u003cp\u003e\nThe heat pump COP is computed as the product\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  COP \u003d \u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e COP\u003csub\u003eCarnot\u003c/sub\u003e \u0026eta;\u003csub\u003ePL\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eCOP\u003csub\u003eCarnot\u003c/sub\u003e\u003c/i\u003e is the Carnot efficiency and\n\u003ci\u003e\u0026eta;\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e is a polynomial in heating part load ratio \u003ci\u003ey\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e\nthat can be used to take into account a change in \u003ci\u003eCOP\u003c/i\u003e at part load\nconditions.\nThis polynomial has the form\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta;\u003csub\u003ePL\u003c/sub\u003e \u003d a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + ...\n\u003c/p\u003e\n\u003cp\u003e\nwhere the coefficients \u003ci\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e\nare declared by the parameter \u003ccode\u003ea\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nOn the \u003ccode\u003eDynamics\u003c/code\u003e tag, the model can be parametrized to compute a transient\nor steady-state response.\nThe transient response of the model is computed using a first\norder differential equation for the evaporator and condenser fluid volumes.\nThe heat pump outlet temperatures are equal to the temperatures of these lumped volumes.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nWhen using this component, make sure that the condenser has sufficient mass flow rate.\nBased on the evaporator mass flow rate, temperature difference and the efficiencies,\nthe model computes how much heat will be removed by to the evaporator.\nIf the mass flow rate is too small, very low outlet temperatures can result, possibly below freezing.\n\u003c/p\u003e\n\u003cp\u003e\nThe condenser heat flow rate \u003ccode\u003eQCon_flow_nominal\u003c/code\u003e is used to assign\nthe default value for the mass flow rates, which are used for the pressure drop\ncalculations.\nIt is also used to compute the part load efficiency.\nHence, make sure that \u003ccode\u003eQCon_flow_nominal\u003c/code\u003e is set to a reasonable value.\n\u003c/p\u003e\n\u003cp\u003e\nThe maximum heating capacity is set by the parameter \u003ccode\u003eQCon_flow_max\u003c/code\u003e,\nwhich is by default set to infinity.\n\u003c/p\u003e\n\u003cp\u003e\nBy default, the coefficient of performance depends on the\nevaporator entering temperature and the condenser leaving\ntemperature.\nThis can be changed with the parameters\n\u003ccode\u003eeffInpEva\u003c/code\u003e and\n\u003ccode\u003eeffInpCon\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eNotes\u003c/h4\u003e\n\u003cp\u003e\nFor a similar model that can be used as a chiller, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers.Examples.Carnot_TEva\\\"\u003e\nBuildings.Fluid.Chillers.Examples.Carnot_TEva\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line()})"}},"Buildings.Utilities.Psychrometrics.TWetBul_TDryBulXi":{"name":"Buildings.Utilities.Psychrometrics.TWetBul_TDryBulXi","comment":"Model to compute the wet bulb temperature based on mass fraction","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"approximateWetBulb","comment":"Set to true to approximate wet bulb temperature","value":"false"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TDryBul","comment":"Dry bulb temperature","modifications":[{"name":"start","value":"303"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p","comment":"Pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-90},{-100,-70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"TWetBul","comment":"Wet bulb temperature","modifications":[{"name":"start","value":"293"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"Xi","comment":"Species concentration at dry bulb temperature","arraySubscripts":"[Medium.nXi]","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}}],"classes":[{"name":"Buildings.Utilities.Psychrometrics.TWetBul_TDryBulXi.Medium","comment":"Medium model","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialCondensingGases"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block computes the wet bulb temperature for a given dry bulb temperature, mass fraction\nand atmospheric pressure.\n\u003c/p\u003e\n\u003cp\u003e\nIf the constant \u003ccode\u003eapproximateWetBulb\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e,\nthen the block uses the approximation of Stull (2011) to compute\nthe wet bulb temperature without requiring a nonlinear equation.\nOtherwise, the model will introduce one nonlinear equation.\n\u003c/p\u003e\n\u003cp\u003e\nThe approximation by Stull is valid for a relative humidity of \u003ci\u003e5%\u003c/i\u003e to \u003ci\u003e99%\u003c/i\u003e,\na temperature range from \u003ci\u003e-20\u0026circ;C\u003c/i\u003e to \u003ci\u003e50\u0026circ;C\u003c/i\u003e\nand standard sea level pressure.\nFor this range of data, the approximation error is \u003ci\u003e-1\u003c/i\u003e Kelvin to \u003ci\u003e+0.65\u003c/i\u003e Kelvin,\nwith a mean error of less than \u003ci\u003e0.3\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003cp\u003e\nFor a model that takes the relative humidity instead of the mass fraction as an input, see\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi\\\"\u003e\nBuildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nFor a use of this model, see for example\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.WetBulbTemperature\\\"\u003eBuildings.Fluid.Sensors.WetBulbTemperature\u003c/a\u003e\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nStull, Roland.\n\u003ci\u003e\u003ca href\u003d\\\"http://dx.doi.org/10.1175/JAMC-D-11-0143.1\\\"\u003e\nWet-Bulb Temperature from Relative Humidity and Air Temperature\nRoland Stull.\u003c/a\u003e\u003c/i\u003e\nJournal of Applied Meteorology and Climatology.\nVolume 50, Issue 11, pp. 2267-2269. November 2011\nDOI: 10.1175/JAMC-D-11-0143.1\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Ellipse(),Rectangle(),Polygon(),Line(),Line(),Line(),Line(),Line(),Text(),Text(),Text(),Text()})"}},"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_p":{"name":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_p","comment":"Terminal p for AC one phase systems","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package"],"value":"Buildings.Electrical.PhaseSystems.OnePhase"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Text(),Polygon()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector for AC one phase systems.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Polygon()})"}},"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_n":{"name":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_n","comment":"Terminal n for AC one phase systems","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package"],"value":"Buildings.Electrical.PhaseSystems.OnePhase"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Text(),Polygon()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector for AC one phase systems.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Polygon()})"}},"Buildings.HeatTransfer.Windows.Functions.devAbsExteriorIrradiationInteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.devAbsExteriorIrradiationInteriorShading","comment":"Angular and hemispherical absorptance of a shading device for exterior irradiation with interior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"absExtIrrIntShaDev","comment":"Absorptance of a shading device for exterior irradiation with interior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular and hemispherical absorptance of a shading device for exterior irradiation with interior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing the outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.WindTurbine":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.WindTurbine","comment":"Simple wind turbine source without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.UnbalancedWindTurbine","modifications":[{"name":"wt_phase1"},{"name":"wt_phase2"},{"name":"wt_phase3"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple wind turbine model for three-phase unbalanced systems\nwithout neutral cable connection.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.WindTurbine\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.WindTurbine\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.glassAbsInteriorIrradiationInteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassAbsInteriorIrradiationInteriorShading","comment":"Hemispherical absorptance of each glass pane for interior irradiation with interior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"absIntIrrNoSha","comment":"Hemispherical absorptance wfor interior irradiation without interior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,NSta]"},{"className":"Real","qualifiers":["array","output"],"name":"absIntIrrIntSha","comment":"Hemispherical absorbtance of each glass pane for interior irradiation with interior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the hemispherical absorbtance of each glass pane for interior irradiation with interior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing the outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.BoundaryConditions.WeatherData.ReaderTMY3":{"name":"Buildings.BoundaryConditions.WeatherData.ReaderTMY3","comment":"Reader for TMY3 weather data","qualifiers":["block"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"computeWetBulbTemperature","comment":"If true, then this model computes the wet bulb temperature","value":"true"},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"pAtmSou","comment":"Atmospheric pressure","value":"Buildings.BoundaryConditions.Types.DataSource.Parameter","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.SIunits.Pressure","qualifiers":["parameter"],"name":"pAtm","comment":"Atmospheric pressure (used if pAtmSou\u003dParameter)","value":"101325","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pAtm_in","comment":"Input pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""}],"conditionalClause":" if pAtmSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,254},{-200,294}}), iconTransformation(extent \u003d {{-240,254},{-200,294}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"ceiHeiSou","comment":"Ceiling height","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Real","qualifiers":["parameter"],"name":"ceiHei","comment":"Ceiling height (used if ceiHei\u003dParameter)","value":"20000","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Height\""},{"name":"unit","qualifiers":["final"],"value":"\"m\""},{"name":"displayUnit","value":"\"m\""}],"annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"ceiHei_in","comment":"Input ceiling height","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Height\""},{"name":"unit","qualifiers":["final"],"value":"\"m\""},{"name":"displayUnit","value":"\"m\""}],"conditionalClause":" if ceiHeiSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-242,-14},{-202,26}}), iconTransformation(extent \u003d {{-242,-14},{-202,26}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"totSkyCovSou","comment":"Total sky cover","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Real","qualifiers":["parameter"],"name":"totSkyCov","comment":"Total sky cover (used if totSkyCov\u003dParameter). Use 0 \u003c\u003d totSkyCov \u003c\u003d 1","value":"0.5","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"totSkyCov_in","comment":"Input total sky cover","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if totSkyCovSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,-58},{-200,-18}}), iconTransformation(extent \u003d {{-240,-58},{-200,-18}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"opaSkyCovSou","comment":"Opaque sky cover","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Real","qualifiers":["parameter"],"name":"opaSkyCov","comment":"Opaque sky cover (used if opaSkyCov\u003dParameter). Use 0 \u003c\u003d opaSkyCov \u003c\u003d 1","value":"0.5","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"opaSkyCov_in","comment":"Input opaque sky cover","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if opaSkyCovSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,32},{-200,72}}), iconTransformation(extent \u003d {{-240,32},{-200,72}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"TDryBulSou","comment":"Dry bulb temperature","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TDryBul","comment":"Dry bulb temperature (used if TDryBul\u003dParameter)","value":"293.15","modifications":[{"name":"displayUnit","value":"\"degC\""}],"annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TDryBul_in","comment":"Input dry bulb temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"conditionalClause":" if TDryBulSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,160},{-200,200}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"TDewPoiSou","comment":"Dew point temperature","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TDewPoi","comment":"Dew point temperature (used if TDewPoi\u003dParameter)","value":"283.15","modifications":[{"name":"displayUnit","value":"\"degC\""}],"annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TDewPoi_in","comment":"Input dew point temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"conditionalClause":" if TDewPoiSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,204},{-200,244}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"TBlaSkySou","comment":"Black-body sky temperature","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TBlaSky","comment":"Black-body sky temperature (used if TBlaSkySou\u003dParameter)","value":"273.15","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TBlaSky_in","comment":"Black-body sky temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"displayUnit","value":"\"degC\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""}],"conditionalClause":" if TBlaSkySou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,120},{-200,160}}), iconTransformation(extent \u003d {{-240,120},{-200,160}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"relHumSou","comment":"Relative humidity","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Real","qualifiers":["parameter"],"name":"relHum","comment":"Relative humidity (used if relHum\u003dParameter)","value":"0.5","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"relHum_in","comment":"Input relative humidity","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if relHumSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,80},{-200,120}}), iconTransformation(extent \u003d {{-240,80},{-200,120}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"winSpeSou","comment":"Wind speed","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.SIunits.Velocity","qualifiers":["parameter"],"name":"winSpe","comment":"Wind speed (used if winSpe\u003dParameter)","value":"1","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"winSpe_in","comment":"Input wind speed","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Velocity\""},{"name":"unit","qualifiers":["final"],"value":"\"m/s\""},{"name":"min","value":"0"}],"conditionalClause":" if winSpeSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,-98},{-200,-58}}), iconTransformation(extent \u003d {{-240,-98},{-200,-58}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"winDirSou","comment":"Wind direction","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"winDir","comment":"Wind direction (used if winDir\u003dParameter)","value":"1.0","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"winDir_in","comment":"Input wind direction","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Angle\""},{"name":"unit","qualifiers":["final"],"value":"\"rad\""},{"name":"displayUnit","value":"\"deg\""}],"conditionalClause":" if winDirSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,-140},{-200,-100}}), iconTransformation(extent \u003d {{-240,-140},{-200,-100}}))"}},{"className":"Buildings.BoundaryConditions.Types.DataSource","qualifiers":["parameter"],"name":"HInfHorSou","comment":"Infrared horizontal radiation","value":"Buildings.BoundaryConditions.Types.DataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.SIunits.HeatFlux","qualifiers":["parameter"],"name":"HInfHor","comment":"Infrared horizontal radiation (used if HInfHorSou\u003dParameter)","value":"0.0","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"HInfHor_in","comment":"Input infrared horizontal radiation","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"RadiantEnergyFluenceRate\""},{"name":"unit","qualifiers":["final"],"value":"\"W/m2\""}],"conditionalClause":" if HInfHorSou\u003d\u003dBuildings.BoundaryConditions.Types.DataSource.Input","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,-210},{-200,-170}}), iconTransformation(extent \u003d {{-240,-210},{-200,-170}}))"}},{"className":"Buildings.BoundaryConditions.Types.RadiationDataSource","qualifiers":["parameter"],"name":"HSou","comment":"Global, diffuse, and direct normal radiation","value":"Buildings.BoundaryConditions.Types.RadiationDataSource.File","annotations":{"dialog":"Dialog(group \u003d \"Data source\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"HGloHor_in","comment":"Input global horizontal radiation","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"RadiantEnergyFluenceRate\""},{"name":"unit","qualifiers":["final"],"value":"\"W/m2\""}],"conditionalClause":" if HSou\u003d\u003dBuildings.BoundaryConditions.Types.RadiationDataSource.Input_HGloHor_HDifHor or HSou\u003d\u003dBuildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HGloHor","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,-280},{-200,-240}}), iconTransformation(extent \u003d {{-240,-280},{-200,-240}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"HDifHor_in","comment":"Input diffuse horizontal radiation","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"RadiantEnergyFluenceRate\""},{"name":"unit","qualifiers":["final"],"value":"\"W/m2\""}],"conditionalClause":" if HSou\u003d\u003dBuildings.BoundaryConditions.Types.RadiationDataSource.Input_HGloHor_HDifHor or HSou\u003d\u003dBuildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HDifHor","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,-276},{-200,-236}}), iconTransformation(extent \u003d {{-240,-172},{-200,-132}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"HDirNor_in","comment":"Input direct normal radiation","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"RadiantEnergyFluenceRate\""},{"name":"unit","qualifiers":["final"],"value":"\"W/m2\""}],"conditionalClause":" if HSou\u003d\u003dBuildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HDifHor or HSou\u003d\u003dBuildings.BoundaryConditions.Types.RadiationDataSource.Input_HDirNor_HGloHor","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,-320},{-200,-280}}), iconTransformation(extent \u003d {{-240,-240},{-200,-200}}))"}},{"className":"String","qualifiers":["parameter"],"name":"filNam","comment":"Name of weather data file","value":"\"\"","annotations":{"dialog":"Dialog(loadSelector(filter \u003d \"Weather files (*.mos)\", caption \u003d \"Select weather file\"))"}},{"className":"Modelica.SIunits.Angle","qualifiers":["final","parameter"],"name":"lon","comment":"Longitude","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getLongitudeTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"deg\""}]},{"className":"Modelica.SIunits.Angle","qualifiers":["final","parameter"],"name":"lat","comment":"Latitude","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getLatitudeTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"deg\""}]},{"className":"Modelica.SIunits.Time","qualifiers":["final","parameter"],"name":"timZon","comment":"Time zone","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getTimeZoneTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"h\""}]},{"className":"Bus","name":"weaBus","comment":"Weather data bus","annotations":{"placement":"Placement(transformation(extent \u003d {{290,-10},{310,10}}), iconTransformation(extent \u003d {{190,-10},{210,10}}))"}},{"className":"Buildings.BoundaryConditions.Types.SkyTemperatureCalculation","qualifiers":["parameter"],"name":"calTSky","comment":"Computation of black-body sky temperature","value":"Buildings.BoundaryConditions.Types.SkyTemperatureCalculation.TemperaturesAndSkyCover","annotations":{"dialog":"Dialog(group \u003d \"Sky temperature\")"}},{"className":"Real","qualifiers":["constant"],"name":"epsCos","comment":"Small value to avoid division by 0","value":"1e-6"}],"classes":[{},{}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-300},{300,300}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component reads TMY3 weather data (Wilcox and Marion, 2008) or user specified weather data.\nThe weather data format is the Typical Meteorological Year (TMY3)\nas obtained from the EnergyPlus web site at\n\u003ca href\u003d\\\"http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\\\"\u003e\nhttp://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\u003c/a\u003e. These\ndata, which are in the EnergyPlus format, need to be converted as described\nin the next paragraph.\n\u003c/p\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ch4\u003eOutput to weaBus\u003c/h4\u003e\n\u003cp\u003e\nThe following variables serve as output and are accessible via \u003ccode\u003eweaBus\u003c/code\u003e:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003cth\u003eName\n  \u003c/th\u003e\n  \u003cth\u003eUnit\n  \u003c/th\u003e\n  \u003cth\u003eDescription\n  \u003c/th\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eHDifHor\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    W/m2\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Horizontal diffuse solar radiation.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eHDifNor\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    W/m2\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Direct normal radiation.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eHGloHor\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    W/m2\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Horizontal global radiation.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eHHorIR\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    W/m2\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Horizontal infrared irradiation.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eTBlaSky\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    K\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Output temperature.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eTDewPoi\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    K\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Dew point temperature.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eTDryBul\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    K\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Dry bulb temperature at ground level.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003eTWetBul\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    K\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Wet bulb temperature.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003ecelHei\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    m\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Ceiling height.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003ecloTim\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    s\n  \u003c/td\u003e\n  \u003ctd\u003e\n    One-based day number in seconds.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003elat\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    rad\n  \u003c/td\u003e\n  \u003ctd\u003e\n  Latitude of the location.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003elon\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    rad\n  \u003c/td\u003e\n  \u003ctd\u003e\n  Longitude of the location.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003enOpa\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    1\n  \u003c/td\u003e\n  \u003ctd\u003e\n  Opaque sky cover [0, 1].\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003enTot\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    1\n  \u003c/td\u003e\n  \u003ctd\u003e\n   Total sky Cover [0, 1].\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003epAtm\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Pa\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Atmospheric pressure.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003erelHum\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    1\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Relative humidity.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003esolAlt\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    rad\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Altitude angle.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003esolDec\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    rad\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Declination angle.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003esolHouAng\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    rad\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Solar hour angle.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003esolTim\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    s\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Solar time.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003esolZen\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    rad\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Zenith angle.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003ewinDir\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    rad\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Wind direction.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    \u003ccode\u003ewinSpe\u003c/code\u003e\n  \u003c/td\u003e\n  \u003ctd\u003e\n    m/s\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Wind speed.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ch4\u003eAdding new weather data\u003c/h4\u003e\n\u003cp\u003e\nTo add new weather data, proceed as follows:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nDownload the weather data file with the \u003ccode\u003eepw\u003c/code\u003e extension from\n\u003ca href\u003d\\\"http://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\\\"\u003e\nhttp://apps1.eere.energy.gov/buildings/energyplus/cfm/weather_data.cfm\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nAdd the file to \u003ccode\u003eBuildings/Resources/weatherdata\u003c/code\u003e (or to any directory\nfor which you have write permission).\n\u003c/li\u003e\n\u003cli\u003e\nOn a console window, type\u003cpre\u003e\n  cd Buildings/Resources/weatherdata\n  java -jar ../bin/ConvertWeatherData.jar inputFile.epw\n\u003c/pre\u003e\nThis will generate the weather data file \u003ccode\u003einputFile.mos\u003c/code\u003e, which can be read\nby the model\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.WeatherData.ReaderTMY3\\\"\u003e\nBuildings.BoundaryConditions.WeatherData.ReaderTMY3\u003c/a\u003e.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ch4\u003eLocation data that are read automatically from the weather data file\u003c/h4\u003e\n\u003cp\u003e\nThe following location data are automatically read from the weather file:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe latitude of the weather station, \u003ccode\u003elat\u003c/code\u003e,\n\u003c/li\u003e\n\u003cli\u003e\nthe longitude of the weather station, \u003ccode\u003elon\u003c/code\u003e, and\n\u003c/li\u003e\n\u003cli\u003e\nthe time zone relative to Greenwich Mean Time, \u003ccode\u003etimZone\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ch4\u003eWet bulb temperature\u003c/h4\u003e\n\u003cp\u003e\nBy default, the data bus contains the wet bulb temperature.\nThis introduces a nonlinear equation.\nHowever, we have not observed an increase in computing time because\nof this equation.\nTo disable the computation of the wet bulb temperature, set\n\u003ccode\u003ecomputeWetBulbTemperature\u003dfalse\u003c/code\u003e.\n\u003c/p\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ch4\u003eUsing constant or user-defined input signals for weather data\u003c/h4\u003e\n\u003cp\u003e\nThis model has the option of using a constant value, using the data from the weather file,\nor using data from an input connector for the following variables:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe atmospheric pressure,\n\u003c/li\u003e\n\u003cli\u003e\nthe ceiling height,\n\u003c/li\u003e\n\u003cli\u003e\nthe total sky cover pressure,\n\u003c/li\u003e\n\u003cli\u003e\nthe opaque sky cover pressure,\n\u003c/li\u003e\n\u003cli\u003e\nthe dry bulb temperature,\n\u003c/li\u003e\n\u003cli\u003e\nthe dew point temperature,\n\u003c/li\u003e\n\u003cli\u003e\nthe sky black body temperature,\n\u003c/li\u003e\n\u003cli\u003e\nthe relative humidity,\n\u003c/li\u003e\n\u003cli\u003e\nthe wind direction,\n\u003c/li\u003e\n\u003cli\u003e\nthe wind speed,\n\u003c/li\u003e\n\u003cli\u003e\nthe global horizontal radiation, direct normal and diffuse horizontal radiation,\nand\n\u003c/li\u003e\n\u003cli\u003e\nthe infrared horizontal radiation.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nBy default, all data are obtained from the weather data file,\nexcept for the atmospheric pressure, which is set to the\nparameter \u003ccode\u003epAtm\u003d101325\u003c/code\u003e Pascals.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003e*Sou\u003c/code\u003e configures the source of the data.\nFor the atmospheric pressure, temperatures, relative humidity, wind speed and wind direction,\nthe enumeration\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.Types.DataSource\\\"\u003e\nBuildings.BoundaryConditions.Types.DataSource\u003c/a\u003e\nis used as follows:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003cth\u003eParameter \u003ccode\u003e*Sou\u003c/code\u003e\n  \u003c/th\u003e\n  \u003cth\u003eData used to compute weather data.\n  \u003c/th\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    File\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Use data from file.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    Parameter\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Use value specified by the parameter.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    Input\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Use value from the input connector.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\nBecause global, diffuse and direct radiation are related to each other, the parameter\n\u003ccode\u003eHSou\u003c/code\u003e is treated differently.\nIt is set to a value of the enumeration\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.Types.RadiationDataSource\\\"\u003e\nBuildings.BoundaryConditions.Types.RadiationDataSource\u003c/a\u003e,\nand allows the following configurations:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003cth\u003eParameter \u003ccode\u003eHSou\u003c/code\u003e\n  \u003c/th\u003e\n  \u003cth\u003eData used to compute weather data.\n  \u003c/th\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    File\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Use data from file.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    Input_HGloHor_HDifHor\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Use global horizontal and diffuse horizontal radiation from input connector.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    Input_HDirNor_HDifHor\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Use direct normal and diffuse horizontal radiation from input connector.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003ctd\u003e\n    Input_HDirNor_HGloHor\n  \u003c/td\u003e\n  \u003ctd\u003e\n    Use direct normal and global horizontal radiation from input connector.\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\n\u003cb\u003eNotes\u003c/b\u003e\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\nIn HVAC systems, when the fan is off, changes in atmospheric pressure can cause small air flow rates\nin the duct system due to change in pressure and hence in the mass of air that is stored\nin air volumes (such as in fluid junctions or in the room model).\nThis may increase computing time. Therefore, the default value for the atmospheric pressure is set to a constant.\nFurthermore, if the initial pressure of air volumes are different\nfrom the atmospheric pressure, then fast pressure transients can happen in the first few seconds of the simulation.\nThis can cause numerical problems for the solver. To avoid this problem, set the atmospheric pressure to the\nsame value as the medium default pressure, which is typically set to the parameter \u003ccode\u003eMedium.p_default\u003c/code\u003e.\nFor medium models for moist air and dry air, the default is\n\u003ccode\u003eMedium.p_default\u003d101325\u003c/code\u003e Pascals.\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\nDifferent units apply depending on whether data are obtained from a file, or\nfrom a parameter or an input connector:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nWhen using TMY3 data from a file (e.g. \u003ccode\u003eUSA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos\u003c/code\u003e), the units must be the same as the original TMY3 file used by EnergyPlus (e.g.\n\u003ccode\u003eUSA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw\u003c/code\u003e).\nThe TMY3 data used by EnergyPlus are in both SI units and non-SI units.\nIf \u003ccode\u003eResources/bin/ConvertWeatherData.jar\u003c/code\u003e is used to convert the \u003ccode\u003e.epw\u003c/code\u003e file to an \u003ccode\u003e.mos\u003c/code\u003e file, the units of the TMY3 data are preserved and the file can be directly\nused by this data reader.\nThe data reader will automatically convert units to the SI units used by Modelica.\nFor example, the dry bulb temperature \u003ccode\u003eTDryBul\u003c/code\u003e in TMY3 is in degree Celsius.\nThe data reader will automatically convert the data to Kelvin.\nThe wind direction \u003ccode\u003ewinDir\u003c/code\u003e in TMY3 is degrees and will be automatically converted to radians.\n\u003c/li\u003e\n\u003cli\u003e\nWhen using data from a parameter or from an input connector,\nthe data must be in the SI units used by Modelica.\nFor instance, the unit must be\n\u003ccode\u003ePa\u003c/code\u003e for pressure,\n\u003ccode\u003eK\u003c/code\u003e for temperature,\n\u003ccode\u003eW/m2\u003c/code\u003e for solar radiations and\n\u003ccode\u003erad\u003c/code\u003e for wind direction.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\nThe ReaderTMY3 should only be used with TMY3 data. It contains a time shift for solar radiation data\nthat is explained below. This time shift needs to be removed if the user may want to\nuse the ReaderTMY3 for other weather data types.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003ch5\u003eStart and end data for annual weather data files\u003c/h5\u003e\n\u003cp\u003e\nThe TMY3 weather data, as well as the EnergyPlus weather data, start at 1:00 AM\non January 1, and provide hourly data until midnight on December 31.\nThus, the first entry for temperatures, humidity, wind speed etc. are values\nat 1:00 AM and not at midnight. Furthermore, the TMY3 weather data files can have\nvalues at midnight of December 31 that may be significantly different from the values\nat 1:00 AM on January 1.\nSince annual simulations require weather data that start at 0:00 on January 1,\ndata need to be provided for this hour. Due to the possibly large change in\nweatherdata between 1:00 AM on January 1 and midnight at December 31,\nthe weather data files in the Buildings library do not use the data entry from\nmidnight at December 31 as the value for \u003ci\u003et\u003d0\u003c/i\u003e. Rather, the\nvalue from 1:00 AM on January 1 is duplicated and used for 0:00 on January 1.\nTo maintain a data record with \u003ci\u003e8760\u003c/i\u003e hours, the weather data record from\nmidnight at December 31 is deleted.\nThese changes in the weather data file are done in the Java program that converts\nEnergyPlus weather data file to Modelica weather data files, and which is described\nbelow.\n\u003c/p\u003e\n\u003ch5\u003eTime shift for solar radiation data\u003c/h5\u003e\n\u003cp\u003e\nTo read weather data from the TMY3 weather data file, there are\ntwo data readers in this model. One data reader obtains all data\nexcept solar radiation, and the other data reader reads only the\nsolar radiation data, shifted by \u003ci\u003e30\u003c/i\u003e minutes.\nThe reason for this time shift is as follows:\nThe TMY3 weather data file contains for solar radiation the\n\\\"...radiation received\non a horizontal surface during\nthe 60-minute period ending at\nthe timestamp.\\\"\n\nThus, as the figure below shows, a more accurate interpolation is obtained if\ntime is shifted by \u003ci\u003e30\u003c/i\u003e minutes prior to reading the weather data.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/BoundaryConditions/WeatherData/RadiationTimeShift.png\\\"\nborder\u003d\\\"1\\\" /\u003e\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\nWilcox S. and W. Marion. \u003ci\u003eUsers Manual for TMY3 Data Sets\u003c/i\u003e.\nTechnical Report, NREL/TP-581-43156, revised May 2008.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}, initialScale \u003d 0.05), graphics \u003d {Rectangle(),Text(),Text(),Text(),Text(),Text(),Text(),Text(),Text(),Text(),Ellipse(),Polygon()})"}},"Buildings.Fluid.Sensors.TemperatureWetBulbTwoPort":{"name":"Buildings.Fluid.Sensors.TemperatureWetBulbTwoPort","comment":"Ideal wet bulb temperature sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"T","comment":"Wet bulb temperature in port medium","modifications":[{"name":"start","value":"TWetBul_start"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,110}))"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TWetBul_start","comment":"Initial or guess value of wet bulb temperature (used to compute initial output signal))","value":"Medium.T_default","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis sensor outputs the wet bulb temperature of the medium in the flow\nbetween its fluid ports. The sensor is ideal, i.e., it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Ellipse(),Line(),Line(),Line(),Rectangle(),Polygon(),Text(),Line(),Line(),Line()})"}},"Buildings.BoundaryConditions.SkyTemperature.BlackBody":{"name":"Buildings.BoundaryConditions.SkyTemperature.BlackBody","comment":"Calculate black body sky temperature","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Buildings.BoundaryConditions.Types.SkyTemperatureCalculation","qualifiers":["parameter"],"name":"calTSky","comment":"Computation of black-body sky temperature","value":"SkyTemperatureCalculation.TemperaturesAndSkyCover"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TDryBul","comment":"Dry bulb temperature at ground level","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TDewPoi","comment":"Dew point temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,10},{-100,50}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"nOpa","comment":"Opaque sky cover [0, 1]","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-50},{-100,-10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"TBlaSky","comment":"Black-body sky temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"displayUnit","value":"\"degC\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"HHorIR","comment":"Horizontal infrared irradiation","modifications":[{"name":"unit","value":"\"W/m2\""},{"name":"min","value":"0"},{"name":"nominal","value":"100"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-100},{-100,-60}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the black-body sky temperature.\n\u003c/p\u003e\n\u003cp\u003e\nFor \u003ccode\u003ecalTSky \u003d 0\u003c/code\u003e, the model uses horizontal infrared irradiation.\nOtherwise, it uses dry buld temperature, dew point temperature and opaque sky cover.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Text(),Text(),Text(),Text(),Text()})"}},"Buildings.Media.Air.setState_dTX":{"name":"Buildings.Media.Air.setState_dTX","comment":"Return thermodynamic state as function of density d, temperature T and composition X","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Density","qualifiers":["input"],"name":"d","comment":"Density"},{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"Temperature"},{"className":"MassFraction","qualifiers":["array","input"],"name":"X","comment":"Mass fractions","value":"reference_X","arraySubscripts":"[:]"},{"className":"ThermodynamicState","qualifiers":["output"],"name":"state","comment":"Thermodynamic state"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThe \u003ca href\u003d\\\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\\\"\u003ethermodynamic state record\u003c/a\u003e\n    is computed from density \u003ccode\u003ed\u003c/code\u003e, temperature \u003ccode\u003eT\u003c/code\u003e and composition \u003ccode\u003eX\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Impedance":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Impedance","comment":"Model of a three-phase unbalanced impedance without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.Impedance","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced impedance without neutral cable.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.Impedance\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.Impedance\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Impedance\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Impedance\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Line(),Line(),Text(),Line(),Rectangle(),Line(),Line(),Line(),Rectangle(),Line(),Line(),Rectangle(),Line()})"}},"Buildings.Fluid.Types.HeatExchangerFlowRegime":{"name":"Buildings.Fluid.Types.HeatExchangerFlowRegime","comment":"Enumeration for heat exchanger flow configuration","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"ParallelFlow","comment":"Parallel flow"},{"className":"EnumType","qualifiers":["constant"],"name":"CounterFlow","comment":"Counter flow"},{"className":"EnumType","qualifiers":["constant"],"name":"CrossFlowUnmixed","comment":"Cross flow, both streams unmixed"},{"className":"EnumType","qualifiers":["constant"],"name":"CrossFlowCMinMixedCMaxUnmixed","comment":"Cross flow, CMin mixed,   CMax unmixed"},{"className":"EnumType","qualifiers":["constant"],"name":"CrossFlowCMinUnmixedCMaxMixed","comment":"Cross flow, CMin unmixed, CMax mixed"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\n Enumeration to define the heat exchanger flow regime.\n\u003c/p\u003e\n\u003cp\u003e\nThis enumeration defines for the current capacity flow rate the kind of\nheat transfer relation that will be used to compute the relation between\neffectiveness and Number of Transfer Units.\n\u003c/p\u003e\n\u003cp\u003e\nThe following heat exchanger flow regimes are available in this enumeration:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\u003cth\u003eEnumeration\u003c/th\u003e\u003cth\u003eDescription\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eParallelFlow\u003c/td\u003e\u003ctd\u003eParallel flow\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCounterFlow\u003c/td\u003e\u003ctd\u003eCounter flow\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCrossFlowUnmixed\u003c/td\u003e\u003ctd\u003eCross flow, both streams unmixed\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCrossFlowCMinMixedCMaxUnmixed\u003c/td\u003e\u003ctd\u003eCross flow, CMin mixed,   CMax unmixed\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCrossFlowCMinUnmixedCMaxMixed\u003c/td\u003e\u003ctd\u003eCross flow, CMin unmixed, CMax mixed\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.BaseProperties":{"name":"Buildings.Media.Specialized.Air.PerfectGas.BaseProperties","qualifiers":["replaceable","model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.BaseProperties","modifications":[{"name":"p","modifications":[{"name":"stateSelect","value":"if preferredMediumStates then StateSelect.prefer else StateSelect.default"}]},{"name":"Xi","modifications":[{"name":"stateSelect","qualifiers":["each"],"value":"if preferredMediumStates then StateSelect.prefer else StateSelect.default"}]},{"name":"standardOrderComponents","qualifiers":["final"],"value":"true"}]}]},"Buildings.Electrical.PhaseSystems.OnePhase.rotate":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.rotate","comment":"Rotate a vector of an angle theta (anti-counterclock)","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.rotate"}]},"Buildings.Media.Specialized.Air.PerfectGas.temperature_phX":{"name":"Buildings.Media.Specialized.Air.PerfectGas.temperature_phX","comment":"Compute temperature from specific enthalpy and mass fraction","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"AbsolutePressure","qualifiers":["input"],"name":"p","comment":"Pressure"},{"className":"SpecificEnthalpy","qualifiers":["input"],"name":"h","comment":"specific enthalpy"},{"className":"MassFraction","qualifiers":["array","input"],"name":"X","comment":"mass fractions of composition","arraySubscripts":"[:]"},{"className":"Temperature","qualifiers":["output"],"name":"T","comment":"temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nTemperature as a function of specific enthalpy and species concentration.\nThe pressure is input for compatibility with the medium models, but the temperature\nis independent of the pressure.\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.ConstantEffectiveness":{"name":"Buildings.Fluid.HeatExchangers.ConstantEffectiveness","comment":"Heat exchanger with constant effectiveness","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.BaseClasses.PartialEffectiveness","modifications":[{"name":"sensibleOnly1","value":"true"},{"name":"sensibleOnly2","value":"true"},{"name":"prescribedHeatFlowRate1","qualifiers":["final"],"value":"true"},{"name":"prescribedHeatFlowRate2","qualifiers":["final"],"value":"true"},{"name":"Q1_flow","value":"eps*QMax_flow"},{"name":"Q2_flow","value":"-Q1_flow"},{"name":"mWat1_flow","value":"0"},{"name":"mWat2_flow","value":"0"}]}],"components":[{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"eps","comment":"Heat exchanger effectiveness","value":"0.8","modifications":[{"name":"max","value":"1"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for a heat exchanger with constant effectiveness.\n\u003c/p\u003e\n\u003cp\u003e\nThis model transfers heat in the amount of\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  Q \u003d Q\u003csub\u003emax\u003c/sub\u003e \u0026epsilon;,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003e\u0026epsilon;\u003c/i\u003e is a constant effectiveness and\n\u003ci\u003eQ\u003csub\u003emax\u003c/sub\u003e\u003c/i\u003e is the maximum heat that can be transferred.\n\u003c/p\u003e\n\u003cp\u003e\nFor a heat and moisture exchanger, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.ConstantEffectiveness\\\"\u003e\nBuildings.Fluid.MassExchangers.ConstantEffectiveness\u003c/a\u003e\ninstead of this model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text()})"}},"Buildings.Fluid.Types.CvTypes":{"name":"Buildings.Fluid.Types.CvTypes","comment":"Enumeration to define the choice of valve flow coefficient","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"OpPoint","comment":"flow coefficient defined by m_flow_nominal/sqrt(dp_nominal)"},{"className":"EnumType","qualifiers":["constant"],"name":"Kv","comment":"Kv (metric) flow coefficient"},{"className":"EnumType","qualifiers":["constant"],"name":"Cv","comment":"Cv (US) flow coefficient"},{"className":"EnumType","qualifiers":["constant"],"name":"Av","comment":"Av (metric) flow coefficient"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\n\u003cp\u003e\nEnumeration to define the choice of valve flow coefficient\n(to be selected via choices menu):\n\u003c/p\u003e\n\n\u003ctable summary\u003d\\\"summary\\\"  border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\u003cth\u003eEnumeration\u003c/th\u003e\n    \u003cth\u003eDescription\u003c/th\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eOpPoint\u003c/td\u003e\n    \u003ctd\u003eflow coefficient defined by ratio m_flow_nominal/sqrt(dp_nominal)\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eKv\u003c/td\u003e\n    \u003ctd\u003eKv (metric) flow coefficient\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eCv\u003c/td\u003e\n    \u003ctd\u003eCv (US) flow coefficient\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eAv\u003c/td\u003e\n    \u003ctd\u003eAv (metric) flow coefficient\u003c/td\u003e\u003c/tr\u003e\n\n\u003c/table\u003e\n\n\u003cp\u003e\nThe details of the coefficients are explained in the\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.UsersGuide.ComponentDefinition.ValveCharacteristics\\\"\u003e\nUsers Guide\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.OnePhase.Sensors.GeneralizedSensor":{"name":"Buildings.Electrical.AC.OnePhase.Sensors.GeneralizedSensor","comment":"Sensor for power, voltage and current","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Icons.GeneralizedSensor"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialTwoPort","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"V","comment":"Voltage","value":"Buildings.Electrical.PhaseSystems.OnePhase.systemVoltage(terminal_n.v)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ElectricPotential\""},{"name":"unit","qualifiers":["final"],"value":"\"V\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"I","comment":"Current","value":"Buildings.Electrical.PhaseSystems.OnePhase.systemCurrent(terminal_n.i)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ElectricCurrent\""},{"name":"unit","qualifiers":["final"],"value":"\"A\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"S","comment":"Phase powers","value":"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers_vi()","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"Power\""},{"name":"unit","qualifiers":["final","each"],"value":"\"W\""}],"arraySubscripts":"[PhaseSystems.OnePhase.n]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-90}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIdeal sensor that measures power, voltage and current.\nThe two components of the power \u003ci\u003eS\u003c/i\u003e are the active and reactive power.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Utilities.Math.Functions.smoothExponential":{"name":"Buildings.Utilities.Math.Functions.smoothExponential","comment":"Once continuously differentiable approximation to exp(-|x|) in interval |x| \u003c delta","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Input argument"},{"className":"Real","qualifiers":["input"],"name":"delta","comment":"Transition point where approximation occurs"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Output argument"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction to provide a once continuously differentiable approximation\nto \u003ci\u003eexp(- |x| )\u003c/i\u003e\nin the interval \u003ci\u003e|x| \u0026lt; \u0026delta;\u003c/i\u003e for some positive \u003ci\u003e\u0026delta;\u003c/i\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Controls.SetPoints.OccupancySchedule.switchInteger":{},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall","comment":"Wall separating FLEXLAB test cells from the adjoining\n      electrical rooms","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"5"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a construction of a dividing wall commonly found in FLEXLAB test\n    cells. It is used to divide one test cell from another (cell A and cell B)\n    as well as separate the test cell from the connected electrical room.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a construction of a dividing wall commonly found in FLEXLAB test\n    cells. It is used to divide one test cell from another (cell A and cell B)\n    as well as separate the test cell from the connected electrical room.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.DirectCurrent.phase":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.phase","comment":"Return phase","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.phase"}]},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.systemVoltage":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.systemVoltage","comment":"Return system voltage as function of phase voltages","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.systemVoltage"}]},"Buildings.Electrical.DC.Interfaces.Terminal_n":{"name":"Buildings.Electrical.DC.Interfaces.Terminal_n","comment":"Terminal n for DC electrical systems","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"Buildings.Electrical.PhaseSystems.TwoConductor"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector for DC electrical systems.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()})"}},"Buildings.HeatTransfer.Windows.ExteriorHeatTransfer":{"name":"Buildings.HeatTransfer.Windows.ExteriorHeatTransfer","comment":"Model for heat convection and radiation at the exterior surface of a window that may have a shading device","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.BaseClasses.PartialWindowBoundaryCondition","modifications":[{"name":"thisSideHasShade","qualifiers":["final"],"value":"haveExteriorShade"}]}],"components":[{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIRSha_air","comment":"Infrared absorptivity of shade surface that faces air","annotations":{"dialog":"Dialog(group \u003d \"Shading\")"}},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIRSha_glass","comment":"Infrared absorptivity of shade surface that faces glass","annotations":{"dialog":"Dialog(group \u003d \"Shading\")"}},{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["parameter"],"name":"tauIRSha_air","comment":"Infrared transmissivity of shade for radiation coming from the exterior or the room","annotations":{"dialog":"Dialog(group \u003d \"Shading\")"}},{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["parameter"],"name":"tauIRSha_glass","comment":"Infrared transmissivity of shade for radiation coming from the glass","annotations":{"dialog":"Dialog(group \u003d \"Shading\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearizeRadiation","comment":"Set to true to linearize emissive power"},{"className":"Real","qualifiers":["parameter"],"name":"vieFacSky","comment":"View factor from receiving surface to sky","modifications":[{"name":"min","qualifiers":["final"],"value":"0"},{"name":"max","qualifiers":["final"],"value":"1"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"vWin","comment":"Wind speed","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"m/s\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}), iconTransformation(extent \u003d {{-116,32},{-100,48}}))"}},{"className":"Buildings.HeatTransfer.Windows.BaseClasses.ExteriorConvectionCoefficient","name":"conCoeGla","comment":"Model for the outside convective heat transfer coefficient of the glass","modifications":[{"name":"A","qualifiers":["final"],"value":"AGla"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-84,40},{-64,60}}))"}},{"className":"Buildings.HeatTransfer.Windows.BaseClasses.ExteriorConvectionCoefficient","name":"conCoeFra","comment":"Model for the outside convective heat transfer coefficient of the frame","modifications":[{"name":"A","qualifiers":["final"],"value":"AFra"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-80},{0,-60}}))"}},{"className":"Radiosity.OutdoorRadiosity","name":"radOut","comment":"Outdoor radiosity","modifications":[{"name":"A","qualifiers":["final"],"value":"AGla"},{"name":"vieFacSky","value":"vieFacSky"},{"name":"linearize","value":"linearizeRadiation"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-72,-72},{-52,-52}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TBlaSky","comment":"Black body sky temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}), iconTransformation(extent \u003d {{-120,-50},{-100,-30}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TOut","comment":"Outside temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-100},{-100,-60}}), iconTransformation(extent \u003d {{-120,-92},{-100,-72}}))"}},{"className":"Interfaces.RadiosityOutflow","name":"JOutUns","comment":"Outgoing radiosity that connects to unshaded part of glass","annotations":{"placement":"Placement(transformation(extent \u003d {{100,70},{120,90}}))"}},{"className":"Interfaces.RadiosityInflow","name":"JInUns","comment":"Incoming radiosity that connects to unshaded part of glass","annotations":{"placement":"Placement(transformation(extent \u003d {{120,50},{100,70}}))"}},{"className":"Interfaces.RadiosityOutflow","name":"JOutSha","comment":"Outgoing radiosity that connects to shaded part of glass","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-70},{120,-50}}))"}},{"className":"Interfaces.RadiosityInflow","name":"JInSha","comment":"Incoming radiosity that connects to shaded part of glass","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{120,-90},{100,-70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"QSolAbs_flow","comment":"Solar radiation absorbed by shade","modifications":[{"name":"unit","value":"\"W\""},{"name":"quantity","value":"\"Power\""}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(origin \u003d {0,-120}, extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,-110}))"}},{"className":"BaseClasses.ShadeRadiation","name":"shaRad","comment":"Radiative heat balance of shade","modifications":[{"name":"thisSideHasShade","qualifiers":["final"],"value":"thisSideHasShade"},{"name":"A","qualifiers":["final"],"value":"AGla"},{"name":"linearize","qualifiers":["final"],"value":"linearizeRadiation"},{"name":"absIR_air","qualifiers":["final"],"value":"if thisSideHasShade then absIRSha_air else 0"},{"name":"absIR_glass","qualifiers":["final"],"value":"if thisSideHasShade then absIRSha_glass else 0"},{"name":"tauIR_air","qualifiers":["final"],"value":"if thisSideHasShade then tauIRSha_air else 1"},{"name":"tauIR_glass","qualifiers":["final"],"value":"if thisSideHasShade then tauIRSha_glass else 1"}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{0,-20},{20,0}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Components.Convection","name":"conFra","comment":"Convective heat transfer between air and frame","annotations":{"placement":"Placement(transformation(extent \u003d {{50,-98},{30,-78}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Components.Convection","name":"conWinUns","comment":"Convection from unshaded part of window to outside or room air","annotations":{"placement":"Placement(transformation(extent \u003d {{60,0},{40,20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for the convective heat transfer between a window shade, a window surface\nand the room air.\nThis model is applicable for the outside-facing surface of a window system and\ncan be used with the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Window\\\"\u003e\nBuildings.HeatTransfer.Windows.Window\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model adds the convective heat transfer coefficient to its base model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Ellipse(),Text(),Text(),Text()})"}},"Buildings.Electrical.AC.OnePhase.Lines.Network":{"name":"Buildings.Electrical.AC.OnePhase.Lines.Network","comment":"Single phase AC network","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialNetwork","modifications":[{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]},{"name":"terminal"},{"name":"grid"},{"name":"lines"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_C","comment":"If true, model the cable capacity","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Model\", group \u003d \"Assumptions\")"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"modelMode","comment":"Select between steady state and dynamic model","value":"Types.Load.FixedZ_steady_state","annotations":{"dialog":"Dialog(tab \u003d \"Model\", group \u003d \"Assumptions\", enable \u003d use_C)"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["array"],"name":"VAbs","comment":"RMS voltage of the grid nodes","arraySubscripts":"[grid.nNodes]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generalized electrical AC single phase network.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.BaseClasses.PartialNetwork\\\"\u003e\nBuildings.Electrical.Transmission.BaseClasses.PartialNetwork\u003c/a\u003e\nfor information about the network model.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.Grids.PartialGrid\\\"\u003e\nBuildings.Electrical.Transmission.Grids.PartialGrid\u003c/a\u003e\nfor more information about the topology of the network, such as\nthe number of nodes, how they are connected, and the length of each connection.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line()})"}},"Buildings.Electrical.DC.Interfaces.Terminal_p":{"name":"Buildings.Electrical.DC.Interfaces.Terminal_p","comment":"Terminal p for DC electrical systems","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"Buildings.Electrical.PhaseSystems.TwoConductor"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector for DC electrical systems.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()})"}},"Buildings.Electrical.Interfaces.Impedance":{"name":"Buildings.Electrical.Interfaces.Impedance","comment":"Partial model representing a generalized impedance","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Load","modifications":[{"name":"linearized","qualifiers":["final"],"value":"false"},{"name":"mode","qualifiers":["final"],"value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"P_nominal","qualifiers":["final"],"value":"0","modifications":[{"name":"fixed","value":"true"}]},{"name":"V_nominal","qualifiers":["final"],"value":"1","modifications":[{"name":"fixed","value":"true"}]}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"inductive","comment":"If true, the load is inductive, otherwise it is capacitive","value":"true"},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance","value":"1","modifications":[{"name":"start","value":"1"},{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(enable \u003d not use_R_in)"}},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"L","comment":"Inductance","value":"0","modifications":[{"name":"start","value":"0"},{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(enable \u003d inductive and not use_L_in)"}},{"className":"Modelica.SIunits.Capacitance","qualifiers":["parameter"],"name":"C","comment":"Capacitance","value":"0","modifications":[{"name":"start","value":"0"},{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(enable \u003d not inductive and not use_C_in)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_R_in","comment":"If true, R is specified by an input","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Variable load\", group \u003d \"Resistance\")"}},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"RMin","comment":"Minimum value of the resistance","value":"1e-4","modifications":[{"name":"start","value":"R"},{"name":"min","value":"Modelica.Constants.eps"}],"annotations":{"dialog":"Dialog(enable \u003d use_R_in, tab \u003d \"Variable load\", group \u003d \"Resistance\")"}},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"RMax","comment":"Maximum value of the resistance","value":"1e2","modifications":[{"name":"start","value":"R"},{"name":"min","value":"Modelica.Constants.eps"}],"annotations":{"dialog":"Dialog(enable \u003d use_R_in, tab \u003d \"Variable load\", group \u003d \"Resistance\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_C_in","comment":"If true, C is specified by an input","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Variable load\", group \u003d \"Capacitance\")"}},{"className":"Modelica.SIunits.Capacitance","qualifiers":["parameter"],"name":"CMin","comment":"Minimum value of the capacitance","value":"1e-4","modifications":[{"name":"start","value":"C"},{"name":"min","value":"Modelica.Constants.eps"}],"annotations":{"dialog":"Dialog(enable \u003d use_C_in, tab \u003d \"Variable load\", group \u003d \"Capacitance\")"}},{"className":"Modelica.SIunits.Capacitance","qualifiers":["parameter"],"name":"CMax","comment":"Maximum value of the capacitance","value":"1e2","modifications":[{"name":"start","value":"C"},{"name":"min","value":"Modelica.Constants.eps"}],"annotations":{"dialog":"Dialog(enable \u003d use_C_in, tab \u003d \"Variable load\", group \u003d \"Capacitance\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_L_in","comment":"If true, L is specified by an input","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Variable load\", group \u003d \"Inductance\")"}},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"LMin","comment":"Minimum value of the inductance","value":"1e-4","modifications":[{"name":"start","value":"L"},{"name":"min","value":"Modelica.Constants.eps"}],"annotations":{"dialog":"Dialog(enable \u003d use_L_in, tab \u003d \"Variable load\", group \u003d \"Inductance\")"}},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"LMax","comment":"Maximum value of the inductance","value":"1e2","modifications":[{"name":"start","value":"L"},{"name":"min","value":"Modelica.Constants.eps"}],"annotations":{"dialog":"Dialog(enable \u003d use_L_in, tab \u003d \"Variable load\", group \u003d \"Inductance\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y_R","comment":"Input that sepecify variable R","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"conditionalClause":" if use_R_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {-40,100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y_C","comment":"Input that sepecify variable C","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"conditionalClause":" if use_C_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y_L","comment":"Input that sepecify variable L","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"conditionalClause":" if use_L_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {40,100}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generalized interface for an impedance.\n\u003c/p\u003e\n\u003cp\u003e\nThe model has a single generalized electric terminal of type\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Terminal\\\"\u003e\nBuildings.Electrical.Interfaces.Terminal\u003c/a\u003e\nthat can be redeclared.\nThe impedance can be of different types:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eresistive,\u003c/li\u003e\n\u003cli\u003einductive,\u003c/li\u003e\n\u003cli\u003eresistive and inductive,\u003c/li\u003e\n\u003cli\u003ecapacitive, and\u003c/li\u003e\n\u003cli\u003eresistive and capacitive.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nThe values of the resistance \u003ccode\u003eR\u003c/code\u003e, capacitance \u003ccode\u003eC\u003c/code\u003e and\ninductance \u003ccode\u003eL\u003c/code\u003e can be\nspecified as parameters of the model.\n\u003c/p\u003e\n\u003cp\u003e\nThe values of the resistance \u003ccode\u003eR\u003c/code\u003e, capacitance \u003ccode\u003eC\u003c/code\u003e\nand inductance \u003ccode\u003eL\u003c/code\u003e can also be\nspecified by using the input variables \u003ccode\u003ey_R\u003c/code\u003e, \u003ccode\u003ey_C\u003c/code\u003e,\nand \u003ccode\u003ey_L\u003c/code\u003e that are Real values between \u003ci\u003e[0,1]\u003c/i\u003e.\u003cbr/\u003e\nThese input values are enabled by the boolean flags \u003ccode\u003euse_R_in\u003c/code\u003e,\n\u003ccode\u003euse_L_in\u003c/code\u003e, and\n\u003ccode\u003euse_C_in\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch5\u003eExample\u003c/h5\u003e\n\u003cp\u003e\nIf the flag \u003ccode\u003euse_R_in \u003d true\u003c/code\u003e, the value of \u003ccode\u003eR\u003c/code\u003e is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR \u003d R\u003csub\u003emin\u003c/sub\u003e + y\u003csub\u003eR\u003c/sub\u003e (R\u003csub\u003emax\u003c/sub\u003e - R\u003csub\u003emin\u003c/sub\u003e)\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_500":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_500","comment":"Annealed Al cable - AWG 500","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"size","value":"\"500\""},{"name":"Rdc","value":"0.116142e-3"},{"name":"T_ref","value":"298.15"},{"name":"d","value":"20.066e-3"},{"name":"D","value":"37.592e-3"},{"name":"GMR","value":"Buildings.Electrical.Transmission.Functions.computeGMR(d)"},{"name":"GMD","value":"Buildings.Electrical.Transmission.Functions.computeGMD(0.1905)"},{"name":"Amp","value":"450"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAnnealed aluminium cable with a cross-sectional kcmil 500\n(thousand of Circular Mils).\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRdc  \u003d 0.116142e-3 // Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref\u003d 298.15      // Reference temperature of the material [K]\nd    \u003d 20.066e-3   // Inner diameter [m]\nD    \u003d 37.592e-3   // Outer diameter [m]\nAmp  \u003d 450         // Ampacity [A]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCellFullBed":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCellFullBed","comment":"Model of LBNL User Test Facility Cell X3A intended for connection with X3B.TestCell","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"AFlo","value":"60.97"},{"name":"nSurBou","value":"5"},{"name":"nConPar","value":"0"},{"name":"nConBou","value":"4"},{"name":"nConExt","value":"4"},{"name":"nConExtWin","value":"1"},{"name":"hRoo","value":"3.6576"},{"name":"surBou","modifications":[{"name":"A","value":"{6.645*3.09,6.645*1.51,6.645*0.91,6.645*3.65,3.6575*9.144}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","value":"{Buildings.Types.Tilt.Floor,Buildings.Types.Tilt.Floor,Buildings.Types.Tilt.Floor,Buildings.Types.Tilt.Floor,Buildings.Types.Tilt.Wall}"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{extDoo,R16p8Wal,R20Wal,bedDiv}"},{"name":"A","value":"{1.3716*2.39,3.6576*2.52-2.39*1.3716,6.6675*9.144,3.6576*1.524}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling,Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.S,Buildings.Types.Azimuth.W}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{bedDiv,parCon,parDoo,R52Wal}"},{"name":"A","value":"{3.6576*7.62,3.6576*2.886075-2.39*1.22,2.39*1.22,3.6576*1.2614}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N}"}]},{"name":"datConExtWin","modifications":[{"name":"layers","value":"{R16p8Wal}"},{"name":"A","value":"{6.6675*3.6576}"},{"name":"glaSys","value":"{glaSys}"},{"name":"hWin","value":"{1.8288}"},{"name":"wWin","value":"{5.88}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.S}"}]},{"name":"intConMod","value":"Buildings.HeatTransfer.Types.InteriorConvection.Temperature"},{"name":"extConMod","value":"Buildings.HeatTransfer.Types.ExteriorConvection.TemperatureWind"},{"name":"lat","value":"0.66098585832754"}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction10and23","qualifiers":["replaceable"],"name":"R16p8Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-168},{430,-148}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall","qualifiers":["replaceable"],"name":"R52Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-192},{430,-172}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"R20Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-216},{430,-196}}))"}},{"className":"Data.Constructions.GlazingSystems.ASHRAE901Gla","qualifiers":["replaceable"],"name":"glaSys","annotations":{"placement":"Placement(transformation(extent \u003d {{436,-192},{456,-172}}))"}},{"className":"Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionWall","qualifiers":["replaceable"],"name":"parCon","annotations":{"placement":"Placement(transformation(extent \u003d {{436,-216},{456,-196}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall","qualifiers":["replaceable"],"name":"celDiv","comment":"Construction of wall connecting to cell UF90X3B","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-144},{430,-124}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestBedDividingWall","qualifiers":["replaceable"],"name":"bedDiv","comment":"Construction of wall connecting to cell UF90X2B","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-120},{430,-100}}))"}},{"className":"Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionDoor","qualifiers":["replaceable"],"name":"parDoo","comment":"Door used in partition walls in FLEXLAB test cells","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-96},{430,-76}}))"}},{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorInsulated","qualifiers":["replaceable"],"name":"extDoo","comment":"Construction of an exterior door","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-72},{430,-52}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a duplicate model of \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCell\\\"\u003e\n  Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCell\u003c/a\u003e with the wall separating X3A and X3B removed.\n  It is designed for simulations where both X3A and X3B are used in the simulation to model the\n  whole test bed. If a simulation is created using TestCell from both packages the dividing wall\n  will be modeled twice, so one of the two models used must be created without the dividing wall\n  in the model.\n  \u003c/p\u003e\n  \u003cp\u003e\n  This documentation states only the items which are different from the\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCell\\\"\u003e\n  Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCell\u003c/a\u003e model. For documentation on the rest of the\n  walls and connections see that documentation instead.\n  \u003c/p\u003e\n  \u003cp\u003e\n  There are 7 different wall sections described in the model. They are shown in the figure below.\n  This documentation only describes wall section 6.\n  \u003c/p\u003e\n  \u003cp align\u003d\\\"center\\\"\u003e\n  \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3A/TestCell.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in test cell model\\\"/\u003e\n  \u003c/p\u003e\n  \u003cp\u003e\n  The different wall sections are entered into the model according to the following table.\n  \u003c/p\u003e\n  \u003ctable border \u003d \\\"1\\\" summary\u003d\\\"Description of walls in test cell room model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eWall Section Number\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n  \u003cth\u003eLocation in Model\u003c/th\u003e\n  \u003cth\u003eCorresponding Layer\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e6\u003c/td\u003e\n  \u003ctd\u003eThis east wall connects to test cell X3B. This model contains an air gap instead of a model\n  of the wall. It is intended to be connected to the wall model in X3B.\u003c/td\u003e\n  \u003ctd\u003esurBou[2]\u003c/td\u003e\n  \u003ctd\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003cp\u003e\n  Because wall section 6 was moved from datConBou[2] to surBou[2] the reference for other constructions in\n  datConBou have changed as well. These changes are documented in the following table.\n  \u003c/p\u003e\n  \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Description of changes to construction locations\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eWall Section Number\u003c/th\u003e\n  \u003cth\u003ePhysical Description\u003c/th\u003e\n  \u003cth\u003eLocation in TestCell\u003c/th\u003e\n  \u003cth\u003eLocation in TestCelNoDiv\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e4\u003c/td\u003e\n  \u003ctd\u003eInsulated wall separating the test cell and the electrical room\u003c/td\u003e\n  \u003ctd\u003edatConBou[5]\u003c/td\u003e\n  \u003ctd\u003edatConBou[4]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e5\u003c/td\u003e\n  \u003ctd\u003ePartition wall and door separating the test cell and the closet\u003c/td\u003e\n  \u003ctd\u003eWall: datConBou[3]\u003cbr/\u003e\n  Door: datConBou[4]\u003c/td\u003e\n  \u003ctd\u003eWall: datConBou[2]\u003cbr/\u003e\n  Door: datConBou[3]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003cp\u003e\n  Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n  The following table describes the connections to models outside of the X3A package. The connections in datConExt\n  are not described in the table because they are connected to the external environment, and no additional heat\n  port connections are necessary. A rationale for why the model is created this way is also provided if it is\n  considered necessary.\n  \u003c/p\u003e\n  \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Description of intended connections including TestCell model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eLocation in TestCell\u003c/th\u003e\n  \u003cth\u003eDescription of External Connection\u003c/th\u003e\n  \u003cth\u003eLocation in External Model\u003c/th\u003e\n  \u003cth\u003eRationale\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003esurf_surBou[2]\u003c/td\u003e\n  \u003ctd\u003eDividing wall modeled in X3B.TestCell\u003c/td\u003e\n  \u003ctd\u003eX3B.TestCell.surf_conBou[1]\u003c/td\u003e\n  \u003ctd\u003eX3B.TestCell.surf_conBou[1] is the location of the cell dividing wall in the neighboring test cell. Connecting\n  X3A.TestCellNoCelDiv.surf_surBou[2] to this port models heat transfer from the wall in X3B.TestCell to the air in this\n  space.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfNonCondensingGas":{"name":"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfNonCondensingGas","comment":"Derivative of enthalpy of non-condensing gas per unit mass of steam","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"Real","qualifiers":["input"],"name":"der_T","comment":"temperature derivative"},{"className":"Real","qualifiers":["output"],"name":"der_h","comment":"derivative of steam enthalpy"}]},"Buildings.Fluid.Delays.DelayFirstOrder":{"name":"Buildings.Fluid.Delays.DelayFirstOrder","comment":"Delay element, approximated by a first order differential equation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.MixingVolumes.MixingVolume","modifications":[{"name":"V","qualifiers":["final"],"value":"V_nominal"},{"name":"mSenFac","qualifiers":["final"],"value":"1"}]}],"components":[{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau","comment":"Time constant at nominal flow","value":"60","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Nominal condition\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model approximates a transport delay using a first order differential equations.\n\u003c/p\u003e\n\u003cp\u003e\nThe model consists of a mixing volume with two ports. The size of the\nmixing volume is such that at the nominal mass flow rate\n\u003ccode\u003em_flow_nominal\u003c/code\u003e,\nthe time constant of the volume is equal to the parameter \u003ccode\u003etau\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe heat flux connector is optional, it need not be connnected.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Ellipse(),Text()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_0_3_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_3_0","comment":"Version 0.3.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nAdded package \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources\\\"\u003eBuildings.Fluid.Sources\u003c/a\u003e.\nThe package contains models for modeling species that\ndo not affect the medium balance of volumes. This can be used to track\nfor example carbon dioxide or other species that have a small concentration.\n\u003c/li\u003e\n\u003cli\u003e\nThe package \u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Motors\\\"\u003eBuildings.Fluid.Actuators.Motors\u003c/a\u003e has been added.\nThe package contains a motor model for valves and dampers.\n\u003c/li\u003e\n\u003cli\u003e\nThe package \u003ca href\u003d\\\"modelica://Buildings.Media\\\"\u003eBuildings.Media\u003c/a\u003e has been reorganized and\nthe new medium model\n\u003ca href\u003d\\\"modelica://Buildings.Media.GasesPTDecoupled.MoistAir\\\"\u003e\nBuildings.Media.GasesPTDecoupled.MoistAir\u003c/a\u003e\nhas been added.\n\u003cbr/\u003e\nIn addition, this package now contains a bug fix that is needed for Modelica 2.2.1 and 2.2.2.\nThe bugs are fixed by using a new\nbase class\n\u003ca href\u003d\\\"modelica://Buildings.Media.Interfaces.PartialSimpleIdealGasMedium\\\"\u003e\nBuildings.Media.Interfaces.PartialSimpleIdealGasMedium\u003c/a\u003e\n (that fixes the bugs) instead of\n\u003ca href\u003d\\\"modelica://Modelica.Media.Interfaces.PartialSimpleIdealGasMedium\\\"\u003e\nModelica.Media.Interfaces.PartialSimpleIdealGasMedium\u003c/a\u003e.\nIn the original implementation, initial states of fluid volumes can be far away from\nthe steady-state value because of an inconsistent implementation of the enthalpy\nand internal energy.\nWhen the \u003ccode\u003eBuildings\u003c/code\u003e library is upgraded to\nto Modelica 3.0.0, it should be safe to remove this bug fix.\n\u003c/li\u003e\n\u003cli\u003e\nThe package \u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers\\\"\u003eBuildings.Fluid.HeatExchangers\u003c/a\u003e\nhas been revised and several models have been renamed.\nThe heat exchanger models have been revised to allow computing the fluid volumes either\ndynamically, or in steady-state.\n\u003c/li\u003e\n\u003cli\u003e\nThe damper with exponential opening characteristic has been revised to allow control signals\nover the whole range between \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e. This was in earlier versions restricted.\nIn the same model, a bug was fixed that caused the flow to be largest for \u003ccode\u003ey\u003d0\u003c/code\u003e, i.e., when the damper is closed.\n\u003c/li\u003e\n\u003cli\u003e\nAdditional models for psychrometric equations have been added. The new models contain equations\nthat convert dew point temperature and water vapor pressure, as well\nas water vapor concentration and water vapor pressure.\n\u003c/li\u003e\n\u003cli\u003e\nA new mixing volume has been added that allows latent heat exchange with the volume.\nThis model can be used to model a volume of moist air with water vapor condensation\ninside the volume. The condensate is removed from the volume in its liquid phase.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.j":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.j","comment":"Return vector rotated by 90 degrees","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.j"}]},"Buildings.Electrical.Interfaces.PartialWindTurbine":{"name":"Buildings.Electrical.Interfaces.PartialWindTurbine","comment":"Partial model of a wind turbine with power output based on table as a function of wind speed","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialWindTurbineBase"}],"components":[{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystem"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"classes":[{"name":"Buildings.Electrical.Interfaces.PartialWindTurbine.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a wind turbine whose power is computed as a function of wind-speed as defined in a table.\n\u003c/p\u003e\n\u003cp\u003e\nInput to the model is the local wind speed.\nThe model requires the specification of a table that maps wind speed in meters per second to generated\npower \u003ci\u003eP\u003csub\u003et\u003c/sub\u003e\u003c/i\u003e in Watts.\nThe model has a parameter called \u003ccode\u003escale\u003c/code\u003e with a default value of one\nthat can be used to scale the power generated by the wind turbine.\nThe generated electrical power is\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP \u003d P\u003csub\u003et\u003c/sub\u003e scale\n\u003c/p\u003e\n\u003cp\u003e\nFor example, the following specification (with default \u003ccode\u003escale\u003d1\u003c/code\u003e) of a wind turbine\n\u003c/p\u003e\n\u003cpre\u003e\n  WindTurbine_Table tur(\n    table\u003d[3.5, 0;\n           5.5,   100;\n           12, 900;\n           14, 1000;\n           25, 1000]) \\\"Wind turbine\\\";\n\u003c/pre\u003e\n\u003cp\u003e\nyields the performance shown below. In this example, the cut-in wind speed is\n\u003ci\u003e3.5\u003c/i\u003e meters per second,\nand the cut-out wind speed is \u003ci\u003e25\u003c/i\u003e meters per second,\nas entered by the first and last entry of the wind speed column.\nBelow and above these wind speeds, the generated power is zero.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"alt-image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/DC/Sources/WindTurbine_Table.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Ellipse(),Ellipse(),Text(),Text()})"}},"Buildings.HeatTransfer.Windows.Functions.glassTRInteriorIrradiationNoShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassTRInteriorIrradiationNoShading","comment":"Transmittance and reflectance of each glass pane for interior irradiation without shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialGlassRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"layer","comment":"Angular data of glass pane","arraySubscripts":"[3,N,HEM,NSta]"},{"className":"Real","qualifiers":["array","output"],"name":"traRef","comment":"Glass transmittance, front and back reflectance","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[3,N,N,HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular variation of the transmittance and reflectance of each glass pane for interior irradiation without shading.\nIt accounts for the transmittance and reflectance among different panes.\nPane \u003ccode\u003e1\u003c/code\u003e is facing outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.DXCoils.Data.SingleSpeed":{"name":"Buildings.Fluid.HeatExchangers.DXCoils.Data.SingleSpeed"},"Buildings.Utilities.Math.Functions.inverseXRegularized":{"name":"Buildings.Utilities.Math.Functions.inverseXRegularized","comment":"Function that approximates 1/x by a twice continuously differentiable function","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Abscissa value"},{"className":"Real","qualifiers":["input"],"name":"delta","comment":"Abscissa value below which approximation occurs","modifications":[{"name":"min","value":"Modelica.Constants.eps"}]},{"className":"Real","qualifiers":["input"],"name":"deltaInv","comment":"Inverse value of delta","value":"1/(delta)"},{"className":"Real","qualifiers":["input"],"name":"a","comment":"Polynomial coefficient","value":"-15*deltaInv"},{"className":"Real","qualifiers":["input"],"name":"b","comment":"Polynomial coefficient","value":"119*deltaInv^(2)"},{"className":"Real","qualifiers":["input"],"name":"c","comment":"Polynomial coefficient","value":"-361*deltaInv^(3)"},{"className":"Real","qualifiers":["input"],"name":"d","comment":"Polynomial coefficient","value":"534*deltaInv^(4)"},{"className":"Real","qualifiers":["input"],"name":"e","comment":"Polynomial coefficient","value":"-380*deltaInv^(5)"},{"className":"Real","qualifiers":["input"],"name":"f","comment":"Polynomial coefficient","value":"104*deltaInv^(6)"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Function value"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction that approximates \u003ci\u003ey\u003d1 \u0026frasl; x\u003c/i\u003e\ninside the interval \u003ci\u003e-\u0026delta; \u0026le; x \u0026le; \u0026delta;\u003c/i\u003e.\nThe approximation is twice continuously differentiable with a bounded derivative on the whole\nreal line.\n\u003c/p\u003e\n\u003cp\u003e\nSee the plot of\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.Examples.InverseXRegularized\\\"\u003e\nBuildings.Utilities.Math.Functions.Examples.InverseXRegularized\u003c/a\u003e\nfor the graph.\n\u003c/p\u003e\n\u003cp\u003e\nFor efficiency, the polynomial coefficients\n\u003ccode\u003ea, b, c, d, e, f\u003c/code\u003e and\nthe inverse of the smoothing parameter \u003ccode\u003edeltaInv\u003c/code\u003e\nare exposed as arguments to this function.\nTypically, these coefficients only depend on parameters and hence\ncan be computed once.\nThey must be equal to their default values, otherwise the function\nis not twice continuously differentiable.\nBy exposing these coefficients as function arguments, models\nthat call this function can compute them as parameters, and\nassign these parameter values in the function call.\nThis avoids that the coefficients are evaluated for each time step,\nas they would otherwise be if they were to be computed inside the\nbody of the function. However, assigning the values is optional\nas otherwise, at the expense of efficiency, the values will be\ncomputed each time the function is invoked.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.Examples.InverseXRegularized\\\"\u003e\nBuildings.Utilities.Math.Functions.Examples.InverseXRegularized\u003c/a\u003e\nfor how to efficiently call this function.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Data.Fuels.Generic":{"name":"Buildings.Fluid.Data.Fuels.Generic","comment":"Generic record of fuel properties","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["parameter"],"name":"h","comment":"Heating value (lower or upper, depending on fuel)"},{"className":"Modelica.SIunits.Density","qualifiers":["parameter"],"name":"d","comment":"Mass density"},{"className":"Real","qualifiers":["parameter"],"name":"mCO2","comment":"CO2 emission at combustion, in kg/kg fuel","modifications":[{"name":"min","qualifiers":["final"],"value":"0"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a generic record where the fuel properties need to be specified by the user.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Interfaces.RadiosityInflow":{"name":"Buildings.HeatTransfer.Interfaces.RadiosityInflow","comment":"Connector for inflowing radiosity","qualifiers":["input"],"superClasses":[{"nameOfExtendedClass":"Real","modifications":[{"name":"min","value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"W\""},{"name":"nominal","value":"419"}],"annotations":{"diagram":"Diagram(graphics \u003d {Text(),Polygon()})","documentationInfo":"info \u003d \"\u003chtml\u003e\nThe nominal value is set to \u003ci\u003e\u0026sigma; T\u003csup\u003e4\u003c/sup\u003e \u003d \u0026sigma; 293.15\u003csup\u003e4\u003c/sup\u003e \u003d 419\u003c/i\u003e.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()})"}}],"annotations":{"diagram":"Diagram(graphics \u003d {Text(),Polygon()})","documentationInfo":"info \u003d \"\u003chtml\u003e\nThe nominal value is set to \u003ci\u003e\u0026sigma; T\u003csup\u003e4\u003c/sup\u003e \u003d \u0026sigma; 293.15\u003csup\u003e4\u003c/sup\u003e \u003d 419\u003c/i\u003e.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()})"}},"Buildings.Electrical.Interfaces.PartialPvBase":{"name":"Buildings.Electrical.Interfaces.PartialPvBase","comment":"Partial model with basic parameters for PVs","qualifiers":["model","partial"],"components":[{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"A","comment":"Net surface area"},{"className":"Real","qualifiers":["parameter"],"name":"fAct","comment":"Fraction of surface area with active solar cells","value":"0.9","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}]},{"className":"Real","qualifiers":["parameter"],"name":"eta","comment":"Module conversion efficiency","value":"0.12","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}]},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"P","comment":"Generated power","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,60},{120,80}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model contains the minimum set of parameters necessary to describe\na PV system.\nThe model defines also an output \u003ccode\u003eP\u003c/code\u003e for the power generated by the PVs.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.MixingVolumes.MixingVolume":{"name":"Buildings.Fluid.MixingVolumes.MixingVolume","comment":"Mixing volume with inlet and outlet ports (flow reversal is allowed)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume"}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents an instantaneously mixed volume.\nPotential and kinetic energy at the port are neglected,\nand there is no pressure drop at the ports.\nThe volume can exchange heat through its \u003ccode\u003eheatPort\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe volume can be parameterized as a steady-state model or as\ndynamic model.\u003c/p\u003e\n\u003cp\u003e\nTo increase the numerical robustness of the model, the constant\n\u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e can be set by the user.\nThis constant only has an effect if the model has exactly two fluid ports connected,\nand if it is used as a steady-state model.\nUse the following settings:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e if the \u003ci\u003eonly\u003c/i\u003e means of heat transfer\nat the \u003ccode\u003eheatPort\u003c/code\u003e is a prescribed heat flow rate that\nis \u003ci\u003enot\u003c/i\u003e a function of the temperature difference\nbetween the medium and an ambient temperature. Examples include an ideal electrical heater,\na pump that rejects heat into the fluid stream, or a chiller that removes heat based on a performance curve.\nIf the \u003ccode\u003eheatPort\u003c/code\u003e is not connected, then set \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e as\nin this case, \u003ccode\u003eheatPort.Q_flow\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e if there is heat flow at the \u003ccode\u003eheatPort\u003c/code\u003e\ncomputed as \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e, for some temperature \u003ci\u003eT\u003c/i\u003e and some conductance \u003ci\u003eK\u003c/i\u003e,\nwhich may itself be a function of temperature or mass flow rate.\u003cbr/\u003e\nIf there is a combination of \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e and a prescribed heat flow rate,\nfor example a solar collector that dissipates heat to the ambient and receives heat from\nthe solar radiation, then set \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eOptions\u003c/h4\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003emSenFac\u003c/code\u003e can be used to increase the thermal mass of this model\nwithout increasing its volume. This way, species concentrations are still calculated\ncorrectly even though the thermal mass increases. The additional thermal mass is calculated\nbased on the density and the value of the function \u003ccode\u003eHeatCapacityCp\u003c/code\u003e\nof the medium state \u003ccode\u003estate_default\u003c/code\u003e. \u003cbr/\u003e\nThis parameter can for instance be useful in a pipe model when the developer wants to\nlump the pipe thermal mass to the fluid volume. By default \u003ccode\u003emSenFac \u003d 1\u003c/code\u003e, hence\nthe mass is unchanged. For higher values of \u003ccode\u003emSenFac\u003c/code\u003e, the mass will be scaled proportionally.\n\u003c/p\u003e\n\u003cp\u003e\nSet the parameter \u003ccode\u003euse_C_flow \u003d true\u003c/code\u003e to enable an input connector for the trace substance flow rate.\nThis allows to directly add or subtract trace substances such as\nCO2 to the volume.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.Examples.PPM\\\"\u003eBuildings.Fluid.Sensors.Examples.PPM\u003c/a\u003e\nfor an example.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nIf the model is operated in steady-state and has two fluid ports connected,\nthen the same energy and mass balance implementation is used as in\nsteady-state component models, i.e., the use of \u003ccode\u003eactualStream\u003c/code\u003e\nis not used for the properties at the port.\n\u003c/p\u003e\n\u003cp\u003e\nThe implementation of these balance equations is done in the instances\n\u003ccode\u003edynBal\u003c/code\u003e for the dynamic balance and \u003ccode\u003esteBal\u003c/code\u003e\nfor the steady-state balance. Both models use the same input variables:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe variable \u003ccode\u003eQ_flow\u003c/code\u003e is used to add sensible \u003ci\u003eand\u003c/i\u003e latent heat to the fluid.\nFor example, \u003ccode\u003eQ_flow\u003c/code\u003e participates in the steady-state energy balance\u003cpre\u003e\n    port_b.h_outflow \u003d inStream(port_a.h_outflow) + Q_flow * m_flowInv;\n\u003c/pre\u003e\nwhere \u003ccode\u003em_flowInv\u003c/code\u003e approximates the expression \u003ccode\u003e1/m_flow\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe variable \u003ccode\u003emXi_flow\u003c/code\u003e is used to add a species mass flow rate to the fluid.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nFor the rationale of selecting different energy and mass balances, and for the\nuse of \u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e, see the documentation of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume\\\"\u003e\nBuildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nFor simple models that uses this model, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.HeaterCoolerPrescribed\\\"\u003e\nBuildings.Fluid.HeatExchangers.HeaterCoolerPrescribed\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.HumidifierPrescribed\\\"\u003e\nBuildings.Fluid.MassExchangers.HumidifierPrescribed\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Ellipse(),Text(),Text()})"}},"Buildings.Fluid.HeatExchangers.DryCoilDiscretized":{"name":"Buildings.Fluid.HeatExchangers.DryCoilDiscretized","comment":"Coil with discretization along the flow paths and no humidity condensation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialFourPortInterface","modifications":[{"name":"show_T","value":"false"}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.FourPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance1","qualifiers":["final"],"value":"true"},{"name":"computeFlowResistance2","qualifiers":["final"],"value":"true"},{"name":"from_dp1","value":"false"},{"name":"from_dp2","value":"false"}]}],"components":[{"className":"Boolean","qualifiers":["constant"],"name":"initialize_p1","comment":"Set to true to initialize the pressure of volume 1","value":"not Medium1.singleState"},{"className":"Boolean","qualifiers":["constant"],"name":"initialize_p2","comment":"Set to true to initialize the pressure of volume 2","value":"not Medium2.singleState"},{"className":"Boolean","qualifiers":["constant"],"name":"airSideTemperatureDependent","comment":"Set to false to make air-side hA independent of temperature","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Modelica.SIunits.ThermalConductance","qualifiers":["parameter"],"name":"UA_nominal","comment":"Thermal conductance at nominal flow, used to compute heat capacity","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Nominal condition\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"nReg","comment":"Number of registers","value":"2","modifications":[{"name":"min","value":"2"}],"annotations":{"dialog":"Dialog(group \u003d \"Geometry\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"nPipPar","comment":"Number of parallel pipes in each register","value":"3","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Geometry\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"nPipSeg","comment":"Number of pipe segments per register used for discretization","value":"4","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Geometry\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_dh1","comment":"Set to true to specify hydraulic diameter for pipe pressure drop","value":"false","annotations":{"dialog":"Dialog(enable \u003d not linearizeFlowResistance1, tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_dh2","comment":"Set to true to specify hydraulic diameter for duct pressure drop)","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamics","comment":"Formulation of energy balance","value":"Modelica.Fluid.Types.Dynamics.DynamicFreeInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"dh1","comment":"Hydraulic diameter for a single pipe","value":"0.025","annotations":{"dialog":"Dialog(group \u003d \"Geometry\", enable \u003d use_dh1 and not linearizeFlowResistance1)"}},{"className":"Real","qualifiers":["parameter"],"name":"ReC_1","comment":"Reynolds number where transition to turbulent starts inside pipes","value":"4000","annotations":{"dialog":"Dialog(enable \u003d use_dh1 and not linearizeFlowResistance1, tab \u003d \"Advanced\")"}},{"className":"Real","qualifiers":["parameter"],"name":"ReC_2","comment":"Reynolds number where transition to turbulent starts inside ducts","value":"4000","annotations":{"dialog":"Dialog(enable \u003d use_dh2 and not linearized2, tab \u003d \"Advanced\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"dh2","comment":"Hydraulic diameter for duct","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Geometry\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau1","comment":"Time constant at nominal flow for medium 1","value":"20","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\", enable \u003d not steadyState_1)"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau2","comment":"Time constant at nominal flow for medium 2","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\", enable \u003d not steadyState_2)"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau_m","comment":"Time constant of metal at nominal UA value","value":"20","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"waterSideFlowDependent","comment":"Set to false to make water-side hA independent of mass flow rate","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"airSideFlowDependent","comment":"Set to false to make air-side hA independent of mass flow rate","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"waterSideTemperatureDependent","comment":"Set to false to make water-side hA independent of temperature","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Heat transfer\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mStart_flow_a1","comment":"Guess value for mass flow rate at port_a1","value":"m1_flow_nominal","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mStart_flow_a2","comment":"Guess value for mass flow rate at port_a2","value":"m2_flow_nominal","annotations":{"dialog":"Dialog(tab \u003d \"General\", group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.HeatFlowRate","name":"Q1_flow","comment":"Heat transferred from solid into medium 1"},{"className":"Modelica.SIunits.HeatFlowRate","name":"Q2_flow","comment":"Heat transferred from solid into medium 2"},{"className":"Buildings.Fluid.HeatExchangers.BaseClasses.CoilRegister","qualifiers":["array"],"name":"hexReg","comment":"Heat exchanger register","modifications":[{"name":"Medium1","qualifiers":["redeclare","package","each"],"value":"Medium1"},{"name":"Medium2","qualifiers":["redeclare","package","each"],"value":"Medium2"},{"name":"allowFlowReversal1","qualifiers":["final","each"],"value":"allowFlowReversal1"},{"name":"allowFlowReversal2","qualifiers":["final","each"],"value":"allowFlowReversal2"},{"name":"nPipPar","qualifiers":["final","each"],"value":"nPipPar"},{"name":"nPipSeg","qualifiers":["final","each"],"value":"nPipSeg"},{"name":"m1_flow_nominal","qualifiers":["final","each"],"value":"m1_flow_nominal/(nPipPar)"},{"name":"m2_flow_nominal","qualifiers":["final","each"],"value":"m1_flow_nominal/(nPipPar)/(nPipSeg)"},{"name":"tau1","qualifiers":["each"],"value":"tau1"},{"name":"tau2","qualifiers":["each"],"value":"tau2"},{"name":"tau_m","qualifiers":["each"],"value":"tau_m"},{"name":"energyDynamics","qualifiers":["final","each"],"value":"energyDynamics"},{"name":"initialize_p1","value":"{i\u003d\u003d1 and not Medium1.singleStatei in 1:nReg}"},{"name":"initialize_p2","value":"{i\u003d\u003d1 and not Medium2.singleStatei in 1:nReg}"},{"name":"from_dp1","qualifiers":["each"],"value":"from_dp1"},{"name":"linearizeFlowResistance1","qualifiers":["each"],"value":"linearizeFlowResistance1"},{"name":"deltaM1","qualifiers":["each"],"value":"deltaM1"},{"name":"from_dp2","qualifiers":["each"],"value":"from_dp2"},{"name":"linearizeFlowResistance2","qualifiers":["each"],"value":"linearizeFlowResistance2"},{"name":"deltaM2","qualifiers":["each"],"value":"deltaM2"},{"name":"dp1_nominal","qualifiers":["each"],"value":"0"},{"name":"dp2_nominal","qualifiers":["each"],"value":"0"},{"name":"UA_nominal","qualifiers":["final","each"],"value":"UA_nominal/(nReg)"}],"arraySubscripts":"[nReg]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,0},{10,20}}))"}},{"className":"Buildings.Fluid.HeatExchangers.BaseClasses.PipeManifoldFixedResistance","name":"pipMan_a","comment":"Pipe manifold at port a","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium1"},{"name":"nPipPar","qualifiers":["final"],"value":"nPipPar"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m1_flow_nominal"},{"name":"dp_nominal","qualifiers":["final"],"value":"dp1_nominal"},{"name":"dh","qualifiers":["final"],"value":"dh1"},{"name":"ReC","qualifiers":["final"],"value":"ReC_1"},{"name":"mStart_flow_a","qualifiers":["final"],"value":"mStart_flow_a1"},{"name":"linearized","qualifiers":["final"],"value":"linearizeFlowResistance1"},{"name":"use_dh","qualifiers":["final"],"value":"use_dh1"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM1"},{"name":"from_dp","qualifiers":["final"],"value":"from_dp1"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-38,18},{-18,38}}))"}},{"className":"Buildings.Fluid.HeatExchangers.BaseClasses.PipeManifoldNoResistance","name":"pipMan_b","comment":"Pipe manifold at port b","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium1"},{"name":"nPipPar","qualifiers":["final"],"value":"nPipPar"},{"name":"mStart_flow_a","qualifiers":["final"],"value":"-mStart_flow_a1"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{52,50},{32,70}}))"}},{"className":"Buildings.Fluid.HeatExchangers.BaseClasses.DuctManifoldNoResistance","name":"ducMan_b","comment":"Duct manifold at port b","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium2"},{"name":"nPipPar","qualifiers":["final"],"value":"nPipPar"},{"name":"nPipSeg","qualifiers":["final"],"value":"nPipSeg"},{"name":"mStart_flow_a","qualifiers":["final"],"value":"-mStart_flow_a2"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal2"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-52,-70},{-32,-50}}))"}},{"className":"Buildings.Fluid.HeatExchangers.BaseClasses.DuctManifoldFixedResistance","name":"ducMan_a","comment":"Duct manifold at port a","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium2"},{"name":"nPipPar","qualifiers":["final"],"value":"nPipPar"},{"name":"nPipSeg","qualifiers":["final"],"value":"nPipSeg"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m2_flow_nominal"},{"name":"dp_nominal","qualifiers":["final"],"value":"dp2_nominal"},{"name":"dh","qualifiers":["final"],"value":"dh2"},{"name":"ReC","qualifiers":["final"],"value":"ReC_2"},{"name":"mStart_flow_a","qualifiers":["final"],"value":"mStart_flow_a2"},{"name":"linearized","qualifiers":["final"],"value":"linearizeFlowResistance2"},{"name":"use_dh","qualifiers":["final"],"value":"use_dh2"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM2"},{"name":"from_dp","qualifiers":["final"],"value":"from_dp2"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal2"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{40,-26},{20,-6}}))"}},{"className":"BaseClasses.HADryCoil","name":"hA","comment":"Model for convective heat transfer coefficient","modifications":[{"name":"UA_nominal","qualifiers":["final"],"value":"UA_nominal"},{"name":"m_flow_nominal_a","qualifiers":["final"],"value":"m2_flow_nominal"},{"name":"m_flow_nominal_w","qualifiers":["final"],"value":"m1_flow_nominal"},{"name":"waterSideTemperatureDependent","qualifiers":["final"],"value":"waterSideTemperatureDependent"},{"name":"waterSideFlowDependent","qualifiers":["final"],"value":"waterSideFlowDependent"},{"name":"airSideTemperatureDependent","qualifiers":["final"],"value":"airSideTemperatureDependent"},{"name":"airSideFlowDependent","qualifiers":["final"],"value":"airSideFlowDependent"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-60,80},{-40,100}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a discretized coil with no water vapor condensation.\nThe coil consists of \u003ccode\u003enReg\u003c/code\u003e registers\nthat are perpendicular to the air flow path. Each register consists of \u003ccode\u003enPipPar\u003c/code\u003e\nparallel pipes, and each pipe can be divided into \u003ccode\u003enPipSeg\u003c/code\u003e pipe segments along\nthe pipe length. Thus, the smallest element of the coil consists of a pipe\nsegment. Each pipe segment is modeled by an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.HexElement\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.HexElement\u003c/a\u003e.\nEach element has a state variable for the metal.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003eenergyDynamics\u003c/code\u003e is different from\n\u003ccode\u003eModelica.Fluid.Types.Dynamics.SteadyState\u003c/code\u003e, then\na mixing volume of length \u003ccode\u003edl\u003c/code\u003e is added to the duct connection. This can\nhelp reducing the dimension of the nonlinear system of equations.\n\u003c/p\u003e\n\u003cp\u003e\nThe convective heat transfer coefficients can, for each fluid individually, be\ncomputed as a function of the flow rate and/or the temperature,\nor assigned to a constant. This computation is done using an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.HADryCoil\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.HADryCoil\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIn this model, the water (or liquid) flow path\nneeds to be connected to \u003ccode\u003eport_a1\u003c/code\u003e and \u003ccode\u003eport_b1\u003c/code\u003e, and\nthe air flow path need to be connected to the other two ports.\n\u003c/p\u003e\n\u003cp\u003e\nTo model humidity condensation, use the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.WetCoilDiscretized\\\"\u003e\nBuildings.Fluid.HeatExchangers.WetCoilDiscretized\u003c/a\u003e instead of this model, as\nthis model computes only sensible heat transfer.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}, initialScale \u003d 0.5), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Controls.Continuous.LimPID":{"name":"Buildings.Controls.Continuous.LimPID","comment":"P, PI, PD, and PID controller with limited output, anti-windup compensation and setpoint weighting","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Continuous.LimPID","modifications":[{"name":"addP","modifications":[{"name":"k1","value":"revAct*wp"},{"name":"k2","value":"-revAct"}]},{"name":"addD","modifications":[{"name":"k1","value":"revAct*wd"},{"name":"k2","value":"-revAct"}]},{"name":"addI","modifications":[{"name":"k1","value":"revAct"},{"name":"k2","value":"-revAct"}]},{"name":"yMin","value":"0"},{"name":"yMax","value":"1"},{"name":"strict","value":"true"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"reverseAction","comment":"Set to true for throttling the water flow rate through a cooling coil controller","value":"false"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model is identical to\n\u003ca href\u003d\\\"modelica://Modelica.Blocks.Continuous.LimPID\\\"\u003e\nModelica.Blocks.Continuous.LimPID\u003c/a\u003e except\nthat it can be configured to have a reverse action.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003ereverseAction\u003dfalse\u003c/code\u003e (the default),\nthen \u003ccode\u003eu_m \u0026lt; u_s\u003c/code\u003e increases the controller output,\notherwise the controller output is decreased.\nThus,\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nfor a heating coil with a two-way valve, set \u003ccode\u003ereverseAction \u003d false\u003c/code\u003e,\n\u003c/li\u003e\n\u003cli\u003e\nfor a cooling coils with a two-way valve, set \u003ccode\u003ereverseAction \u003d true\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.HeatTransfer.Convection.Functions.HeatFlux.rayleigh":{"name":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.rayleigh","comment":"Rayleigh number with smooth transition to lower limit","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Length","qualifiers":["input"],"name":"x","comment":"Layer thickness"},{"className":"Modelica.SIunits.Density","qualifiers":["input"],"name":"rho","comment":"Mass density"},{"className":"Modelica.SIunits.SpecificHeatCapacity","qualifiers":["input"],"name":"c_p","comment":"Specific heat capacity"},{"className":"Modelica.SIunits.DynamicViscosity","qualifiers":["input"],"name":"mu","comment":"Dynamic viscosity"},{"className":"Modelica.SIunits.ThermalConductivity","qualifiers":["input"],"name":"k","comment":"Thermal conductivity"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T_a","comment":"Temperature of surface a"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T_b","comment":"Temperature of surface b"},{"className":"Real","qualifiers":["input"],"name":"Ra_min","comment":"Minimum value for Rayleigh number"},{"className":"Real","qualifiers":["output"],"name":"Ra","comment":"Rayleigh number"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis function returns the Rayleigh number.\nThe parameter \u003ccode\u003eRaMin\u003c/code\u003e is used to transition\nto a lower limit for the Rayleigh number.\nThis is helpful to avoid a Rayleigh number of zero or\nto avoid an expression for a convection coefficient that\nhas an infinite derivative near zero, i.e., if \u003ci\u003eh\u003df(Ra\u003csup\u003e(1/2)\u003c/sup\u003e)\u003c/i\u003e.\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_0_11_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_11_0","comment":"Version 0.11.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e The packages whose name ends with \u003ccode\u003eBeta\u003c/code\u003e\nare still being validated.\n\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\nAdded the package\n\u003ca href\u003d\\\"modelica://Buildings.Rooms\\\"\u003e\nBuildings.Rooms\u003c/a\u003e to compute heat transfer in rooms\nand through the building envelope.\nMultiple instances of these models can be connected to create\na multi-zone building model.\n\u003c/li\u003e\n\u003cli\u003e\nAdded the package\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows\\\"\u003e\nBuildings.HeatTransfer.Windows\u003c/a\u003e\nto compute heat transfer (solar radiation, infrared radiation,\nconvection and conduction) through glazing systems.\n\u003c/li\u003e\n\u003cli\u003e\nIn package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers\\\"\u003e\nBuildings.Fluid.Chillers\u003c/a\u003e, added the chiller models\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers.ElectricReformulatedEIR\\\"\u003e\nBuildings.Fluid.Chillers.ElectricReformulatedEIR\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers.ElectricEIR\\\"\u003e\nBuildings.Fluid.Cphillers.ElectricEIR\u003c/a\u003e, and added\nthe package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers.Data\\\"\u003e\nBuildings.Fluid.Chillers.Data\u003c/a\u003e\nthat contains data sets of chiller performance data.\n\u003c/li\u003e\n\u003cli\u003e\nAdded package\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions\\\"\u003e\nBuildings.BoundaryConditions\u003c/a\u003e\nwith models to compute boundary conditions, such as\nsolar irradiation and sky temperature.\n\u003c/li\u003e\n\u003cli\u003e\nAdded package\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.WeatherData\\\"\u003e\nBuildings.Utilities.IO.WeatherData\u003c/a\u003e\nwith models to read weather data in the TMY3 format.\n\u003c/li\u003e\n\u003cli\u003e\nRevised the package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors\\\"\u003eBuildings.Fluid.Sensors\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nRevised the package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers\\\"\u003e\nBuildings.Fluid.HeatExchangers.CoolingTowers\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nIn\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\nBuildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\nBuildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger\u003c/a\u003e,\nfixed bug in energy and moisture balance that affected results if a component\nadds or removes moisture to the air stream.\nIn the old implementation, the enthalpy and species\noutflow at \u003ccode\u003eport_b\u003c/code\u003e was multiplied with the mass flow rate at\n\u003ccode\u003eport_a\u003c/code\u003e. The old implementation led to small errors that were proportional\nto the amount of moisture change. For example, if the moisture added by the component\nwas \u003ccode\u003e0.005 kg/kg\u003c/code\u003e, then the error was \u003ccode\u003e0.5%\u003c/code\u003e.\nAlso, the results for forward flow and reverse flow differed by this amount.\nWith the new implementation, the energy and moisture balance is exact.\n\u003c/li\u003e\n\u003cli\u003e\nIn\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.ConservationEquation\\\"\u003e\nBuildings.Fluid.Interfaces.ConservationEquation\u003c/a\u003e and in\n\u003ca href\u003d\\\"modelica://Buildings.Media.Interfaces.PartialSimpleMedium\\\"\u003e\nBuildings.Media.Interfaces.PartialSimpleMedium\u003c/a\u003e, set\nnominal attribute for medium to provide consistent normalization.\nWithout this change, Dymola 7.4 uses different values for the nominal attribute\nbased on the value of \u003ccode\u003eAdvanced.OutputModelicaCodeWithJacobians\u003dtrue/false;\u003c/code\u003e\nin the model\n\u003ca href\u003d\\\"modelica://Buildings.Examples.HydronicHeating\\\"\u003e\nBuildings.Examples.HydronicHeating\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFixed bug in energy balance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers.Carnot\\\"\u003e\nBuildings.Fluid.Chillers.Carnot\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFixed bug in efficiency curves in package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics\\\"\u003e\nBuildings.Fluid.Movers.BaseClasses.Characteristics\u003c/a\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Controls.Continuous.SignalRanker":{"name":"Buildings.Controls.Continuous.SignalRanker","comment":"Ranks output signals such that y[i] \u003e\u003d y[i+1]","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.MIMO","modifications":[{"name":"nout","qualifiers":["final"],"value":"nin"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that sorts the input signal \u003ccode\u003eu[:]\u003c/code\u003e such that the output\nsignal satisfies \u003ccode\u003ey[i] \u0026gt;\u003d y[i+1]\u003c/code\u003e for all \u003ccode\u003ei\u003d1, ..., nin-1\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis block may for example be used in a variable air volume flow\ncontroller to access the position of the dampers that are most open.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Utilities.Psychrometrics.Functions.pW_TDewPoi":{"name":"Buildings.Utilities.Psychrometrics.Functions.pW_TDewPoi","comment":"Function to compute the water vapor partial pressure for a given dew point temperature of moist air","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Dew point temperature","modifications":[{"name":"min","value":"100"}]},{"className":"Modelica.SIunits.Pressure","qualifiers":["output"],"name":"p_w","comment":"Water vapor partial pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"100"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nDew point temperature calculation for moist air above freezing temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThe correlation used in this model is valid for dew point temperatures between\n\u003ci\u003e0\u003c/i\u003e\u0026deg;C and \u003ci\u003e200\u003c/i\u003e\u0026deg;C. It is the correlation from 2005\nASHRAE Handbook, p. 6.2. In an earlier version of this model, the equation from\nPeppers has been used, but this equation yielded about \u003ci\u003e15\u003c/i\u003e Kelvin lower dew point\ntemperatures.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Interfaces.PrescribedOutletStateParameters":{"name":"Buildings.Fluid.Interfaces.PrescribedOutletStateParameters","comment":"Parameters for models with prescribed outlet state","components":[{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"Q_flow_maxHeat","comment":"Maximum heat flow rate for heating (positive)","value":"Modelica.Constants.inf"},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"Q_flow_maxCool","comment":"Maximum heat flow rate for cooling (negative)","value":"-Modelica.Constants.inf"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_nominal","comment":"Nominal mass flow rate, used for regularization near zero flow","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau","comment":"Time constant at nominal flow rate (used if energyDynamics \u003c\u003e Modelica.Fluid.Types.Dynamics.SteadyState)","value":"10","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_start","comment":"Initial or guess value of set point","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Initialization\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamics","comment":"Type of energy balance: dynamic (3 initialization options) or steady state","value":"Modelica.Fluid.Types.Dynamics.SteadyState","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis record declares parameters that are used by models with\nprescribed outlet temperature.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Conduction.SingleLayerCylinder":{"name":"Buildings.HeatTransfer.Conduction.SingleLayerCylinder","comment":"Heat conduction in a cylinder","qualifiers":["model"],"components":[{"className":"Buildings.HeatTransfer.Data.Soil.Generic","qualifiers":["replaceable","parameter"],"name":"material","comment":"Material thermal properties"},{"className":"Modelica.SIunits.Height","qualifiers":["parameter"],"name":"h","comment":"Height of the cylinder"},{"className":"Modelica.SIunits.Radius","qualifiers":["parameter"],"name":"r_a","comment":"Internal radius"},{"className":"Modelica.SIunits.Radius","qualifiers":["parameter"],"name":"r_b","comment":"External radius"},{"className":"Integer","qualifiers":["parameter"],"name":"nSta","comment":"Number of state variables","modifications":[{"name":"min","value":"1"}]},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TInt_start","comment":"Initial temperature at port_a, used if steadyStateInitial \u003d false","value":"293.15","annotations":{"dialog":"Dialog(group \u003d \"Initialization\", enable \u003d not steadyStateInitial)"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TExt_start","comment":"Initial temperature at port_b, used if steadyStateInitial \u003d false","value":"293.15","annotations":{"dialog":"Dialog(group \u003d \"Initialization\", enable \u003d not steadyStateInitial)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"steadyStateInitial","comment":"true initializes dT(0)/dt\u003d0, false initializes T(0) at fixed temperature using T_a_start and T_b_start","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Real","qualifiers":["parameter"],"name":"griFac","comment":"Grid factor for spacing","value":"2","modifications":[{"name":"min","value":"1"}]},{"className":"Modelica.SIunits.TemperatureDifference","name":"dT","comment":"port_a.T - port_b.T"},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"port_a","comment":"Heat port at surface a","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"port_b","comment":"Heat port at surface b","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"T","comment":"Temperature of the states","modifications":[{"name":"start","value":"{TInt_start+(TExt_start-TInt_start)/(Modelica.Math.log(r_b/(r_a)))*Modelica.Math.log((r_a+(r_b-r_a)/(nSta)*(i-0.5))/(r_a))i in 1:nSta}"}],"arraySubscripts":"[nSta]"},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["array"],"name":"Q_flow","comment":"Heat flow rate from state i to i+1","arraySubscripts":"[nSta+1]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nModel for radial heat transfer in a hollow cylinder.\n\u003cp\u003e\nIf the heat capacity of the material is non-zero, then this model computes transient heat conduction, i.e., it\ncomputes a numerical approximation to the solution of the heat equation\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n   \u0026rho; c ( \u0026part; T(r,t) \u0026frasl; \u0026part;t ) \u003d\n    k ( \u0026part;\u0026sup2; T(r,t) \u0026frasl; \u0026part;r\u0026sup2; + 1 \u0026frasl; r \u0026nbsp;  \u0026part; T(r,t) \u0026frasl; \u0026part;r ),\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026rho;\u003c/i\u003e\nis the mass density,\n\u003ci\u003ec\u003c/i\u003e\nis the specific heat capacity per unit mass,\n\u003ci\u003eT\u003c/i\u003e\nis the temperature at location \u003ci\u003er\u003c/i\u003e and time \u003ci\u003et\u003c/i\u003e and\n\u003ci\u003ek\u003c/i\u003e is the heat conductivity.\nAt the locations \u003ci\u003er\u003dr\u003csub\u003ea\u003c/sub\u003e\u003c/i\u003e and \u003ci\u003er\u003dr\u003csub\u003eb\u003c/sub\u003e\u003c/i\u003e,\nthe temperature and heat flow rate are equal to the\ntemperature and heat flow rate of the heat ports.\n\u003c/p\u003e\n\u003cp\u003e\nIf the heat capacity of the material is set to zero, then steady-state heat flow is computed using\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n   Q \u003d 2 \u0026pi; k (T\u003csub\u003ea\u003c/sub\u003e-T\u003csub\u003eb\u003c/sub\u003e)\u0026frasl; ln(r\u003csub\u003ea\u003c/sub\u003e \u0026frasl; r\u003csub\u003eb\u003c/sub\u003e),\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003er\u003csub\u003ea\u003c/sub\u003e\u003c/i\u003e is the internal radius,\n\u003ci\u003er\u003csub\u003eb\u003c/sub\u003e\u003c/i\u003e is the external radius,\n\u003ci\u003eT\u003csub\u003ea\u003c/sub\u003e\u003c/i\u003e is the temperature at port a and\n\u003ci\u003eT\u003csub\u003eb\u003c/sub\u003e\u003c/i\u003e is the temperature at port b.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nTo spatially discretize the heat equation, the construction is\ndivided into compartments with \u003ccode\u003ematerial.nSta \u0026ge; 1\u003c/code\u003e state variables.\nThe state variables are connected to each other through thermal conductors.\nThere is also a thermal conductor\nbetween the surfaces and the outermost state variables. Thus, to obtain\nthe surface temperature, use \u003ccode\u003eport_a.T\u003c/code\u003e (or \u003ccode\u003eport_b.T\u003c/code\u003e)\nand not the variable \u003ccode\u003eT[1]\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Polygon(),Polygon(),Text(),Text(),Text(),Polygon(),Polygon()})"}},"Buildings.Media.Air.specificGibbsEnergy":{"name":"Buildings.Media.Air.specificGibbsEnergy","comment":"Specific Gibbs energy","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.specificGibbsEnergy"}]},"Buildings.Utilities.Diagnostics.AssertEquality":{"name":"Buildings.Utilities.Diagnostics.AssertEquality","comment":"Assert when condition is violated","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.Utilities.Diagnostics.BaseClasses.PartialInputCheck","modifications":[{"name":"message","value":"\"Inputs differ by more than threShold\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that triggers an assert if\n\u003ci\u003e|u1-u2| \u0026gt; threShold\u003c/i\u003e\nand \u003ci\u003et \u0026gt; t\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.FixedVoltage":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.FixedVoltage","comment":"Fixed voltage source","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.PartialSource"}],"components":[{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Frequency of the source","modifications":[{"name":"start","value":"60"}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"RMS voltage of the source","modifications":[{"name":"start","value":"480"}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phiSou","comment":"Phase shift of the source","value":"0"},{"className":"Boolean","qualifiers":["parameter"],"name":"potentialReference","comment":"Serve as potential root for the reference angle theta","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Reference Parameters\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"definiteReference","comment":"Serve as definite root for the reference angle theta","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Reference Parameters\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["constant"],"name":"angle120","comment":"Phase shift between the phase voltages","value":"2*Modelica.Constants.pi/(3)"},{"className":"OnePhase.Sources.FixedVoltage","qualifiers":["array"],"name":"vPhase","comment":"Voltage sources on the three-phase","modifications":[{"name":"f","qualifiers":["each"],"value":"f"},{"name":"potentialReference","value":"{potentialReference,potentialReference,potentialReference}"},{"name":"definiteReference","value":"{definiteReference,false,false}"},{"name":"phiSou","value":"{phiSou,phiSou-angle120,phiSou+angle120}"},{"name":"V","qualifiers":["each"],"value":"V/(sqrt(3))"}],"arraySubscripts":"[3]","annotations":{"placement":"Placement(transformation(extent \u003d {{-50,-10},{-30,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a constant voltage source, specifying the complex voltage\nby the RMS voltage and the phase shift.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameters \u003ccode\u003epotentialReference\u003c/code\u003e and \u003ccode\u003edefiniteReference\u003c/code\u003e\nare used to define if the source model should be selected as source for\nthe reference angles \u003ccode\u003etheta\u003c/code\u003e or not.\nMore information about overdetermined connectors can be found\nin \u003ca href\u003d\\\"#Olsson2008\\\"\u003eOlsson Et Al. (2008)\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"Olsson2008\\\"/\u003e\nHans Olsson, Martin Otter, Sven Erik Mattson and Hilding Elmqvist.\u003cbr/\u003e\n\u003ca href\u003d\\\"http://elib-v3.dlr.de/55892/1/otter2008-modelica-balanced-models.pdf\\\"\u003e\nBalanced Models in Modelica 3.0 for Increased Model Quality\u003c/a\u003e.\u003cbr/\u003e\nProc. of the 7th Modelica Conference, Bielefeld, Germany, March 2008.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Line(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Media.Air.der_enthalpyOfLiquid":{},"Buildings.Controls.Predictors.ElectricalLoad.getIndex":{},"Buildings.Utilities.Math.Functions.regNonZeroPower":{"name":"Buildings.Utilities.Math.Functions.regNonZeroPower","comment":"Power function, regularized near zero, but nonzero value for x\u003d0","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Abscissa value"},{"className":"Real","qualifiers":["input"],"name":"n","comment":"Exponent"},{"className":"Real","qualifiers":["input"],"name":"delta","comment":"Abscissa value where transition occurs","value":"0.01"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Function value"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\nFunction that approximates \u003ci\u003ey\u003d|x|\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e where \u003ci\u003en \u0026gt; 0\u003c/i\u003e\nso that\n\u003cul\u003e\n\u003cli\u003e\u003ci\u003ey(0)\u003c/i\u003e is not equal to zero.\u003c/li\u003e\n\u003cli\u003e\u003ci\u003edy/dx\u003c/i\u003e is bounded and continuous everywhere.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nThis function replaces \u003ci\u003ey\u003d|x|\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e in the interval\n\u003ci\u003e-\u0026delta;...+\u0026delta;\u003c/i\u003e by a 4-th order polynomial that has the same\nfunction value and the first and second derivative at \u003ci\u003ex\u003d\u0026plusmn; \u0026delta;\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nA typical use of this function is to replace the\nfunction for the convective heat transfer\ncoefficient for forced or free convection that is of the form\n\u003ci\u003eh\u003dc |dT|\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e for some constant \u003ci\u003ec\u003c/i\u003e and exponent\n\u003ci\u003e0 \u0026le; n \u0026le; 1\u003c/i\u003e.\nBy using this function, the original function\nthat has an infinite derivative near zero and that takes on zero\nat the origin is replaced by a function with a bounded derivative and\na non-zero value at the origin. Physically,\nthe region \u003ci\u003e-\u0026delta;...+\u0026delta;\u003c/i\u003e may be interpreted as the region\nwhere heat conduction dominates convection in the boundary layer.\n\u003c/p\u003e\nSee the package \u003ccode\u003eExamples\u003c/code\u003e for the graph.\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Polynominal":{"name":"Buildings.Utilities.Math.Polynominal","comment":"Polynominal function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["array","parameter"],"name":"a","comment":"Coefficients","arraySubscripts":"[:]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThis block computes a polynomial of arbitrary order. The polynomial has the form \u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\u003ci\u003ey \u003d a1 + a2 x + a3 x2 + ... \u003c/i\u003e\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.DC.Storage.Battery":{"name":"Buildings.Electrical.DC.Storage.Battery","comment":"Simple model of a battery","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"etaCha","comment":"Efficiency during charging","value":"0.9","modifications":[{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"etaDis","comment":"Efficiency during discharging","value":"0.9","modifications":[{"name":"max","value":"1"}]},{"className":"Real","qualifiers":["parameter"],"name":"SOC_start","comment":"Initial state of charge","value":"0.1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}]},{"className":"Modelica.SIunits.Energy","qualifiers":["parameter"],"name":"EMax","comment":"Maximum available charge","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"kWh\""}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"P","comment":"Power stored in battery (if positive), or extracted from battery (if negative)","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,108}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,100}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"SOC","comment":"State of charge","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Buildings.Electrical.DC.Interfaces.Terminal_p","name":"terminal","comment":"Generalized terminal","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple model of a battery.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as an input the power that should be stored in the battery (if \u003ci\u003eP \u0026gt; 0\u003c/i\u003e)\nor that should be extracted from the battery.\nThe model uses a fictitious conductance\n(see \u003ca href\u003d\\\"modelica://Buildings.Electrical.DC.Loads.Conductor\\\"\u003eBuildings.Electrical.DC.Loads.Conductor\u003c/a\u003e) \u003ci\u003eG\u003c/i\u003e such that\n\u003ci\u003eP \u003d u \u0026nbsp; i\u003c/i\u003e and \u003ci\u003ei \u003d u \u0026nbsp; G,\u003c/i\u003e where\n\u003ci\u003eu\u003c/i\u003e is the voltage difference across the pins and\n\u003ci\u003ei\u003c/i\u003e is the current at the positive pin.\n\u003c/p\u003e\n\u003cp\u003e\nThe output connector \u003ccode\u003eSOC\u003c/code\u003e is the state of charge of the battery.\nThis model does not enforce that the state of charge is between zero and one.\nHowever, each time the state of charge crosses zero or one, a warning will\nbe written to the simulation log file.\nThe model also does not limit the current through the battery. The user should\nprovide a control so that only a reasonable amount of power is exchanged,\nand that the state of charge remains between zero and one.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Text(),Line(),Text(),Text(),Text(),Text()})"}},"Buildings.Fluid.Chillers.Carnot_y":{"name":"Buildings.Fluid.Chillers.Carnot_y","comment":"Chiller with performance curve adjusted based on Carnot efficiency","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Chillers.BaseClasses.PartialCarnot_y","modifications":[{"name":"COP_is_for_cooling","qualifiers":["final"],"value":"true"},{"name":"effInpEva","value":"Buildings.Fluid.Types.EfficiencyInput.port_b"},{"name":"effInpCon","value":"Buildings.Fluid.Types.EfficiencyInput.port_a"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is model of a chiller whose coefficient of performance COP changes\nwith temperatures in the same way as the Carnot efficiency changes.\nThe input signal \u003ci\u003ey\u003c/i\u003e is the control signal for the compressor.\n\u003c/p\u003e\n\u003cp\u003e\nThe model allows to either specify the Carnot effectivness\n\u003ci\u003e\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e\u003c/i\u003e, or\na \u003ci\u003eCOP\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e\nat the nominal conditions, together with\nthe evaporator temperature \u003ci\u003eT\u003csub\u003eeva,0\u003c/sub\u003e\u003c/i\u003e and\nthe condenser temperature \u003ci\u003eT\u003csub\u003econ,0\u003c/sub\u003e\u003c/i\u003e, in which\ncase the model computes the Carnot effectivness as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e \u003d \n  COP\u003csub\u003e0\u003c/sub\u003e\n\u0026frasl;  (T\u003csub\u003eeva,0\u003c/sub\u003e \u0026frasl; (T\u003csub\u003econ,0\u003c/sub\u003e-T\u003csub\u003eeva,0\u003c/sub\u003e)).\n\u003c/p\u003e\n\u003cp\u003e\nThe chiller COP is computed as the product\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  COP \u003d \u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e COP\u003csub\u003eCarnot\u003c/sub\u003e \u0026eta;\u003csub\u003ePL\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eCOP\u003csub\u003eCarnot\u003c/sub\u003e\u003c/i\u003e is the Carnot efficiency and\n\u003ci\u003e\u0026eta;\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e is a polynomial in the cooling part load ratio \u003ci\u003ey\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e\nthat can be used to take into account a change in \u003ci\u003eCOP\u003c/i\u003e at part load\nconditions.\nThis polynomial has the form\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta;\u003csub\u003ePL\u003c/sub\u003e \u003d a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + ...\n\u003c/p\u003e\n\u003cp\u003e\nwhere the coefficients \u003ci\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e\nare declared by the parameter \u003ccode\u003ea\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nOn the \u003ccode\u003eDynamics\u003c/code\u003e tag, the model can be parametrized to compute a transient\nor steady-state response.\nThe transient response of the model is computed using a first\norder differential equation for the evaporator and condenser fluid volumes.\nThe chiller outlet temperatures are equal to the temperatures of these lumped volumes.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nWhen using this component, make sure that the evaporator and the condenser have sufficient mass flow rate.\nBased on the mass flow rates, the compressor power, temperature difference and the efficiencies,\nthe model computes how much heat will be added to the condenser and removed at the evaporator.\nIf the mass flow rates are too small, very high temperature differences can result.\n\u003c/p\u003e\n\u003cp\u003e\nThe evaporator heat flow rate \u003ccode\u003eQEva_flow_nominal\u003c/code\u003e is used to assign\nthe default value for the mass flow rates, which are used for the pressure drop\ncalculations.\nIt is also used to compute the part load efficiency.\nHence, make sure that \u003ccode\u003eQEva_flow_nominal\u003c/code\u003e is set to a reasonable value.\n\u003c/p\u003e\n\u003cp\u003e\nThe maximum cooling capacity is set by the parameter \u003ccode\u003eQEva_flow_min\u003c/code\u003e,\nwhich is by default set to negative infinity.\n\u003c/p\u003e\n\u003cp\u003e\nBy default, the coefficient of performance depends on the\nevaporator leaving temperature and the condenser entering\ntemperature.\nThis can be changed with the parameters\n\u003ccode\u003eeffInpEva\u003c/code\u003e and\n\u003ccode\u003eeffInpCon\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eNotes\u003c/h4\u003e\n\u003cp\u003e\nFor a similar model that can be used as a heat pump, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatPumps.Carnot_y\\\"\u003eBuildings.Fluid.HeatPumps.Carnot_y\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos40slash1to12":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos40slash1to12","comment":"Pump data for a Wilo Stratos 40/1-12 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"3690"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{2.05415499533e-05,0.0012380952381,0.00197759103641,0.00261998132586,0.00315779645191,0.00385247432306,0.00436788048553,0.00493557422969}"},{"name":"P","value":"{195.711338777,254.50525152,302.203269367,339.387400348,367.008331835,392.162896856,397.658764999,404.489181997}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{2.05415499533e-05,0.0012380952381,0.00197759103641,0.00261998132586,0.00315779645191,0.00385247432306,0.00436788048553,0.00493557422969}"},{"name":"dp","value":"{78528.2698296,78278.944236,77854.9591567,74108.1678158,68408.8742011,57809.9050693,48393.0944907,37408.2956474}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000018000029380002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.HeatTransfer.Radiosity.OpaqueSurface":{"name":"Buildings.HeatTransfer.Radiosity.OpaqueSurface","comment":"Model for an opaque surface","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Radiosity.BaseClasses.RadiosityOneSurface"},{"nameOfExtendedClass":"Buildings.HeatTransfer.Radiosity.BaseClasses.ParametersOneSurface","modifications":[{"name":"tauIR","qualifiers":["final"],"value":"1-rhoIR-absIR"},{"name":"rhoIR","qualifiers":["final"],"value":"1-absIR"}]}],"components":[{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heatPort","comment":"Heat port of this surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-108},{10,-88}}), iconTransformation(extent \u003d {{-2,-108},{18,-88}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nModel for the emissive power of an opaque surface.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.PhaseSystems.DirectCurrent.phaseVoltages":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.phaseVoltages","comment":"Return phase to neutral voltages","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.phaseVoltages"}]},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.thetaRel":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.thetaRel","comment":"Return absolute angle of rotating system as offset to thetaRef","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.thetaRel"}]},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.thetaRef":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.thetaRef","comment":"Return absolute angle of rotating reference system","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.thetaRef"}]},"Buildings.Fluid.Actuators.Dampers.VAVBoxExponential":{"name":"Buildings.Fluid.Actuators.Dampers.VAVBoxExponential","comment":"VAV box with a fixed resistance plus a damper model withe exponential characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialDamperExponential","modifications":[{"name":"dp","modifications":[{"name":"nominal","value":"dp_nominal"}]},{"name":"kFixed","qualifiers":["final"],"value":"sqrt(kResSqu)"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"dp_nominalIncludesDamper","comment":"set to true if dp_nominal includes the pressure loss of the open damper","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of two resistances in series. One resistance has a fixed flow coefficient, the\nother resistance is an air damper whose flow coefficient is an exponential function of the opening angle.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003edp_nominalIncludesDamper\u003dtrue\u003c/code\u003e, then the parameter \u003ccode\u003edp_nominal\u003c/code\u003e\nis equal to the pressure drop of the damper plus the fixed flow resistance at the nominal\nflow rate.\nIf \u003ccode\u003edp_nominalIncludesDamper\u003dfalse\u003c/code\u003e, then \u003ccode\u003edp_nominal\u003c/code\u003e\ndoes not include the flow resistance of the air damper.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Text(),Text(),Polygon(),Polygon()})"}},"Buildings.Electrical.DC.Sensors.GeneralizedSensor":{"name":"Buildings.Electrical.DC.Sensors.GeneralizedSensor","comment":"Sensor for power, voltage and current","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Icons.GeneralizedSensor"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialTwoPort","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"V","comment":"Voltage","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ElectricPotential\""},{"name":"unit","qualifiers":["final"],"value":"\"V\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"I","comment":"Current","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ElectricCurrent\""},{"name":"unit","qualifiers":["final"],"value":"\"A\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"P","comment":"Power","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"Power\""},{"name":"unit","qualifiers":["final","each"],"value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-90}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIdeal sensor that measures power, voltage and current.\nThe two components of the power \u003ci\u003eS\u003c/i\u003e are the active and reactive power.\nAs this sensor is configured to measure DC power, the reactive power is always zero.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phaseCurrents":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phaseCurrents","comment":"Return phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phaseCurrents"}]},"Buildings.Utilities.Math.Functions.booleanReplicator":{"name":"Buildings.Utilities.Math.Functions.booleanReplicator","comment":"Replicates Boolean signals","components":[{"className":"Integer","qualifiers":["input"],"name":"nout","comment":"Number of outouts","value":"1"},{"className":"Boolean","qualifiers":["input"],"name":"u","comment":"Boolean input signal"},{"className":"Boolean","qualifiers":["array","output"],"name":"y","comment":"Boolean output signals","arraySubscripts":"[nout]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThis function replicates the boolean input signal to an array of \u003ccode\u003enout\u003c/code\u003e identical output signals. \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.Density":{"name":"Buildings.Fluid.Sensors.Density","comment":"Ideal one port density sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"d","comment":"Density in port medium","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Density\""},{"name":"unit","qualifiers":["final"],"value":"\"kg/m3\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the density of the fluid connected to its port.\nThe sensor is ideal, i.e. it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Text(),Line()})"}},"Buildings.HeatTransfer.Radiosity.Constant":{"name":"Buildings.HeatTransfer.Radiosity.Constant","comment":"Generate constant radiosity signal","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"k","comment":"Radiosity that leaves this component (k \u0026ge; 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"0"}]},{"className":"Interfaces.RadiosityOutflow","name":"JOut","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConstant radiosity source. This model requires \u003ci\u003ek \u0026ge; 0\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model is used in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.BaseClasses.DummyConstructionExterior\\\"\u003e\nBuildings.HeatTransfer.BaseClasses.DummyConstructionExterior\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Line(),Polygon(),Line(),Polygon(),Line(),Text()})"}},"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_1000":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_1000","comment":"Annealed Al cable - AWG 1000","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"size","value":"\"1000\""},{"name":"Rdc","value":"5.80709e-5"},{"name":"T_ref","value":"298.15"},{"name":"d","value":"28.372e-3"},{"name":"D","value":"46.101e-3"},{"name":"GMR","value":"Buildings.Electrical.Transmission.Functions.computeGMR(d)"},{"name":"GMD","value":"Buildings.Electrical.Transmission.Functions.computeGMD(0.1905)"},{"name":"Amp","value":"640"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAnnealed aluminium cable with a cross-sectional kcmil 1000\n(thousand of Circular Mils).\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRdc  \u003d 5.80709e-5  // Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref\u003d 298.15      // Reference temperature of the material [K]\nd    \u003d 28.372e-3   // Inner diameter [m]\nD    \u003d 46.101e-3   // Outer diameter [m]\nAmp  \u003d 640         // Ampacity [A]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.DC.Loads.Resistor":{"name":"Buildings.Electrical.DC.Loads.Resistor","comment":"Ideal linear electrical resistor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.ResistiveLoad","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal"},{"name":"mode","qualifiers":["final"],"value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"P_nominal","qualifiers":["final"],"value":"V_nominal^(2)/(max(R,Modelica.Constants.small))"}]},{"nameOfExtendedClass":"Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort","modifications":[{"name":"T","value":"T_ref"}]}],"components":[{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance at temperature T_ref","modifications":[{"name":"start","value":"1"}]},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_ref","comment":"Reference temperature","value":"300.15"},{"className":"Modelica.SIunits.LinearTemperatureCoefficient","qualifiers":["parameter"],"name":"alpha","comment":"Temperature coefficient of resistance (R_actual \u003d R*(1 + alpha*(T_heatPort - T_ref))","value":"0"},{"className":"Modelica.SIunits.Resistance","name":"R_actual","comment":"Actual resistance \u003d R*(1 + alpha*(T_heatPort - T_ref))"}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a linear DC resistor that can vary with respect to temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThe model implements the Ohm\u0027s law\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nV \u003d R(T) i.\n\u003c/p\u003e\n\u003cp\u003e\nThe resistance \u003ci\u003eR(T)\u003c/i\u003e varies depending on the temperature \u003ci\u003eT\u003c/i\u003e as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR(T) \u003d R (1 + \u0026alpha; (T - T\u003csub\u003eref\u003c/sub\u003e),\n\u003c/p\u003e\n\u003cp\u003e\nwhere the resistance \u003ci\u003eR\u003c/i\u003e is the reference value of the resistance, \u003ci\u003e\u0026alpha;\u003c/i\u003e is the\nlinear temperature coefficient, and \u003ci\u003eT\u003csub\u003eref\u003c/sub\u003e\u003c/i\u003e is the reference temperature.\nThe temperature \u003ci\u003eT\u003c/i\u003e is the temperature of the heat port if \u003ccode\u003euseHeatPort \u003d true\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Line(),Text(),Line(),Text()})"}},"Buildings.BoundaryConditions.WeatherData.ReaderTMY3.Latitude":{},"Buildings.Utilities.Math.Functions.smoothHeaviside":{"name":"Buildings.Utilities.Math.Functions.smoothHeaviside","comment":"Once continuously differentiable approximation to the Heaviside function","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Argument"},{"className":"Real","qualifiers":["input"],"name":"delta","comment":"Parameter used for scaling"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce Lipschitz continuously differentiable approximation to the\n\u003ccode\u003eHeaviside(.,.)\u003c/code\u003e function.\nSee Example \u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothHeaviside\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothHeaviside\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.setState_phX":{"name":"Buildings.Media.Air.setState_phX","comment":"Return thermodynamic state as function of pressure p, specific enthalpy h and composition X","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.setState_phX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThe \u003ca href\u003d\\\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\\\"\u003e\nthermodynamic state record\u003c/a\u003e is computed from pressure p, specific enthalpy h and composition X.\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfVaporization":{"name":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfVaporization","comment":"Enthalpy of vaporization of water","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfVaporization"}]},"Buildings.Fluid.Sensors.SpecificEntropyTwoPort":{"name":"Buildings.Fluid.Sensors.SpecificEntropyTwoPort","comment":"Ideal two port sensor for the specific entropy","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.SIunits.SpecificEntropy","qualifiers":["parameter"],"name":"s_start","comment":"Initial or guess value of output (\u003d state)","value":"Medium.specificEntropy_pTX()","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"s","comment":"Specific entropy of the passing fluid","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"SpecificEntropy\""},{"name":"unit","qualifiers":["final"],"value":"\"J/(kg.K)\""},{"name":"start","value":"s_start"}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the specific entropy of the passing fluid.\nThe sensor is ideal, i.e., it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineCapacitance":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineCapacitance","comment":"Function that computes the capacitance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineCapacitance"}],"components":[{"className":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall capacity of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is low, the cables do not consider the capacitive effect. Hence,\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nC \u003d 0.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.MassFlowRate":{"name":"Buildings.Fluid.Sensors.MassFlowRate","comment":"Ideal sensor for mass flow rate","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialFlowSensor","modifications":[{"name":"m_flow_nominal","qualifiers":["final"],"value":"0"},{"name":"m_flow_small","qualifiers":["final"],"value":"0"}]},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"m_flow","comment":"Mass flow rate from port_a to port_b","modifications":[{"name":"quantity","value":"\"MassFlowRate\""},{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the mass flow rate flowing from\n\u003ccode\u003eport_a\u003c/code\u003e to \u003ccode\u003eport_b\u003c/code\u003e.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Line(),Line()})"}},"Buildings.Airflow.Multizone.MediumColumn":{"name":"Buildings.Airflow.Multizone.MediumColumn","comment":"Vertical shaft with no friction and no storage of heat and mass","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"h","comment":"Height of shaft","value":"3","modifications":[{"name":"min","value":"0"}]},{"className":"Buildings.Airflow.Multizone.Types.densitySelection","qualifiers":["parameter"],"name":"densitySelection","comment":"Select how to pick density"},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (port_a -\u003e port_b)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a","comment":"Fluid connector a (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"min","value":"if allowFlowReversal then -Constants.inf else 0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,90},{10,110}}), iconTransformation(extent \u003d {{-10,90},{10,110}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b","comment":"Fluid connector b (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"max","value":"if allowFlowReversal then Constants.inf else 0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{10,-110},{-10,-90}}), iconTransformation(extent \u003d {{10,-110},{-10,-90}}))"}},{"className":"Modelica.SIunits.VolumeFlowRate","name":"V_flow","comment":"Volume flow rate at inflowing port (positive when flow from port_a to port_b)"},{"className":"Modelica.SIunits.MassFlowRate","name":"m_flow","comment":"Mass flow rate from port_a to port_b (m_flow \u003e 0 is design flow direction)","modifications":[{"name":"start","value":"0"}]},{"className":"Modelica.SIunits.PressureDifference","name":"dp","comment":"Pressure difference between port_a and port_b","modifications":[{"name":"start","value":"0"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Modelica.SIunits.Density","name":"rho","comment":"Density in medium column"}],"classes":[{"name":"Buildings.Airflow.Multizone.MediumColumn.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes the pressure difference of a vertical medium\ncolumn. It can be used to model the pressure difference caused by\nstack effect.\n\u003c/p\u003e\n\u003cp\u003e\nThe model can be used with the following three configurations, which are\ncontrolled by the setting of the parameter \u003ccode\u003edensitySelection\u003c/code\u003e:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003etop\u003c/code\u003e:\nUse this setting to use the density from the volume that is connected\nto \u003ccode\u003eport_a\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebottom\u003c/code\u003e:\nUse this setting to use the density from the volume that is connected\nto \u003ccode\u003eport_b\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eactual\u003c/code\u003e:\nUse this setting to use the density based on the actual flow direction.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe settings \u003ccode\u003etop\u003c/code\u003e and \u003ccode\u003ebottom\u003c/code\u003e\nshould be used when rooms or different floors of a building are\nconnected since multizone airflow models assume that each floor is completely mixed.\nFor these two seetings, this model will compute the pressure between the center of the room\nand an opening that is at height \u003ccode\u003eh\u003c/code\u003e relative to the center of the room.\nThe setting \u003ccode\u003eactual\u003c/code\u003e may be used to model a chimney in which\na column of air will change its density based on the flow direction.\n\u003c/p\u003e\n\u003cp\u003e\nIn this model, the parameter \u003ccode\u003eh\u003c/code\u003e must always be positive, and the port \u003ccode\u003eport_a\u003c/code\u003e must be\nat the top of the column.\n\u003c/p\u003e\n\u003cp\u003e\nFor a steady-state model, use\n\u003ca href\u003d\\\"modelica://Buildings.Airflow.Multizone.MediumColumnDynamic\\\"\u003e\nBuildings.Airflow.Multizone.MediumColumnDynamic\u003c/a\u003e instead of this model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Text(),Text(),Text(),Rectangle(),Rectangle(),Text(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepUpDY":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepUpDY","comment":"AC AC transformer simplified equivalent circuit (DY step up)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepUpDY","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Real","qualifiers":["parameter"],"name":"XoverR","comment":"Ratio between the complex and real components of the impedance (XL/R)"},{"className":"Real","qualifiers":["parameter"],"name":"Zperc","comment":"Short circuit impedance"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of transformer to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of transformer to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a simplified equivalent transformer model with Delta-Y connection\n(voltage step up).\nThe model accounts for winding Joule losses and leakage reactances\nthat are represented by a series of a resistance \u003ci\u003eR\u003c/i\u003e and an\ninductance \u003ci\u003eL\u003c/i\u003e. The resistance and the inductance represent the\neffects of the secondary and primary side of the transformer.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVhigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVlow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVAbase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXoverR\u003c/code\u003e - ratio between reactance and resistance, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZperc\u003c/code\u003e - the short circuit impedance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the resistance and inductance.\n\u003c/p\u003e\n\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/DY_b.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepUpDY\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepUpDY\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text(),Line(),Line(),Line(),Line(),Polygon()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.dynamicViscosity":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.dynamicViscosity","comment":"Return the dynamic viscosity","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.dynamicViscosity"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the dynamic viscosity.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.MixedAir":{"name":"Buildings.Rooms.MixedAir","comment":"Model of a room in which the air is completely mixed","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.BaseClasses.RoomHeatMassBalance","modifications":[{"name":"air"},{"name":"datConExt","modifications":[{"name":"T_a_start","qualifiers":["each"],"value":"T_start"},{"name":"T_b_start","qualifiers":["each"],"value":"T_start"}]},{"name":"datConExtWin","modifications":[{"name":"T_a_start","qualifiers":["each"],"value":"T_start"},{"name":"T_b_start","qualifiers":["each"],"value":"T_start"}]},{"name":"datConBou","modifications":[{"name":"T_a_start","qualifiers":["each"],"value":"T_start"},{"name":"T_b_start","qualifiers":["each"],"value":"T_start"}]},{"name":"datConPar","modifications":[{"name":"T_a_start","qualifiers":["each"],"value":"T_start"},{"name":"T_b_start","qualifiers":["each"],"value":"T_start"}]}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"uSha","comment":"Control signal for the shading device (removed if no shade is present)","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[nConExtWin]","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-300,160},{-260,200}}), iconTransformation(extent \u003d {{-232,164},{-200,196}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRoom model that assumes the air to be completely mixed.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.UsersGuide\\\"\u003eBuildings.Rooms.UsersGuide\u003c/a\u003e\nfor detailed explanations.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Text()})"}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction10and23":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction10and23","comment":"South and north exterior wall in test bed X3","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"4"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of exterior walls in test bed X3. It is used to\n    represent both the north and south exterior wall of the test cells\n    themselves.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of exterior walls in test bed X3. It is used to\n    represent both the north and south exterior wall of the test cells\n    themselves.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.Terminal":{"name":"Buildings.Electrical.Interfaces.Terminal","comment":"Generalized electric terminal","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.BaseTerminal"}],"components":[{"className":"PhaseSystem.Voltage","qualifiers":["array"],"name":"v","comment":"Voltage vector","arraySubscripts":"[PhaseSystem.n]"},{"className":"PhaseSystem.Current","qualifiers":["array","flow"],"name":"i","comment":"Current vector","arraySubscripts":"[PhaseSystem.n]"},{"className":"PhaseSystem.ReferenceAngle","qualifiers":["array"],"name":"theta","comment":"Optional vector of phase angles","arraySubscripts":"[PhaseSystem.m]"}],"classes":[{"name":"Buildings.Electrical.Interfaces.Terminal.PhaseSystem","comment":"Phase system","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis connector represents a generalized electric terminal. The generalization is made possible by the\nreplaceable package \u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Terminal.PhaseSystem\\\"\u003e\nBuildings.Electrical.Interfaces.Terminal.PhaseSystem\u003c/a\u003e.\nThe package \u003ccode\u003ePhaseSystem\u003c/code\u003e can be one of the packages contained in\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.PhaseSystems\\\"\u003e\nBuildings.Electrical.PhaseSystems\u003c/a\u003e.\nUsing this approach allows to represent DC, single phase AC and\nmulti phases balanced and unbalanced AC systems with the same connector.\n\u003c/p\u003e\n\u003cp\u003e\nThis connector is compatible with the following Modelica libraries:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\\\"http://www.modelon.com/products/modelica-libraries/electric-power-library\\\"\u003e\nElectric Power Library\u003c/a\u003e\ndeveloped by Modelon, and\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href\u003d\\\"https://github.com/modelica/PowerSystems\\\"\u003ePower Systems Library\u003c/a\u003e\ndeveloped by \u003ca href\u003d\\\"mailto:Ruediger.Franke@de.abb.com\\\"\u003eRuediger Franke\u003c/a\u003e (ABB).\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe connector is overdetermined since the number of effort variables\nis higher than the number of flow variables.\nThis happens when the phase system has a number of reference angles\n\u003ccode\u003ePhaseSystem.m \u0026gt; 0\u003c/code\u003e.\nThe over-determined connectors are defined and used in such a way\nthat a Modelica tool is able\nto remove the superfluous but consistent equations arriving\nat a balanced set of equations, based on a\ngraph analysis of the connection structure.\nThe models have to use ad-hoc constructs specified by the Modelica language to handle this situation.\nMore information can be found in \u003ca href\u003d\\\"#Olsson2008\\\"\u003eOlsson Et Al. (2008)\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nMore details about the generalized electrical terminal\ncan be found in \u003ca href\u003d\\\"#RuedigerEtAl2014\\\"\u003eFranke and Wiesmann (2014)\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"Olsson2008\\\"/\u003e\nHans Olsson, Martin Otter, Sven Erik Mattson and Hilding Elmqvist.\u003cbr/\u003e\n\u003ca href\u003d\\\"http://elib-v3.dlr.de/55892/1/otter2008-modelica-balanced-models.pdf\\\"\u003e\nBalanced Models in Modelica 3.0 for Increased Model Quality\u003c/a\u003e.\u003cbr/\u003e\nProc. of the 7th Modelica Conference, Bielefeld, Germany, March 2008.\u003cbr/\u003e\n\u003c/p\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"RuedigerEtAl2014\\\"/\u003e\nRuediger Franke and Hansjurg Wiesmann.\u003cbr/\u003e\n\u003ca href\u003d\\\"https://www.modelica.org/events/modelica2014/proceedings/html/submissions/ECP14096515_FrankeWiesmann.pdf\\\"\u003e\nFlexible modeling of electrical power systems - the Modelica PowerSystems library\u003c/a\u003e.\u003cbr/\u003e\nProc. of the 10th Modelica Conference, Lund, Sweden, March 2014.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.TDewPoi_pW":{"name":"Buildings.Utilities.Psychrometrics.TDewPoi_pW","comment":"Model to compute the dew point temperature for given water vapor pressure of moist air","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p_w","comment":"Water vapor partial pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"T","comment":"Dew point temperature","modifications":[{"name":"start","value":"278.15"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nDew point temperature calculation for moist air above freezing temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThe correlation used in this model is valid for dew point temperatures between\n\u003ci\u003e0\u003c/i\u003e\u0026deg;C and \u003ci\u003e200\u003c/i\u003e\u0026deg;C. It is the correlation from 2005\nASHRAE Handbook, p. 6.2. In an earlier version of this model, the equation from\nPeppers has been used, but this equation yielded about \u003ci\u003e15\u003c/i\u003e Kelvin lower dew point\ntemperatures.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Text(),Line(),Line(),Line(),Line(),Polygon(),Polygon(),Polygon(),Text(),Text(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.systemCurrent":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.systemCurrent","comment":"Return system current as function of phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.systemCurrent"}]},"Buildings.Electrical.Transmission.Grids.PartialGrid":{"name":"Buildings.Electrical.Transmission.Grids.PartialGrid","comment":"Partial model that represents a generalized grid","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.MaterialProperty"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nNodes","comment":"Number of nodes of the grid"},{"className":"Integer","qualifiers":["parameter"],"name":"nLinks","comment":"Number of links connecting the nodes"},{"className":"Integer","qualifiers":["array","parameter"],"name":"fromTo","comment":"Indexes [i,1]-\u003e[i,2] of the nodes connected by link i","arraySubscripts":"[nLinks,2]"},{"className":"Modelica.SIunits.Length","qualifiers":["array","parameter"],"name":"l","comment":"Length of the cable","modifications":[{"name":"min","qualifiers":["each"],"value":"0"}],"arraySubscripts":"[nLinks,1]"},{"className":"Buildings.Electrical.Transmission.BaseClasses.BaseCable","qualifiers":["array","replaceable"],"name":"cables","comment":"Array that contains the characteristics of each cable","arraySubscripts":"[nLinks]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis abstract grid model specifies the topology of the network by\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethe number of nodes,\u003c/li\u003e\n\u003cli\u003ethe number of links,\u003c/li\u003e\n\u003cli\u003ethe length of links, and\u003c/li\u003e\n\u003cli\u003ethe connection between links and nodes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe picture below describes the meaning of the\nvalues contained in the matrices.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/Transmission/Grids/partialGrid.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Fluid.Chillers.ElectricEIR":{"name":"Buildings.Fluid.Chillers.ElectricEIR","comment":"Electric chiller based on the DOE-2.1 model","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Chillers.BaseClasses.PartialElectric","modifications":[{"name":"QEva_flow_nominal","qualifiers":["final"],"value":"per.QEva_flow_nominal"},{"name":"COP_nominal","qualifiers":["final"],"value":"per.COP_nominal"},{"name":"PLRMax","qualifiers":["final"],"value":"per.PLRMax"},{"name":"PLRMinUnl","qualifiers":["final"],"value":"per.PLRMinUnl"},{"name":"PLRMin","qualifiers":["final"],"value":"per.PLRMin"},{"name":"etaMotor","qualifiers":["final"],"value":"per.etaMotor"},{"name":"mEva_flow_nominal","qualifiers":["final"],"value":"per.mEva_flow_nominal"},{"name":"mCon_flow_nominal","qualifiers":["final"],"value":"per.mCon_flow_nominal"},{"name":"TEvaLvg_nominal","qualifiers":["final"],"value":"per.TEvaLvg_nominal"}]}],"components":[{"className":"Buildings.Fluid.Chillers.Data.ElectricEIR.Generic","qualifiers":["parameter"],"name":"per","comment":"Performance data","annotations":{"placement":"Placement(transformation(extent \u003d {{40,80},{60,100}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of an electric chiller, based on the DOE-2.1 chiller model and\nthe EnergyPlus chiller model \u003ccode\u003eChiller:Electric:EIR\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e This model uses three functions to predict capacity and power consumption:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nA biquadratic function is used to predict cooling capacity as a function of\ncondenser entering and evaporator leaving fluid temperature.\n\u003c/li\u003e\n\u003cli\u003e\nA quadratic functions is used to predict power input to cooling capacity ratio with respect to the part load ratio.\n\u003c/li\u003e\n\u003cli\u003e\nA biquadratic functions is used to predict power input to cooling capacity ratio as a function of\ncondenser entering and evaporator leaving fluid temperature.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThese curves are stored in the data record \u003ccode\u003eper\u003c/code\u003e and are available from\n\u003ca href\u003d\\\"Buildings.Fluid.Chillers.Data.ElectricEIR\\\"\u003e\nBuildings.Fluid.Chillers.Data.ElectricEIR\u003c/a\u003e.\nAdditional performance curves can be developed using\ntwo available techniques (Hydeman and Gillespie, 2002). The first technique is called the\nLeast-squares Linear Regression method and is used when sufficient performance data exist\nto employ standard least-square linear regression techniques. The second technique is called\nReference Curve Method and is used when insufficient performance data exist to apply linear\nregression techniques. A detailed description of both techniques can be found in\nHydeman and Gillespie (2002).\n\u003c/p\u003e\n\u003cp\u003e\nThe model takes as an input the set point for the leaving chilled water temperature,\nwhich is met if the chiller has sufficient capacity.\nThus, the model has a built-in, ideal temperature control.\nThe model has three tests on the part load ratio and the cycling ratio:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nThe test\u003cpre\u003e\n  PLR1 \u003dmin(QEva_flow_set/QEva_flow_ava, per.PLRMax);\n\u003c/pre\u003e\nensures that the chiller capacity does not exceed the chiller capacity specified\nby the parameter \u003ccode\u003eper.PLRMax\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe test \u003cpre\u003e\n  CR \u003d min(PLR1/per.PRLMin, 1.0);\n\u003c/pre\u003e\ncomputes a cycling ratio. This ratio expresses the fraction of time\nthat a chiller would run if it were to cycle because its load is smaller than the\nminimal load at which it can operate.\nNote that this model continuously operates even if the part load ratio is below the minimum part load ratio.\nIts leaving evaporator and condenser temperature can therefore be considered as an\naverage temperature between the modes where the compressor is off and on.\n\u003c/li\u003e\n\u003cli\u003e\nThe test \u003cpre\u003e\n  PLR2 \u003d max(per.PLRMinUnl, PLR1);\n\u003c/pre\u003e\ncomputes the part load ratio of the compressor.\nThe assumption is that for a part load ratio below \u003ccode\u003eper.PLRMinUnl\u003c/code\u003e,\nthe chiller uses hot gas bypass to reduce the capacity, while the compressor\npower draw does not change.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\nThe electric power only contains the power for the compressor, but not any power for pumps or fans.\n\u003c/p\u003e\n\u003cp\u003e\nThe model can be parametrized to compute a transient\nor steady-state response.\nThe transient response of the boiler is computed using a first\norder differential equation for the evaporator and condenser fluid volumes.\nThe chiller outlet temperatures are equal to the temperatures of these lumped volumes.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\nHydeman, M. and K.L. Gillespie. 2002. Tools and Techniques to Calibrate Electric Chiller\nComponent Models. \u003ci\u003eASHRAE Transactions\u003c/i\u003e, AC-02-9-1.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Polygon(),Polygon(),Rectangle(),Rectangle(),Rectangle(),Ellipse(),Polygon()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_0_1_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_1_0","comment":"Version 0.1.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFirst release of the library.\n\u003c/p\u003e\n\u003cp\u003e\nThis version contains basic models for modeling building HVAC systems.\nIt also contains new medium models in the package\n\u003ca href\u003d\\\"modelica://Buildings.Media\\\"\u003eBuildings.Media\u003c/a\u003e. These medium models\nhave simpler property functions than the ones from\n\u003ca href\u003d\\\"modelica://Modelica.Media\\\"\u003eModelica.Media\u003c/a\u003e. For example,\nthere is medium model with constant heat capacity which is often sufficiently\naccurate for building HVAC simulation, in contrast to the more detailed models\nfrom \u003ca href\u003d\\\"modelica://Modelica.Media\\\"\u003eModelica.Media\u003c/a\u003e that are valid in\na larger temperature range, at the expense of introducing non-linearities due\nto the medium properties.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Network":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Network","comment":"Three phases unbalanced AC network without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialNetwork","modifications":[{"name":"terminal"},{"name":"grid"},{"name":"lines"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["array"],"name":"VAbs","comment":"RMS voltage of the grid nodes","arraySubscripts":"[3,grid.nNodes]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generalized electrical AC three-phase unbalanced network\nwithout neutral cable.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.BaseClasses.PartialNetwork\\\"\u003e\nBuildings.Electrical.Transmission.BaseClasses.PartialNetwork\u003c/a\u003e\nfor information about the network model.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.Grids.PartialGrid\\\"\u003e\nBuildings.Electrical.Transmission.Grids.PartialGrid\u003c/a\u003e\nfor more information about the topology of the network, such as\nthe number of nodes, how they are connected, and the length of each connection.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Min":{"name":"Buildings.Utilities.Math.Min","comment":"Minimum element of a vector","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.MISO"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOutputs the minimum of the vector.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.Types.Load":{"name":"Buildings.Electrical.Types.Load","comment":"Enumeration that defines the modeling assumption of the load.","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"FixedZ_steady_state","comment":"Fixed Z, steady-state"},{"className":"EnumType","qualifiers":["constant"],"name":"FixedZ_dynamic","comment":"Fixed Z, dynamic"},{"className":"EnumType","qualifiers":["constant"],"name":"VariableZ_P_input","comment":"Variable Z, P input"},{"className":"EnumType","qualifiers":["constant"],"name":"VariableZ_y_input","comment":"Variable Z, y input"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type indicates in which mode the load model operates.\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_1_4_build1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_4_build1","comment":"Version 1.4 build 1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.4 build 1 contains the new package \u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.Python27\\\"\u003e\nBuildings.Utilities.IO.Python27\u003c/a\u003e that allows calling Python functions from Modelica.\nIt also contains in the package \u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Conduction.SingleLayer\\\"\u003e\nBuildings.HeatTransfer.Conduction.SingleLayer\u003c/a\u003e\na new model for heat conduction in phase change material. This model can be used as a layer\nof the room heat transfer model.\n\u003c/p\u003e\n\n\u003cp\u003e\nNon-backward compatible changes had to be introduced\nin the valve models\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Valves\\\"\u003e\nBuildings.Fluid.Actuators.Valves\u003c/a\u003e to fully comply with the Modelica language specification,\nand in the models in the package\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Diagnostics\\\"\u003e\nBuildings.Utilities.Diagnostics\u003c/a\u003e\nas they used the \u003ccode\u003ecardinality\u003c/code\u003e function which is deprecated in the Modelica\nLanguage Specification.\n\u003c/p\u003e\n\n\u003cp\u003e\nSee below for details.\n\u003c!-- New libraries --\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\"\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.IO.Python27\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Package that contains blocks and functions that embed Python 2.7 in Modelica.\n         Data can be sent to Python functions and received from Python functions.\n         This allows for example data analysis in Python as part of a Modelica model,\n         or data exchange as part of a hardware-in-the-loop simulation in which\n         Python is used to communicate with hardware.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- New components for existing libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions.WeatherData\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis function is used by the weather data reader to set\n                       the path to the weather file relative to the root directory\n                       of the Buildings library.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Backward compatible changes --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the check of multiple connections to the same element\n                       of a fluid port, as this check required the use of the deprecated\n                       \u003ccode\u003ecardinality\u003c/code\u003e function.\n    \u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Conduction.SingleLayer\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded option to model layers with phase change material.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.BaseClasses.InfraredRadiationExchange\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the use of the \u003ccode\u003ecardinality\u003c/code\u003e function\n                       as this function is deprecated in the Modelica Language Specification.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Non-backward compatible changes to existing components --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Valves\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAll valves now require the declaration of \u003ccode\u003edp_nominal\u003c/code\u003e\n                       if the parameter assignment is\n                       \u003ccode\u003eCvData \u003d Buildings.Fluid.Types.CvTypes.OpPoint\u003c/code\u003e.\n                       This change was needed because in the previous version,\n                       \u003ccode\u003edp_nominal\u003c/code\u003e had\n                       a default value of \u003ci\u003e6000\u003c/i\u003e Pascals. However, if\n                       \u003ccode\u003eCvData \u0026gt;\u0026lt; Buildings.Fluid.Types.CvTypes.OpPoint\u003c/code\u003e, then\n                       \u003ccode\u003edp_nominal\u003c/code\u003e is computed in the initial algorithm section and hence\n                       providing a default value is not allowed according to\n                       the Modelica Language Specification.\n                       Hence, it had to be removed.\u003cbr/\u003e\n                       As part of this change, we set \u003ccode\u003edp(nominal\u003d6000)\u003c/code\u003e for all valves,\n                       because the earlier formulation uses a value that is not known during compilation,\n                       and hence leads to an error in Dymola 2014.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes.MixingVolumeDryAir\u003cbr/\u003e\n                       Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the use of the deprecated\n                       \u003ccode\u003ecardinality\u003c/code\u003e function.\n                       Therefore, now all input signals must be connected..\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Diagnostics.AssertEquality\u003cbr/\u003e\n                       Buildings.Utilities.Diagnostics.AssertInequality\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the option to not connect input signals, as this\n                       required the use of the \u003ccode\u003ecardinality\u003c/code\u003e function which\n                       is deprecated in the MSL, and not correctly implemented in OpenModelica.\n                       Therefore, if using these models, both input signals must be connected.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Math.Functions.splineDerivatives\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the default value\n                       \u003ccode\u003einput Boolean ensureMonotonicity\u003disMonotonic(y, strict\u003dfalse)\u003c/code\u003e\n                       as the Modelica language specification is not clear whether defaults can be computed\n                       or must be constants.\n    \u003c/td\u003e\n\u003c/tr\u003e\u003c/table\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Controls\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.SetPoints.HotWaterTemperatureReset\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error that led to wrong results if the room air temperature is\n                     different from its nominal value \u003ccode\u003eTRoo_nominal\u003c/code\u003e.\n                     This fixes \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/74\\\"\u003eissue 74\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\u003cbr/\u003e\n                     Buildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitSlab\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug in the assignment of the fictitious thermal resistance by replacing\n                     \u003ccode\u003eRFic[nSeg](each G\u003dA/Rx)\u003c/code\u003e with\n                     \u003ccode\u003eRFic[nSeg](each G\u003dA/nSeg/Rx)\u003c/code\u003e.\n                     This fixes \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/79\\\"\u003eissue 79\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Diagnostics.AssertEquality\u003cbr/\u003e\n                       Buildings.Utilities.Diagnostics.AssertInequality\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReplaced \u003ccode\u003ewhen\u003c/code\u003e test with \u003ccode\u003eif\u003c/code\u003e test as\n                       equations within a \u003ccode\u003ewhen\u003c/code\u003e section are only evaluated\n                       when the condition becomes true.\n                       This fixes \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/72\\\"\u003eissue 72\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear\u003cbr/\u003e\n                       Buildings.Fluid.Actuators.Valves.ThreeWayLinear\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe documenation was\n                       \u003ci\u003eFraction Kv(port_1-\u003eport_2)/Kv(port_3-\u003eport_2)\u003c/i\u003e instead of\n                       \u003ci\u003eFraction Kv(port_3-\u003eport_2)/Kv(port_1-\u003eport_2)\u003c/i\u003e.\n                       Because the parameter set correctly its attributes\n                       \u003ccode\u003emin\u003d0\u003c/code\u003e and \u003ccode\u003emax\u003d1\u003c/code\u003e,\n                       instances of these models used the correct value.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.BaseClasses.ValveParameters\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved stray backslash in write statement.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.ConservationEquation\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved wrong unit attribute of \u003ccode\u003eCOut\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.BaseClasses.HexElement\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the redeclaration of \u003ccode\u003evol2\u003c/code\u003e to be replaceable,\n                     as \u003ccode\u003evol2\u003c/code\u003e is replaced in some models.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eAdd explanation of nStaRef.\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/70\\\"\u003e\u0026#35;70\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n    Described in\n    \u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.Solids\\\"\u003e\n    Buildings.HeatTransfer.Data.Solids\u003c/a\u003e\n    how the parameter \u003ccode\u003enStaRef\u003c/code\u003e is used\n    to compute the spatial grid that is used for simulating transient heat conduction.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eAssert statement does not fire.\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/72\\\"\u003e\u0026#35;72\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n    The blocks \u003ccode\u003eBuildings.Utilities.Diagnostics.AssertEquality\u003c/code\u003e and\n    \u003ccode\u003eBuildings.Utilities.Diagnostics.AssertInequality\u003c/code\u003e did not fire because\n    the test on the time was in a \u003ccode\u003ewhen\u003c/code\u003e instead of an \u003ccode\u003eif\u003c/code\u003e statement.\n    This was wrong because \u003ccode\u003ewhen\u003c/code\u003e sections are only evaluated\n    when the condition becomes true.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003e\u003ccode\u003eHotWaterTemperatureReset\u003c/code\u003e computes wrong results if room temperature differs from nominal value.\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/74\\\"\u003e\u0026#35;74\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe equation\n\u003cpre\u003eTSup \u003d TRoo_in_internal\n          + ((TSup_nominal+TRet_nominal)/2-TRoo_in_internal) * qRel^(1/m)\n          + (TSup_nominal-TRet_nominal)/2 * qRel;\u003c/pre\u003e\nshould be formulated as\n\u003cpre\u003eTSup \u003d TRoo_in_internal\n          + ((TSup_nominal+TRet_nominal)/2-TRoo_nominal) * qRel^(1/m)\n          + (TSup_nominal-TRet_nominal)/2 * qRel;\u003c/pre\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBug in \u003ccode\u003eRadiantSlabs.SingleCircuitSlab\u003c/code\u003e fictitious resistance RFic.\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/79\\\"\u003e\u0026#35;79\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis bug has been fixed in the assignment of the fictitious thermal resistance by replacing\n                     \u003ccode\u003eRFic[nSeg](each G\u003dA/Rx)\u003c/code\u003e with\n                     \u003ccode\u003eRFic[nSeg](each G\u003dA/nSeg/Rx)\u003c/code\u003e.\n                     The bug also affected \u003ccode\u003eRadiantSlabs.ParallelCircuitSlab\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\nNote:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThis version contains various updates that allow\nthe syntax of the example models to be checked in the pedantic mode\nin Dymola 2014.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.BaseTerminal":{"name":"Buildings.Electrical.Interfaces.BaseTerminal","comment":"Empty connector used by partial models","qualifiers":["connector"],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis empty connector represents the base class extended by every electric connector of type\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Terminal\\\"\u003eBuildings.Electrical.Interfaces.Terminal\u003c/a\u003e.\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.DXCoils.VariableSpeed":{"name":"Buildings.Fluid.HeatExchangers.DXCoils.VariableSpeed","comment":"Variable speed DX cooling coil","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.PartialDXCoil","modifications":[{"name":"dxCoo","modifications":[{"name":"variableSpeedCoil","qualifiers":["final"],"value":"true"}]}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"minSpeRat","comment":"Minimum speed ratio","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Real","qualifiers":["parameter"],"name":"speRatDeaBan","comment":"Deadband for minimum speed ratio","value":"0.05"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"speRat","comment":"Speed ratio","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}), iconTransformation(extent \u003d {{-120,70},{-100,90}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model can be used to simulate a DX cooling coil with continuously variable speed compressors.\nThe control input is the speed ratio.\nThe coil will switch off if the speed ratio is below a minimum value.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DXCoils.UsersGuide\\\"\u003e\nBuildings.Fluid.HeatExchangers.DXCoils.UsersGuide\u003c/a\u003e\nfor an explanation of the model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Utilities.Math.Functions.regStep":{"name":"Buildings.Utilities.Math.Functions.regStep","comment":"Approximation of a general step, such that the approximation is continuous and differentiable","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Abscissa value"},{"className":"Real","qualifiers":["input"],"name":"y1","comment":"Ordinate value for x \u003e 0"},{"className":"Real","qualifiers":["input"],"name":"y2","comment":"Ordinate value for x \u003c 0"},{"className":"Real","qualifiers":["input"],"name":"x_small","comment":"Approximation of step for -x_small \u003c\u003d x \u003c\u003d x_small; x_small \u003e\u003d 0 required","value":"1e-5","modifications":[{"name":"min","value":"0"}]},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Ordinate value to approximate y \u003d if x \u003e 0 then y1 else y2"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function is used to approximate the equation\n\u003c/p\u003e\n\u003cpre\u003e\n    y \u003d \u003cb\u003eif\u003c/b\u003e x \u0026gt; 0 \u003cb\u003ethen\u003c/b\u003e y1 \u003cb\u003eelse\u003c/b\u003e y2;\n\u003c/pre\u003e\n\n\u003cp\u003e\nby a smooth characteristic, so that the expression is continuous and differentiable:\n\u003c/p\u003e\n\n\u003cpre\u003e\n   y \u003d \u003cb\u003esmooth\u003c/b\u003e(1, \u003cb\u003eif\u003c/b\u003e x \u0026gt;  x_small \u003cb\u003ethen\u003c/b\u003e y1 \u003cb\u003eelse\u003c/b\u003e\n                 \u003cb\u003eif\u003c/b\u003e x \u0026lt; -x_small \u003cb\u003ethen\u003c/b\u003e y2 \u003cb\u003eelse\u003c/b\u003e f(y1, y2));\n\u003c/pre\u003e\n\n\u003cp\u003e\nIn the region \u003ccode\u003e-x_small \u0026lt; x \u0026lt; x_small\u003c/code\u003e a 2nd order polynomial is used\nfor a smooth transition from \u003ccode\u003ey1\u003c/code\u003e to \u003ccode\u003ey2\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Functions.smoothInterpolation":{"name":"Buildings.Utilities.Math.Functions.smoothInterpolation","comment":"Interpolate using a cubic Hermite spline with linear extrapolation for a vector xSup[], ySup[] and independent variable x","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Abscissa value"},{"className":"Real","qualifiers":["array","input"],"name":"xSup","comment":"Support points (strictly increasing)","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["array","input"],"name":"ySup","comment":"Function values at xSup","arraySubscripts":"[size(xSup,1)]"},{"className":"Boolean","qualifiers":["input"],"name":"ensureMonotonicity","comment":"Set to true to ensure monotonicity of the cubic hermite","value":"isMonotonic(ySup)"},{"className":"Real","qualifiers":["output"],"name":"yInt","comment":"Interpolated ordinate value"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFor \u003ci\u003exSup\u003csub\u003e1\u003c/sub\u003e \u0026le; x \u0026le; xSup\u003csub\u003en\u003c/sub\u003e\u003c/i\u003e,\nwhere \u003ci\u003en\u003c/i\u003e is the size of the support points \u003ci\u003exSup\u003c/i\u003e,\nwhich must be strictly monotonically increasing,\nthis function interpolates\nusing cubic hermite spline. For \u003ci\u003ex\u003c/i\u003e outside this interval, the function\nlinearly extrapolates.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ci\u003en\u003d2\u003c/i\u003e, linear interpolation is used an if \u003ci\u003en\u003d1\u003c/i\u003e, the\nfunction value \u003ci\u003ey\u003csup\u003e1\u003c/sup\u003e\u003c/i\u003e is returned.\n\u003c/p\u003e\n\u003cp\u003e\nNote that if \u003ccode\u003exSup\u003c/code\u003e and \u003ccode\u003eySup\u003c/code\u003e only depend on parameters\nor constants, then\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.cubicHermiteLinearExtrapolation\\\"\u003e\nBuildings.Utilities.Math.Functions.cubicHermiteLinearExtrapolation\u003c/a\u003e\nwill be more efficient.\nIn contrast to the function\n\u003ca href\u003d\\\"modelica://Modelica.Math.Vectors.interpolate\\\"\u003e\nModelica.Math.Vectors.interpolate\u003c/a\u003e\nwhich provides linear interpolation, this function does\nnot trigger events.\n\u003c/p\u003e\n\u003cp\u003e\nFor how to use this function, see\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.Examples.SmoothInterpolation\\\"\u003e\nBuildings.Utilities.Math.Functions.Examples.SmoothInterpolation\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Storage.Stratified":{"name":"Buildings.Fluid.Storage.Stratified","comment":"Model of a stratified tank for thermal energy storage","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface"}],"components":[{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"VTan","comment":"Tank volume"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"hTan","comment":"Height of tank (without insulation)"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"dIns","comment":"Thickness of insulation"},{"className":"Modelica.SIunits.ThermalConductivity","qualifiers":["parameter"],"name":"kIns","comment":"Specific heat conductivity of insulation","value":"0.04"},{"className":"Integer","qualifiers":["parameter"],"name":"nSeg","comment":"Number of volume segments","value":"2","modifications":[{"name":"min","value":"2"}]},{"className":"Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamics","comment":"Formulation of energy balance","value":"Modelica.Fluid.Types.Dynamics.FixedInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Types.Dynamics","qualifiers":["parameter"],"name":"massDynamics","comment":"Formulation of mass balance","value":"energyDynamics","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Medium.AbsolutePressure","qualifiers":["parameter"],"name":"p_start","comment":"Start value of pressure","value":"Medium.p_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Medium.Temperature","qualifiers":["parameter"],"name":"T_start","comment":"Start value of temperature","value":"Medium.T_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X_start","comment":"Start value of mass fractions m_i/m","value":"Medium.X_default","arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", enable \u003d Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C_start","comment":"Start value of trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", enable \u003d Medium.nC\u003e0)"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau","comment":"Time constant for mixing","value":"1"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"Ql_flow","comment":"Heat loss of tank (positive if heat flows from tank to ambient)","annotations":{"placement":"Placement(transformation(extent \u003d {{100,62},{120,82}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","qualifiers":["array"],"name":"heaPorVol","comment":"Heat port of fluid volumes","arraySubscripts":"[nSeg]","annotations":{"placement":"Placement(transformation(extent \u003d {{-6,-6},{6,6}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heaPorSid","comment":"Heat port tank side (outside insulation)","annotations":{"placement":"Placement(transformation(extent \u003d {{50,-6},{62,6}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heaPorTop","comment":"Heat port tank top (outside insulation)","annotations":{"placement":"Placement(transformation(extent \u003d {{14,68},{26,80}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heaPorBot","comment":"Heat port tank bottom (outside insulation). Leave unconnected for adiabatic condition","annotations":{"placement":"Placement(transformation(extent \u003d {{14,-80},{26,-68}}))"}},{"className":"MixingVolumes.MixingVolume","qualifiers":["array"],"name":"vol","comment":"Tank segment","modifications":[{"name":"Medium","qualifiers":["redeclare","package","each"],"value":"Medium"},{"name":"energyDynamics","qualifiers":["each"],"value":"energyDynamics"},{"name":"massDynamics","qualifiers":["each"],"value":"massDynamics"},{"name":"p_start","qualifiers":["each"],"value":"p_start"},{"name":"T_start","qualifiers":["each"],"value":"T_start"},{"name":"X_start","qualifiers":["each"],"value":"X_start"},{"name":"C_start","qualifiers":["each"],"value":"C_start"},{"name":"V","qualifiers":["each"],"value":"VTan/(nSeg)"},{"name":"nPorts","qualifiers":["each"],"value":"nPorts"},{"name":"m_flow_nominal","qualifiers":["each"],"value":"m_flow_nominal"},{"name":"mSenFac","qualifiers":["final","each"],"value":"1"},{"name":"m_flow_small","qualifiers":["final","each"],"value":"m_flow_small"},{"name":"allowFlowReversal","qualifiers":["final","each"],"value":"allowFlowReversal"}],"arraySubscripts":"[nSeg]","annotations":{"placement":"Placement(transformation(extent \u003d {{6,-16},{26,4}}))"}}],"classes":[{"name":"Buildings.Fluid.Storage.Stratified.Medium","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialSimpleMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a stratified storage tank.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.UsersGuide\\\"\u003e\nBuildings.Fluid.Storage.UsersGuide\u003c/a\u003e\nfor more information.\n\u003c/p\u003e\n\u003cp\u003e\nFor a model with enhanced stratification, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.StratifiedEnhanced\\\"\u003e\nBuildings.Fluid.Storage.StratifiedEnhanced\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Line(),Line(),Line()})"}},"Buildings.Fluid.Interfaces.FourPortFlowResistanceParameters":{"name":"Buildings.Fluid.Interfaces.FourPortFlowResistanceParameters","comment":"Parameters for flow resistance for models with four ports","components":[{"className":"Boolean","qualifiers":["parameter"],"name":"computeFlowResistance1","comment":"\u003dtrue, compute flow resistance. Set to false to assume no friction","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Flow resistance\", group \u003d \"Medium 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"from_dp1","comment":"\u003d true, use m_flow \u003d f(dp) else dp \u003d f(m_flow)","value":"false","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance1, tab \u003d \"Flow resistance\", group \u003d \"Medium 1\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp1_nominal","comment":"Pressure difference","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearizeFlowResistance1","comment":"\u003d true, use linear relation between m_flow and dp for any flow rate","value":"false","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance1, tab \u003d \"Flow resistance\", group \u003d \"Medium 1\")"}},{"className":"Real","qualifiers":["parameter"],"name":"deltaM1","comment":"Fraction of nominal flow rate where flow transitions to laminar","value":"0.1","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance1, tab \u003d \"Flow resistance\", group \u003d \"Medium 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"computeFlowResistance2","comment":"\u003dtrue, compute flow resistance. Set to false to assume no friction","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Flow resistance\", group \u003d \"Medium 2\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"from_dp2","comment":"\u003d true, use m_flow \u003d f(dp) else dp \u003d f(m_flow)","value":"false","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance2, tab \u003d \"Flow resistance\", group \u003d \"Medium 2\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp2_nominal","comment":"Pressure difference","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearizeFlowResistance2","comment":"\u003d true, use linear relation between m_flow and dp for any flow rate","value":"false","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance2, tab \u003d \"Flow resistance\", group \u003d \"Medium 2\")"}},{"className":"Real","qualifiers":["parameter"],"name":"deltaM2","comment":"Fraction of nominal flow rate where flow transitions to laminar","value":"0.1","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance2, tab \u003d \"Flow resistance\", group \u003d \"Medium 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis class contains parameters that are used to\ncompute the pressure drop in components that have two fluid streams.\nNote that the nominal mass flow rate is not declared here because\nthe model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialFourPortInterface\\\"\u003e\nPartialFourPortInterface\u003c/a\u003e\nalready declares it.\n\u003c/html\u003e\""}},"Buildings.Media.Air.der_enthalpyOfDryAir":{},"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.PVSimpleOriented":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.PVSimpleOriented","comment":"Model of a simple PV panel with orientation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented","modifications":[{"name":"terminal"},{"name":"panel"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as an input the direct and diffuse solar radiation from\nthe weather bus.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\u003c/a\u003e for\nmore information.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Network_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Network_N","comment":"Three phases unbalanced AC network with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialNetwork","modifications":[{"name":"terminal"},{"name":"grid"},{"name":"lines"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["array"],"name":"VAbs","comment":"RMS voltage of the grid nodes","arraySubscripts":"[3,grid.nNodes]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generalized electrical AC three-phase unbalanced network\nwith neutral cable.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.BaseClasses.PartialNetwork\\\"\u003e\nBuildings.Electrical.Transmission.BaseClasses.PartialNetwork\u003c/a\u003e\nfor information about the network model.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.Grids.PartialGrid\\\"\u003e\nBuildings.Electrical.Transmission.Grids.PartialGrid\u003c/a\u003e\nfor more information about the topology of the network, such as\nthe number of nodes, how they are connected, and the length of each connection.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Airflow.Multizone.Types.densitySelection":{"name":"Buildings.Airflow.Multizone.Types.densitySelection","comment":"Enumeration to select density in medium column","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"fromTop","comment":"Density from top port"},{"className":"EnumType","qualifiers":["constant"],"name":"fromBottom","comment":"Density from bottom port"},{"className":"EnumType","qualifiers":["constant"],"name":"actual","comment":"Actual density based on flow direction"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnumeration to define the choice of valve flow coefficient\n(to be selected via choices menu):\n\u003c/p\u003e\n\u003ctable border\u003d\\\"1\\\" summary\u003d\\\"Explanation of the enumeration\\\"\u003e\n\u003ctr\u003e\u003cth\u003eEnumeration\u003c/th\u003e\n    \u003cth\u003eDescription\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003efromTop\u003c/td\u003e\n    \u003ctd\u003e\nUse this setting to use the density from the volume that is connected\nto the top port.\n    \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003efromBottom\u003c/td\u003e\n    \u003ctd\u003e\nUse this setting to use the density from the volume that is connected\nto the bottom port.\n\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eactual\u003c/td\u003e\n    \u003ctd\u003eUse this setting to use the density based on the actual flow direction.\n\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Types.CharacteristicReactance":{"name":"Buildings.Electrical.Types.CharacteristicReactance","comment":"Reactance per unit length","superClasses":[{"nameOfExtendedClass":"Real","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Reactance per meter\""},{"name":"unit","qualifiers":["final"],"value":"\"Ohm/m\""}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type defines the reactance per unit length. It is typically used\nto describe physical properties of line cables.\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type defines the reactance per unit length. It is typically used\nto describe physical properties of line cables.\n\u003c/html\u003e\""}},"Buildings.Utilities.IO.Python27.Functions.exchange":{"name":"Buildings.Utilities.IO.Python27.Functions.exchange","comment":"Function that communicates with Python","components":[{"className":"String","qualifiers":["input"],"name":"moduleName","comment":"Name of the python module that contains the function"},{"className":"String","qualifiers":["input"],"name":"functionName","comment":"Name of the python function","value":"moduleName"},{"className":"Real","qualifiers":["array","input"],"name":"dblWri","comment":"Double values to write","arraySubscripts":"[max(1,nDblWri)]"},{"className":"Integer","qualifiers":["array","input"],"name":"intWri","comment":"Integer values to write","arraySubscripts":"[max(1,nIntWri)]"},{"className":"String","qualifiers":["array","input"],"name":"strWri","comment":"String values to write","arraySubscripts":"[max(1,nStrWri)]"},{"className":"Integer","qualifiers":["input"],"name":"nDblWri","comment":"Number of double values to write","modifications":[{"name":"min","value":"0"}]},{"className":"Integer","qualifiers":["input"],"name":"nDblRea","comment":"Number of double values to read","modifications":[{"name":"min","value":"0"}]},{"className":"Integer","qualifiers":["input"],"name":"nIntWri","comment":"Number of integer values to write","modifications":[{"name":"min","value":"0"}]},{"className":"Integer","qualifiers":["input"],"name":"nIntRea","comment":"Number of integer values to read","modifications":[{"name":"min","value":"0"}]},{"className":"Integer","qualifiers":["input"],"name":"nStrWri","comment":"Number of strings to write","modifications":[{"name":"min","value":"0"}]},{"className":"Real","qualifiers":["array","output"],"name":"dblRea","comment":"Double values returned by Python","arraySubscripts":"[max(1,nDblRea)]"},{"className":"Integer","qualifiers":["array","output"],"name":"intRea","comment":"Integer values returned by Python","arraySubscripts":"[max(1,nIntRea)]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function is a wrapper for\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.Python27.Functions.BaseClasses.exchange\\\"\u003e\nBuildings.Utilities.IO.Python27.Functions.BaseClasses.exchange\u003c/a\u003e.\nIt adds the directory \u003ccode\u003emodelica://Buildings/Resources/Python-Sources\u003c/code\u003e\nto the environment variable \u003ccode\u003ePYTHONPATH\u003c/code\u003e\nprior to calling the function that exchanges data with Python.\nAfter the function call, the \u003ccode\u003ePYTHONPATH\u003c/code\u003e is set back to what\nit used to be when entering this function.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.Python27.UsersGuide\\\"\u003e\nBuildings.Utilities.IO.Python27.UsersGuide\u003c/a\u003e\nfor instructions, and\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.Python27.Functions.Examples\\\"\u003e\nBuildings.Utilities.IO.Python27.Functions.Examples\u003c/a\u003e\nfor examples.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal_p":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal_p","comment":"Terminal P for AC three-phase unbalanced systems (no neutral cable)","qualifiers":["connector"],"components":[{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_p","qualifiers":["array"],"name":"phase","arraySubscripts":"[3]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector type p for AC three-phase unbalanced systems.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Polygon()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.BaseProperties":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.BaseProperties","comment":"Base properties","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.BaseProperties","modifications":[{"name":"preferredMediumStates","value":"true"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    Base properties of the medium.\n    \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal_n":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal_n","comment":"Terminal N for AC three-phase unbalanced systems (no neutral cable)","qualifiers":["connector"],"components":[{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_n","qualifiers":["array"],"name":"phase","arraySubscripts":"[3]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector type n for AC three-phase unbalanced systems.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Polygon()})"}},"Buildings.Utilities.Math.RegNonZeroPower":{"name":"Buildings.Utilities.Math.RegNonZeroPower","comment":"Power function, regularized near zero, but nonzero value for x\u003d0","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"n","comment":"Exponent"},{"className":"Real","qualifiers":["parameter"],"name":"delta","comment":"Abscissa value where transition occurs","value":"0.01"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\nFunction that approximates \u003ci\u003ey\u003d|x|\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e where \u003ci\u003en \u0026gt; 0\u003c/i\u003e\nso that\n\u003cul\u003e\n\u003cli\u003e\u003ci\u003ey(0)\u003c/i\u003e is not equal to zero.\u003c/li\u003e\n\u003cli\u003e\u003ci\u003edy/dx\u003c/i\u003e is bounded and continuous everywhere.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nThis function replaces \u003ci\u003ey\u003d|x|\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e in the interval\n\u003ci\u003e-\u0026delta;...+\u0026delta;\u003c/i\u003e by a 4-th order polynomial that has the same\nfunction value and the first and second derivative at \u003ci\u003ex\u003d\u0026plusmn; \u0026delta;\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nA typical use of this function is to replace the\nfunction for the convective heat transfer\ncoefficient for forced or free convection that is of the form\n\u003ci\u003eh\u003dc |dT|\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e for some constant \u003ci\u003ec\u003c/i\u003e and exponent\n\u003ci\u003e0 \u0026le; n \u0026le; 1\u003c/i\u003e.\nBy using this function, the original function\nthat has an infinite derivative near zero and that takes on zero\nat the origin is replaced by a function with a bounded derivative and\na non-zero value at the origin. Physically,\nthe region \u003ci\u003e-\u0026delta;...+\u0026delta;\u003c/i\u003e may be interpreted as the region\nwhere heat conduction dominates convection in the boundary layer.\n\u003c/p\u003e\nSee the package \u003ccode\u003eExamples\u003c/code\u003e for the graph.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to4":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to4","comment":"Pump data for a Wilo Stratos 25/1-4 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"1800"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{5.55555555556e-07,0.000402190923318,0.00052269170579,0.000643192488263,0.000752738654147,0.000866979655712,0.000973395931142,0.00108607198748,0.00115962441315}"},{"name":"P","value":"{14.2085618951,21.2596204596,23.3573239437,25.1349149442,26.581943662,27.9121571534,28.8498841148,29.4981726255,29.7520982304}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{5.55555555556e-07,0.000402190923318,0.00052269170579,0.000643192488263,0.000752738654147,0.000866979655712,0.000973395931142,0.00108607198748,0.00115962441315}"},{"name":"dp","value":"{17066.9518717,16997.0053476,16437.4331551,15528.1283422,14408.9839572,13149.9465241,11681.0695187,9932.40641711,8533.47593583}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Rooms.X3B.TestCell":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3B.TestCell","comment":"Model of LBNL User Test Facility Cell X3A","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"AFlo","value":"60.97"},{"name":"nSurBou","value":"4"},{"name":"nConPar","value":"0"},{"name":"nConBou","value":"4"},{"name":"nConExt","value":"4"},{"name":"nConExtWin","value":"1"},{"name":"hRoo","value":"3.6576"},{"name":"surBou","modifications":[{"name":"A","value":"{6.645*3.09,6.645*1.51,6.645*0.91,6.645*3.65}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","qualifiers":["each"],"value":"Buildings.Types.Tilt.Floor"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{extDoo,R16p8Wal,R20Wal,EWal}"},{"name":"A","value":"{1.3716*2.39,3.6576*2.52-2.39*1.3716,6.6675*9.144,3.6576*9.144}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling,Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.S,Buildings.Types.Azimuth.E}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{celDiv,parCon,parDoo,R52Wal}"},{"name":"A","value":"{3.6576*9.144,3.6576*2.886075-2.39*1.22,2.39*1.22,3.6576*1.2614}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N}"}]},{"name":"datConExtWin","modifications":[{"name":"layers","value":"{R16p8Wal}"},{"name":"A","value":"{6.6675*3.6576}"},{"name":"glaSys","value":"{glaSys}"},{"name":"hWin","value":"{1.8288}"},{"name":"wWin","value":"{5.88}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.S}"}]},{"name":"intConMod","value":"Buildings.HeatTransfer.Types.InteriorConvection.Temperature"},{"name":"extConMod","value":"Buildings.HeatTransfer.Types.ExteriorConvection.TemperatureWind"},{"name":"lat","value":"0.66098585832754"}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction10and23","qualifiers":["replaceable"],"name":"R16p8Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-168},{430,-148}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall","qualifiers":["replaceable"],"name":"R52Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-192},{430,-172}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"R20Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-216},{430,-196}}))"}},{"className":"Data.Constructions.GlazingSystems.ASHRAE901Gla","qualifiers":["replaceable"],"name":"glaSys","annotations":{"placement":"Placement(transformation(extent \u003d {{436,-192},{456,-172}}))"}},{"className":"Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionWall","qualifiers":["replaceable"],"name":"parCon","annotations":{"placement":"Placement(transformation(extent \u003d {{436,-216},{456,-196}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall","qualifiers":["replaceable"],"name":"celDiv","comment":"Construction of wall connecting to cell UF90X3B","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-144},{430,-124}}))"}},{"className":"Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionDoor","qualifiers":["replaceable"],"name":"parDoo","comment":"Door used in partition walls in FLEXLAB test cells","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-84},{430,-64}}))"}},{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorInsulated","qualifiers":["replaceable"],"name":"extDoo","comment":"Construction of an exterior door","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-114},{430,-94}}))"}},{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction1","name":"EWal","annotations":{"placement":"Placement(transformation(extent \u003d {{436,-166},{456,-146}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a model for test cell 3B in the LBNL User Facility. This model is intended to represent\n  the main space in test cell 3B. This documentation describes the wall constructions used to model\n  test cell X3B. Documentation describing how it is to be combined to other room models to create\n  a model of the full test cell can be found in\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3B\\\"\u003eBuildings.Rooms.FLEXLAB.Rooms.X3B\u003c/a\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  There are 6 different wall sections described in the model. They are shown in the figure below.\n  \u003c/p\u003e\n  \u003cp align\u003d\\\"center\\\"\u003e\n  \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3B/TestCell.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in test cell model\\\"/\u003e\n  \u003c/p\u003e\n  \u003cp\u003e\n  The different wall sections are entered into the model according to the following table.\n  \u003c/p\u003e\n  \u003ctable border \u003d \\\"1\\\" summary\u003d\\\"Description of walls in test cell room model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eWall Section Number\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n  \u003cth\u003eLocation in Model\u003c/th\u003e\n  \u003cth\u003eCorresponding Layer\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e1\u003c/td\u003e\n  \u003ctd\u003eEast exterior wall\u003c/td\u003e\n  \u003ctd\u003edatConExt[4]\u003c/td\u003e\n  \u003ctd\u003eEWal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e2\u003c/td\u003e\n  \u003ctd\u003eSouth exterior wall with windows\u003c/td\u003e\n  \u003ctd\u003edatConExtWin[1]\u003c/td\u003e\n  \u003ctd\u003eR16p8Wal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e3\u003c/td\u003e\n  \u003ctd\u003eWest wall separating X3B and X3A\u003c/td\u003e\n  \u003ctd\u003edatConBou[1]\u003c/td\u003e\n  \u003ctd\u003ecelDiv\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e4\u003c/td\u003e\n  \u003ctd\u003eNorth partition wall separating X3B and the closet\u003c/td\u003e\n  \u003ctd\u003eWall: datConBou[2]\u003cbr/\u003e\n  Door: datConBou[3]\u003c/td\u003e\n  \u003ctd\u003eWall: parCon\u003cbr/\u003e\n  Door: parDoo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e5\u003c/td\u003e\n  \u003ctd\u003eNorth wall separating X3B and the electrical room\u003c/td\u003e\n  \u003ctd\u003edatConBou[4]\u003c/td\u003e\n  \u003ctd\u003eR52Wal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e6\u003c/td\u003e\n  \u003ctd\u003eNorth exterior wall and door\u003c/td\u003e\n  \u003ctd\u003eDoor: datConExt[1]\u003cbr/\u003e\n  Wall: datConExt[2]\u003c/td\u003e\n  \u003ctd\u003eDoor: extDoo\u003cbr/\u003e\n  Wall: R16p8Wal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003cp\u003e\n  A seventh construction, not shown in the figure, models the ceiling. It is modeled in datConExt[3] using\n  the layer \u003ccode\u003eR20Wal\u003c/code\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  The test cell can be configured with several different floor types. The options include radiant conditioning,\n  a slab on grade floor with no conditioning, or a raised floor. Because of this uncertainty in floor design, a\n  model of the floor itself is not included in this model. The user must include a model for the floor in any\n  applications of this model.\n  \u003c/p\u003e\n  \u003cp\u003e\n  Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n  The following table describes the connections to models outside of the X3A package. The connections in datConExt\n  are not described in the table because they are connected to the external environment, and no additional heat\n  port connections are necessary.\n  \u003c/p\u003e\n  \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Description of intended connections including TestCell model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eLocation in TestCell\u003c/th\u003e\n  \u003cth\u003eDescription of External Connection\u003c/th\u003e\n  \u003cth\u003eLocation in External Model\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003esurf_conBou[1]\u003c/td\u003e\n  \u003ctd\u003eTemperature of test cell X3A\u003c/td\u003e\n  \u003ctd\u003eX3A.TestCellNoCelDiv.surf_surBou[2]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6","comment":"Pump data for a Wilo Stratos 25/1-6 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2540"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{8.4618254914e-06,0.000274485730449,0.000555832400486,0.000837082776634,0.00110292011218,0.00138657181719,0.00166761756882,0.00187198329301}"},{"name":"P","value":"{27.7850423935,35.9020280633,46.212011386,55.5493899809,62.3704820257,68.7045763872,73.3263927089,75.1773568358}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{8.4618254914e-06,0.000274485730449,0.000555832400486,0.000837082776634,0.00110292011218,0.00138657181719,0.00166761756882,0.00187198329301}"},{"name":"dp","value":"{34808.1176471,34738.9411765,34508.1176471,32430.7058824,29083.7647059,24005.6470588,18004.2352941,13041.5294118}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eData from\n\u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000018000028040002003a/fc_product_datasheet\\\"\u003e\nhttp://productfinder.wilo.com/en/COM/product/00000018000028040002003a/fc_product_datasheet\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThe nominal rpm is arbitrarily chosen as the rpm of the pump curve\nin the data sheet that has the highest rpm,\nwithout being limited by the maximum power limitation\n(see dotted curve on figure below).\nPump curves (H(m_flow) and P(m_flow)) from the data sheets\nare digitized using\n\u003ca href\u003d\\\"http://arohatgi.info/WebPlotDigitizer/app/\\\"\u003eweb plot digitizer\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eLimitations:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe pump curve cap at high rpm that can be seen is not enforced\nby the model.\n\u003c/li\u003e\n\u003cli\u003e\nThe pump curve may be altered slightly to guarantee that \u003ci\u003edp/dm\u0026lt;0\u003c/i\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe figure below illustrates a digitized pump curve.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"Pump curve\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/Movers/Data/stratoscurve.png\\\"/\u003e\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.HeatCapacityOfWater":{"name":"Buildings.Media.Specialized.Air.PerfectGas.HeatCapacityOfWater","comment":"Specific heat capacity of water (liquid only) which is constant","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T"},{"className":"SpecificHeatCapacity","qualifiers":["output"],"name":"cp_fl"}]},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to8":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to8","comment":"Pump data for a Wilo Stratos 25/1-8 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"3040"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{2.66111582909e-06,0.000621486635037,0.000887056469533,0.0011525489114,0.00140859349908,0.00168018209891,0.00191740837085,0.00219831980599}"},{"name":"P","value":"{42.7878285797,72.7712666315,87.0576021552,99.7562542248,108.565085499,117.461493336,123.188074537,128.511579716}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{2.66111582909e-06,0.000621486635037,0.000887056469533,0.0011525489114,0.00140859349908,0.00168018209891,0.00191740837085,0.00219831980599}"},{"name":"dp","value":"{50002.7035151,49603.919395,47783.2940685,44505.1908368,39882.6694921,33688.9797121,27835.1000463,20631.4409942}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000018000028650002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.AC.OnePhase.Loads.Resistive":{"name":"Buildings.Electrical.AC.OnePhase.Loads.Resistive","comment":"Model of a resistive load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.ResistiveLoad","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a resistive load. It may be used to model a load that has\na power factor of one.\n\u003c/p\u003e\n\u003cp\u003e\nThe model computes the complex power vector as\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nS \u003d P + jQ \u003d V \u0026sdot; i\u003csup\u003e*\u003c/sup\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u003c/i\u003e is the voltage phasor and \u003ci\u003ei\u003csup\u003e*\u003c/sup\u003e\u003c/i\u003e is the complex\nconjugate of the current phasor.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe load model takes as input the power consumed by the inductive load and\nthe power factor \u003ci\u003epf\u003dcos(\u0026phi;)\u003c/i\u003e. The power\ncan be either fixed using the parameter \u003ccode\u003eP_nominal\u003c/code\u003e, or\nit is possible to specify a variable power using the inputs \u003ccode\u003ey\u003c/code\u003e or\n\u003ccode\u003ePow\u003c/code\u003e. The different modes can be selected with the parameter\n\u003ccode\u003emode\u003c/code\u003e, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Load\\\"\u003e\nBuildings.Electrical.Interfaces.Load\u003c/a\u003e for more information.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe equations of the model can be rewritten as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e1\u003c/sub\u003e \u003d (P V\u003csub\u003e1\u003c/sub\u003e + Q V\u003csub\u003e2\u003c/sub\u003e)/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e),\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e2\u003c/sub\u003e \u003d (P V\u003csub\u003e2\u003c/sub\u003e - Q V\u003csub\u003e1\u003c/sub\u003e)/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e),\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003ei\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003ei\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003eV\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, and \u003ci\u003eV\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e\nare the real and imaginary parts of the current and voltage phasors.\n\u003c/p\u003e\n\n\u003cp\u003e\nSince the model represents a load with a power factor of one, the complex\npower is \u003ci\u003eQ \u003d 0\u003c/i\u003e. This leads to the following equations where\nthere are nonlinear equations that relate the current to the voltage\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e1\u003c/sub\u003e \u003d P V\u003csub\u003e1\u003c/sub\u003e/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e)\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e2\u003c/sub\u003e \u003d P V\u003csub\u003e2\u003c/sub\u003e/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e)\n\u003c/p\u003e\n\n\u003cp\u003e\nThe non-linearity is due to the fact that the load consumes the power specified by the variable \u003ci\u003eP\u003c/i\u003e,\nirrespectively of the voltage of the load. The figure below shows the relationship\nbetween the real part of the current phasor and the real and imaginary voltages of the load.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/OnePhase/Loads/NonlinearLoad_labels.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nWhen multiple loads are connected in a grid through cables that cause voltage drops,\nthe dimension of the system of nonlinear equations increases linearly with the number of loads.\nThis nonlinear system of equations introduces challenges during the initialization,\nas Newton solvers may diverge if initialized far from a solution, as well during the simulation.\nIn this situation, the model can be parameterized to use a linear approximation\nas discussed in the next section.\n\u003c/p\u003e\n\n\u003ch4\u003eLinearized model\u003c/h4\u003e\n\u003cp\u003e\nGiven the constraints and the two-dimensional nature of the problem, it is difficult to\nfind a linearized version of the AC load model. A solution could be to divide the voltage\ndomain into sectors, and for each sector compute the best linear approximation.\nHowever, the selection of the proper approximation depending on the value of the\nvoltage can generate events that increase the simulation time. For these reasons, the\nlinearized model assumes a voltage that is equal to the nominal value\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e1\u003c/sub\u003e \u003d P V\u003csub\u003e1\u003c/sub\u003e/V\u003csub\u003eRMS\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e2\u003c/sub\u003e \u003d P V\u003csub\u003e2\u003c/sub\u003e/V\u003csub\u003eRMS\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003eRMS\u003c/sub\u003e\u003c/i\u003e is the Root Mean Square voltage of the AC system.\nEven though this linearized version of the load model introduces an approximation\nerror in the current, it satisfies the contraints related to the ratio of the\nactive and reactive powers.\n\u003c/p\u003e\n\u003cp\u003e\nThe image below show the linearized function\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/OnePhase/Loads/LinearLoad_labels.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003ch4\u003eInitialization\u003c/h4\u003e\n\u003cp\u003e\nThe initialization problem can be simplified using the homotopy operator. The homotopy operator\nuses two different types of equations to compute the value of a variable: the actual one\n and a simplified one. The actual equation is the one used during the normal operation.\nDuring initialization, the simplified equation is first solved and then slowly replaced\nwith the actual equation to compute the initial values for the nonlinear system of\nequations. The load model uses the homotopy operator, with the linearized model being used\nas the simplified equation. This numerical expedient has proven useful when simulating models\nwith more than ten connected loads.\n\u003c/p\u003e\n\u003cp\u003e\nThe load model has a parameter \u003ccode\u003einitMode\u003c/code\u003e that can be used to select\nthe assumption to use during the initialization phase by the homotopy operator.\nThe choices are between a null current or the linearized model.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Line(),Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.specificEnthalpy_pTX":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificEnthalpy_pTX","comment":"Specific enthalpy","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p","comment":"Pressure"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Temperature"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["array","input"],"name":"X","comment":"Mass fractions of moist air","arraySubscripts":"[:]"},{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"Specific enthalpy at p, T, X"}]},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHeatCapacityCv":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHeatCapacityCv","comment":"Return the specific heat capacity at constant volume","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHeatCapacityCv"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific heat capacity at constant volume.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.OnePhase.Lines.TwoPortInductance":{"name":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortInductance","comment":"Model of an inductive element with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialTwoPortInductance","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.VariableZ_y_input"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}}],"annotations":{"diagram":"Diagram(graphics \u003d {Rectangle(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents an inductance that connects two AC one phase interfaces.\nThis model can be used to represent a single phase cable in a AC grid.\n\u003c/p\u003e\n\u003cp\u003e\nThe model represents the lumped inductance as shown in the figure below.\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/OnePhase/Lines/twoPortL.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Utilities.Psychrometrics.SaturationPressureLiquid":{"name":"Buildings.Utilities.Psychrometrics.SaturationPressureLiquid","comment":"Saturation pressure as a function of temperature","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TSat","comment":"Saturation temperature","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"nominal","value":"300"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"pSat","comment":"Saturation pressure","modifications":[{"name":"unit","value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""},{"name":"nominal","value":"1000"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSaturation pressure of water above the triple point temperature computed from temperature\naccording to Wagner \u003ci\u003eet al.\u003c/i\u003e (1993). The range of validity is between\n\u003ci\u003e273.16\u003c/i\u003e and \u003ci\u003e373.16\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nWagner W., A. Saul, A. Pruss.\n \u003ci\u003eInternational equations for the pressure along the melting and along the sublimation curve of ordinary water substance\u003c/i\u003e,\nequation 3.5. 1993.\n\u003ca href\u003d\\\"http://www.nist.gov/data/PDFfiles/jpcrd477.pdf\\\"\u003e\nhttp://www.nist.gov/data/PDFfiles/jpcrd477.pdf\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Utilities.Math.Functions.powerLinearized":{"name":"Buildings.Utilities.Math.Functions.powerLinearized","comment":"Power function that is linearized below a user-defined threshold","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Abscissa value"},{"className":"Real","qualifiers":["input"],"name":"n","comment":"Exponent"},{"className":"Real","qualifiers":["input"],"name":"x0","comment":"Abscissa value below which linearization occurs"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Function value"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nFunction that approximates \u003ci\u003ey\u003dx\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e\nwhere \u003ci\u003e0 \u0026lt; n\u003c/i\u003e so that\n\u003cul\u003e\n\u003cli\u003ethe function is defined and monotone increasing for all \u003ci\u003ex\u003c/i\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ci\u003edy/dx\u003c/i\u003e is bounded and continuous everywhere (for \u003ci\u003en \u0026lt; 1\u003c/i\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nFor \u003ci\u003ex \u0026lt; x\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e, this function replaces\n\u003ci\u003ey\u003dx\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e by\na linear function that is continuously differentiable everywhere.\n\u003c/p\u003e\n\u003cp\u003e\nA typical use of this function is to replace\n\u003ci\u003eT \u003d T4\u003csup\u003e(1/4)\u003c/sup\u003e\u003c/i\u003e in a radiation balance to ensure that the\nfunction is defined everywhere. This can help solving the initialization problem\nwhen a solver may be far from a solution and hence \u003ci\u003eT4 \u0026lt; 0\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee the package \u003ccode\u003eExamples\u003c/code\u003e for the graph.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.BoundaryConditions.Types.SkyTemperatureCalculation":{"name":"Buildings.BoundaryConditions.Types.SkyTemperatureCalculation","comment":"Enumeration for computation of sky temperature","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"HorizontalRadiation","comment":"Use horizontal irradiation"},{"className":"EnumType","qualifiers":["constant"],"name":"TemperaturesAndSkyCover","comment":"Use dry-bulb and dew-point temperatures and sky cover"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnumeration to define the method used to compute the sky temperature.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHeatCapacityCp":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHeatCapacityCp","comment":"Return the specific heat capacity at constant pressure","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHeatCapacityCp"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the specific heat capacity at constant pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.specificEntropy":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificEntropy","comment":"Specific entropy (liquid part neglected, mixing entropy included)","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.specificEntropy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nSpecific entropy is calculated from the thermodynamic state record, assuming ideal gas behavior and including entropy of mixing. Liquid or solid water is not taken into account, the entire water content X[1] is assumed to be in the vapor state (relative humidity below 1.0).\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.Gases.Generic":{"name":"Buildings.HeatTransfer.Data.Gases.Generic","comment":"Thermal properties of fill gas for windows","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"x","comment":"Gas layer thickness"},{"className":"Modelica.SIunits.ThermalConductivity","qualifiers":["parameter"],"name":"a_k","comment":"Constant coefficient for thermal conductivity"},{"className":"Real","qualifiers":["parameter"],"name":"b_k","comment":"Temperature dependent coefficient for thermal conductivity","modifications":[{"name":"unit","value":"\"W/(m.K2)\""}]},{"className":"Modelica.SIunits.DynamicViscosity","qualifiers":["parameter"],"name":"a_mu","comment":"Constant coefficient for dynamic viscosity"},{"className":"Real","qualifiers":["parameter"],"name":"b_mu","comment":"Temperature dependent coefficient for dynamic viscosity","modifications":[{"name":"unit","value":"\"N.s/(m2.K)\""}]},{"className":"Modelica.SIunits.SpecificHeatCapacity","qualifiers":["parameter"],"name":"a_c","comment":"Constant coefficient for specific heat capacity"},{"className":"Real","qualifiers":["parameter"],"name":"b_c","comment":"Temperature dependent coefficient for specific heat capacity","modifications":[{"name":"unit","value":"\"J/(kg.K2)\""}]},{"className":"Modelica.SIunits.MolarMass","qualifiers":["parameter"],"name":"MM","comment":"Molar mass (of mixture or single fluid)"},{"className":"Modelica.SIunits.Pressure","qualifiers":["parameter"],"name":"P0","comment":"Normal pressure","value":"101325"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nGeneric record for thermophysical properties for window\ngas fills.\nThe implementation is according to\n\u003ca href\u003d\\\"http://www.iso.org/iso/catalogue_detail.htm?csnumber\u003d26425\\\"\u003eISO 15099:2003,\nThermal performance of windows, doors and shading devices -- Detailed calculations\u003c/a\u003e.\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.OnePhase.systemCurrent":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.systemCurrent","comment":"Return system current as function of phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.systemCurrent"}]},"Buildings.Utilities.Psychrometrics.Functions.pW_TDewPoi_amb":{"name":"Buildings.Utilities.Psychrometrics.Functions.pW_TDewPoi_amb","comment":"Function to compute the water vapor partial pressure for a given dew point temperature of moist air","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Dew point temperature"},{"className":"Modelica.SIunits.Pressure","qualifiers":["output"],"name":"p_w","comment":"Water vapor partial pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"100"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nDew point temperature calculation for moist air between \u003ci\u003e0 degC\u003c/i\u003e and \u003ci\u003e30 degC\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe correlation used in this model is valid for dew point temperatures between\n\u003ci\u003e0\u003c/i\u003e\u0026deg;C and \u003ci\u003e30\u003c/i\u003e\u0026deg;C. It is an approximation to the correlation from 2005\nASHRAE Handbook, p. 6.2, which is valid in a wider range of temperatures and implemented\nin\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.Functions.pW_TDewPoi\\\"\u003e\nBuildings.Utilities.Psychrometrics.Functions.pW_TDewPoi\u003c/a\u003e.\nThe approximation error of this simplified function is below 5% for a\ntemperature of \u003ci\u003e0\u003c/i\u003e\u0026deg;C to \u003ci\u003e30\u003c/i\u003e\u0026deg;C.\nThe benefit of this simpler function is that it can be inverted analytically,\nwhereas the other function requires a numerical solution.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.ThermodynamicState":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.ThermodynamicState","comment":"Thermodynamic state variables","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.ThermodynamicState"}],"components":[{"className":"Temperature","name":"T","comment":"Temperature of medium","modifications":[{"name":"start","value":"T_default"}]},{"className":"AbsolutePressure","name":"p","comment":"Pressure of medium","modifications":[{"name":"start","value":"p_default"}]}]},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.Grid":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.Grid","comment":"Electrical grid","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Frequency of the source","modifications":[{"name":"start","value":"60"}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"RMS voltage of the source","modifications":[{"name":"start","value":"480"}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phiSou","comment":"Phase shift of the source","value":"0"},{"className":"Buildings.Electrical.AC.Interfaces.PowerOutput","qualifiers":["array"],"name":"P","comment":"Power consumed from grid if negative, or fed to grid if positive","arraySubscripts":"[3]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal_p","name":"terminal","comment":"Connector for three-phase unbalanced systems","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-110},{10,-90}}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,-100}))"}},{"className":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.FixedVoltage","name":"sou","comment":"Voltage source","modifications":[{"name":"potentialReference","value":"true"},{"name":"definiteReference","value":"true"},{"name":"f","value":"f"},{"name":"V","value":"V"},{"name":"phiSou","value":"phiSou"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{10,-10},{-10,10}}, origin \u003d {10,0}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that can be used to represent the electrical grid supply.\n\u003c/p\u003e\n\u003cp\u003e\nThe model has an output connector named \u003ccode\u003eP[n]\u003c/code\u003e with \u003ccode\u003en \u003d 3\u003c/code\u003e that\ncontains information about the power supplied by the grid to the network.\nThe convention is that \u003ccode\u003eP[i].real\u003c/code\u003e is positive if real power is\nconsumed from the grid, and negative if it is fed into the grid.\nThe connector has size equal to three because each element\nof the vector refers to a single phase.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eV\u003c/code\u003e is the root means square of the voltage.\nIn US, a typical value \u003ci\u003e480\u003c/i\u003e Volts.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.OnePhase.Conversion.ACDCConverter":{"name":"Buildings.Electrical.AC.OnePhase.Conversion.ACDCConverter","comment":"AC DC converter","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialConversion","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"conversionFactor","comment":"Ratio of DC voltage / AC RMS voltage","modifications":[{"name":"min","value":"Modelica.Constants.eps"}]},{"className":"Real","qualifiers":["parameter"],"name":"eta","comment":"Converter efficiency, pLoss \u003d (1-eta) * Ptr","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Power","name":"PLoss","comment":"Loss power"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_AC","comment":"Connect AC side of converter to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"AC side\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_DC","comment":"Connect DC side of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"DC side\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is an AC/DC converter, based on a power balance between both circuit sides.\nThe paramater \u003ccode\u003econversionFactor\u003c/code\u003e defines the ratio between the RMS voltages\nas\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nV\u003csub\u003eDC\u003c/sub\u003e \u003d conversionFactor V\u003csub\u003eAC\u003c/sub\u003e,\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003eDC\u003c/sub\u003e\u003c/i\u003e is the voltage of the DC circuit and \u003ci\u003eV\u003csub\u003eAC\u003c/sub\u003e\u003c/i\u003e\nis the RMS voltage at the primary side of the transformer.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe loss of the converter is proportional to the power transmitted.\nThe parameter \u003ccode\u003eeta\u003c/code\u003e is the efficiency of the transfer.\nThe loss is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003csub\u003eloss\u003c/sub\u003e \u003d (1-\u0026eta;) P\u003csub\u003etr\u003c/sub\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eP\u003csub\u003etr\u003c/sub\u003e\u003c/i\u003e is the power transmitted. The model is bi-directional\nand the power can flow from both the primary to the secondary side and vice-versa.\nFurthermore, reactive power on both side are set to \u003ci\u003e0\u003c/i\u003e.\n\u003c/p\u003e\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model is derived from\n\u003ca href\u003d\\\"modelica://Modelica.Electrical.QuasiStationary.SinglePhase.Utilities.IdealACDCConverter\\\"\u003e\nModelica.Electrical.QuasiStationary.SinglePhase.Utilities.IdealACDCConverter\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Line(),Text(),Text(),Text(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.HeatTransfer.Windows.Functions.glassPropertyUncoated":{"name":"Buildings.HeatTransfer.Windows.Functions.glassPropertyUncoated","comment":"Compute angular variation and hemispherical integration of the transmittance and reflectance for a uncoated glass pane without shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialSingleGlassRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"glass","comment":"Propertry of one glass pane","arraySubscripts":"[3]"},{"className":"Modelica.SIunits.Length","qualifiers":["input"],"name":"x","comment":"Thickness"},{"className":"Modelica.SIunits.Angle","qualifiers":["array","input"],"name":"psi","comment":"Incident angles","arraySubscripts":"[HEM-1]"},{"className":"Real","qualifiers":["array","output"],"name":"layer","comment":"Transmittance, front and back reflectance","arraySubscripts":"[3,HEM]"}]},"Buildings.Media.Air.der_enthalpyOfNonCondensingGas":{},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.thetaRel":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.thetaRel","comment":"Return absolute angle of rotating system as offset to thetaRef","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.thetaRel"}]},"Buildings.HeatTransfer.Convection.Functions.HeatFlux.constantCoefficient":{"name":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.constantCoefficient","comment":"Constant convective heat transfer coefficient","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.BaseClasses.PartialHeatFlux"}],"components":[{"className":"Modelica.SIunits.CoefficientOfHeatTransfer","qualifiers":["input"],"name":"hCon","comment":"Constant for convective heat transfer coefficient","value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the buoyancy-driven convective heat flux as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  q\u0026#775; \u003d h \u0026Delta;T,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026Delta;T\u003c/i\u003e is the solid temperature minus the fluid temperature and\n\u003ci\u003eh\u003c/i\u003e is the convective heat transfer coefficient.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Interfaces.PartialTwoPort":{"name":"Buildings.Fluid.Interfaces.PartialTwoPort","comment":"Partial component with two ports","qualifiers":["model","partial"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (port_a -\u003e port_b)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a","comment":"Fluid connector a (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"min","value":"if allowFlowReversal then -Modelica.Constants.inf else 0"}]},{"name":"h_outflow","modifications":[{"name":"start","value":"Medium.h_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b","comment":"Fluid connector b (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"max","value":"if allowFlowReversal then Modelica.Constants.inf else 0"}]},{"name":"h_outflow","modifications":[{"name":"start","value":"Medium.h_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{110,-10},{90,10}}))"}}],"classes":[{"name":"Buildings.Fluid.Interfaces.PartialTwoPort.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis partial model defines an interface for components with two ports.\nThe treatment of the design flow direction and of flow reversal are predefined based on the parameter \u003ccode\u003eallowFlowReversal\u003c/code\u003e.\nThe component may transport fluid and may have internal storage for a given fluid \u003ccode\u003eMedium\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThis model is similar to\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.Interfaces.PartialTwoPort\\\"\u003e\nModelica.Fluid.Interfaces.PartialTwoPort\u003c/a\u003e\nbut it does not use the \u003ccode\u003eouter system\u003c/code\u003e declaration.\nThis declaration is omitted as in building energy simulation,\nmany models use multiple media, an in practice,\nusers have not used this global definition to assign parameters.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Line(),Text()})"}},"Buildings.Media.Air.setState_psX":{"name":"Buildings.Media.Air.setState_psX","comment":"Return the thermodynamic state as function of p, s and composition X or Xi","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.setState_psX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the thermodynamic state based on pressure,\nspecific entropy and mass fraction.\n\u003c/p\u003e\n\u003cp\u003e\nThe state is computed by symbolically solving\n\u003ca href\u003d\\\"modelica://Buildings.Media.Air.specificEntropy\\\"\u003e\nBuildings.Media.Air.specificEntropy\u003c/a\u003e\nfor temperature.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.ThermodynamicState":{"name":"Buildings.Media.Specialized.Air.PerfectGas.ThermodynamicState","comment":"ThermodynamicState record for moist air","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.ThermodynamicState","modifications":[{"name":"p","modifications":[{"name":"start","value":"p_default"}]},{"name":"T","modifications":[{"name":"start","value":"T_default"}]},{"name":"X","modifications":[{"name":"start","value":"X_default"}]}]}]},"Buildings.Media.Specialized.Air.PerfectGas.der_specificHeatCapacityCp":{"name":"Buildings.Media.Specialized.Air.PerfectGas.der_specificHeatCapacityCp","comment":"Derivative of specific heat capacity of gas mixture at constant pressure","qualifiers":["replaceable"],"components":[{"className":"ThermodynamicState","qualifiers":["input"],"name":"state"},{"className":"ThermodynamicState","qualifiers":["input"],"name":"der_state"},{"className":"Real","qualifiers":["output"],"name":"der_cp","modifications":[{"name":"unit","value":"\"J/(kg.K.s)\""}]}]},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isothermalCompressibility":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isothermalCompressibility","comment":"Return the isothermal compressibility factor","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isothermalCompressibility"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the isothermal compressibility coefficient,\nwhich is zero as this medium is incompressible.\nThe isothermal compressibility is defined as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026kappa;\u003csub\u003eT\u003c/sub\u003e \u003d - 1 \u0026frasl; v \u0026nbsp; (\u0026part; v \u0026frasl; \u0026part; p)\u003csub\u003eT\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ev\u003c/i\u003e is the specific volume,\n\u003ci\u003eT\u003c/i\u003e is the temperature and\n\u003ci\u003ep\u003c/i\u003e is the pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.thetaRef":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.thetaRef","comment":"Return absolute angle of rotating reference system","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.thetaRef"}]},"Buildings.Media.Specialized.Air.PerfectGas.gasConstant":{"name":"Buildings.Media.Specialized.Air.PerfectGas.gasConstant","comment":"Gas constant","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.gasConstant"}]},"Buildings.Electrical.AC.OnePhase.Conversion.ACACConverter":{"name":"Buildings.Electrical.AC.OnePhase.Conversion.ACACConverter","comment":"AC AC converter single phase systems","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Icons.RefAngleConversion"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialConversion","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"conversionFactor","comment":"Ratio of QS rms voltage on side 2 / QS rms voltage on side 1","modifications":[{"name":"min","value":"Modelica.Constants.eps"}]},{"className":"Real","qualifiers":["parameter"],"name":"eta","comment":"Converter efficiency, pLoss \u003d (1-eta) * Ptr","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"If true, connect side 1 of converter to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"If true, connect side 2 of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}},{"className":"Modelica.SIunits.Power","qualifiers":["array"],"name":"LossPower","comment":"Loss power","arraySubscripts":"[2]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is an AC/AC converter, based on a power balance between both circuit sides.\nThe paramater \u003ci\u003econversionFactor\u003c/i\u003e defines the ratio between the RMS voltages\nas\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nV\u003csub\u003e2\u003c/sub\u003e \u003d conversionFactor  V\u003csub\u003e1\u003c/sub\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e and \u003ci\u003eV\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e are the RMS voltages\nat the primary and secondary sides of the transformer, i.e., the\nconnector N and P, respectively.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe loss of the converter is proportional to the power transmitted.\nThe parameter \u003ccode\u003eeta\u003c/code\u003e is the efficiency of the transfer.\nThe loss is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003csub\u003eloss\u003c/sub\u003e \u003d (1-\u0026eta;) P\u003csub\u003etr\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eP\u003csub\u003etr\u003c/sub\u003e\u003c/i\u003e is the power transmitted. The model is bi-directional\nand the power can flow from the primary to the secondary side and vice-versa.\nFurthermore, reactive power on both side are set to zero.\n\u003c/p\u003e\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model is derived from\n\u003ca href\u003d\\\"modelica://Modelica.Electrical.QuasiStationary.SinglePhase.Utilities.IdealACDCConverter\\\"\u003e\nModelica.Electrical.QuasiStationary.SinglePhase.Utilities.IdealACDCConverter\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Text(),Text(),Text(),Text(),Text(),Text(),Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.der_specificHeatCapacityCv":{"name":"Buildings.Media.Specialized.Air.PerfectGas.der_specificHeatCapacityCv","comment":"Derivative of specific heat capacity of gas mixture at constant volume","qualifiers":["replaceable"],"components":[{"className":"ThermodynamicState","qualifiers":["input"],"name":"state"},{"className":"ThermodynamicState","qualifiers":["input"],"name":"der_state"},{"className":"Real","qualifiers":["output"],"name":"der_cv","modifications":[{"name":"unit","value":"\"J/(kg.K.s)\""}]}]},"Buildings.HeatTransfer.Windows.Functions.winTExteriorIrradiationInteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.winTExteriorIrradiationInteriorShading","comment":"Angular and hemispherical transmittance of a window system (glass and shading device) for exterior irradiation with interior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"traExtIrrIntSha","comment":"Angular and hemispherical transmittance of a window system (glass and shading device) forh exterior irradiation with interior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular and hemispherical transmittance of a window system (glass and shading device) for exterior irradiation with interior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density","comment":"Return the density","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the density as a function of temperature.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe function is based on the IDA implementation in \u003ccode\u003etherpro.nmf\u003c/code\u003e, which\nimplements\n\u003c/p\u003e\n\u003cpre\u003e\nd :\u003d 1000.12 + 1.43711e-2*T_degC -\n 5.83576e-3*T_degC^2 + 1.5009e-5*T_degC^3;\n \u003c/pre\u003e\n\u003cp\u003e\nThis has been converted to Kelvin, which resulted in the above expression.\nIn addition, below 5 \u0026deg;C and above 100 \u0026deg;C, the density is replaced\nby a linear function to avoid inflection points.\nThis linear extension is such that the density is once continuously differentiable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Movers.FlowControlled_dp":{"name":"Buildings.Fluid.Movers.FlowControlled_dp","comment":"Fan or pump with ideally controlled head dp as input signal","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine","modifications":[{"name":"preVar","qualifiers":["final"],"value":"Buildings.Fluid.Movers.BaseClasses.Types.PrescribedVariable.PressureDifference"},{"name":"computePowerUsingSimilarityLaws","qualifiers":["final"],"value":"per.havePressureCurve"},{"name":"preSou","modifications":[{"name":"dp_start","value":"dp_start"}]},{"name":"stageInputs","qualifiers":["final"],"value":"heads","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"Pa\""}]},{"name":"constInput","qualifiers":["final"],"value":"constantHead","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"Pa\""}]},{"name":"filter","modifications":[{"name":"y_start","qualifiers":["final"],"value":"dp_start"},{"name":"u_nominal","value":"abs(dp_nominal)"},{"name":"u","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"Pa\""}]},{"name":"y","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"Pa\""}]}]},{"name":"eff","modifications":[{"name":"per","modifications":[{"name":"pressure","qualifiers":["final"],"value":"if per.havePressureCurve then per.pressure else Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters()"},{"name":"use_powerCharacteristic","qualifiers":["final"],"value":"if per.havePressureCurve then per.use_powerCharacteristic else false"}]}]}]}],"components":[{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp_start","comment":"Initial value of pressure raise","value":"0","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Filtered speed\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp_nominal","comment":"Nominal pressure raise, used to normalized the filter if filteredSpeed\u003dtrue,\n        to set default values of constantHead and heads, and \n        and for default pressure curve if not specified in record per","value":"if rho_default\u003c500 then 500 else 10000","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"constantHead","comment":"Constant pump head, used when inputType\u003dConstant","value":"dp_nominal","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(enable \u003d inputType\u003d\u003dBuildings.Fluid.Types.InputType.Constant)"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["array","parameter"],"name":"heads","comment":"Vector of head set points, used when inputType\u003dStages","value":"dp_nominal*{1}","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"displayUnit","qualifiers":["each"],"value":"\"Pa\""}],"arraySubscripts":"[:]","annotations":{"dialog":"Dialog(enable \u003d inputType\u003d\u003dBuildings.Fluid.Types.InputType.Stages)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"dp_in","comment":"Prescribed pressure rise","modifications":[{"name":"min","value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""}],"conditionalClause":" if inputType\u003d\u003dBuildings.Fluid.Types.InputType.Continuous","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {0,120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {-2,120}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"dp_actual","modifications":[{"name":"min","value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,10},{120,30}}), iconTransformation(extent \u003d {{100,10},{120,30}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes a fan or pump with prescribed head.\nThe input connector provides the difference between\noutlet minus inlet pressure.\nThe efficiency of the device is computed based\non the efficiency and pressure curves that are defined\nin record \u003ccode\u003eper\u003c/code\u003e, which is of type\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.SpeedControlled_Nrpm\\\"\u003e\nBuildings.Fluid.Movers.SpeedControlled_Nrpm\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003efilteredSpeed\u003dtrue\u003c/code\u003e, then the parameter \u003ccode\u003edp_nominal\u003c/code\u003e is\nused to normalize the filter. This is used to improve the numerics of the transient response.\nThe actual pressure raise of the mover at steady-state is independent\nof the value of \u003ccode\u003edp_nominal\u003c/code\u003e. It is recommended to set\n\u003ccode\u003edp_nominal\u003c/code\u003e to approximately the pressure raise that the fan has during\nfull speed.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.UsersGuide\\\"\u003e\nUser\u0027s Guide\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Line(),Text(),Text()})"}},"Buildings.Utilities.Math.Bicubic":{"name":"Buildings.Utilities.Math.Bicubic","comment":"Bicubic function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SI2SO"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"a","comment":"Coefficients","arraySubscripts":"[10]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block computes\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n y \u003d a\u003csub\u003e1\u003c/sub\u003e\n    + a\u003csub\u003e2\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n    + a\u003csub\u003e4\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e5\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n    + a\u003csub\u003e6\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\n    + a\u003csub\u003e7\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e^3\n    + a\u003csub\u003e8\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e^3\n    + a\u003csub\u003e9\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e  x\u003csub\u003e2\u003c/sub\u003e\n    + a\u003csub\u003e1\u003c/sub\u003e0  x\u003csub\u003e1\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Resistive":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Resistive","comment":"Model of a resistive load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Loads.Resistive","modifications":[{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a resistive load. See\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Resistive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Resistive\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Line(),Text(),Line(),Rectangle(),Line(),Line(),Line(),Rectangle(),Line(),Line(),Rectangle(),Line()})"}},"Buildings.Fluid.Sources.Outside_CpLowRise":{"name":"Buildings.Fluid.Sources.Outside_CpLowRise","comment":"Boundary that takes weather data as an input and computes wind pressure for low-rise buildings","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sources.BaseClasses.Outside"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"Cp0","comment":"Wind pressure coefficient for wind normal to wall","value":"0.6","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"className":"Real","qualifiers":["parameter"],"name":"s","comment":"Side ratio, s\u003dlength of this wall/length of adjacent wall","modifications":[{"name":"min","qualifiers":["final"],"value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth (South:0, West:pi/2)"},{"className":"Modelica.SIunits.Angle","name":"alpha","comment":"Wind incidence angle (0: normal to wall)"},{"className":"Real","name":"CpAct","comment":"Actual wind pressure coefficient","modifications":[{"name":"min","value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"className":"Modelica.SIunits.Pressure","name":"pWin","comment":"Change in pressure due to wind force","modifications":[{"name":"displayUnit","value":"\"Pa\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes boundary conditions for\npressure, enthalpy, and species concentration that can be obtained\nfrom weather data. The model is identical to\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources.Outside\\\"\u003e\nBuildings.Fluid.Sources.Outside\u003c/a\u003e,\nexcept that it adds the wind pressure to the\npressure at the fluid port \u003ccode\u003eports\u003c/code\u003e.\nThe correlation that is used to compute the wind pressure is based\non Swami and Chandra (1987) and valid for low-rise buildings\nwith rectangular shape.\nThe same correlation is also implemented in CONTAM (Persily and Ivy, 2001).\nFor other buildings, the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources.Outside_Cp\\\"\u003e\nBuildings.Fluid.Sources.Outside_Cp\u003c/a\u003e should be used that takes\nthe wind pressure coefficient as an input or parameter.\n\u003c/p\u003e\n\u003cp\u003e\nThe wind pressure coefficient is computed based on the\nside ratio of the walls, which is defined as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ns \u003d x \u0026frasl; y\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003ex\u003c/i\u003e is the length of the wall that will be connected to\nthis model, and \u003ci\u003ey\u003c/i\u003e is the length of the adjacent wall.\nThe wind direction is computed relative to the azimuth of this surface,\nwhich is equal to the parameter \u003ccode\u003eazi\u003c/code\u003e.\nThe surface azimuth is defined in\n\u003ca href\u003d\\\"modelica://Buildings.Types.Azimuth\\\"\u003e\nBuildings.Types.Azimuth\u003c/a\u003e.\nFor example, if an exterior wall is South oriented, i.e., its outside-facing\nsurface is towards South, use\n\u003ccode\u003eBuildings.Types.Azimuth.S\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nBased on the surface azimuth, the wind direction and the side ratio\nof the walls, the model computes how much the wind pressure\nis attenuated compared to the reference wind pressure \u003ccode\u003eCp0\u003c/code\u003e.\nThe reference wind pressure \u003ccode\u003eCp0\u003c/code\u003e is a user-defined parameter,\nand must be equal to the wind pressure at zero wind incidence angle.\nSwami and Chandra (1987) recommend \u003ci\u003eC\u003csub\u003ep0\u003c/sub\u003e \u003d 0.6\u003c/i\u003e for\nall low-rise buildings as this represents the average of\nvarious values reported in the literature.\nThe computation of the actual wind pressure coefficient \u003ci\u003eC\u003csub\u003ep\u003c/sub\u003e\u003c/i\u003e\nis explained in the function\n\u003ca href\u003d\\\"modelica://Buildings.Airflow.Multizone.BaseClasses.windPressureLowRise\\\"\u003e\nBuildings.Airflow.Multizone.BaseClasses.windPressureLowRise\u003c/a\u003e\nthat is called by this model.\n\u003c/p\u003e\n\u003cp\u003e\nThe pressure \u003ci\u003ep\u003c/i\u003e at the port \u003ccode\u003eports\u003c/code\u003e is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  p \u003d p\u003csub\u003ew\u003c/sub\u003e + C\u003csub\u003ep\u003c/sub\u003e 1 \u0026frasl; 2 v\u003csup\u003e2\u003c/sup\u003e \u0026rho;,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ep\u003csub\u003ew\u003c/sub\u003e\u003c/i\u003e is the atmospheric pressure from the weather bus,\n\u003ci\u003ev\u003c/i\u003e is the wind speed from the weather bus, and\n\u003ci\u003e\u0026rho;\u003c/i\u003e is the fluid density.\n\u003c/p\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\nMuthusamy V. Swami and\nSubrato Chandra.\n\u003ci\u003e\n\u003ca href\u003d\\\"http://www.fsec.ucf.edu/en/publications/pdf/FSEC-CR-163-86.pdf\\\"\u003e\nProcedures for\nCalculating Natural\nVentilation Airflow\nRates in Buildings.\u003c/a\u003e\u003c/i\u003e\nFlorida Solar Energy Center, FSEC-CR-163-86. March, 1987.\nCape Canaveral, Florida.\n\u003c/li\u003e\n\u003cli\u003e\nAndrew K. Persily and Elizabeth M. Ivy.\n\u003ci\u003e\n\u003ca href\u003d\\\"www.bfrl.nist.gov/IAQanalysis/docs/NISTIR6585.pdf\\\"\u003e\nInput Data for Multizone Airflow and IAQ Analysis.\u003c/a\u003e\u003c/i\u003e\nNIST, NISTIR 6585.\nJanuary, 2001.\nGaithersburg, MD.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text()})"}},"Buildings.HeatTransfer.Windows.Functions.getGlassTR":{"name":"Buildings.HeatTransfer.Windows.Functions.getGlassTR","comment":"Transmittance and reflectance of glass","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialGlassRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"layer","comment":"Property of glass pane","arraySubscripts":"[3,N,HEM,NSta]"},{"className":"Real","qualifiers":["array","output"],"name":"traRef","comment":"Glass transmittance, front and back reflectance","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[3,N,N,HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular variation of the transmittance and reflectance of each glass pane.\nIt accounts for the transmittance and reflectance among different panes.\nPane \u003ccode\u003e1\u003c/code\u003e is facing outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\nFor instance, \u003ccode\u003etraRef[TRA, 1, N, iD]\u003c/code\u003e means transmittance between layer \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003eN\u003c/code\u003e for exterior irradiation and\n\u003ccode\u003etraRef[TRA, N, 1, iD]\u003c/code\u003e means the transmittance for interior irradiation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers_vi":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers_vi","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers_vi"}]},"Buildings.Airflow.Multizone.EffectiveAirLeakageArea":{"name":"Buildings.Airflow.Multizone.EffectiveAirLeakageArea","comment":"Effective air leakage area","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Airflow.Multizone.Orifice","modifications":[{"name":"m","value":"0.65"},{"name":"A","qualifiers":["final"],"value":"CD/(CDRat)*L*dpRat^(0.5-m)"}]}],"components":[{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dpRat","comment":"|Rating conditions|Pressure drop at rating condition","value":"4","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Real","qualifiers":["parameter"],"name":"CDRat","comment":"|Rating conditions|Discharge coefficient","value":"1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"L","comment":"Effective leakage area","modifications":[{"name":"min","value":"0"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes the one-directional pressure driven\nair flow through a crack-like opening.\n\u003c/p\u003e\n\u003cp\u003e\nThe opening is modeled as an orifice. The orifice area\nis parameterized by processing the effective air leakage area, the discharge coefficient and pressure drop at a reference condition.\nThe effective air leakage area can be obtained, for example,\nfrom the ASHRAE fundamentals (ASHRAE, 1997, p. 25.18). In\nthe ASHRAE fundamentals, the effective air leakage area is\nbased on a reference pressure difference of \u003ci\u003e4\u003c/i\u003e Pa and a discharge\ncoefficient of \u003ci\u003e1\u003c/i\u003e.\nA similar model is also used in the CONTAM software (Dols and Walton, 2002).\nDols and Walton (2002) recommend to use for the flow exponent\n\u003ci\u003em\u003d0.6\u003c/i\u003e to \u003ci\u003em\u003d0.7\u003c/i\u003e if the flow exponent is not\nreported with the test results.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cb\u003eASHRAE, 1997.\u003c/b\u003e\n\u003ci\u003eASHRAE Fundamentals\u003c/i\u003e,\nAmerican Society of Heating, Refrigeration and Air-Conditioning\nEngineers, 1997.\n\u003c/li\u003e\n\u003cli\u003e\n\u003cb\u003eDols and Walton, 2002.\u003c/b\u003e\nW. Stuart Dols and George N. Walton, \u003ci\u003eCONTAMW 2.0 User Manual,\nMultizone Airflow and Contaminant Transport Analysis Software\u003c/i\u003e,\nBuilding and Fire Research Laboratory,\nNational Institute of Standards and Technology,\nTech. Report NISTIR 6921,\nNovember, 2002.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Text(),Text(),Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Electrical.Interfaces.PartialPluggableUnbalanced":{"name":"Buildings.Electrical.Interfaces.PartialPluggableUnbalanced","comment":"Partial interface for unbalanced loads","components":[{"className":"Boolean","qualifiers":["parameter"],"name":"plugPhase1","comment":"If true, phase 1 is connected","value":"true"},{"className":"Boolean","qualifiers":["parameter"],"name":"plugPhase2","comment":"If true, phase 2 is connected","value":"true"},{"className":"Boolean","qualifiers":["parameter"],"name":"plugPhase3","comment":"If true, phase 3 is connected","value":"true"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis record contains a set of parameters that are used when\nmodeling three-phase unbalanced systems. The record contains three boolean flags\nthat are used to determine which of the three-phase are connected to the network.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.Gases.specificHeatCapacity":{"name":"Buildings.HeatTransfer.Data.Gases.specificHeatCapacity","comment":"Function to compute the specific heat capacity for gases","components":[{"className":"Buildings.HeatTransfer.Data.Gases.Generic","qualifiers":["input"],"name":"gas","comment":"Record of gas data"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Gas temperature"},{"className":"Modelica.SIunits.SpecificHeatCapacity","qualifiers":["output"],"name":"c_p","comment":"Specific heat capacity"}]},"Buildings.Media.Air.enthalpyOfLiquid":{"name":"Buildings.Media.Air.enthalpyOfLiquid","comment":"Enthalpy of liquid (per unit mass of liquid) which is linear in the temperature","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.enthalpyOfLiquid"}]},"Buildings.Electrical.Types.CableMode":{"name":"Buildings.Electrical.Types.CableMode","comment":"Enumeration that defines how a cable can be parameterized","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"automatic","comment":"Select automatically the size of the cable"},{"className":"EnumType","qualifiers":["constant"],"name":"commercial","comment":"Select the cable from a list of commercial options"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type is used to indicate in which mode the cable model works.\nIn automatic mode the cable is automatically sized using basic information like\nnominal voltage and power, in commercial mode the user can select among a list of\ncommercially available cables.\n\u003c/html\u003e\""}},"Buildings.Fluid.Actuators.Valves.TwoWayPressureIndependent":{"name":"Buildings.Fluid.Actuators.Valves.TwoWayPressureIndependent","comment":"Model of a pressure-independent two way valve","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve","modifications":[{"name":"linearized","qualifiers":["final"],"value":"false"},{"name":"from_dp","value":"true"},{"name":"phi","value":"l+y_actual*(1-l)"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"l2","comment":"Gain for mass flow increase if pressure is above nominal pressure","value":"0.01","modifications":[{"name":"min","value":"1e-10"}],"annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Real","qualifiers":["parameter"],"name":"deltax","comment":"Transition interval for flow rate","value":"0.1","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nTwo way valve with a pressure-independent valve opening characteristic.\nThe mass flow rate is controlled such that it is nearly equal to its\nset point \u003ccode\u003ey*m_flow_nominal\u003c/code\u003e, unless the pressure\n\u003ccode\u003edp\u003c/code\u003e is too low, in which case a regular \u003ccode\u003eKv\u003c/code\u003e\ncharacteristic is used.\n\u003c/p\u003e\n\u003ch4\u003eMain equations\u003c/h4\u003e\n\u003cp\u003e\nFirst the minimum pressure head \u003ccode\u003edp_min\u003c/code\u003e\nrequired for delivering the requested mass flow rate\n\u003ccode\u003ey*m_flow_nominal\u003c/code\u003e is computed. If\n\u003ccode\u003edp \u0026gt; dp_min\u003c/code\u003e then the requested mass flow\nrate is supplied. If \u003ccode\u003edp \u0026lt; dp_min\u003c/code\u003e then\n\u003ccode\u003em_flow \u003d Kv/sqrt(dp)\u003c/code\u003e. Transition between\nthese two flow regimes happens in a smooth way.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nThis model is configured by setting \u003ccode\u003em_flow_nominal\u003c/code\u003e\nto the mass flow rate that the valve should supply when it is\ncompletely open, i.e., \u003ccode\u003ey \u003d 1\u003c/code\u003e. The pressure drop corresponding\nto this working point can be set using \u003ccode\u003edpValve_nominal\u003c/code\u003e,\nor using a \u003ccode\u003eKv\u003c/code\u003e, \u003ccode\u003eCv\u003c/code\u003e or \u003ccode\u003eAv\u003c/code\u003e\nvalue. The parameter \u003ccode\u003edpValve_fixed\u003c/code\u003e can be used to add\nadditional pressure drops, although in this valve it is equivalent to\nadd these to \u003ccode\u003edpValve_nominal\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003el2\u003c/code\u003e represents the non-ideal\nleakage behaviour of this valve for high pressures.\nIt is assumed that the mass flow rate will rise beyond\nthe requested mass flow rate \u003ccode\u003ey*m_flow_nominal\u003c/code\u003e\nif \u003ccode\u003edp \u0026gt; dpValve_nominal+dpFixed_nominal\u003c/code\u003e.\nThe parameter \u003ccode\u003el2\u003c/code\u003e represents the slope\nof this rise:\n\u003ccode\u003ed(m_flow)/d(dp) \u003d l2* m_flow_nominal/dp_nominal\u003c/code\u003e.\nIn the ideal case \u003ccode\u003el2\u003d0\u003c/code\u003e, but\nthis may introduce singularities, for instance when\nconnecting this component with a fixed mass flow source.\n\u003c/p\u003e\n\u003ch4\u003eOptions\u003c/h4\u003e\n\u003cp\u003e\nParameter \u003ccode\u003edeltax\u003c/code\u003e sets the duration of\nthe transition region between the two flow regimes\nas a fraction of \u003ccode\u003edp_nominal\u003c/code\u003e or \u003ccode\u003em_flow_nominal\u003c/code\u003e,\ndepending on the value of \u003ccode\u003efrom_dp\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nNote that the result in the transition region when\nusing \u003ccode\u003efrom_dp \u003d true\u003c/code\u003e is not identical to\nthe result when using \u003ccode\u003efrom_dp \u003d false\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon(),Line(),Line()})"}},"Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger":{"name":"Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger","comment":"Partial model transporting fluid between two ports without storing mass or energy","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface"},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance","qualifiers":["final"],"value":"abs(dp_nominal)\u003eModelica.Constants.eps"}]}],"components":[{"className":"Boolean","qualifiers":["constant"],"name":"sensibleOnly","comment":"Set to true if sensible exchange only"},{"className":"Boolean","qualifiers":["constant"],"name":"prescribedHeatFlowRate","comment":"Set to true if the heat flow rate is not a function of the component temperature"},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["input"],"name":"Q_flow","comment":"Heat transferred into the medium"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["input"],"name":"mWat_flow","comment":"Moisture mass flow rate added to the medium"},{"className":"Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation","name":"vol","comment":"Control volume for steady-state energy and mass balance","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"use_mWat_flow","qualifiers":["final"],"value":"not sensibleOnly"},{"name":"prescribedHeatFlowRate","qualifiers":["final"],"value":"prescribedHeatFlowRate"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m_flow_nominal"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"m_flow_small","qualifiers":["final"],"value":"m_flow_small"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{15,-10},{35,10}}))"}},{"className":"Buildings.Fluid.FixedResistances.FixedResistanceDpM","name":"preDro","comment":"Pressure drop model","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"use_dh","qualifiers":["final"],"value":"false"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m_flow_nominal"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"show_T","qualifiers":["final"],"value":"false"},{"name":"from_dp","qualifiers":["final"],"value":"from_dp"},{"name":"linearized","qualifiers":["final"],"value":"linearizeFlowResistance"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"},{"name":"dp_nominal","qualifiers":["final"],"value":"dp_nominal"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-50,-10},{-30,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"hOut","comment":"Leaving temperature of the component","modifications":[{"name":"unit","value":"\"J/kg\""}]},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"XiOut","comment":"Leaving species concentration of the component","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"1\""},{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[Medium.nXi]"},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"COut","comment":"Leaving trace substances of the component","modifications":[{"name":"min","qualifiers":["each"],"value":"0"}],"arraySubscripts":"[Medium.nC]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component transports fluid between its two ports, without\nstoring mass or energy. It is based on\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.Interfaces.PartialTwoPortTransport\\\"\u003e\nModelica.Fluid.Interfaces.PartialTwoPortTransport\u003c/a\u003e but it does\nuse a different implementation for handling reverse flow because\nin this component, mass flow rate can be added or removed from\nthe medium.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003edp_nominal \u0026gt; Modelica.Constants.eps\u003c/code\u003e, this component computes\npressure drop due to flow friction.\nThe pressure drop is defined by a quadratic function that goes through\nthe point \u003ccode\u003e(m_flow_nominal, dp_nominal)\u003c/code\u003e. At \u003ccode\u003e|m_flow| \u0026lt; deltaM * m_flow_nominal\u003c/code\u003e,\nthe pressure drop vs. flow relation is linearized.\nIf the parameter \u003ccode\u003elinearizeFlowResistance\u003c/code\u003e is set to true,\nthen the whole pressure drop vs. flow resistance curve is linearized.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\nThis model uses inputs and constants that need to be set by models\nthat extend or instantiate this model.\nThe following inputs need to be assigned:\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eQ_flow\u003c/code\u003e, which is the heat flow rate added to the medium.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emWat_flow\u003c/code\u003e, which is the moisture mass flow rate added to the medium.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nSet the constant \u003ccode\u003esensibleOnly\u003dtrue\u003c/code\u003e if the model that extends\nor instantiates this model sets \u003ccode\u003emWat_flow \u003d 0\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nTo increase the numerical robustness of the model, the constant\n\u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e can be set.\nUse the following settings:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e if the \u003ci\u003eonly\u003c/i\u003e means of heat transfer\nat the \u003ccode\u003eheatPort\u003c/code\u003e is a prescribed heat flow rate that\nis \u003ci\u003enot\u003c/i\u003e a function of the temperature difference\nbetween the medium and an ambient temperature. Examples include an ideal electrical heater,\na pump that rejects heat into the fluid stream, or a chiller that removes heat based on a performance curve.\nIf the \u003ccode\u003eheatPort\u003c/code\u003e is not connected, then set \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e as\nin this case, \u003ccode\u003eheatPort.Q_flow\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e if there is heat flow at the \u003ccode\u003eheatPort\u003c/code\u003e\ncomputed as \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e, for some temperature \u003ci\u003eT\u003c/i\u003e and some conductance \u003ci\u003eK\u003c/i\u003e,\nwhich may itself be a function of temperature or mass flow rate.\u003cbr/\u003e\nIf there is a combination of \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e and a prescribed heat flow rate,\nfor example a solar collector that dissipates heat to the ambient and receives heat from\nthe solar radiation, then set \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf \u003ccode\u003eprescribedHeatFlow\u003dtrue\u003c/code\u003e, then energy and mass balance\nequations are formulated to guard against numerical problems near\nzero flow that can occur if \u003ccode\u003eQ_flow\u003c/code\u003e or \u003ccode\u003em_flow\u003c/code\u003e\nare the results of an iterative solver.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimpleOriented_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimpleOriented_N","comment":"Simple PV source with orientation and neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.UnbalancedPV_N","modifications":[{"name":"pv_phase1"},{"name":"pv_phase2"},{"name":"pv_phase3"}]}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"til","comment":"Surface tilt","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface Azimith","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"BoundaryConditions.SolarIrradiation.DiffusePerez","name":"HDifTil","comment":"Diffuse irradiation on tilted surface","modifications":[{"name":"til","qualifiers":["final"],"value":"til"},{"name":"lat","qualifiers":["final"],"value":"lat"},{"name":"azi","qualifiers":["final"],"value":"azi"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{20,-80},{0,-60}}))"}},{"className":"BoundaryConditions.SolarIrradiation.DirectTiltedSurface","name":"HDirTil","comment":"Direct irradiation on tilted surface","modifications":[{"name":"til","qualifiers":["final"],"value":"til"},{"name":"lat","qualifiers":["final"],"value":"lat"},{"name":"azi","qualifiers":["final"],"value":"azi"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,-99},{40,-79}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"G","comment":"Total irradiation on tilted surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 180, origin \u003d {-76,-70}))"}},{"className":"BoundaryConditions.WeatherData.Bus","name":"weaBus","comment":"Bus with weather data","annotations":{"placement":"Placement(transformation(extent \u003d {{76,-62},{96,-42}}), iconTransformation(extent \u003d {{-10,80},{10,100}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple PV model with orientation for three-phase unbalanced systems\nwith neutral cable connection.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.MassFractionTwoPort":{"name":"Buildings.Fluid.Sensors.MassFractionTwoPort","comment":"Ideal two port mass fraction sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor","modifications":[{"name":"Medium","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"}]},{"nameOfExtendedClass":"Buildings.Fluid.BaseClasses.IndexMassFraction","modifications":[{"name":"substanceName","value":"\"water\""}]},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Medium.MassFraction","qualifiers":["parameter"],"name":"X_start","comment":"Initial or guess value of output (\u003d state)","value":"Medium.X_default[i_x]","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"X","comment":"Mass fraction of the passing fluid","modifications":[{"name":"min","value":"-1e-3"},{"name":"max","value":"1.001"},{"name":"start","value":"X_start"},{"name":"unit","qualifiers":["final"],"value":"\"kg/kg\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the mass fraction of the passing fluid.\nThe sensor is ideal, i.e. it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.BoundaryConditions.SolarIrradiation.DiffuseIsotropic":{"name":"Buildings.BoundaryConditions.SolarIrradiation.DiffuseIsotropic","comment":"Diffuse solar irradiation on a tilted surface with an isotropic sky model","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.BoundaryConditions.SolarIrradiation.BaseClasses.PartialSolarIrradiation"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"rho","comment":"Ground reflectance","value":"0.2","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"className":"Boolean","qualifiers":["parameter"],"name":"outSkyCon","comment":"Output contribution of diffuse irradiation from sky","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"outGroCon","comment":"Output contribution of diffuse irradiation from ground","value":"false"},{"className":"Modelica.Blocks.Math.Add","name":"add","comment":"Block to add radiation","annotations":{"placement":"Placement(transformation(extent \u003d {{40,-10},{60,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"HSkyDifTil","comment":"Diffuse solar irradiation on a tilted surface from the sky","conditionalClause":" if outSkyCon","annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"HGroDifTil","comment":"Diffuse solar irradiation on a tilted surface from the ground","conditionalClause":" if outGroCon","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-70},{120,-50}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the hemispherical diffuse irradiation\non a tilted surface using an isotropic model.\nThe irradiation is a sum composed of diffuse solar irradiation and\nradiation reflected by the ground.\nFor a definition of the parameters, see the\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.UsersGuide\\\"\u003eUser\u0027s Guide\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\nP. Ineichen, R. Perez and R. Seals (1987).\n\u003ci\u003eThe Importance of Correct Albedo Determination for Adequately Modeling\nEnergy Received by Tilted Surface\u003c/i\u003e,\nSolar Energy, 39(4): 301-305.\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS30slash10":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS30slash10","comment":"Pump data for a staged Wilo-Top-S 30/10 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2650"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{3.51617440225e-06,0.000523909985935,0.000847398030942,0.00115682137834,0.00148382559775,0.00177918424754,0.00206047819972,0.00229254571027,0.0025,0.00271097046414,0.00282700421941}"},{"name":"P","value":"{192.787993617,238.762280675,272.937843988,301.381574494,326.18493197,344.613937245,359.220335761,369.040720135,376.979332273,382.887700535,382.887700535}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{3.51617440225e-06,0.000523909985935,0.000847398030942,0.00115682137834,0.00148382559775,0.00177918424754,0.00206047819972,0.00229254571027,0.0025,0.00271097046414,0.00282700421941}"},{"name":"dp","value":"{110125.414283,106765.16619,100392.787862,92220.6199738,81651.34693,70879.932776,60307.3708281,50930.4520427,41152.0339559,29575.0912725,22388.3296727}"}]},{"name":"speeds_rpm","value":"{0,1950,2250,2650}"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000009000287740001003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/00000009000287740001003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.specificEnthalpy":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificEnthalpy","comment":"Specific enthalpy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.specificEnthalpy"}]},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Resistive_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Resistive_N","comment":"Model of a three-phase unbalanced resistive load with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced resistive load.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003cp\u003e\nThis model has a connector with four cables and it represents the neutral cable.\nThe current in the neutral cable is computed as the algebraic sum of the currents\nof the loads.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Resistive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Resistive\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Line(),Line(),Text(),Line(),Rectangle(),Line(),Line(),Line(),Rectangle(),Line(),Line(),Rectangle(),Line()})"}},"Buildings.Fluid.HeatPumps.Carnot_y":{"name":"Buildings.Fluid.HeatPumps.Carnot_y","comment":"Reversible heat pump with performance curve adjusted based on Carnot efficiency","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Chillers.BaseClasses.PartialCarnot_y","modifications":[{"name":"effInpEva","value":"Buildings.Fluid.Types.EfficiencyInput.port_a"},{"name":"effInpCon","value":"Buildings.Fluid.Types.EfficiencyInput.port_b"},{"name":"COP_is_for_cooling","qualifiers":["final"],"value":"false"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is model of a heat pump whose coefficient of performance COP changes\nwith temperatures in the same way as the Carnot efficiency changes.\nThe input signal \u003ci\u003ey\u003c/i\u003e is the control signal for the compressor.\n\u003c/p\u003e\n\u003cp\u003e\nThe model allows to either specify the Carnot effectivness\n\u003ci\u003e\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e\u003c/i\u003e, or\na \u003ci\u003eCOP\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e\nat the nominal conditions, together with\nthe evaporator temperature \u003ci\u003eT\u003csub\u003eeva,0\u003c/sub\u003e\u003c/i\u003e and\nthe condenser temperature \u003ci\u003eT\u003csub\u003econ,0\u003c/sub\u003e\u003c/i\u003e, in which\ncase the model computes the Carnot effectivness as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e \u003d \n  COP\u003csub\u003e0\u003c/sub\u003e\n\u0026frasl;  (T\u003csub\u003econ,0\u003c/sub\u003e \u0026frasl; (T\u003csub\u003econ,0\u003c/sub\u003e-T\u003csub\u003eeva,0\u003c/sub\u003e)).\n\u003c/p\u003e\n\u003cp\u003e\nThe heat pump COP is computed as the product\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  COP \u003d \u0026eta;\u003csub\u003eCarnot,0\u003c/sub\u003e COP\u003csub\u003eCarnot\u003c/sub\u003e \u0026eta;\u003csub\u003ePL\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eCOP\u003csub\u003eCarnot\u003c/sub\u003e\u003c/i\u003e is the Carnot efficiency and\n\u003ci\u003e\u0026eta;\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e is a polynomial in the heating part load ratio \u003ci\u003ey\u003csub\u003ePL\u003c/sub\u003e\u003c/i\u003e\nthat can be used to take into account a change in \u003ci\u003eCOP\u003c/i\u003e at part load\nconditions.\nThis polynomial has the form\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta;\u003csub\u003ePL\u003c/sub\u003e \u003d a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e + a\u003csub\u003e3\u003c/sub\u003e y\u003csub\u003ePL\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + ...\n\u003c/p\u003e\n\u003cp\u003e\nwhere the coefficients \u003ci\u003ea\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e are declared by the parameter \u003ccode\u003ea\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nOn the \u003ccode\u003eDynamics\u003c/code\u003e tag, the model can be parametrized to compute a transient\nor steady-state response.\nThe transient response of the model is computed using a first\norder differential equation for the evaporator and condenser fluid volumes.\nThe heat pump outlet temperatures are equal to the temperatures of these lumped volumes.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nWhen using this component, make sure that the evaporator and the condenser have sufficient mass flow rate.\nBased on the mass flow rates, the compressor power, temperature difference and the efficiencies,\nthe model computes how much heat will be added to the condenser and removed at the evaporator.\nIf the mass flow rates are too small, very high temperature differences can result.\n\u003c/p\u003e\n\u003cp\u003e\nThe condenser heat flow rate \u003ccode\u003eQCon_flow_nominal\u003c/code\u003e is used to assign\nthe default value for the mass flow rates, which are used for the pressure drop\ncalculations.\nIt is also used to compute the part load efficiency.\nHence, make sure that \u003ccode\u003eQCon_flow_nominal\u003c/code\u003e is set to a reasonable value.\n\u003c/p\u003e\n\u003cp\u003e\nThe maximum heating capacity is set by the parameter \u003ccode\u003eQCon_flow_max\u003c/code\u003e,\nwhich is by default set to infinity.\n\u003c/p\u003e\n\u003cp\u003e\nBy default, the coefficient of performance depends on the\nevaporator entering temperature and the condenser leaving\ntemperature.\nThis can be changed with the parameters\n\u003ccode\u003eeffInpEva\u003c/code\u003e and\n\u003ccode\u003eeffInpCon\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eNotes\u003c/h4\u003e\n\u003cp\u003e\nFor a similar model that can be used as a chiller, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers.Carnot_y\\\"\u003eBuildings.Fluid.Chillers.Carnot_y\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line()})"}},"Buildings.Fluid.FixedResistances.FixedResistanceDpM":{"name":"Buildings.Fluid.FixedResistances.FixedResistanceDpM","comment":"Fixed flow resistance with dp and m_flow as parameter","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.BaseClasses.PartialResistance","modifications":[{"name":"m_flow_turbulent","qualifiers":["final"],"value":"if computeFlowResistance and use_dh then eta_default*dh/(4)*Modelica.Constants.pi*ReC elseif computeFlowResistance then deltaM*m_flow_nominal_pos else 0"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_dh","comment":"Set to true to specify hydraulic diameter","value":"false","annotations":{"dialog":"Dialog(enable \u003d not linearized)"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"dh","comment":"Hydraulic diameter","value":"1","annotations":{"dialog":"Dialog(enable \u003d use_dh and not linearized)"}},{"className":"Real","qualifiers":["parameter"],"name":"ReC","comment":"Reynolds number where transition to turbulent starts","value":"4000","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(enable \u003d use_dh and not linearized)"}},{"className":"Real","qualifiers":["parameter"],"name":"deltaM","comment":"Fraction of nominal mass flow rate where transition to turbulent occurs","value":"0.3","modifications":[{"name":"min","value":"0.01"}],"annotations":{"dialog":"Dialog(enable \u003d not use_dh and not linearized)"}},{"className":"Real","qualifiers":["final","parameter"],"name":"k","comment":"Flow coefficient, k\u003dm_flow/sqrt(dp), with unit\u003d(kg.m)^(1/2)","value":"if computeFlowResistance then m_flow_nominal_pos/(sqrt(dp_nominal_pos)) else 0","modifications":[{"name":"unit","value":"\"\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a resistance with a fixed flow coefficient.\nThe mass flow rate is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nm\u0026#775; \u003d k\n\u0026radic;\u003cspan style\u003d\\\"text-decoration:overline;\\\"\u003e\u0026Delta;P\u003c/span\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ek\u003c/i\u003e is a constant and\n\u003ci\u003e\u0026Delta;P\u003c/i\u003e is the pressure drop.\nThe constant \u003ci\u003ek\u003c/i\u003e is equal to\n\u003ccode\u003ek\u003dm_flow_nominal/sqrt(dp_nominal)\u003c/code\u003e,\nwhere \u003ccode\u003em_flow_nominal\u003c/code\u003e and \u003ccode\u003edp_nominal\u003c/code\u003e\nare parameters.\nIn the region\n\u003ccode\u003eabs(m_flow) \u0026lt; m_flow_turbulent\u003c/code\u003e,\nthe square root is replaced by a differentiable function\nwith finite slope.\nThe value of \u003ccode\u003em_flow_turbulent\u003c/code\u003e is\ncomputed as follows:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nIf the parameter \u003ccode\u003euse_dh\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e\n(the default setting),\nthe equation\n\u003ccode\u003em_flow_turbulent \u003d deltaM * abs(m_flow_nominal)\u003c/code\u003e,\nwhere \u003ccode\u003edeltaM\u003d0.3\u003c/code\u003e and\n\u003ccode\u003em_flow_nominal\u003c/code\u003e are parameters that can be set by the user.\n\u003c/li\u003e\n\u003cli\u003e\nOtherwise, the equation\n\u003ccode\u003em_flow_turbulent \u003d eta_nominal*dh/4*\u0026pi;*ReC\u003c/code\u003e is used,\nwhere\n\u003ccode\u003eeta_nominal\u003c/code\u003e is the dynamic viscosity, obtained from\nthe medium model. The parameter\n\u003ccode\u003edh\u003c/code\u003e is the hydraulic diameter and\n\u003ccode\u003eReC\u003d4000\u003c/code\u003e is the critical Reynolds number, which both\ncan be set by the user.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe figure below shows the pressure drop for the parameters\n\u003ccode\u003em_flow_nominal\u003d5\u003c/code\u003e kg/s,\n\u003ccode\u003edp_nominal\u003d10\u003c/code\u003e Pa and\n\u003ccode\u003edeltaM\u003d0.3\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/FixedResistances/FixedResistanceDpM.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter\n\u003ccode\u003eshow_T\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e,\nthen the model will compute the\ntemperature at its ports. Note that this can lead to state events\nwhen the mass flow rate approaches zero,\nwhich can increase computing time.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003efrom_dp\u003c/code\u003e is used to determine\nwhether the mass flow rate is computed as a function of the\npressure drop (if \u003ccode\u003efrom_dp\u003dtrue\u003c/code\u003e), or vice versa.\nThis setting can affect the size of the nonlinear system of equations.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003elinearized\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e,\nthen the pressure drop is computed as a linear function of the\nmass flow rate.\n\u003c/p\u003e\n\u003cp\u003e\nSetting \u003ccode\u003eallowFlowReversal\u003dfalse\u003c/code\u003e can lead to simpler\nequations. However, this should only be set to \u003ccode\u003efalse\u003c/code\u003e\nif one can guarantee that the flow never reverses its direction.\nThis can be difficult to guarantee, as pressure imbalance after\nthe initialization, or due to medium expansion and contraction,\ncan lead to reverse flow.\n\u003c/p\u003e\n\u003ch4\u003eNotes\u003c/h4\u003e\n\u003cp\u003e\nFor more detailed models that compute the actual flow friction,\nmodels from the package\n\u003ca href\u003d\\\"modelica://Modelica.Fluid\\\"\u003e\nModelica.Fluid\u003c/a\u003e\ncan be used and combined with models from the\n\u003ccode\u003eBuildings\u003c/code\u003e library.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe pressure drop is computed by calling a function in the package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.BaseClasses.FlowModels\\\"\u003e\nBuildings.Fluid.BaseClasses.FlowModels\u003c/a\u003e,\nThis package contains regularized implementations of the equation\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  m \u003d sign(\u0026Delta;p) k  \u0026radic;\u003cspan style\u003d\\\"text-decoration:overline;\\\"\u003e\u0026nbsp;\u0026Delta;p \u0026nbsp;\u003c/span\u003e\n\u003c/p\u003e\n\u003cp\u003e\nand its inverse function.\n\u003c/p\u003e\n\u003cp\u003e\nTo decouple the energy equation from the mass equations,\nthe pressure drop is a function of the mass flow rate,\nand not the volume flow rate.\nThis leads to simpler equations.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text()})"}},"Buildings.Electrical.Transmission.Functions.computeGMR":{"name":"Buildings.Electrical.Transmission.Functions.computeGMR","comment":"This function computes the geometric mean radius of a cable with 1 to 4 conductors","components":[{"className":"Modelica.SIunits.Length","qualifiers":["input"],"name":"d","comment":"Diameter of the conductor"},{"className":"Integer","qualifiers":["input"],"name":"N","comment":"Number of conductors","value":"1"},{"className":"Modelica.SIunits.Length","qualifiers":["output"],"name":"GMR","comment":"Geometric Mean Radius"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the Geometric Mean Radius (GMR) of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nThe GMR is computed as follow, depending on the number of conductors \u003ci\u003eN\u003c/i\u003e\nthat are part of the cable, and the diamater of the conductor \u003ci\u003ed\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003ctable summary\u003d\\\"equations\\\" border \u003d \\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collape;\\\"\u003e\n\u003ctr\u003e\u003cth\u003eEquation\u003c/th\u003e\u003cth\u003eCondition\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e0.7788 (d/2) \u003c/td\u003e\n\u003ctd\u003eN \u003d 1\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003ed\u003csup\u003e1/2\u003c/sup\u003e\u003c/td\u003e\n\u003ctd\u003eN \u003d 2\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003ed\u003csup\u003e2/3\u003c/sup\u003e\u003c/td\u003e\n\u003ctd\u003eN \u003d 3\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003ed\u003csup\u003e2/3\u003c/sup\u003e\u003c/td\u003e\n\u003ctd\u003eN \u003d 4\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003c/table\u003e\n\n\u003c/html\u003e\""}},"Buildings.Media.Air.pressure":{"name":"Buildings.Media.Air.pressure","comment":"Returns pressure of ideal gas as a function of the thermodynamic state record","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.pressure"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nPressure is returned from the thermodynamic state record input as a simple assignment.\n\u003c/html\u003e\""}},"Buildings.BoundaryConditions.SolarGeometry.ZenithAngle":{"name":"Buildings.BoundaryConditions.SolarGeometry.ZenithAngle","comment":"Zenith angle","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"Zenith angle","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Angle\""},{"name":"unit","qualifiers":["final"],"value":"\"rad\""},{"name":"displayUnit","value":"\"deg\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"WeatherData.Bus","name":"weaBus","comment":"Weather data","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the zenith angle,\nwhich is the angle between the earth surface normal and the sun beam.\nFor a definition of the parameters, see the User\u0027s Guide\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.UsersGuide\\\"\u003e\nBuildings.BoundaryConditions.UsersGuide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Bitmap()})"}},"Buildings.Fluid.Sources.Outside":{"name":"Buildings.Fluid.Sources.Outside","comment":"Boundary that takes weather data, and optionally trace substances, as an input","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sources.BaseClasses.Outside"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes boundary conditions for\npressure, enthalpy, and species concentration that can be obtained\nfrom weather data.\n\u003c/p\u003e\n\u003cp\u003e\nTo use this model, connect weather data from\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.WeatherData.ReaderTMY3\\\"\u003e\nBuildings.BoundaryConditions.WeatherData.ReaderTMY3\u003c/a\u003e to the port\n\u003ccode\u003eweaBus\u003c/code\u003e of this model.\nThis will cause the medium of this model to be\nat the pressure that is obtained from the weather file, and any flow that\nleaves this model to be at the temperature and humidity that are obtained\nfrom the weather data.\n\u003c/p\u003e\n\u003cp\u003eIf the parameter \u003ccode\u003euse_C_in\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e (default option),\nthe \u003ccode\u003eC\u003c/code\u003e parameter\nis used as the trace substance for flow that leaves the component, and the\n\u003ccode\u003eC_in\u003c/code\u003e input connector is disabled; if \u003ccode\u003euse_C_in\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e,\nthen the \u003ccode\u003eC\u003c/code\u003e parameter is ignored, and the value provided by the input connector is used instead.\u003c/p\u003e\n\u003cp\u003e\nNote that boundary temperature,\nmass fractions and trace substances have only an effect if the mass flow\nis from the boundary into the port. If mass is flowing from\nthe port into the boundary, the boundary definitions,\nwith exception of boundary pressure, do not have an effect.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.enthalpyOfNonCondensingGas":{"name":"Buildings.Media.Air.enthalpyOfNonCondensingGas","comment":"Enthalpy of non-condensing gas per unit mass of steam","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"enthalpy"}]},"Buildings.Rooms.UsersGuide.CFD":{"name":"Buildings.Rooms.UsersGuide.CFD","comment":"Room model with air heat and mass balance computed using Computational Fluid Dynamics","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Information"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThe model \u003ca href\u003d\\\"modelica://Buildings.Rooms.CFD\\\"\u003eBuildings.Rooms.CFD\u003c/a\u003e is\na room model in which the room air heat and mass balance is computed\nusing the Computational Fluid Dynamics (CFD).\n\u003c/p\u003e\n\u003cp\u003e\nThe model is identical with\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.MixedAir\\\"\u003e\nBuildings.Rooms.MixedAir\u003c/a\u003e, except\nfor the following points:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe heat and mass balance of the air is computed using CFD.\n\u003c/li\u003e\n\u003cli\u003e\nTo match surfaces and fluid ports between the Modelica model and the CFD model,\nusers must declare a unique name for each surface and for each fluid port.\nThe same names must be used in the CFD input file.\n\u003c/li\u003e\n\u003cli\u003e\nTo get access to properties of the control volumes in the CFD simulation,\nthis model allows declaring a sensor using the parameter\n\u003ccode\u003esensorName\u003c/code\u003e.\nThis parameter is an array of strings. The same strings must be used\nin the CFD input file when declaring the sensor in order to send the\nCFD results to the output signal of Modelica.\n\u003c/li\u003e\n\u003cli\u003e\nTo link the fluid ports in Modelica to the boundary conditions of CFD,\nthis model requires declaring names for the fluid ports\n\u003ccode\u003eports\u003c/code\u003e using the parameter\n\u003ccode\u003eportName\u003c/code\u003e.\nThis parameter is an array of strings. The same strings must be used\nin the CFD input file when declaring the inlet and outlet boundary conditions.\n\u003c/li\u003e\n\u003cli\u003e\nThe control signal of window shades is a constant rather than an input.\nIts value cannot be changed during the simulation as the FFD implemementation\ndoes not support moving areas for the boundary conditions.\n\u003c/li\u003e\n\u003cli\u003e\nThe initial conditions for temperature, mass fraction and trace substances\nare declared in the CFD input file rather than in Modelica.\nIn Modelica, an initial value for the pressure can be defined. This is used\nfor a pressure balance of the room volume, and is implemented in\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.CFDFluidInterface\\\"\u003e\nBuildings.Rooms.BaseClasses.CFDFluidInterface\u003c/a\u003e.\nHowever, the FFD implementation uses\na constant pressure during the whole simulation and does not use the pressure\nof the Modelica model.\n\u003c/li\u003e\n\u003c/ul\u003e\nA description of the model assumptions and the implemention and validation of this room model can be found in \u003ca href\u003d\\\"#ZuoEtAl2014\\\"\u003eZuo et al. (2014)\u003c/a\u003e.\n\u003c!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --\u003e\n\u003ch4\u003eConventions\u003c/h4\u003e\n\u003cp\u003e\nThe following conventions are made:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\nThe port \u003ccode\u003eheaPorAir\u003c/code\u003e contains the average room air temperature, defined as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  T\u003csub\u003ea\u003c/sub\u003e \u003d 1 \u0026frasl; V \u0026nbsp; \u0026int;\u003csub\u003eV\u003c/sub\u003e T(dV) \u0026nbsp; dV,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eT\u003csub\u003ea\u003c/sub\u003e\u003c/i\u003e is the average room air temperature, \u003ci\u003eV\u003c/i\u003e is the room air volume\nand \u003ci\u003eT(dV)\u003c/i\u003e is the room air temperature in the control volume \u003ci\u003edV\u003c/i\u003e.\nThe average room air temperature \u003ci\u003eT\u003csub\u003ea\u003c/sub\u003e\u003c/i\u003e is computed by the CFD program.\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\nIf a model injects heat to \u003ccode\u003eheaPorAir\u003c/code\u003e, then the heat will be distributed to all\ncells. The amount of heat flow rate that each cell exchanges with \u003ccode\u003eheaPorAir\u003c/code\u003e is\nproportional to its volume.\n\u003c/li\u003e\n\u003cli\u003e\nThe flow resistance of the diffusor or exhaust grill must be computed in the\nModelica HVAC system that is connected to the room model, because the CFD\nprogram assumes the same total pressure at all fluid ports.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe quantities that are exchanged between the programs are defined as follows:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nFor the mass flow rate of the fluid port,\nwe exchange \u003ci\u003em\u003csub\u003ee\u003c/sub\u003e \u003d 1 \u0026frasl; \u0026Delta; t \u0026int;\u003csub\u003e\u0026Delta; t\u003c/sub\u003e m(s) dt\u003c/i\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFor the temperature, species concentration and trace substances of the fluid port, we exchange\n\u003ci\u003eX \u003d 1 \u0026frasl; (m\u003csub\u003ee\u003c/sub\u003e \u0026nbsp; \u0026Delta; t) \u0026int;\u003csub\u003e\u0026Delta; t\u003c/sub\u003e m(s) \u0026nbsp; X(s) dt\u003c/i\u003e.\nNote that for the first implementation, CFD does only compute a bulk mass balance for \u003ccode\u003eXi\u003c/code\u003e.\nIt does not do a moisture balance for each cell.\nHowever, for trace substances \u003ccode\u003eC\u003c/code\u003e, CFD does a contaminant balance for each cell\nand return \u003ccode\u003eC_outflow\u003c/code\u003e to be the contaminant concentration of that cell.\n\u003c/li\u003e\n\u003cli\u003e\nFor the surface temperatures,\nwe exchange \u003ci\u003eT\u003csub\u003ee\u003c/sub\u003e \u003d 1 \u0026frasl; \u0026Delta; t \u0026int;\u003csub\u003e\u0026Delta; t\u003c/sub\u003e T(s) dt\u003c/i\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFor the surface heat flow rates,\nwe exchange \u003ci\u003eQ\u003csub\u003ee\u003c/sub\u003e \u003d 1 \u0026frasl; \u0026Delta; t \u0026int;\u003csub\u003e\u0026Delta; t\u003c/sub\u003e Q(s) dt\u003c/i\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThis section explains how the data exchange between Modelica and CFD is\nimplemented.\nThe section is only of interest to developers. Users may skip this section.\n\u003c/p\u003e\n\u003c!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --\u003e\n\u003ch5\u003eInterface to Modelica models\u003c/h5\u003e\n\u003cp\u003e\nInterfacing CFD with the Modelica room air heat and mass balance is done\nin the model\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.AirHeatMassBalanceCFD\\\"\u003e\nBuildings.Rooms.BaseClasses.AirHeatMassBalanceCFD\u003c/a\u003e.\nTo interface variables from Modelica and CFD, the following classes and\nconventions are used in this model.\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nIf a construction is not present, or if no shade is present, or\nif no air stream is connected to \u003ccode\u003eports\u003c/code\u003e,\nthen no variables are exchanged for this quantity with the block \u003ccode\u003ecfd\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFor surfaces, heat flow rates in \u003ci\u003e[W]\u003c/i\u003e and temperatures\nin \u003ci\u003e[K]\u003c/i\u003e are exchanged.\nThese variables are connected to the surface heat ports\nthrough instances of the model\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.CFDSurfaceInterface\\\"\u003e\nBuildings.Rooms.BaseClasses.CFDSurfaceInterface\u003c/a\u003e.\nThis model has four ports.\nDepepending on the parameter\n\u003ccode\u003ebouCon\u003c/code\u003e, two of these ports are conditionally removed.\nThis allows to use the parameter \u003ccode\u003ebouCon\u003c/code\u003e to specify whether\nthe surface should be used with a temperature or a heat flow rate\nboundary condition.\nTherefore, the inputs and outputs to the instance \u003ccode\u003ecfd\u003c/code\u003e\nare either temperatures or heat flow rates.\nThe parameter \u003ccode\u003esurIde\u003c/code\u003e of this model, which is also\npropagated to the instance \u003ccode\u003ecfd\u003c/code\u003e, declares what\ntype of boundary condition is used.\n\u003c/li\u003e\n\u003cli\u003e\nThe variables of the connector \u003ccode\u003eports\u003c/code\u003e are exchanged with the CFD block\nthrough the instance \u003ccode\u003eintFlu\u003c/code\u003e.\nThis interface is implemented in\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.CFDFluidInterface\\\"\u003e\nBuildings.Rooms.BaseClasses.CFDFluidInterface\u003c/a\u003e.\nIts output and input signals are connected to the \u003ccode\u003ecfd\u003c/code\u003e block as follows:\n\u003cul\u003e\n\u003cli\u003e\nInput to the \u003ccode\u003ecfd\u003c/code\u003e block is a vector\n\u003ccode\u003e[p, m_flow[nPorts], T_inflow[nPorts], X_inflow[nPorts*Medium.nXi],\nC_inflow[nPorts*Medium.nC]]\u003c/code\u003e.\nThe quantity \u003ccode\u003ep\u003c/code\u003e is the total pressure of the fluid ports (all fluid ports have the same\ntotal pressure).\nTherefore, the flow resistance of the diffusor or exhaust grill must be computed in the\nModelica HVAC system that is connected to the room model.\nThe quantities \u003ccode\u003eX_inflow\u003c/code\u003e and \u003ccode\u003eC_inflow\u003c/code\u003e (or \u003ccode\u003eX_inflow\u003c/code\u003e and \u003ccode\u003eC_inflow\u003c/code\u003e)\nare vectors with components \u003ccode\u003eX_inflow[1:Medium.nXi]\u003c/code\u003e and \u003ccode\u003eC_inflow[1:Medium.nC]\u003c/code\u003e.\nFor example, for moist air, \u003ccode\u003eX_inflow\u003c/code\u003e has one element which is equal to the mass fraction of air,\nrelative to the total air mass and not the dry air.\n\u003c/li\u003e\n\u003cli\u003e\nOutput from the CFD block is a vector\n\u003ccode\u003e[T_outflow[nPorts], X_outflow[nPorts*Medium.nXi], C_outflow[nPorts*Medium.nC]]\u003c/code\u003e.\nThe quantities \u003ccode\u003e*_outflow\u003c/code\u003e are the fluid properties of the cell to which the port is\nconnected.\n\u003c/li\u003e\n\u003cli\u003e\nIf \u003ccode\u003eMedium.nXi\u003d0\u003c/code\u003e (e.g., for dry air) or \u003ccode\u003eMedium.nC\u003d0\u003c/code\u003e,\nthen these signals are not present as input/output signals of the CFD block.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\u003c!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --\u003e\n\u003ch5\u003eData exchange with CFD\u003c/h5\u003e\n\u003cp\u003e\nThe data exchange with the CFD interface is done through the instance\n\u003ccode\u003ecfd\u003c/code\u003e, and implemented in\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.CFDExchange\\\"\u003e\nBuildings.Rooms.BaseClasses.CFDExchange\u003c/a\u003e.\nThis block exchanges the following data with the CFD simulation:\n\u003c/p\u003e\n\u003cp\u003e\nDuring the initialzation, the following data are sent from Modelica to CFD:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nAn array of strings where each element is the name of the surface,\nas declared by\nthe user when instantiating the model\n\u003ca href\u003d\\\"Buildings.Rooms.CFD\\\"\u003eBuildings.Rooms.CFD\u003c/a\u003e.\nLet us call this array \u003ccode\u003ename\u003c/code\u003e.\nThe orders of elements in this array are as follows:\n\u003col\u003e\n\u003cli\u003e\nThe first\n\u003ccode\u003enConExt\u003c/code\u003e elements are the names of the exterior constructions\ndeclared as \u003ccode\u003edatConExt\u003c/code\u003e. The order is the same as\nin the declaration of \u003ccode\u003edatConExt\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enConExtWin\u003c/code\u003e elements are the names of the exterior constructions\ndeclared as \u003ccode\u003edatConExtWin\u003c/code\u003e. These constructions embed windows\nand a frame. Therefore, what follows are\n\u003ccode\u003enConExtWin\u003c/code\u003e elements where each string is the same as above,\nbut \u003ccode\u003e\u0027 (glass, unshaded)\u0027\u003c/code\u003e has been appended,\nthen -- if and only if the window has a shade --\n\u003ccode\u003enConExtWin\u003c/code\u003e elements follow with\n\u003ccode\u003e\u0027 (glass, shaded)\u0027\u003c/code\u003e appended, and,\nfinally,\n\u003ccode\u003enConExtWin\u003c/code\u003e elements follow with \u003ccode\u003e\u0027 (frame)\u0027\u003c/code\u003e appended.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enConPar\u003c/code\u003e elements for the surface \u003ccode\u003ea\u003c/code\u003e of \u003ccode\u003edatConPar\u003c/code\u003e.\nTo these names, the string \u003ccode\u003e\u0027 (surface a)\u0027\u003c/code\u003e is appended.\nNext, there are \u003ccode\u003enConPar\u003c/code\u003e elements with  \u003ccode\u003e\u0027 (surface b)\u0027\u003c/code\u003e appended.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enConBou\u003c/code\u003e elements for the surfaces of \u003ccode\u003edatConBou\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003enSurBou\u003c/code\u003e elements for the surfaces of \u003ccode\u003enSurBou\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\nUsing the same order, there is also an array for the areas of the surfaces \u003ccode\u003eA\u003c/code\u003e,\nan array for the surface tilt \u003ccode\u003etil\u003c/code\u003e\nand the type of the boundary conditions \u003ccode\u003ebouCon\u003c/code\u003e for each of these surfaces.\nIf \u003ccode\u003ebouCon[i] \u003d 1\u003c/code\u003e,\nthen temperature is sent from Modelica to CFD.\nIf \u003ccode\u003ebouCon[i] \u003d 2\u003c/code\u003e, then\nheat flow rate is sent from Modelica to CFD.\n\u003c/li\u003e\n\u003cli\u003e\nThere is an array \u003ccode\u003esensorName\u003c/code\u003e that contains the names of all sensors,\nin the same order as they are declared when instantiating the model\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.CFD\\\"\u003e\nBuildings.Rooms.CFD\u003c/a\u003e.\nIf no sensors are declared in Modelica, then this array will have zero elements.\nHow many sensor are declared in Modelica can be checked through the variable \u003ccode\u003enSen\u003c/code\u003e,\nwhich is sent from Modelica to CFD.\n\u003c/li\u003e\n\u003cli\u003e\nThere is also an array \u003ccode\u003eAirProperty\u003c/code\u003e that contains the properties of the air.\nThe orders of elements in this array are as follows:\n\u003col\u003e\n\u003cli\u003e\nThe density of air at the initial state (CFD will accept it only when there is a mass exchange between the two programs).\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nDuring the time integration, and array \u003ccode\u003eu\u003c/code\u003e is sent from Modelica to CFD, and Modelica\nreceives an array \u003ccode\u003ey\u003c/code\u003e from CFD.\nThe elements of the array \u003ccode\u003eu\u003c/code\u003e are as follows:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nEither temperature or heat flow rate boundary conditions,\nin the same order as the array \u003ccode\u003ename\u003c/code\u003e. The units are \u003ci\u003e[K]\u003c/i\u003e or \u003ci\u003e[W]\u003c/i\u003e.\nThe array \u003ccode\u003ebouCon\u003c/code\u003e that is sent during the\ninitialization declares the type of boundary\ncondition.\nThere are \u003ccode\u003enSur\u003c/code\u003e elements for surfaces.\n\u003c/li\u003e\n\u003cli\u003e\nIf at least one window in the room has a shade, then the next\n\u003ccode\u003enConExtWin\u003c/code\u003e\nelements are the shading control signals. \u003ccode\u003eu\u003d0\u003c/code\u003e means\nthat the shade is not deployed,\nand \u003ccode\u003eu\u003d1\u003c/code\u003e means that the shade is\ncompletely deployed (blocking solar radiation).\nIf there is no window in the room, then these elements are not present.\n\u003c/li\u003e\n\u003cli\u003e\nIf at least one window in the room has a shade, then the next \u003ccode\u003enConExtWin\u003c/code\u003e\nelements are the radiations in \u003ci\u003e[W]\u003c/i\u003e that are absorbed by the\nrespective shades.\nIf there is no window in the room, then these elements are not present.\n\u003c/li\u003e\n\u003cli\u003e\nThe convective sensible heat input into the room in \u003ci\u003e[W]\u003c/i\u003e, which is a scalar.\nA positive value means that heat is added to the room.\n\u003c/li\u003e\n\u003cli\u003e\nThe latent heat input into the room in \u003ci\u003e[W]\u003c/i\u003e, which is a scalar.\nA positive value means that moisture is added to the room.\n\u003c/li\u003e\n\u003cli\u003e\nThe next element is the room average static pressure in \u003ci\u003e[Pa]\u003c/i\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe next \u003ccode\u003enPorts\u003c/code\u003e elements are the mass flow rates\ninto the room in \u003ci\u003e[kg/s]\u003c/i\u003e.\nA positive value is used if the air flows into the room,\notherwise the value is negative.\nThe first element is connected to \u003ccode\u003eports[1]\u003c/code\u003e, the second to\n\u003ccode\u003eports[2]\u003c/code\u003e etc.\n\u003c/li\u003e\n\u003cli\u003e\nThe next \u003ccode\u003enPorts\u003c/code\u003e elements are the air temperatures\nthat the medium has\n\u003ci\u003eif it were flowing into the room\u003c/i\u003e, e.g., the \\\"inflowing medium\\\"\ncomputed based on \u003ccode\u003einStream(h_outflow)\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe next \u003ccode\u003enPorts*Medium.nXi\u003c/code\u003e elements are the\nspecies concentration of the inflowing\nmedium.\nThe first \u003ccode\u003eMedium.nXi\u003c/code\u003e elements are for port \u003ci\u003e1\u003c/i\u003e, then for\nport \u003ci\u003e2\u003c/i\u003e etc.\nThe units are in \u003ci\u003e[kg/kg]\u003c/i\u003e total mass, and not in  \u003ci\u003e[kg/kg]\u003c/i\u003e dry air.\n\u003c/li\u003e\n\u003cli\u003e\nThe next \u003ccode\u003enPorts*Medium.nC\u003c/code\u003e elements are the trace substances\nof the inflowing\nmedium.\nThe first \u003ccode\u003eMedium.nC\u003c/code\u003e elements are for port \u003ci\u003e1\u003c/i\u003e, then for\nport \u003ci\u003e2\u003c/i\u003e etc.\n\u003c/li\u003e\n\u003c/ol\u003e\nThe elements of the array \u003ccode\u003ey\u003c/code\u003e that is sent from CFD to Modelica are as follows:\n\u003col\u003e\n\u003cli\u003e\nEither temperature or heat flow rate at the surfaces,\nin the same order as the array \u003ccode\u003ename\u003c/code\u003e.\nThe array \u003ccode\u003ebouCon\u003c/code\u003e that is sent during the\ninitialization declares the type of boundary\ncondition.\nIf \u003ccode\u003ebouCon[i] \u003d 1\u003c/code\u003e, then heat flow rate in \u003ci\u003e[W]\u003c/i\u003e\nis sent from CFD to Modelica.\nIf \u003ccode\u003ebouCon[i] \u003d 2\u003c/code\u003e, then temperature in \u003ci\u003e[K]\u003c/i\u003e\nis sent from CFD to Modelica.\nThere are \u003ccode\u003enSur\u003c/code\u003e elements for surfaces.\n\u003c/li\u003e\n\u003cli\u003e\nThe average room air temperature in \u003ci\u003e[K]\u003c/i\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nIf the room has at least one window with a shade, then the next\n\u003ccode\u003enConExtWin\u003c/code\u003e elements are the temperature of the\nshade in \u003ci\u003e[K]\u003c/i\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe next \u003ccode\u003enPorts\u003c/code\u003e elements are the air temperatures\nin \u003ci\u003e[K]\u003c/i\u003e\nof the cells that are connected to the inlet or outlet diffusor\nof \u003ccode\u003eports[1], ports[2], etc.\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe next \u003ccode\u003enPorts*Medium.nXi\u003c/code\u003e elements are the\nspecies concentration of the cells to which the ports are\nconnected.\nThe first \u003ccode\u003eMedium.nXi\u003c/code\u003e elements are for port \u003ci\u003e1\u003c/i\u003e, then for\nport \u003ci\u003e2\u003c/i\u003e etc.\nThe units are in \u003ci\u003e[kg/kg]\u003c/i\u003e total mass, and not in \u003ci\u003e[kg/kg]\u003c/i\u003e dry air.\n\u003c/li\u003e\n\u003cli\u003e\nThe next \u003ccode\u003enPorts*Medium.nC\u003c/code\u003e elements are the trace substances\nof the cells to which the ports are connected to.\nThe first \u003ccode\u003eMedium.nC\u003c/code\u003e elements are for port \u003ci\u003e1\u003c/i\u003e, then for\nport \u003ci\u003e2\u003c/i\u003e etc.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"ZuoEtAl2014\\\"/\u003e\nWangda Zuo, Michael Wetter, Dan Li, Mingang Jin, Wei Tian, Qingyan Chen.\u003cbr/\u003e\n\u003ca href\u003d\\\"modelica://Buildings/Resources/Images/Rooms/Examples/FFD/Zuo2014.pdf\\\"\u003e\nCoupled Simulation of Indoor Environment, HVAC and Control System by Using Fast Fluid Dynamics and the Modelica Buildings Library. \u003c/a\u003e\u003cbr/\u003e\nProc. of the 2014 ASHRAE/IBPSA-USA Building Simulation Conference, Atlanta, GA, September 10-12, 2014.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.TwoConductor.phasePowers_vi":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.phasePowers_vi","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.phasePowers_vi"}]},"Buildings.Electrical.AC.OnePhase.Lines.TwoPortRL":{"name":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortRL","comment":"Model of a resistive-inductive element with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialTwoPortRLC","modifications":[{"name":"V_nominal","qualifiers":["final"],"value":"0"},{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"},{"name":"C","qualifiers":["final"],"value":"0"}]}],"components":[{"className":"Modelica.SIunits.Current","qualifiers":["array","parameter"],"name":"i_start","comment":"Initial current phasor of the line (positive if entering from terminal p)","value":"zeros(PhaseSystem_p.n)","arraySubscripts":"[PhaseSystem_p.n]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.FixedZ_dynamic"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}}],"annotations":{"diagram":"Diagram(graphics \u003d {Rectangle(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a resistance and an inductance connected in series with\ntwo AC one phase interfaces. This model can be used\nto represent a single phase cable in a AC grid.\n\u003c/p\u003e\n\u003cp\u003e\nThe model represents the lumped RL cable as shown in the figure below.\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/OnePhase/Lines/twoPortRL.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.divide":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.divide","comment":"Divide two vectors","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"x","arraySubscripts":"[n]"},{"className":"Real","qualifiers":["array","input"],"name":"y","arraySubscripts":"[n]"},{"className":"Real","qualifiers":["array","output"],"name":"z","arraySubscripts":"[n]"}]},"Buildings.Electrical.Transmission.Functions.computeGMD":{"name":"Buildings.Electrical.Transmission.Functions.computeGMD","comment":"This function computes the geometric mean distance of a three-phase transmission line","components":[{"className":"Modelica.SIunits.Length","qualifiers":["input"],"name":"d1","comment":"Distance between conductors"},{"className":"Modelica.SIunits.Length","qualifiers":["input"],"name":"d2","comment":"Distance between conductors","value":"d1"},{"className":"Modelica.SIunits.Length","qualifiers":["input"],"name":"d3","comment":"Distance between conductors","value":"2*d1"},{"className":"Modelica.SIunits.Length","qualifiers":["output"],"name":"GMD","comment":"Geometric Mean Distance"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the Geometric Mean Distance of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nThe GMD is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nGMD \u003d (d\u003csub\u003e1\u003c/sub\u003e d\u003csub\u003e2\u003c/sub\u003e d\u003csub\u003e3\u003c/sub\u003e)\u003csup\u003e1/3\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003ed\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003ed\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, and \u003ci\u003ed\u003csub\u003e3\u003c/sub\u003e\u003c/i\u003e are\n the distances between the conductors.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.DXCoils.Data.Generic.DXCoil":{"name":"Buildings.Fluid.HeatExchangers.DXCoils.Data.Generic.DXCoil","comment":"Performance record for a DX Cooling Coil with one or multiple stages","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nSta","comment":"Number of stages","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(enable \u003d not sinStaOpe)"}},{"className":"Real","qualifiers":["parameter"],"name":"minSpeRat","comment":"Minimum speed ratio","value":"0.2","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(enable \u003d not sinStaOpe)"}},{"className":"Boolean","qualifiers":["final","parameter"],"name":"sinStaOpe","comment":"The data record is used for single speed operation","value":"nSta\u003d\u003d1"},{"className":"Buildings.Fluid.HeatExchangers.DXCoils.Data.Generic.BaseClasses.Stage","qualifiers":["array","parameter"],"name":"sta","comment":"Data record for coil performance at each stage","arraySubscripts":"[nSta]"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_small","comment":"Small mass flow rate for regularization near zero flow","value":"0.0001*sta[1].nomVal.m_flow_nominal","annotations":{"dialog":"Dialog(group \u003d \"Minimum conditions\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis record declares the performance data for the DX cooling coil model.\nThe performance data are structured as follows:\n\u003c/p\u003e\n\u003cpre\u003e\n  nSta      - Number of stages. Set to 1 for single speed coil,\n              2 for dual-speed (or dual stage coils), etc.\n  minSpeRat - Minimum speed ratio, used only for variable speed coils.\n  sta       - Array of records with one performance curve for each stage,\n              as described below.\n\u003c/pre\u003e\n\u003cp\u003e\nEach element of the array \u003ccode\u003eper\u003c/code\u003e has the following data.\n\u003c/p\u003e\n\u003cpre\u003e\n  spe       - Rotational speed for the respective stage.\n              (This is only used for variable speed coils to interpolate for\n              intermediate speeds).\n  nomVal    - Nominal performance values for the respective stage. Data of the\n              nomVal record are\n     Q_flow_nominal - Total rate of cooling at nominal conditions.\n     COP_nominal    - Coefficient of performance at nominal conditions.\n     SHR_nominal    - Sensible heat ratio at nominal conditions.\n\n     m_flow_nominal - Evaporator air mass flow rate at nominal conditions.\n     TEvaIn_nominal    - Evaporator air inlet temperature at nominal conditions.\n     TConIn_nominal    - Condenser air inlet temperature at nominal conditions\n                         (for evaporative coils, use wet bulb, otherwise use dry bulb\n                         temperature).\n     phiIn_nominal  - Relative humidity at evaporator inlet at nominal conditions.\n     p_nominal      - Atmospheric pressure at nominal conditions.\n\n     tWet           - Time until moisture drips from coil when coil is switched on\n     gamma          - Ratio of evaporation heat transfer divided by latent\n                      heat transfer at nominal condition.\n\n  per       - Array of records with one performance curve for the respective\n              stage of the coil. That is, the performance curves will be used\n              in conjunction with the nominal values defined in the record spe.\n     capFunT  - Coefficients of biquadratic polynomial for cooling capacity\n                as a function of temperature.\n     capFunFF - Polynomial coefficients for cooling capacity\n                as a function of the mass flow fraction.\n     EIRFunT  - Coefficients of biquadratic polynomial for EIR as a function of temperature.\n     EIRFunFF - Polynomial coefficients for EIR\n                as a function of the mass flow fraction.\n     TConInRan - Minimum and maximum condenser air inlet temperatures\n                 for which the performance curves are valid.\n                 Outside this range, they will be linearly extrapolated.\n     TEvaInRan - Minimum and maximum evaporator air inlet temperatures\n                 for which the performance curves are valid.\n                 Outside this range, they will be linearly extrapolated.\n     ffRan     - Minimum and maximum air mass flow fraction (relative to m_flow_nominal)\n                 for which the performance curves are valid.\n                 Outside this range, they will be linearly extrapolated.\n\u003c/pre\u003e\n\u003cp\u003e\nThe data used to develop the performance curves\n\u003ccode\u003ecapFunT\u003c/code\u003e and\n\u003ccode\u003eEIRFunT\u003c/code\u003e should represent performance when the\ncooling coil is wet, i.e., the coil providing sensible cooling and at least some dehumidification.\nPerformance data when the cooling coil is dry\n(i.e., not providing any dehumidification) should not be included when developing these modifier curves.\nThe DX coil model automatically detects and adjusts for dry coil conditions by evaluating\nthe performance curves for the wet bulb and dry bulb temperatures at the evaporator inlet,\nand then selecting the corresponding performance.\nThe selection of the corresponding performance is described and implemented\nin\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.DryWetSelector\\\"\u003e\nBuildings.Fluid.HeatExchangers.DXCoils.BaseClasses.DryWetSelector\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameters \u003ccode\u003etWet\u003c/code\u003e and \u003ccode\u003egamma\u003c/code\u003e characterize the amount of\nmoisture that evaporates from the coil surface into the air stream when the coil is\nwet and switched off. For an examplanation of the parameters, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.Evaporation\\\"\u003e\nBuildings.Fluid.HeatExchangers.DXCoils.BaseClasses.Evaporation\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThere can be an arbitrary number of polynomial coefficients for the record\n\u003ccode\u003ecapFunFF\u003c/code\u003e and \u003ccode\u003eEIRFunFF\u003c/code\u003e.\nHowever, if a coil has multiple stages, then each stage must declare the\nsame amount of polynomial coefficients. For example, if a\nquadratic function is used for stage one, then stage two must also use\na quadratic function.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.ThermodynamicState":{"name":"Buildings.Media.Air.ThermodynamicState","comment":"ThermodynamicState record for moist air","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.ThermodynamicState"}]},"Buildings.HeatTransfer.Windows.Functions.winTRInteriorIrradiationInteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.winTRInteriorIrradiationInteriorShading","comment":"Hemispherical transmittance and back reflectance of a window system (glass and shading device) for interior irradiation with interior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"traRefIntIrrIntSha","comment":"Hemispherical transmittance and back reflectance of a window system (glass and shading device) for interior irradiation with interior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[3,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the hemispherical transmittance and back reflectance of a window system (glass and shading device) for interior irradiation with interior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing the outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Reports.printRealArray":{"name":"Buildings.Utilities.Reports.printRealArray","comment":"Print string to terminal or file","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"x","comment":"Input to be printed","arraySubscripts":"[:]"},{"className":"String","qualifiers":["input"],"name":"fileName","comment":"File where to print (empty string is the terminal)","value":"\"\""},{"className":"Integer","qualifiers":["input"],"name":"minimumLength","comment":"Minimum width of result","value":"1"},{"className":"Integer","qualifiers":["input"],"name":"significantDigits","comment":"Number of significant digits","value":"6"},{"className":"String","qualifiers":["output"],"name":"outStr","comment":"String to be printed","value":"\"\""}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction that prints a real array to an output file.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Functions.cubicHermiteLinearExtrapolation":{"name":"Buildings.Utilities.Math.Functions.cubicHermiteLinearExtrapolation","comment":"Interpolate using a cubic Hermite spline with linear extrapolation","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Abscissa value"},{"className":"Real","qualifiers":["input"],"name":"x1","comment":"Lower abscissa value"},{"className":"Real","qualifiers":["input"],"name":"x2","comment":"Upper abscissa value"},{"className":"Real","qualifiers":["input"],"name":"y1","comment":"Lower ordinate value"},{"className":"Real","qualifiers":["input"],"name":"y2","comment":"Upper ordinate value"},{"className":"Real","qualifiers":["input"],"name":"y1d","comment":"Lower gradient"},{"className":"Real","qualifiers":["input"],"name":"y2d","comment":"Upper gradient"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Interpolated ordinate value"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFor \u003ci\u003ex\u003csub\u003e1\u003c/sub\u003e \u0026lt; x \u0026lt; x\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, this function interpolates\nusing cubic hermite spline. For \u003ci\u003ex\u003c/i\u003e outside this interval, the function\nlinearly extrapolates.\n\u003c/p\u003e\n\u003cp\u003e\nFor how to use this function, see\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.Examples.CubicHermite\\\"\u003e\nBuildings.Utilities.Math.Functions.Examples.CubicHermite\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.Conversions.To_VolumeFraction":{"name":"Buildings.Fluid.Sensors.Conversions.To_VolumeFraction","comment":"Conversion from mass fraction to volume fraction","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.MolarMass","qualifiers":["parameter"],"name":"MMMea","comment":"Molar mass of measured substance"},{"className":"Modelica.SIunits.MolarMass","qualifiers":["parameter"],"name":"MMBul","comment":"Molar mass of bulk medium","value":"Modelica.Media.IdealGases.Common.SingleGasesData.Air.MM"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"m","comment":"Mass fraction","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"V","comment":"Volume fraction","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component converts mass fraction to volume fraction for an ideal gas.\nThe default value for the parameter \u003ccode\u003eMMBul\u003c/code\u003e\nassumes that the bulk medium is air.\nThe model assumes that the concentration\nof the measured substance is small enough to be neglected in the molar mass\nof the mixture.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Text(),Text(),Text(),Rectangle(),Rectangle(),Text()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACConverter":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACConverter","comment":"AC AC converter single phase systems (YY)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"conversionFactor","comment":"Ratio of QS rms voltage on side 2 / QS rms voltage on side 1"},{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"eta","comment":"Converter efficiency, pLoss \u003d (1-eta) * Ptr","modifications":[{"name":"max","value":"1"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of converter to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is an AC AC converter, based on a power balance between both circuit sides.\nThe paramater \u003ci\u003econversionFactor\u003c/i\u003e defines the ratio between the RMS voltages\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nV\u003csub\u003e2\u003c/sub\u003e \u003d conversionFactor * V\u003csub\u003e1\u003c/sub\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e and \u003ci\u003eV\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e are the RMS voltages\nat the primary and secondary sides of the transformer (connector N and P\nrespectively).\n\u003c/p\u003e\n\n\u003cp\u003e\nThe loss of the converter is proportional to the power transmitted.\nThe parameter \u003ccode\u003eeta\u003c/code\u003e is the efficiency of the transfer.\nThe loss is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003csub\u003eloss\u003c/sub\u003e \u003d (1-\u0026eta;) P\u003csub\u003etr\u003c/sub\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eP\u003csub\u003etr\u003c/sub\u003e\u003c/i\u003e is the power transmitted. The model is bi-directional\nand the power can flow from both the primary to the secondary and vice-versa.\nFurthermore, reactive power on both side are set to 0.\n\u003c/p\u003e\n\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/YY.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACConverter\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACConverter\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Text(),Text(),Text(),Text(),Text(),Text()})"}},"Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage":{"name":"Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage","comment":"Two way valve with equal percentage flow characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValveKv","modifications":[{"name":"phi","value":"if homotopyInitialization then homotopy() else Buildings.Fluid.Actuators.BaseClasses.equalPercentage(y_actual,R,l,delta0)"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"R","comment":"Rangeability, R\u003d50...100 typically","value":"50"},{"className":"Real","qualifiers":["parameter"],"name":"delta0","comment":"Range of significant deviation from equal percentage law","value":"0.01"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nTwo way valve with an equal percentage valve opening characteristic.\n\u003c/p\u003e\u003cp\u003e\nThis model is based on the partial valve model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e.\nCheck this model for more information, such\nas the regularization near the origin.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificGibbsEnergy":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificGibbsEnergy","comment":"Return the specific Gibbs energy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificGibbsEnergy"},{"nameOfExtendedClass":"Modelica.Icons.Function"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific Gibbs energy.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Rooms.X3A.Electrical":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3A.Electrical","comment":"Model of the electrical room attached to test cell X3A","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"hRoo","value":"3.6576"},{"name":"AFlo","value":"2.39"},{"name":"lat","value":"0.66098585832754"},{"name":"nSurBou","value":"2"},{"name":"nConExt","value":"4"},{"name":"nConExtWin","value":"0"},{"name":"nConPar","value":"0"},{"name":"nConBou","value":"1"},{"name":"surBou","modifications":[{"name":"A","value":"{3.6576*1.2641,3.6576*1.524}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","qualifiers":["each"],"value":"Buildings.Types.Tilt.Wall"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{eleExt,eleExt,extDooUn,roo}"},{"name":"A","value":"{3.6576*1.26413,3.6576*1.524-2.38658*1.524,2.38658*1.524,2.39}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.N}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{slaCon}"},{"name":"A","value":"{2.39}"},{"name":"til","value":"{Buildings.Types.Tilt.Floor}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N}"}]}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction3","qualifiers":["replaceable"],"name":"eleExt","comment":"Construction describing the exterior walls in the electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-210},{450,-190}}))"}},{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorUninsulated","qualifiers":["replaceable"],"name":"extDooUn","comment":"Construction describing the door in the electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-178},{450,-158}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"roo","comment":"Construction describing the roof of the electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-148},{450,-128}}))"}},{"className":"HeatTransfer.Data.OpaqueConstructions.Generic","name":"slaCon","comment":"Construction of the slab","modifications":[{"name":"nLay","value":"3"},{"name":"material","value":"{Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic()}"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{428,-118},{448,-98}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a model for the electrical room connected to test cell 3A in the LBNL User Facility.\n  Other models are provided for the main space of the test cell and the connected closet. This\n  documentation describes the wall constructions used in the electrical room model. For\n  documentation describing how the room models are to be connected to develop a model of the\n  entire X3A test cell see\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3A\\\"\u003e\n  Buildings.Rooms.FLEXLAB.Rooms.X3A\u003c/a\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  There are 4 different wall sections described in the model. They are shown in the figure below.\n  \u003c/p\u003e\n  \u003cp align\u003d\\\"center\\\"\u003e\n  \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3A/Electrical.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in TestCell model\\\"/\u003e\n  \u003c/p\u003e\n  \u003cp\u003e\n  The different wall sections are entered into the model according to the following table.\n  \u003c/p\u003e\n  \u003ctable border\u003d\\\"1\\\" summary\u003d\\\"Description of wall sections in EF90Electrical\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eWall Section Number\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n  \u003cth\u003eLocation in Model\u003c/th\u003e\n  \u003cth\u003eCorresponding Layer\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e1\u003c/td\u003e\n  \u003ctd\u003eNorth exterior wall\u003c/td\u003e\n  \u003ctd\u003edatConExt[1]\u003c/td\u003e\n  \u003ctd\u003eeleExt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e2\u003c/td\u003e\n  \u003ctd\u003eEast air space connecting to Closet\u003c/td\u003e\n  \u003ctd\u003esurBou[2]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e3\u003c/td\u003e\n  \u003ctd\u003eSouth air space connecting to TestCell\u003c/td\u003e\n  \u003ctd\u003esurBou[1]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e4\u003c/td\u003e\n  \u003ctd\u003eWest exterior door and wall\u003c/td\u003e\n  \u003ctd\u003eDoor: datConExt[3]\u003cbr/\u003e\n  Wall: datConExt[2]\u003c/td\u003e\n  \u003ctd\u003e  Door: eleExt\u003cbr/\u003e\n  Wall: extDooUn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003cp\u003e\n  There are two additional surfaces which are not included in the diagram. One is the model of the roof. It is\n  modeled in datConExt[4] using the layer \u003ccode\u003eroo\u003c/code\u003e. The other is the floor, which is modeled in\n  datConBou[1] using the layer \u003ccode\u003eslaCon\u003c/code\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n  The following table describes the connections to rooms which are not in the X3A package. The constructions in\n  datConExt are not described in the table because they are connected to the external environment, and no\n  additional heat port connections are necessary. A rationale for why the model is created this way is also\n  provided if it is considered necessary.\n  \u003c/p\u003e\n  \u003ctable border \u003d\\\"1\\\" summary \u003d \\\"Description of intended connections including Electrical model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eLocation in Electrical\u003c/th\u003e\n  \u003cth\u003eDescription of External Connection\u003c/th\u003e\n  \u003cth\u003eRationale\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003esurf_conBou[1]\u003c/td\u003e\n  \u003ctd\u003eConnection to ground temperature model\u003c/td\u003e\n  \u003ctd\u003eThis port represents the bottom of the floor in the space. It is to be connected to a heat port representing\n  the temperature of the ground.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Media.Air.specificHelmholtzEnergy":{"name":"Buildings.Media.Air.specificHelmholtzEnergy","comment":"Specific Helmholtz energy","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.specificHelmholtzEnergy"}]},"Buildings.HeatTransfer.Windows.SideFins":{"name":"Buildings.HeatTransfer.Windows.SideFins","comment":"For a window with side fins, outputs the fraction of the window area exposed to the sun","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.BaseClasses.SideFins"},{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.BaseClasses.PartialShade_weatherBus"}],"components":[{"className":"Buildings.HeatTransfer.Windows.BaseClasses.SideFins","name":"fin","comment":"Window side fins","modifications":[{"name":"dep","qualifiers":["final"],"value":"dep"},{"name":"h","qualifiers":["final"],"value":"h"},{"name":"gap","qualifiers":["final"],"value":"gap"},{"name":"hWin","qualifiers":["final"],"value":"hWin"},{"name":"wWin","qualifiers":["final"],"value":"wWin"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{0,-10},{20,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFor a window with side fins, this model outputs the fraction of\nthe area that is exposed to the sun.\nThe model calculates the fraction of the window area that is exposed to the sun.\nThe side fins are symmetrically placed above the vertical window centerline,\nand its height must be equal or greater than the window height.\nThis models can also be used for doors with side fins.\nThe figure below shows the parameters. The parameter \u003ccode\u003eh\u003c/code\u003e is measured\nfrom the top of the window to the top of the side fins.\nSide fins are assumed to extend at least to the lower edge of the window.\n(Any portion of the side fin below the window edge does not cast\nas shadow on the window anyway.)\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/HeatTransfer/Windows/SideFins.png\\\" /\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eh\u003c/code\u003e is measured\nfrom the top of the window to the top of the side fins.\nThe side fin must extend at least to the bottom of the window.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/HeatTransfer/Windows/WindowSideFinsExtendedSideFin.png\\\" /\u003e\n\u003c/p\u003e\n\u003ch4\u003eLimitations\u003c/h4\u003e\nThe model assumes that\n\u003cul\u003e\n\u003cli\u003e\nthe side fins are placed symmetrically to the left and right of the window,\n\u003c/li\u003e\n\u003cli\u003e\nthe top of the side fins must be at an equal or greater height than the window, and\n\u003c/li\u003e\n\u003cli\u003e\nthe bottom of the side fins must be at an equal or lower height than the\nbottom of the window.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe detailed calculation method is explained in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.BaseClasses.SideFins\\\"\u003e\nBuildings.HeatTransfer.Windows.BaseClasses.SideFins\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Bitmap()})"}},"Buildings.Media.Air.specificEnthalpy":{"name":"Buildings.Media.Air.specificEnthalpy","comment":"Compute specific enthalpy from pressure, temperature and mass fraction","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.specificEnthalpy"}]},"Buildings.Media.Air.dynamicViscosity":{"name":"Buildings.Media.Air.dynamicViscosity","comment":"Return the dynamic viscosity of dry air","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.dynamicViscosity"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the dynamic viscosity.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe function is based on the 5th order polynomial\nof\n\u003ca href\u003d\\\"modelica://Modelica.Media.Air.MoistAir.dynamicViscosity\\\"\u003e\nModelica.Media.Air.MoistAir.dynamicViscosity\u003c/a\u003e.\nHowever, for the typical range of temperatures encountered\nin building applications, a linear function sufficies.\nThis implementation is therefore the above 5th order polynomial,\nlinearized around \u003ci\u003e20\u003c/i\u003e\u0026deg;C.\nThe relative error of this linearization is\n\u003ci\u003e0.4\u003c/i\u003e% at \u003ci\u003e-20\u003c/i\u003e\u0026deg;C,\nand less then\n\u003ci\u003e0.2\u003c/i\u003e% between  \u003ci\u003e-5\u003c/i\u003e\u0026deg;C and  \u003ci\u003e+50\u003c/i\u003e\u0026deg;C.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.enthalpyOfVaporization":{"name":"Buildings.Media.Air.enthalpyOfVaporization","comment":"Enthalpy of vaporization of water","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.enthalpyOfVaporization"}]},"Buildings.Utilities.Math.Max":{"name":"Buildings.Utilities.Math.Max","comment":"Maximum element of a vector","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.MISO"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOutputs the maximum of the vector.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to4_n":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to4_n","comment":"Adapter between Terminal4 and Terminal3 N","qualifiers":["model"],"components":[{"className":"Terminal4_n","name":"terminal4","comment":"Connector with neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}), iconTransformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Terminal_n","name":"terminal3","comment":"Connector without neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAdapter between electric connectors type n for AC three-phase unbalanced systems.\nThis adapter connects a connector without neutral cable with a one that has it\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to4_p":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to4_p","comment":"Adapter between Terminal4 and Terminal3 P","qualifiers":["model"],"components":[{"className":"Terminal4_p","name":"terminal4","comment":"Connector with neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}), iconTransformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Terminal_p","name":"terminal3","comment":"Connector without neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAdapter between electric connectors type p for AC three-phase unbalanced systems.\nThis adapter connects two connectors without and without a neutral cable.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Fluid.Chillers.ElectricReformulatedEIR":{"name":"Buildings.Fluid.Chillers.ElectricReformulatedEIR","comment":"Electric chiller based on the DOE-2.1 model, but with performance as a function of condenser leaving instead of entering temperature","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Chillers.BaseClasses.PartialElectric","modifications":[{"name":"QEva_flow_nominal","qualifiers":["final"],"value":"per.QEva_flow_nominal"},{"name":"COP_nominal","qualifiers":["final"],"value":"per.COP_nominal"},{"name":"PLRMax","qualifiers":["final"],"value":"per.PLRMax"},{"name":"PLRMinUnl","qualifiers":["final"],"value":"per.PLRMinUnl"},{"name":"PLRMin","qualifiers":["final"],"value":"per.PLRMin"},{"name":"etaMotor","qualifiers":["final"],"value":"per.etaMotor"},{"name":"mEva_flow_nominal","qualifiers":["final"],"value":"per.mEva_flow_nominal"},{"name":"mCon_flow_nominal","qualifiers":["final"],"value":"per.mCon_flow_nominal"},{"name":"TEvaLvg_nominal","qualifiers":["final"],"value":"per.TEvaLvg_nominal"}]}],"components":[{"className":"Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic","qualifiers":["parameter"],"name":"per","comment":"Performance data","annotations":{"placement":"Placement(transformation(extent \u003d {{40,80},{60,100}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of an electric chiller, based on the model by\nHydeman et al. (2002) that has been developed in the CoolTools project\nand that is implemented in EnergyPlus as the model\n\u003ccode\u003eChiller:Electric:ReformulatedEIR\u003c/code\u003e.\nThis empirical model is similar to\n\u003ca href\u003d\\\"Buildings.Fluid.Chillers.ElectricEIR\\\"\u003e\nBuildings.Fluid.Chillers.ElectricEIR\u003c/a\u003e.\nThe difference is that to compute the performance, this model\nuses the condenser leaving temperature instead of the entering temperature,\nand it uses a bicubic polynomial to compute the part load performance.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis model uses three functions to predict capacity and power consumption:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nA biquadratic function is used to predict cooling capacity as a function of\ncondenser leaving and evaporator leaving fluid temperature.\n\u003c/li\u003e\n\u003cli\u003e\nA bicubic function is used to predict power input to cooling capacity ratio\nas a function of condenser leaving temperature and part load ratio.\n\u003c/li\u003e\n\u003cli\u003e\nA biquadratic functions is used to predict power input to cooling capacity ratio as a function of\ncondenser leaving and evaporator leaving fluid temperature.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nThese curves are stored in the data record \u003ccode\u003eper\u003c/code\u003e and are available from\n\u003ca href\u003d\\\"Buildings.Fluid.Chillers.Data.ElectricReformulatedEIRChiller\\\"\u003e\nBuildings.Fluid.Chillers.Data.ElectricReformulatedEIRChiller\u003c/a\u003e.\nAdditional performance curves can be developed using\ntwo available techniques (Hydeman and Gillespie, 2002). The first technique is called the\nLeast-squares Linear Regression method and is used when sufficient performance data exist\nto employ standard least-square linear regression techniques. The second technique is called\nReference Curve Method and is used when insufficient performance data exist to apply linear\nregression techniques. A detailed description of both techniques can be found in\nHydeman and Gillespie (2002).\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model takes as an input the set point for the leaving chilled water temperature,\nwhich is met if the chiller has sufficient capacity.\nThus, the model has a built-in, ideal temperature control.\nThe model has three tests on the part load ratio and the cycling ratio:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nThe test\u003cpre\u003e\n  PLR1 \u003dmin(QEva_flow_set/QEva_flow_ava, per.PLRMax);\n\u003c/pre\u003e\nensures that the chiller capacity does not exceed the chiller capacity specified\nby the parameter \u003ccode\u003eper.PLRMax\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe test \u003cpre\u003e\n  CR \u003d min(PLR1/per.PRLMin, 1.0);\n\u003c/pre\u003e\ncomputes a cycling ratio. This ratio expresses the fraction of time\nthat a chiller would run if it were to cycle because its load is smaller than\nthe minimal load at which it can operate.\nNote that this model continuously operates even if the part load ratio is below the minimum part load ratio.\nIts leaving evaporator and condenser temperature can therefore be considered as an\naverage temperature between the modes where the compressor is off and on.\n\u003c/li\u003e\n\u003cli\u003e\nThe test \u003cpre\u003e\n  PLR2 \u003d max(per.PLRMinUnl, PLR1);\n\u003c/pre\u003e\ncomputes the part load ratio of the compressor.\nThe assumption is that for a part load ratio below \u003ccode\u003eper.PLRMinUnl\u003c/code\u003e,\nthe chiller uses hot gas bypass to reduce the capacity, while the compressor\npower draw does not change.\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\nThe electric power only contains the power for the compressor, but not any power for pumps or fans.\n\u003c/p\u003e\n\u003cp\u003e\nThe model can be parametrized to compute a transient\nor steady-state response.\nThe transient response of the boiler is computed using a first\norder differential equation for the evaporator and condenser fluid volumes.\nThe chiller outlet temperatures are equal to the temperatures of these lumped volumes.\n\u003c/p\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\nHydeman, M., N. Webb, P. Sreedharan, and S. Blanc. 2002. Development and Testing of a\nReformulated Regression-Based Electric Chiller Model. \u003ci\u003eASHRAE Transactions\u003c/i\u003e, HI-02-18-2.\n\u003c/li\u003e\n\u003cli\u003e\nHydeman, M. and K.L. Gillespie. 2002. Tools and Techniques to Calibrate Electric Chiller\nComponent Models. \u003ci\u003eASHRAE Transactions\u003c/i\u003e, AC-02-9-1.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Polygon(),Polygon(),Rectangle(),Rectangle(),Ellipse(),Polygon()})"}},"Buildings.Utilities.Psychrometrics.Functions.saturationPressure":{"name":"Buildings.Utilities.Psychrometrics.Functions.saturationPressure","comment":"Saturation curve valid for 223.16 \u003c\u003d T \u003c\u003d 373.16 (and slightly outside with less accuracy)","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"TSat","comment":"Saturation temperature","modifications":[{"name":"displayUnit","value":"\"degC\""},{"name":"nominal","value":"300"}]},{"className":"Modelica.SIunits.AbsolutePressure","qualifiers":["output"],"name":"pSat","comment":"Saturation pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"nominal","value":"1000"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSaturation pressure of water, computed from temperature,\naccording to Wagner \u003ci\u003eet al.\u003c/i\u003e (1993).\nThe range of validity is between\n\u003ci\u003e190\u003c/i\u003e and \u003ci\u003e373.16\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nWagner W., A. Saul, A. Pruss.\n \u003ci\u003eInternational equations for the pressure along the melting and along the sublimation curve of ordinary water substance\u003c/i\u003e,\nequation 3.5. 1993.\n\u003ca href\u003d\\\"http://www.nist.gov/data/PDFfiles/jpcrd477.pdf\\\"\u003e\nhttp://www.nist.gov/data/PDFfiles/jpcrd477.pdf\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl25_ECM":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl25_ECM","comment":"Aluminum cable 25 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"1.32e-003"},{"name":"XCha","value":"0.075e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 25mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 1.320e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.075e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfLiquid":{"name":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfLiquid","comment":"Enthalpy of liquid (per unit mass of liquid) which is linear in the temperature","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfLiquid"}]},"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortRL":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortRL","comment":"Model of a resistive-inductive element with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortRL","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistive-inductive impedance that connects two AC three-phase\nbalanced interfaces. This model can be used to represent a\ncable in a three-phase balanced AC system.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Lines.TwoPortRL\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Lines.TwoPortRL\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.OnePhase.systemVoltage":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.systemVoltage","comment":"Return system voltage as function of phase voltages","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.systemVoltage"}]},"Buildings.Media.Air.BaseProperties":{"name":"Buildings.Media.Air.BaseProperties","comment":"Base properties","qualifiers":["replaceable","model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.BaseProperties","modifications":[{"name":"Xi","modifications":[{"name":"stateSelect","qualifiers":["each"],"value":"if preferredMediumStates then StateSelect.prefer else StateSelect.default"}]},{"name":"T","modifications":[{"name":"stateSelect","value":"if preferredMediumStates then StateSelect.prefer else StateSelect.default"}]},{"name":"standardOrderComponents","qualifiers":["final"],"value":"true"}]}]},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.activePower":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.activePower","comment":"Return total power as function of phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.activePower"}]},"Buildings.Electrical.Transmission.Grids.TestGrid2NodesMedium":{"name":"Buildings.Electrical.Transmission.Grids.TestGrid2NodesMedium","comment":"Simple model of a grid with 2 nodes and 1 link for medium voltage","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.Grids.PartialGrid","modifications":[{"name":"nNodes","value":"2"},{"name":"nLinks","value":"1"},{"name":"fromTo","value":"[[1, 2]]"},{"name":"l","value":"[200]"},{"name":"cables"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a simple grid with two nodes and a single link between them.\nThis model differs from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.Grids.TestGrid2Nodes\\\"\u003e\nBuildings.Electrical.Transmission.Grids.TestGrid2Nodes\u003c/a\u003e because it defines a medium voltage\ncable instead of a low voltage cable.\n\u003c/p\u003e\n\u003cp\u003e\nThe picture below describes the grid topology.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/Transmission/Grids/testGrid2Nodes.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.molarMass":{"name":"Buildings.Media.Air.molarMass","comment":"Return the molar mass","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.molarMass"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the molar mass.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi":{"name":"Buildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi","comment":"Model to compute the wet bulb temperature based on relative humidity","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"approximateWetBulb","comment":"Set to true to approximate wet bulb temperature","value":"false"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TDryBul","comment":"Dry bulb temperature","modifications":[{"name":"start","value":"Medium.T_default"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"phi","comment":"Relative air humidity","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p","comment":"Pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-90},{-100,-70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"TWetBul","comment":"Wet bulb temperature","modifications":[{"name":"start","value":"Medium.T_default-2"},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"classes":[{"name":"Buildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi.Medium","comment":"Medium model","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialCondensingGases"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block computes the wet bulb temperature for a given dry bulb temperature, relative air humidity\nand atmospheric pressure.\n\u003c/p\u003e\n\u003cp\u003e\nIf the constant \u003ccode\u003eapproximateWetBulb\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e,\nthen the block uses the approximation of Stull (2011) to compute\nthe wet bulb temperature without requiring a nonlinear equation.\nOtherwise, the model will introduce one nonlinear equation.\n\u003c/p\u003e\n\u003cp\u003e\nThe approximation by Stull is valid for a relative humidity of \u003ci\u003e5%\u003c/i\u003e to \u003ci\u003e99%\u003c/i\u003e,\na temperature range from \u003ci\u003e-20\u003c/i\u003e\u0026deg;C to \u003ci\u003e50\u003c/i\u003e\u0026deg;C\nand standard sea level pressure.\nFor this range of data, the approximation error is \u003ci\u003e-1\u003c/i\u003e Kelvin to \u003ci\u003e+0.65\u003c/i\u003e Kelvin,\nwith a mean error of less than \u003ci\u003e0.3\u003c/i\u003e Kelvin.\n\u003c/p\u003e\n\u003cp\u003e\nFor a model that takes the mass fraction instead of the relative humidity as an input, see\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.TWetBul_TDryBulXi\\\"\u003e\nBuildings.Utilities.Psychrometrics.TWetBul_TDryBulXi\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nStull, Roland.\n\u003ci\u003e\u003ca href\u003d\\\"http://dx.doi.org/10.1175/JAMC-D-11-0143.1\\\"\u003e\nWet-Bulb Temperature from Relative Humidity and Air Temperature\nRoland Stull.\u003c/a\u003e\u003c/i\u003e\nJournal of Applied Meteorology and Climatology.\nVolume 50, Issue 11, pp. 2267-2269. November 2011\nDOI: 10.1175/JAMC-D-11-0143.1\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Ellipse(),Rectangle(),Polygon(),Line(),Line(),Line(),Line(),Line(),Text(),Text(),Text(),Text()})"}},"Buildings.Fluid.FMI.Interfaces.Outlet":{"name":"Buildings.Fluid.FMI.Interfaces.Outlet","comment":"Connector for fluid outlet","qualifiers":["connector"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Medium.MassFlowRate","qualifiers":["output"],"name":"m_flow","comment":"Mass flow rate from the connection point into the component"},{"className":"Buildings.Fluid.FMI.Interfaces.PressureOutput","name":"p","comment":"Thermodynamic pressure in the connection point","conditionalClause":" if use_p_in"},{"className":"Buildings.Fluid.FMI.Interfaces.FluidProperties","qualifiers":["input"],"name":"backward","comment":"Inflowing properties","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"}],"conditionalClause":" if allowFlowReversal"},{"className":"Buildings.Fluid.FMI.Interfaces.FluidProperties","qualifiers":["output"],"name":"forward","comment":"Outflowing properties","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"}]}],"classes":[{"name":"Buildings.Fluid.FMI.Interfaces.Outlet.Medium","comment":"Medium model","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a connector for a fluid outlet.\nThe connector produces as an output the \nfollowing quantities:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe mass flow rate \u003ccode\u003em_flow\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe pressure \u003ccode\u003ep\u003c/code\u003e,\nunless \u003ccode\u003euse_p_in\u003dfalse\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe temperature of the inflowing fluid\n\u003ccode\u003eforward.T\u003c/code\u003e, \ne.g., the temperature of the fluid that streams out of the component if \u003ccode\u003em_flow \u0026gt; 0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe mass fraction of the inflowing fluid\n\u003ccode\u003eforward.Xi\u003c/code\u003e,\nunless \u003ccode\u003eMedium.nXi\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe trace substances of the inflowing fluid\n\u003ccode\u003eforward.C\u003c/code\u003e, \nunless \u003ccode\u003eMedium.nC\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf \u003ccode\u003eallowFlowReversal \u003d true\u003c/code\u003e,\nthe connector requires as input the following quantities.\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe temperature of the outflowing fluid\n\u003ccode\u003ebackward.T\u003c/code\u003e,\ne.g., if \u003ccode\u003em_flow \u0026le; 0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe mass fraction of the outflowing fluid\n\u003ccode\u003ebackward.Xi\u003c/code\u003e,\nunless \u003ccode\u003eMedium.nXi\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nThe trace substances of the outflowing fluid \n\u003ccode\u003ebackward.C\u003c/code\u003e,\nunless \u003ccode\u003eMedium.nC\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf \u003ccode\u003eallowFlowReversal \u003d false\u003c/code\u003e, then these inputs are not present\nand hence not required to be provided.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Text()})"}},"Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.BoundsYorkCalc":{"name":"Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.BoundsYorkCalc","comment":"Coefficient data record for properties of York cooling tower model","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.BaseClasses.Bounds","modifications":[{"name":"TAirInWB_min","value":"273.15-34.4"},{"name":"TAirInWB_max","value":"273.15+26.7"},{"name":"TRan_min","value":"1.1"},{"name":"TRan_max","value":"22.2"},{"name":"TApp_min","value":"1.1"},{"name":"TApp_max","value":"40"},{"name":"FRWat_min","value":"0.75"},{"name":"FRWat_max","value":"1.25"},{"name":"liqGasRat_max","value":"8"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis data record contains the bounds for the YorkCalc cooling tower correlations.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.Load":{"name":"Buildings.Electrical.Interfaces.Load","comment":"Partial model for a generic load","qualifiers":["model"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"linearized","comment":"If true, the load model is linearized","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of load model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.VariableZ_y_input"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Modelica.SIunits.Power","qualifiers":["parameter"],"name":"P_nominal","comment":"Nominal power (negative if consumed, positive if generated). Used if mode \u003c\u003e Buildings.Electrical.Types.Load.VariableZ_P_input","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\", enable \u003d mode\u003c\u003eBuildings.Electrical.Types.Load.VariableZ_P_input)"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"110"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\", enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Loadm.FixedZ_dynamic or linearized)"}},{"className":"Buildings.Electrical.Types.InitMode","qualifiers":["parameter"],"name":"initMode","comment":"Initialization mode for homotopy operator","value":"Buildings.Electrical.Types.InitMode.zero_current","modifications":[{"name":"min","value":"Buildings.Electrical.Types.InitMode.zero_current"},{"name":"max","value":"Buildings.Electrical.Types.InitMode.linearized"}],"annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["array"],"name":"v","comment":"Voltage vector","value":"terminal.v","modifications":[{"name":"start","value":"PhaseSystem.phaseVoltages(V_nominal)"}],"arraySubscripts":"[:]"},{"className":"Modelica.SIunits.Current","qualifiers":["array"],"name":"i","comment":"Current vector","value":"terminal.i","modifications":[{"name":"start","value":"PhaseSystem.phaseCurrents(0.0)"}],"arraySubscripts":"[:]"},{"className":"Modelica.SIunits.Power","qualifiers":["array"],"name":"S","comment":"Phase powers","value":"PhaseSystem.phasePowers_vi(v,-i)","arraySubscripts":"[PhaseSystem.n]"},{"className":"Modelica.SIunits.Power","name":"P","comment":"Power of the load (negative if consumed, positive if fed into the electrical grid)"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y","comment":"Fraction of the nominal power consumed","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if mode\u003d\u003dBuildings.Electrical.Types.Load.VariableZ_y_input","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,0}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,0}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Pow","comment":"Power consumed","modifications":[{"name":"unit","value":"\"W\""}],"conditionalClause":" if mode\u003d\u003dBuildings.Electrical.Types.Load.VariableZ_P_input","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,0}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,0}))"}},{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized electric terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package"],"value":"PhaseSystem"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-108,-8},{-92,8}}), iconTransformation(extent \u003d {{-108,-8},{-92,8}}))"}}],"classes":[{"name":"Buildings.Electrical.Interfaces.Load.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generic load that can be extended to represent\neither a DC or an AC load.\n\u003c/p\u003e\n\u003cp\u003e\nThe model has a single generalized electric terminal of type\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Terminal\\\"\u003e\nBuildings.Electrical.Interfaces.Terminal\u003c/a\u003e\nthat can be redeclared.\nThe generalized load is modeled as an impedance whose value can change. The value of the impedance\ncan change depending on the value of the parameter \u003ccode\u003emode\u003c/code\u003e, which is of type\n\u003ca href\u003d\\\"Buildings.Electrical.Types.Load\\\"\u003eBuildings.Electrical.Types.Load\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eMode\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003cth\u003eExplanation\u003c/th\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003eBuildings.Electrical.Types.Load.FixedZ_steady_state\u003c/td\u003e\n\u003ctd\u003efixed Z steady state\u003c/td\u003e\n\u003ctd\u003eThe load consumes exactly the power\nspecified by the parameter \u003ccode\u003eP_nominal\u003c/code\u003e.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003eBuildings.Electrical.Types.Load.FixedZ_dynamic\u003c/td\u003e\n\u003ctd\u003efixed Z dynamic\u003c/td\u003e\n\u003ctd\u003e\nThe load consumes exactly the power\nspecified by the parameter \u003ccode\u003eP_nominal\u003c/code\u003e at steady state.\nDepending on the type\nof load (e.g., inductive or capacitive)\ndifferent dynamics are represented.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003eBuildings.Electrical.Types.Load.VariableZ_P_input\u003c/td\u003e\n\u003ctd\u003evariable Z P input\u003c/td\u003e\n\u003ctd\u003e\nThe load consumes exactly the power specified\nby the input variable \u003ccode\u003ePow\u003c/code\u003e.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003eBuildings.Electrical.Types.Load.VariableZ_y_input\u003c/td\u003e\n\u003ctd\u003evariable Z y input\u003c/td\u003e\n\u003ctd\u003e\nThe load consumes exactly the a fraction of the nominal power\n\u003ccode\u003eP_nominal\u003c/code\u003e specified by the input variable \u003ccode\u003ey\u003c/code\u003e.\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003c/table\u003e\n\n\n\u003ch4\u003eConventions\u003c/h4\u003e\n\u003cp\u003e\nIt is assumed that the power \u003ccode\u003eP\u003c/code\u003e of the load is positive when produced\n(e.g., the load acts like a source) and negative when consumed (e.g., the\nsource acts like a utilizer).\n\u003c/p\u003e\n\n\u003ch4\u003eLinearized models\u003c/h4\u003e\n\u003cp\u003e\nThe model has a Boolean parameter \u003ccode\u003elinearized\u003c/code\u003e that by default is equal to \u003ccode\u003efalse\u003c/code\u003e.\nWhen the power consumption of the load is imposed, this introduces\na nonlinear equation between the voltage and the current of the load. This flag is used to\nselect between a linearized version\nof the equations or the original nonlinear ones.\u003cbr/\u003e\nWhen the linearized version of the model is used, the parameter \u003ccode\u003eV_nominal\u003c/code\u003e has to\nbe specified. The nominal voltage is needed to linearize the nonlinear equations.\u003cbr/\u003e\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e\nA linearized model will not consume the nominal power if the voltage\nat the terminal differs from the nominal voltage.\n\u003c/p\u003e\n\n\u003c/html\u003e\""}},"Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR":{"name":"Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR"},"Buildings.Utilities.Psychrometrics.pW_TDewPoi":{"name":"Buildings.Utilities.Psychrometrics.pW_TDewPoi","comment":"Model to compute the water vapor pressure for a given dew point temperature of moist air","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"p_w","comment":"Water vapor partial pressure","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T","comment":"Dew point temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock to compute the water vapor pressure for a given dew point temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThe correlation used in this model is valid for dew point temperatures between\n\u003ci\u003e0\u003c/i\u003e\u0026deg;C and \u003ci\u003e30\u003c/i\u003e\u0026deg;C. It is an approximation to the correlation from 2005\nASHRAE Handbook, p. 6.2, which is valid in a wider range of temperatures and implemented\nin\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.Functions.pW_TDewPoi\\\"\u003e\nBuildings.Utilities.Psychrometrics.Functions.pW_TDewPoi\u003c/a\u003e.\nThe approximation error of this simplified function is below 5% for a\ntemperature of \u003ci\u003e0\u003c/i\u003e\u0026deg;C to \u003ci\u003e30\u003c/i\u003e\u0026deg;C.\nThe benefit of this simpler function is that it can be inverted analytically,\nwhereas the other function requires a numerical solution.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Text(),Line(),Line(),Line(),Line(),Polygon(),Polygon(),Polygon(),Text(),Text(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phaseVoltages":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phaseVoltages","comment":"Return phase to neutral voltages","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Voltage","qualifiers":["input"],"name":"V","comment":"system voltage"},{"className":"SI.Angle","qualifiers":["input"],"name":"phi","comment":"phase angle","value":"0"},{"className":"SI.Voltage","qualifiers":["array","output"],"name":"v","comment":"phase to neutral voltages","arraySubscripts":"[n]"}]},"Buildings.Electrical.Icons.GeneralizedProbe":{"name":"Buildings.Electrical.Icons.GeneralizedProbe","comment":"Icon representing a generalized probe that measures voltage, and phase angle","qualifiers":["class","partial"],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is the icon for a probe that measure voltage magnitude and phase.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Ellipse(),Polygon(),Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Text()})"}},"Buildings.Electrical.AC.Interfaces.PowerOutput":{"name":"Buildings.Electrical.AC.Interfaces.PowerOutput","comment":"Connector with real power, reactive power and power factor","qualifiers":["connector"],"components":[{"className":"Modelica.SIunits.Power","qualifiers":["output"],"name":"real","comment":"Real power"},{"className":"Modelica.SIunits.ReactivePower","qualifiers":["output"],"name":"apparent","comment":"Apparent power"},{"className":"Modelica.SIunits.Angle","qualifiers":["output"],"name":"phi","comment":"Phase shift"},{"className":"Real","qualifiers":["output"],"name":"cosPhi","comment":"Power factor"}],"annotations":{"diagram":"Diagram(graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\nThis connector contains multiple quantities that can be used to monitor\nthe power consumption of a generic AC systems.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()})"}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.ReferenceAngle":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.ReferenceAngle","comment":"Reference angle for connector","superClasses":[{"nameOfExtendedClass":"Modelica.SIunits.Angle"}],"classes":[{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.ReferenceAngle.equalityConstraint","comment":"Assert that angles are equal","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"ReferenceAngle","qualifiers":["array","input"],"name":"theta1","arraySubscripts":"[:]"},{"className":"ReferenceAngle","qualifiers":["array","input"],"name":"theta2","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["array","output"],"name":"residue","arraySubscripts":"[0]"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type defines the voltage angle (used by the phasorial approach) for a specific connector that extends\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.PhaseSystems.PartialPhaseSystem\\\"\u003e\nBuildings.Electrical.PhaseSystems.PartialPhaseSystem\u003c/a\u003e.\n\u003c/html\u003e\""}},"Buildings.Fluid.Types.EfficiencyCurves":{"name":"Buildings.Fluid.Types.EfficiencyCurves","comment":"Enumeration to define the efficiency curves","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Constant","comment":"constant"},{"className":"EnumType","qualifiers":["constant"],"name":"Polynomial","comment":"Polynomial"},{"className":"EnumType","qualifiers":["constant"],"name":"QuadraticLinear","comment":"quadratic in x1, linear in x2"}]},"Buildings.Electrical.AC.OnePhase.Sources.Grid":{"name":"Buildings.Electrical.AC.OnePhase.Sources.Grid","comment":"Electrical grid","qualifiers":["model"],"components":[{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_p","qualifiers":["replaceable"],"name":"terminal","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-110},{10,-90}}), iconTransformation(extent \u003d {{-10,-110},{10,-90}}))"}},{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Frequency of the source","modifications":[{"name":"start","value":"60"}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"RMS voltage of the source","modifications":[{"name":"start","value":"110"}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phiSou","comment":"Phase shift angle of the source","value":"0"},{"className":"Buildings.Electrical.AC.Interfaces.PowerOutput","name":"P","comment":"Power consumed from grid if negative, or fed to grid if positive","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Buildings.Electrical.AC.OnePhase.Sources.FixedVoltage","qualifiers":["replaceable"],"name":"sou","comment":"Voltage source","modifications":[{"name":"potentialReference","value":"true"},{"name":"definiteReference","value":"true"},{"name":"f","qualifiers":["final"],"value":"f"},{"name":"V","qualifiers":["final"],"value":"V"},{"name":"phiSou","qualifiers":["final"],"value":"phiSou"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{10,-10},{-10,10}}, origin \u003d {10,0}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that can be used to represent the electrical grid supply.\n\u003c/p\u003e\n\u003cp\u003e\nThe model has an output connector named \u003ccode\u003eP\u003c/code\u003e that\ncontains information about the power supplied by the grid to the network.\nThe convention is that \u003ccode\u003eP.real\u003c/code\u003e is positive if real power is\nconsumed from the grid, and negative if it is fed into the grid.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eV\u003c/code\u003e is the root means square of the voltage.\nIn US households, this is \u003ci\u003e120\u003c/i\u003e Volts at \u003ci\u003e60\u003c/i\u003e Hz,\nin Europe it is \u003ci\u003e230\u003c/i\u003e Volts at \u003ci\u003e50\u003c/i\u003e Hz.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Fluid.HeatExchangers.HeaterCooler_T":{"name":"Buildings.Fluid.HeatExchangers.HeaterCooler_T","comment":"Ideal heater or cooler with a prescribed outlet temperature","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface"},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance","qualifiers":["final"],"value":"abs(dp_nominal)\u003eModelica.Constants.eps"}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PrescribedOutletStateParameters","modifications":[{"name":"T_start","value":"Medium.T_default"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TSet","comment":"Set point temperature of the fluid that leaves port_b","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,40},{-100,80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"Q_flow","comment":"Heat added to the fluid (if flow is from port_a to port_b)","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for an ideal heater or cooler with a prescribed outlet temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThis model forces the outlet temperature at \u003ccode\u003eport_b\u003c/code\u003e to be equal to the temperature\nof the input signal \u003ccode\u003eTSet\u003c/code\u003e, subject to optional limits on the\nheating or cooling capacity \u003ccode\u003eQ_flow_max\u003c/code\u003e and \u003ccode\u003eQ_flow_min\u003c/code\u003e.\nFor unlimited capacity, set \u003ccode\u003eQ_flow_maxHeat \u003d Modelica.Constant.inf\u003c/code\u003e\nand \u003ccode\u003eQ_flow_maxCool\u003d-Modelica.Constant.inf\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe output signal \u003ccode\u003eQ_flow\u003c/code\u003e is the heat added (for heating) or subtracted (for cooling)\nto the medium if the flow rate is from \u003ccode\u003eport_a\u003c/code\u003e to \u003ccode\u003eport_b\u003c/code\u003e.\nIf the flow is reversed, then \u003ccode\u003eQ_flow\u003d0\u003c/code\u003e.\nThe outlet temperature at \u003ccode\u003eport_a\u003c/code\u003e is not affected by this model.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003eenergyDynamics\u003c/code\u003e is not equal to\n\u003ccode\u003eModelica.Fluid.Types.Dynamics.SteadyState\u003c/code\u003e,\nthe component models the dynamic response using a first order differential equation.\nThe time constant of the component is equal to the parameter \u003ccode\u003etau\u003c/code\u003e.\nThis time constant is adjusted based on the mass flow rate using\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026tau;\u003csub\u003eeff\u003c/sub\u003e \u003d \u0026tau; |m\u0026#775;| \u0026frasl; m\u0026#775;\u003csub\u003enom\u003c/sub\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026tau;\u003csub\u003eeff\u003c/sub\u003e\u003c/i\u003e is the effective time constant for the given mass flow rate\n\u003ci\u003em\u0026#775;\u003c/i\u003e and\n\u003ci\u003e\u0026tau;\u003c/i\u003e is the time constant at the nominal mass flow rate\n\u003ci\u003em\u0026#775;\u003csub\u003enom\u003c/sub\u003e\u003c/i\u003e.\nThis type of dynamics is equal to the dynamics that a completely mixed\ncontrol volume would have.\n\u003c/p\u003e\n\u003cp\u003e\nOptionally, this model can have a flow resistance.\nIf no flow resistance is requested, set \u003ccode\u003edp_nominal\u003d0\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nFor a model that uses a control signal \u003ci\u003eu \u0026isin; [0, 1]\u003c/i\u003e and multiplies\nthis with the nominal heating or cooling power, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.HeaterCooler_u\\\"\u003e\nBuildings.Fluid.HeatExchangers.HeaterCooler_u\u003c/a\u003e\n\n\u003c/p\u003e\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nThis model only adds or removes heat for the flow from\n\u003ccode\u003eport_a\u003c/code\u003e to \u003ccode\u003eport_b\u003c/code\u003e.\nThe enthalpy of the reverse flow is not affected by this model.\n\u003c/p\u003e\n\u003cp\u003e\nThis model does not affect the humidity of the air. Therefore,\nif used to cool air below the dew point temperature, the water mass fraction\nwill not change.\n\u003c/p\u003e\n\u003ch4\u003eValidation\u003c/h4\u003e\n\u003cp\u003e\nThe model has been validated against the analytical solution in\nthe examples\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Validation.HeaterCooler_T\\\"\u003e\nBuildings.Fluid.HeatExchangers.Validation.HeaterCooler_T\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Validation.HeaterCooler_T_dynamic\\\"\u003e\nBuildings.Fluid.HeatExchangers.Validation.HeaterCooler_T_dynamic\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Text(),Rectangle(),Text()})"}},"Buildings.Electrical.PhaseSystems.TwoConductor.systemVoltage":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.systemVoltage","comment":"Return system voltage as function of phase voltages","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.systemVoltage"}]},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformer":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformer","comment":"AC AC transformer simplified equivalent circuit (YY)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Real","qualifiers":["parameter"],"name":"XoverR","comment":"Ratio between the complex and real components of the impedance (XL/R)"},{"className":"Real","qualifiers":["parameter"],"name":"Zperc","comment":"Short circuit impedance"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of transformer to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of transformer to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a simplified equivalent transformer model.\nThe model accounts for winding Joule losses and leakage reactances\nthat are represented by a series of a resistance \u003ci\u003eR\u003c/i\u003e and an\ninductance \u003ci\u003eL\u003c/i\u003e. The resistance and the inductance represent both the\neffects of the secondary and primary side of the transformer.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVhigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVlow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVAbase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXoverR\u003c/code\u003e - ratio between reactance and resistance, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZperc\u003c/code\u003e - the short circuit impedance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the resistance and inductance.\n\u003c/p\u003e\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/YY.png\\\"/\u003e\n\u003c/p\u003e\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phasePowers_vi":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phasePowers_vi","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phasePowers_vi"}]},"Buildings.Media.Specialized.Air.PerfectGas.dynamicViscosity":{"name":"Buildings.Media.Specialized.Air.PerfectGas.dynamicViscosity","comment":"dynamic viscosity of dry air","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.dynamicViscosity"}]},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos80slash1to12":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos80slash1to12","comment":"Pump data for a Wilo Stratos 80/1-12 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2610"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{8.79043600562e-06,0.00277777777778,0.00556874120956,0.00776635021097,0.00978815049226,0.0113484528833,0.0127329465541,0.013985583685,0.0154360056259}"},{"name":"P","value":"{437.425146701,588.954435301,792.603370491,931.705429399,1048.15648043,1115.77190985,1154.92222088,1171.51603429,1166.47479929}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{8.79043600562e-06,0.00277777777778,0.00556874120956,0.00776635021097,0.00978815049226,0.0113484528833,0.0127329465541,0.013985583685,0.0154360056259}"},{"name":"dp","value":"{78355.8975904,78243.6144578,78054.5060241,75596.0963855,70490.1686747,63682.2650602,55361.4939759,45527.8554217,30966.5060241}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/0000001700017d670001003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Fluid.Sensors.MassFraction":{"name":"Buildings.Fluid.Sensors.MassFraction","comment":"Ideal one port mass fraction sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor","modifications":[{"name":"Medium","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"}]},{"nameOfExtendedClass":"Buildings.Fluid.BaseClasses.IndexMassFraction","modifications":[{"name":"substanceName","value":"\"water\""}]},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"X","comment":"Mass fraction in port","modifications":[{"name":"min","value":"-1e-3"},{"name":"max","value":"1.001"},{"name":"unit","qualifiers":["final"],"value":"\"kg/kg\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the mass fraction of the fluid connected to its port.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Text(),Line()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.CronolineIL80slash220dash4slash4":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.CronolineIL80slash220dash4slash4","comment":"Pump data for a Wilo Cronoline-IL 80/220-4/4 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"use_powerCharacteristic","value":"true"},{"name":"speed_rpm_nominal","value":"1450"},{"name":"power","modifications":[{"name":"V_flow","value":"{0.00303454715219,0.00578898225957,0.00863678804855,0.0113912231559,0.0146125116713,0.0181605975724,0.0214285714286,0.0248366013072,0.0274042950514,0.0282446311858}"},{"name":"P","value":"{1905.29339941,2202.03582759,2548.86483304,2812.07908132,3146.06691483,3435.07911022,3592.75276695,3710.09774539,3774.78991597,3793.34692457}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{0.00303454715219,0.00578898225957,0.00863678804855,0.0113912231559,0.0146125116713,0.0181605975724,0.0214285714286,0.0248366013072,0.0274042950514,0.0282446311858}"},{"name":"dp","value":"{168215.17064,166653.242326,164291.843595,161128.282627,154367.77774,142807.085577,128439.498542,108468.216086,92889.3102384,86895.3009775}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eData from: \u003ca href\u003d\\\"http://productfinder.wilo.com/nl/BE/product/000000100002c2550002003a/fc_product_datasheet\\\"\u003ehttp://productfinder.wilo.com/nl/BE/product/000000100002c2550002003a/fc_product_datasheet\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003eBuildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6 \u003c/a\u003efor more information about how the data is derived. \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineResistance":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineResistance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineResistance"}],"components":[{"className":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall resistance of a cable.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe low voltage cable is described by a characteristic resistance per unit\nlength, given this value the overall resistance is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR \u003d R\u003csub\u003eCHA\u003c/sub\u003e l\u003csub\u003eCABLE\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eR\u003csub\u003eCHA\u003c/sub\u003e\u003c/i\u003e is the characteristic resistance per unit lenght, and\n\u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector":{"name":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","comment":"Generic data record providing inputs for specific collector data records","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"SolarCollectors.Types.Area","qualifiers":["parameter"],"name":"ATyp","comment":"Gross or aperture area"},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"A","comment":"Area"},{"className":"Modelica.SIunits.Mass","qualifiers":["parameter"],"name":"mDry","comment":"Dry weight"},{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"V","comment":"Fluid volume"},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp_nominal","comment":"Pressure drop during test conditions","modifications":[{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Real","qualifiers":["parameter"],"name":"mperA_flow_nominal","comment":"Mass flow rate per unit area of collector","modifications":[{"name":"unit","value":"\"kg/(s.m2)\""}]},{"className":"Real","qualifiers":["parameter"],"name":"B0","comment":"1st incident angle modifier coefficient"},{"className":"Real","qualifiers":["parameter"],"name":"B1","comment":"2nd incident angle modifier coefficient"},{"className":"Real","qualifiers":["parameter"],"name":"y_intercept","comment":"Y intercept (Maximum efficiency)"},{"className":"Real","qualifiers":["parameter"],"name":"slope","comment":"Slope from rating data","modifications":[{"name":"unit","value":"\"W/(m2.K)\""}]},{"className":"Real","qualifiers":["parameter"],"name":"IAMDiff","comment":"Incidence angle modifier from EN12975 ratings data"},{"className":"Real","qualifiers":["parameter"],"name":"C1","comment":"Heat loss coefficient from EN12975 ratings data"},{"className":"Real","qualifiers":["parameter"],"name":"C2","comment":"Temperature dependence of heat loss from EN12975 ratings data"},{"className":"Modelica.SIunits.Irradiance","qualifiers":["parameter"],"name":"G_nominal","comment":"Nominal solar irradiance specified in ratings data"},{"className":"Modelica.SIunits.TemperatureDifference","qualifiers":["parameter"],"name":"dT_nominal","comment":"Nominal temperature difference specified in ratings data"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n    Generic data file which is used for the\n    \u003ca href\u003d\\\"modelica://Buildings.Fluid.SolarCollectors.BaseClasses.PartialSolarCollector\\\"\u003e\n    Buildings.Fluid.Solarcollectors.BaseClasses.PartialSolarCollector\u003c/a\u003e model. It establishes\n    the base inputs needed to create model-specific data packages.\n  \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.Acknowledgements":{"name":"Buildings.UsersGuide.Acknowledgements","comment":"Acknowledgements","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Information"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003ch4\u003e\u003cfont color\u003d\\\"#008000\\\" size\u003d\\\"5\\\"\u003eAcknowledgements\u003c/font\u003e\u003c/h4\u003e\n\u003cp\u003e\n The development of this library was supported\n\u003c/p\u003e\n \u003cul\u003e\n \u003cli\u003eby the Assistant Secretary for\n  Energy Efficiency and Renewable Energy, Office of Building\n  Technologies of the U.S. Department of Energy, under\n  contract No. DE-AC02-05CH11231, and\n \u003c/li\u003e\n \u003cli\u003e\n  by the California Energy Commission, Public Interest Energy Research Program, Buildings End Use Energy Efficiency Program, award number 500-10-052.\n \u003c/li\u003e\n \u003c/ul\u003e\n\u003cp\u003e\nThe core of this library is the Annex 60 library,\na free open-source library with basic models that codify best practices for\nthe implementation of models for building and community energy and control systems.\nThe Annex 60 library is developed at\n\u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60\\\"\u003e\nhttps://github.com/iea-annex60/modelica-annex60\u003c/a\u003e\nwithin the Annex 60 project\n(\u003ca href\u003d\\\"http://www.iea-annex60.org\\\"\u003ehttp://www.iea-annex60.org\u003c/a\u003e)\nof the International Energy Agency\u0027s\n\u003ca href\u003d\\\"http://www.iea-ebc.org/\\\"\u003eEnergy in Buildings and Communities\u003c/a\u003e Programme.\n\u003c/p\u003e\n \u003cp\u003e\n  The \u003ca href\u003d\\\"modelica://Buildings.Airflow.Multizone\\\"\u003epackage for multizone airflow modeling\u003c/a\u003e\n  and the \u003ca href\u003d\\\"modelica://Buildings.Utilities.Comfort.Fanger\\\"\u003emodel for thermal comfort\u003c/a\u003e\n  was contributed by the United Technologies Research Center, which also contributed to the\n  validation of the \u003ca href\u003d\\\"modelica://Buildings.Rooms.MixedAir\\\"\u003eroom heat transfer model\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nWe thank Dietmar Winkler from Telemark University College for the various feedback that\nhelped improve the organization and structure of the library.\n\u003c/p\u003e\n\u003cp\u003e\nThe following people have directly contributed to the implementation of the Buildings library\n(many others have contributed by other means than model implementation):\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMarco Bonvini, Lawrence Berkeley National Laboratory, USA\n\u003c/li\u003e\n\u003cli\u003eRainer Czetina, University of Applied Sciences Technikum Wien, Austria\n\u003c/li\u003e\n\u003cli\u003eSebastian Giglmayr, University of Applied Sciences Technikum Wien, Austria\n\u003c/li\u003e\n\u003cli\u003ePeter Grant, Lawrence Berkeley National Laboratory, USA\n\u003c/li\u003e\n\u003cli\u003eBrandon M. Hencey, Cornell University, USA\n\u003c/li\u003e\n\u003cli\u003eRoman Ilk, University of Applied Sciences Technikum Wien, Austria\n\u003c/li\u003e\n\u003cli\u003eDan Li, University of Miami, Florida, USA\n\u003c/li\u003e\n\u003cli\u003eFilip Mathadon, KU Leuven, Belgium\n\u003c/li\u003e\n\u003cli\u003eThierry S. Nouidui, Lawrence Berkeley National Laboratory, USA\n\u003c/li\u003e\n\u003cli\u003eMarkus Nurschinger, University of Applied Sciences Technikum Wien, Austria\n\u003c/li\u003e\n\u003cli\u003eXiufeng Pang, Lawrence Berkeley National Laboratory, USA\n\u003c/li\u003e\n\u003cli\u003eDamien Picard, KU Leuven, Belgium\n\u003c/li\u003e\n\u003cli\u003eKaustubh Phalak, Lawrence Berkeley National Laboratory, USA\n\u003c/li\u003e\n\u003cli\u003eThomas Sevilla, University of Miami, Florida, USA\n\u003c/li\u003e\n\u003cli\u003eMartin Sj\u0026ouml;lund, Link\u0026ouml;ping University, Sweden\n\u003c/li\u003e\n\u003cli\u003eMatthis Thorade, Berlin University of the Arts, Germany\n\u003c/li\u003e\n\u003cli\u003eWei Tian, University of Miami, Florida, USA\n\u003c/li\u003e\n\u003cli\u003eArmin Teskeredzic, Mechanical Engineering Faculty Sarajevo and GIZ, Bosnia and Herzegovina\n\u003c/li\u003e\n\u003cli\u003eRafael Velazquez, University of Seville, Spain\n\u003c/li\u003e\n\u003cli\u003ePierre Vigouroux, Institut National des Sciences Appliquees, France\n\u003c/li\u003e\n\u003cli\u003eSebastian Vock, University of Applied Sciences Technikum Wien, Austria\n\u003c/li\u003e\n\u003cli\u003eVladimir Vukovic, Austrian Institute of Technology, Austria\n\u003c/li\u003e\n\u003cli\u003eMichael Wetter, Lawrence Berkeley National Laboratory, USA\n\u003c/li\u003e\n\u003cli\u003eWangda Zuo, University of Miami, Florida, USA\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.Functions.X_pSatpphi":{"name":"Buildings.Utilities.Psychrometrics.Functions.X_pSatpphi","comment":"Humidity ratio for given water vapor pressure","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.AbsolutePressure","qualifiers":["input"],"name":"pSat","comment":"Saturation pressure"},{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p","comment":"Pressure of the fluid"},{"className":"Real","qualifiers":["input"],"name":"phi","comment":"Relative humidity","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.MassFraction","qualifiers":["output"],"name":"X_w","comment":"Water vapor concentration per total mass of air","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"nominal","value":"0.01"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction to compute the water vapor concentration based on\nsaturation pressure, absolute pressure and relative humidity.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.ProbeDelta":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.ProbeDelta","comment":"Model of a probe that measures voltage magnitude and angle (Delta configuration)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.BaseClasses.GeneralizedProbe"}],"components":[{"className":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal_n","name":"term","comment":"Electrical connector","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,-90}))"}},{"className":"Interfaces.WyeToDelta","name":"wyeToDelta","comment":"Y to D transformation","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, origin \u003d {20,0}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a probe that measures the RMS voltage and the angle\nof the voltage phasors at a given point. The probes are connected\nin the Wye (Y) grounded configuration.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Line()})"}},"Buildings.Electrical.Icons.GeneralizedSensor":{"name":"Buildings.Electrical.Icons.GeneralizedSensor","comment":"Icon representing a generalized sensor that measures voltage, current and power","qualifiers":["class","partial"],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is the icon for ideal sensors that measure power, voltage and current.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Ellipse(),Line(),Polygon(),Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Line(),Text(),Text(),Text()})"}},"Buildings.Electrical.AC.OnePhase.Loads.Capacitive":{"name":"Buildings.Electrical.AC.OnePhase.Loads.Capacitive","comment":"Model of a capacitive and resistive load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.CapacitiveLoad","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\n\u003cp\u003e\nModel of an capacitive load. It may be used to model a bank of capacitors.\n\u003c/p\u003e\n\u003cp\u003e\nThe model computes the complex power vector as\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nS \u003d P + jQ \u003d V \u0026sdot; i\u003csup\u003e*\u003c/sup\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u003c/i\u003e is the voltage phasor and \u003ci\u003ei\u003csup\u003e*\u003c/sup\u003e\u003c/i\u003e is the complex\nconjugate of the current phasor. The voltage and current phasors are shifted\nby an angle \u003ci\u003e\u0026phi;\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe load model takes as input the power consumed by the inductive load and\nthe power factor \u003ci\u003epf\u003dcos(\u0026phi;)\u003c/i\u003e. The power\ncan be either fixed using the parameter \u003ccode\u003eP_nominal\u003c/code\u003e, or\nit is possible to specify a variable power using the inputs \u003ccode\u003ey\u003c/code\u003e or\n\u003ccode\u003ePow\u003c/code\u003e.\n\nThe power factor can be either specified by the parameter \u003ccode\u003epf\u003c/code\u003e\nor using the input variable \u003ccode\u003epf_in\u003c/code\u003e.\n\nThe different modes can be selected with the parameter\n\u003ccode\u003emode\u003c/code\u003e and \u003ccode\u003euse_pf_in\u003c/code\u003e, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Load\\\"\u003e\nBuildings.Electrical.Interfaces.Load\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.CapacitiveLoad\\\"\u003e\nBuildings.Electrical.Interfaces.CapacitiveLoad\u003c/a\u003e for more information.\n\u003c/p\u003e\n\n\u003cp\u003e\nGiven the active power \u003ci\u003eP\u003c/i\u003e and the power factor \u003ci\u003epf\u003c/i\u003e the complex\npower \u003ci\u003eQ\u003c/i\u003e is computed as\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nQ \u003d - P  tan(arccos(pf)).\n\u003c/p\u003e\n\n\u003cp\u003e\nThe equations of the model can be rewritten as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e1\u003c/sub\u003e \u003d (P V\u003csub\u003e1\u003c/sub\u003e + Q V\u003csub\u003e2\u003c/sub\u003e)/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e),\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e2\u003c/sub\u003e \u003d (P V\u003csub\u003e2\u003c/sub\u003e - Q V\u003csub\u003e1\u003c/sub\u003e)/(V\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e + V\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e),\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003ei\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003ei\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003eV\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, and \u003ci\u003eV\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e\nare the real and imaginary parts of the current and voltage phasors.\n\u003c/p\u003e\n\u003cp\u003e\nThe nonlinearity of the model is due to the fact that the load consumes the power specified by the variables \u003ci\u003eP\u003c/i\u003e\nand \u003ci\u003eQ\u003c/i\u003e irrespectively of the voltage of the load.\n\u003c/p\u003e\n\u003cp\u003e\nWhen multiple loads are connected in a grid through cables that cause voltage drops,\nthe dimension of the system of nonlinear equations increases linearly with the number of loads.\nThis nonlinear system of equations introduces challenges during the initialization,\nas Newton solvers may diverge if initialized far from a solution, as well during the simulation.\nIn this situation, the model can be parameterized to use a linear approximation\nas discussed in the next section.\n\u003c/p\u003e\n\n\u003ch4\u003eLinearized model\u003c/h4\u003e\n\u003cp\u003e\nGiven the constraints and the two-dimensional nature of the problem, it is difficult to\nfind a linearized version of the AC load model. A solution could be to divide the voltage\ndomain into sectors, and for each sector compute the best linear approximation.\nHowever the selection of the proper approximation depending on the value of the\nvoltage can generate events that increase the simulation time. For these reasons, the\nlinearized model assumes a voltage that is equal to the nominal value\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e1\u003c/sub\u003e \u003d (P V\u003csub\u003e1\u003c/sub\u003e + Q V\u003csub\u003e2\u003c/sub\u003e)/V\u003csub\u003eRMS\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni\u003csub\u003e2\u003c/sub\u003e \u003d (P V\u003csub\u003e2\u003c/sub\u003e - Q V\u003csub\u003e1\u003c/sub\u003e)/V\u003csub\u003eRMS\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003eRMS\u003c/sub\u003e\u003c/i\u003e is the Root Mean Square voltage os the AC system.\nEven though this linearized version of the load model introduces an approximation\nerror in the current, it satisfies the contraints related to the ratio of the\nactive and reactive powers.\n\u003c/p\u003e\n\n\u003ch4\u003eInitialization\u003c/h4\u003e\n\u003cp\u003e\nThe initialization problem can be simplified using the homotopy operator. The homotopy operator\nuses two different types of equations to compute the value of a variable: the actual one\nand a simplified one. The actual equation is the one used during the normal operation.\nDuring initialization, the simplified equation is first solved and then slowly replaced\nwith the actual equation to compute the initial values for the nonlinear systems of\nequations. The load model uses the homotopy operator, with the linearized model being used\nas the simplified equation. This numerical expedient has proven useful when simulating models\nwith more than ten connected loads.\n\u003c/p\u003e\n\u003cp\u003e\nThe load model has a parameter \u003ccode\u003einitMode\u003c/code\u003e that can be used to select\nthe assumption to use during the initialization phase by the homotopy operator.\nThe choices are between a null current or the linearized model.\n\u003c/p\u003e\n\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Line(),Line(),Line(),Line(),Rectangle(),Text()})"}},"Buildings.Fluid.Sensors.EnthalpyFlowRate":{"name":"Buildings.Fluid.Sensors.EnthalpyFlowRate","comment":"Ideal enthalphy flow rate sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"H_flow","comment":"Enthalpy flow rate, positive if from port_a to port_b","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"W\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90))"}},{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["parameter"],"name":"h_out_start","comment":"Initial or guess value of measured specific enthalpy","value":"Medium.specificEnthalpy_pTX()","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the enthalphy flow rate of the medium in the flow\nbetween fluid ports. The sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then the measured\nspecific enthalpy \u003ci\u003eh\u003csub\u003eout\u003c/sub\u003e\u003c/i\u003e that is used to\ncompute the enthalpy flow rate\n\u003ci\u003eH\u0026#775; \u003d m\u0026#775; h\u003csub\u003eout\u003c/sub\u003e\u003c/i\u003e\nis computed using a first order differential equation.\nSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003cp\u003e\nFor a sensor that measures the latent enthalpy flow rate, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.LatentEnthalpyFlowRate\\\"\u003e\nBuildings.Fluid.Sensors.LatentEnthalpyFlowRate\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Line(),Text()})"}},"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.PVSimple":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.PVSimple","comment":"Model of a simple PV panel","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Sources.PVSimple","modifications":[{"name":"terminal"},{"name":"load"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.PVSimple\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.PVSimple\u003c/a\u003e for\nmore information.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.Functions.TDewPoi_pW":{"name":"Buildings.Utilities.Psychrometrics.Functions.TDewPoi_pW","comment":"Function to compute the water vapor partial pressure for a given dew point temperature of moist air","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p_w","comment":"Water vapor partial pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"200"}]},{"className":"Modelica.SIunits.Temperature","qualifiers":["output"],"name":"T","comment":"Dew point temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nDew point temperature calculation for moist air above freezing temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThe correlation used in this model is valid for dew point temperatures between\n\u003ci\u003e0\u003c/i\u003e\u0026deg;C and \u003ci\u003e200\u003c/i\u003e\u0026deg;C. It is the correlation from 2005\nASHRAE Handbook, p. 6.2. In an earlier version of this model, the equation from\nPeppers has been used, but this equation yielded about \u003ci\u003e15\u003c/i\u003e Kelvin lower dew point\ntemperatures.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_d.systemVoltage":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_d.systemVoltage","comment":"Return system voltage as function of phase voltages","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Voltage","qualifiers":["array","input"],"name":"v","arraySubscripts":"[n]"},{"className":"SI.Voltage","qualifiers":["output"],"name":"V"}]},"Buildings.HeatTransfer.Sources.FixedHeatFlow":{"name":"Buildings.HeatTransfer.Sources.FixedHeatFlow","comment":"Fixed heat flow boundary condition","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"Q_flow","comment":"Fixed heat flow rate at port"},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"port","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Polygon(),Polygon()})","documentationInfo":"info \u003d \"\u003cHTML\u003e\n\u003cp\u003e\nThis model allows a specified amount of heat flow rate to be \\\"injected\\\"\ninto a thermal system at a given port.  The constant amount of heat\nflow rate Q_flow is given as a parameter. The heat flows into the\ncomponent to which the component FixedHeatFlow is connected,\nif parameter Q_flow is positive.\n\u003c/p\u003e\n\u003cp\u003e\nThis model is identical to\n\u003ca href\u003d\\\"modelica://Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow\\\"\u003e\nModelica.Thermal.HeatTransfer.Sources.FixedHeatFlow\u003c/a\u003e, except that\nthe parameters \u003ccode\u003ealpha\u003c/code\u003e and \u003ccode\u003eT_ref\u003c/code\u003e have\nbeen deleted as these can cause division by zero in some fluid flow models.\n\u003c/p\u003e\n\u003c/HTML\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Line(),Line(),Polygon(),Polygon(),Rectangle()})"}},"Buildings.Fluid.SolarCollectors.Data.Concentrating.C_VerificationModel":{"name":"Buildings.Fluid.SolarCollectors.Data.Concentrating.C_VerificationModel","comment":"C - All inputs necessary for verification of EN12975 models","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","modifications":[{"name":"ATyp","qualifiers":["final"],"value":"Types.Area.Aperture"},{"name":"A","qualifiers":["final"],"value":"4.302"},{"name":"V","qualifiers":["final"],"value":"4.4/(1000)"},{"name":"dp_nominal","qualifiers":["final"],"value":"100"},{"name":"mperA_flow_nominal","qualifiers":["final"],"value":"0.0241"},{"name":"y_intercept","qualifiers":["final"],"value":"0.720"},{"name":"IAMDiff","qualifiers":["final"],"value":"0.133"},{"name":"C1","qualifiers":["final"],"value":"2.8312"},{"name":"C2","qualifiers":["final"],"value":"0.00119"},{"name":"B0","qualifiers":["final"],"value":"0"},{"name":"B1","qualifiers":["final"],"value":"0"},{"name":"mDry","qualifiers":["final"],"value":"484"},{"name":"slope","qualifiers":["final"],"value":"0"},{"name":"G_nominal","qualifiers":["final"],"value":"1000"},{"name":"dT_nominal","qualifiers":["final"],"value":"20"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n      \u003cp\u003e\n        No model on the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e Solar Rating and\n        Certification Corporation \u003c/a\u003e website tested to EN12975 standards provides all\n        of the necessary information for modeling. Specific limitations are\n        \u003ccode\u003edp_nominal\u003c/code\u003e, \u003ccode\u003eG_nominal\u003c/code\u003e and \u003ccode\u003edT_nominal\u003c/code\u003e.\n        This data record was created to allow verification of EN12975 base classes\n        despite the limitations in available data.\n      \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n      \u003cp\u003e\n        No model on the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e Solar Rating and\n        Certification Corporation \u003c/a\u003e website tested to EN12975 standards provides all\n        of the necessary information for modeling. Specific limitations are\n        \u003ccode\u003edp_nominal\u003c/code\u003e, \u003ccode\u003eG_nominal\u003c/code\u003e and \u003ccode\u003edT_nominal\u003c/code\u003e.\n        This data record was created to allow verification of EN12975 base classes\n        despite the limitations in available data.\n      \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.SolarCollectors.Data.Tubular.T_AMKCollectraAGOWR20":{"name":"Buildings.Fluid.SolarCollectors.Data.Tubular.T_AMKCollectraAGOWR20","comment":"T - AMG Collectra AG, OWR 20","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","modifications":[{"name":"ATyp","qualifiers":["final"],"value":"Types.Area.Gross"},{"name":"A","qualifiers":["final"],"value":"3.457"},{"name":"mDry","qualifiers":["final"],"value":"73"},{"name":"V","qualifiers":["final"],"value":"3.5/(1000)"},{"name":"dp_nominal","qualifiers":["final"],"value":"100"},{"name":"mperA_flow_nominal","qualifiers":["final"],"value":"0.0201"},{"name":"B0","qualifiers":["final"],"value":"0.5722"},{"name":"B1","qualifiers":["final"],"value":"-0.0052"},{"name":"y_intercept","qualifiers":["final"],"value":"0.446"},{"name":"slope","qualifiers":["final"],"value":"-1.432"},{"name":"IAMDiff","qualifiers":["final"],"value":"0"},{"name":"C1","qualifiers":["final"],"value":"0"},{"name":"C2","qualifiers":["final"],"value":"0"},{"name":"G_nominal","qualifiers":["final"],"value":"1000"},{"name":"dT_nominal","qualifiers":["final"],"value":"10"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e.\n        SRCC# \u003d 2012018A.\n      \u003c/p\u003e\n      \u003cp\u003e\n        The ratings provided for \u003ccode\u003edp_nominal\u003c/code\u003e were suspicious\n        so 100 Pa is used instead.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e.\n        SRCC# \u003d 2012018A.\n      \u003c/p\u003e\n      \u003cp\u003e\n        The ratings provided for \u003ccode\u003edp_nominal\u003c/code\u003e were suspicious\n        so 100 Pa is used instead.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.thermalConductivity":{"name":"Buildings.Media.Specialized.Air.PerfectGas.thermalConductivity","comment":"Thermal conductivity of dry air as a polynomial in the temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.thermalConductivity"}]},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.systemCurrent":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.systemCurrent","comment":"Return system current as function of phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.systemCurrent"}]},"Buildings.Media.Air.isobaricExpansionCoefficient":{"name":"Buildings.Media.Air.isobaricExpansionCoefficient","comment":"Isobaric expansion coefficient beta","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.isobaricExpansionCoefficient"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the isobaric expansion coefficient at constant pressure,\nwhich is zero for this medium.\nThe isobaric expansion coefficient at constant pressure is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026beta;\u003csub\u003ep\u003c/sub\u003e \u003d - 1 \u0026frasl; v \u0026nbsp; (\u0026part; v \u0026frasl; \u0026part; T)\u003csub\u003ep\u003c/sub\u003e \u003d 0,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ev\u003c/i\u003e is the specific volume,\n\u003ci\u003eT\u003c/i\u003e is the temperature and\n\u003ci\u003ep\u003c/i\u003e is the pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.Grid_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.Grid_N","comment":"Electrical grid with neutral cable","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Frequency of the source","modifications":[{"name":"start","value":"60"}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"RMS voltage of the source","modifications":[{"name":"start","value":"480"}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phiSou","comment":"Phase shift of the source","value":"0"},{"className":"Buildings.Electrical.AC.Interfaces.PowerOutput","qualifiers":["array"],"name":"P","comment":"Power consumed from grid if negative, or fed to grid if positive","arraySubscripts":"[3]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal4_p","name":"terminal","comment":"Connector for three-phase unbalanced systems","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-110},{10,-90}}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,-100}))"}},{"className":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.FixedVoltage_N","name":"sou","comment":"Voltage source","modifications":[{"name":"potentialReference","value":"true"},{"name":"definiteReference","value":"true"},{"name":"f","value":"f"},{"name":"V","value":"V"},{"name":"phiSou","value":"phiSou"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{10,-10},{-10,10}}, origin \u003d {10,0}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that can be used to represent the electrical grid supply with a neutral cable connection.\nThe neutral cable is connected to the ground.\n\u003c/p\u003e\n\u003cp\u003e\nThe model has an output connector named \u003ccode\u003eP[n]\u003c/code\u003e with \u003ccode\u003en \u003d 3\u003c/code\u003e that\ncontains information about the power supplied by the grid to the network.\nThe convention is that \u003ccode\u003eP[i].real\u003c/code\u003e is positive if real power is\nconsumed from the grid, and negative if it is fed into the grid.\nThe connector has size equal to three because each element\nof the vector refers to a single phase.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eV\u003c/code\u003e is the root means square of the voltage.\nIn US, a typical value \u003ci\u003e480\u003c/i\u003e Volts.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Fluid.Sensors.VolumeFlowRate":{"name":"Buildings.Fluid.Sensors.VolumeFlowRate","comment":"Ideal sensor for volume flow rate","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Medium.Density","qualifiers":["parameter"],"name":"d_start","comment":"Initial or guess value of density","value":"Medium.density(Medium.setState_pTX(p_start,T_start,X_start))","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_start","comment":"Temperature used to compute d_start","value":"Medium.T_default","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Pressure","qualifiers":["parameter"],"name":"p_start","comment":"Pressure used to compute d_start","value":"Medium.p_default","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.MassFraction","qualifiers":["array","parameter"],"name":"X_start","comment":"Mass fraction used to compute d_start","value":"Medium.X_default","arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"V_flow","comment":"Volume flow rate from port_a to port_b","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"VolumeFlowRate\""},{"name":"unit","qualifiers":["final"],"value":"\"m3/s\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the volume flow rate flowing from\n\u003ccode\u003eport_a\u003c/code\u003e to \u003ccode\u003eport_b\u003c/code\u003e.\nThe sensor is ideal, i.e., it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then the measured\ndensity that is used to convert the mass flow rate into\nvolumetric flow rate is computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.Utilities.Math.Functions.biquadratic":{"name":"Buildings.Utilities.Math.Functions.biquadratic","comment":"Biquadratic function","components":[{"className":"Real","qualifiers":["array","input"],"name":"a","comment":"Coefficients","arraySubscripts":"[6]"},{"className":"Real","qualifiers":["input"],"name":"x1","comment":"Independent variable"},{"className":"Real","qualifiers":["input"],"name":"x2","comment":"Independent variable"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis function computes\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  y \u003d   a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\n        + a\u003csub\u003e3\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n        + a\u003csub\u003e4\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e + a\u003csub\u003e5\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e\n        + a\u003csub\u003e6\u003c/sub\u003e  x\u003csub\u003e1\u003c/sub\u003e  x\u003csub\u003e2\u003c/sub\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_1_2_build1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_2_build1","comment":"Version 1.2 build 1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIn version 1.2 build 1, models for radiant slabs and window overhangs and sidefins have been added.\nThis version also contains various improvements to existing models.\nA detailed list of changes is shown below.\n\u003c!-- New libraries --\u003e\n\u003c/p\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\"\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.RadiantSlabs\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003ePackage with models for radiant slabs\n                       with pipes or a capillary heat exchanger\n                       embedded in the construction.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Data.Pipes\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003ePackage with records for pipes.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- New components for existing libraries --\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.FixedShade\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.Overhang\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.SideFins\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFor windows with either an overhang or side fins,\n                       these blocks output the fraction of the area\n                       that is sun exposed.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.Examples.BESTEST\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded BESTEST validation models for case 610, 620, 630, 640,\n                       650FF, 650, 920, 940, 950FF, 950, and 960.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Backward compatible changes --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved assignment of \u003ccode\u003eHGloHor_in\u003c/code\u003e in its declaration,\n                       because this gives an overdetermined system if the input connector\n                       is used.\u003cbr/\u003e\n                       Added new sub-bus that contains the solar position.\n                       This allows reusing the solar position in various other models.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SolarIrradiation.DiffuseIsotropic\u003cbr/\u003e\n                       Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez\u003cbr/\u003e\n                       Buildings.BoundaryConditions.SolarIrradiation.BaseClasses.DiffuseIsotropic\u003cbr/\u003e\n                       Buildings.BoundaryConditions.SolarIrradiation.BaseClasses.DiffusePerez\u003cbr/\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded optional output of diffuse radiation from the sky and ground.\n                       This allows reusing the diffuse radiation in solar thermal collector.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SolarGeometry.BaseClasses.SolarAzimuth\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged implementation to avoid an event at solar noon.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Data.BoreholeFillings\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n                       Renamed class to \u003ccode\u003eBoreholeFillings\u003c/code\u003e\n                       to be consistent with data records being plural.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Media\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.GasesPTDecoupled.MoistAir\u003cbr/\u003e\n                       Buildings.Media.Air\u003cbr/\u003e\n                       Buildings.Media.PerfectGases.MoistAir\u003cbr/\u003e\n                       Buildings.Media.PerfectGases.MoistAirUnsaturated\u003cbr/\u003e\n                       Buildings.Media.GasesConstantDensity.MoistAir\u003cbr/\u003e\n                       Buildings.Media.GasesConstantDensity.MoistAirUnsaturated\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded redeclaration of \u003ccode\u003eThermodynamicState\u003c/code\u003e\n                       to avoid a warning\n                       during model check and translation.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a check that ensures that the number of surfaces\n                       are equal to the length of the parameter that contains\n                       the surface area, and added a check to ensure that no surface area\n                       is equal to zero. These checks help detecting erroneous declarations\n                       of the room model. The changes were done in\n                       \u003ccode\u003eBuildings.Rooms.MixedAir.PartialSurfaceInterface\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Non-backward compatbile changes to existing components --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded optional modeling of window overhangs and side fins.\n                       The modeling of window overhangs and side fins required the\n                       introduction of the new parameters\n                       \u003ccode\u003ehWin\u003c/code\u003e for the window height and\n                       \u003ccode\u003ewWin\u003c/code\u003e for the window width, in addition to the\n                       parameters \u003ccode\u003eove\u003c/code\u003e and \u003ccode\u003esidFin\u003c/code\u003e which are used\n                       to declare the geometry of overhangs and side fins.\n                       The parameters \u003ccode\u003ehWin\u003c/code\u003e and \u003ccode\u003ewWin\u003c/code\u003e\n                       replace the previously used parameter \u003ccode\u003eAWin\u003c/code\u003e for the\n                       window area.\n                       Users need to manually replace \u003ccode\u003eAWin\u003c/code\u003e with \u003ccode\u003ehWin\u003c/code\u003e\n                       and \u003ccode\u003ewWin\u003c/code\u003e when updating models\n                       from a previous version of the library.\u003cbr/\u003e\n                       See the information section in\n                       \u003ca href\u003d\\\"modelica://Buildings.Rooms.MixedAir\\\"\u003e\n                       Buildings.Rooms.MixedAir\u003c/a\u003e for how to use these models.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Controls\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.SetPoints.OccupancySchedule\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n                      Fixed a bug that caused an error in the schedule if the simulation start time was negative or equal to the first entry in the schedule.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.BaseClass.ThirdOrderStratifier\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRevised the implementation to reduce the temperature overshoot.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.BaseClasses.GlassLayer\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed the bug in the temperature linearization and\n                       in the heat flow through the glass layer if the transmissivity of glass\n                       in the infrared regime is non-zero.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.BaseClasses.CenterOfGlass\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed a bug in the parameter assignment of the instance \u003ccode\u003eglass\u003c/code\u003e.\n                       Previously, the infrared emissivity of surface a was assigned to the surface b.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.IO.BCVTB\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a call to \u003ccode\u003eBuildings.Utilities.IO.BCVTB.BaseClasses.exchangeReals\u003c/code\u003e\n                       in the \u003ccode\u003einitial algorithm\u003c/code\u003e section.\n                       This is needed to propagate the initial condition to the server.\n                       It also leads to one more data exchange, which is correct and avoids the\n                       warning message in Ptolemy that says that the simulation reached its stop time\n                       one time step prior to the final time.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected the documentation of the unit requirement for\n                       input files, parameters and connectors.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialFourPortInterface\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.PartialTwoPortInterface\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReplaced the erroneous function call \u003ccode\u003eMedium.density\u003c/code\u003e with\n                       \u003ccode\u003eMedium1.density\u003c/code\u003e and \u003ccode\u003eMedium2.density\u003c/code\u003e in\n                        \u003ccode\u003ePartialFourPortInterface\u003c/code\u003e.\n                       Changed condition to remove \u003ccode\u003esta_a1\u003c/code\u003e and\n                       \u003ccode\u003esta_a2\u003c/code\u003e in \u003ccode\u003ePartialFourPortInterface\u003c/code\u003e, and\n                       \u003ccode\u003esta_a\u003c/code\u003e in \u003ccode\u003ePartialTwoPortInterface\u003c/code\u003e, to also\n                       compute the state at the inlet port if \u003ccode\u003eshow_V_flow\u003dtrue\u003c/code\u003e.\u003cbr/\u003e\n                       The previous implementation resulted in a translation error\n                       if \u003ccode\u003eshow_V_flow\u003dtrue\u003c/code\u003e, but worked correctly otherwise\n                       because the erroneous function call is removed if  \u003ccode\u003eshow_V_flow\u003dfalse\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Chillers.Examples.BaseClasses.PartialElectric\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected the nominal mass flow rate used in the mass flow source.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eHeat transfer in glass layer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/56\\\"\u003e\u0026#35;56\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug in heat flow through the glass layer if the infrared transmissivity is non-zero.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/57\\\"\u003e\u0026#35;57\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug in temperature linearization of window glass.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eOvershooting in enhanced stratified tank\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/15\\\"\u003e\u0026#35;15\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRevised the implementation to reduce the temperature over-shoot.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Convection.Interior":{"name":"Buildings.HeatTransfer.Convection.Interior","comment":"Model for a interior (room-side) convective heat transfer","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Convection.BaseClasses.PartialConvection"}],"components":[{"className":"Buildings.HeatTransfer.Types.InteriorConvection","qualifiers":["parameter"],"name":"conMod","comment":"Convective heat transfer model","value":"Buildings.HeatTransfer.Types.InteriorConvection.Fixed"},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model for a convective heat transfer for interior, room-facing surfaces.\nThe parameter \u003ccode\u003econMod\u003c/code\u003e determines the model that is used to compute\nthe heat transfer coefficient:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003econMod\u003d\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Types.InteriorConvection\\\"\u003e\nBuildings.HeatTransfer.Types.InteriorConvection.Fixed\u003c/a\u003e\u003c/code\u003e, then\nthe convective heat transfer coefficient is set to the value specified by the parameter\n\u003ccode\u003ehFixed\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nIf \u003ccode\u003econMod\u003d\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Types.InteriorConvection\\\"\u003e\nBuildings.HeatTransfer.Types.InteriorConvection.Temperature\u003c/a\u003e\u003c/code\u003e, then\nthe convective heat tranfer coefficient is a function of the temperature difference.\nThe convective heat flux is computed using\n\u003cul\u003e\n\u003cli\u003e\nfor floors the function\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Functions.HeatFlux.floor\\\"\u003e\nBuildings.HeatTransfer.Convection.Functions.HeatFlux.floor\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\nfor ceilings the function\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Functions.HeatFlux.ceiling\\\"\u003e\nBuildings.HeatTransfer.Convection.Functions.HeatFlux.ceiling\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\nfor walls the function\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Functions.HeatFlux.wall\\\"\u003e\nBuildings.HeatTransfer.Convection.Functions.HeatFlux.wall\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Line(),Line(),Line(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.temperature":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.temperature","comment":"Return the temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the temperature.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.ProbeWye_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.ProbeWye_N","comment":"Model of a probe that measures voltage magnitude and angle (Wye configuration) witn neutral cable connection","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.BaseClasses.GeneralizedProbe"}],"components":[{"className":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal4_n","name":"term","comment":"Electrical connector","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,-90}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a probe that measures the RMS voltage and the angle\nof the voltage phasors at a given point. The probes are connected\nin the Wye (Y) grounded configuration.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line()})"}},"Buildings.BoundaryConditions.SolarGeometry.IncidenceAngle":{"name":"Buildings.BoundaryConditions.SolarGeometry.IncidenceAngle","comment":"Solar incidence angle on a tilted surface","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"til","comment":"Surface tilt"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"Incidence angle","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Angle\""},{"name":"unit","qualifiers":["final"],"value":"\"rad\""},{"name":"displayUnit","value":"\"deg\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"WeatherData.Bus","name":"weaBus","comment":"Weather data","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the solar incidence angle on a tilted surface.\nFor a definition of the parameters, see the User\u0027s Guide\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.UsersGuide\\\"\u003eBuildings.BoundaryConditions.UsersGuide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Bitmap()})"}},"Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformerFull":{"name":"Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformerFull","comment":"AC AC transformer with detailed equivalent circuit","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Icons.RefAngleConversion"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialConversion","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"RMS voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"RMS voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Nominal frequency","modifications":[{"name":"start","value":"60"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"R1","comment":"Resistance on side 1 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"L1","comment":"Inductance on side 1 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"R2","comment":"Resistance on side 2 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"L2","comment":"Inductance on side 2 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"magEffects","comment":"If true, introduce magnetization effects","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Magnetization\")"}},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"Rm","comment":"Magnetization resistance (pu)","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Magnetization\", enable \u003d magEffects)"}},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"Lm","comment":"Magnetization inductance (pu)","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Magnetization\", enable \u003d magEffects)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of converter to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phi_1","comment":"Angle of the voltage side 1 at initialization","value":"0","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phi_2","comment":"Angle of the voltage side 2 at initialization","value":"phi_1","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Efficiency","name":"eta","comment":"Efficiency"},{"className":"Modelica.SIunits.Power","qualifiers":["array"],"name":"PLoss","comment":"Loss power","arraySubscripts":"[2]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a detailed transformer model that takes into account the winding Joule losses\nand the leakage reactances on both primary and secondary side. The model also describes\nthe core or iron losses and the losses due to magnetization effects.\n\u003c/p\u003e\n\u003cp\u003e\nThe losses are represented by a series of resistances \u003ci\u003eR\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003eR\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e,\n\u003ci\u003eR\u003csub\u003em\u003c/sub\u003e\u003c/i\u003e and inductances \u003ci\u003eL\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003eL\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, and\n\u003ci\u003eL\u003csub\u003em\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVHigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVLow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVABase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ef\u003c/code\u003e - frequency,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR_1, L_1\u003c/code\u003e - resistance and inductance at primary side (per unit),\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR_2, L_2\u003c/code\u003e - resistance and inductance at secondary side (per unit), and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR_m, L_m\u003c/code\u003e - resistance and inductance for magnetization effects (per unit).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the nominal impedances\nat both primary and secondary side. Given these values, the per unit values are transformed into\nthe actual values of the resistances and inductances.\n\u003c/p\u003e\n\u003cp\u003e\nThe magnetization losses can be enabled or disabled using the boolean flag \u003ccode\u003emagEffects\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Text(),Text(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Electrical.Icons.RefAngleConversion":{"name":"Buildings.Electrical.Icons.RefAngleConversion","comment":"Icon that represents if the angle symble should be displayed or not","qualifiers":["model","partial"],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is the icon that conditionally draws the angle symbol for a\nconversion model (e.g., a transformer).\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Fluid.HeatExchangers.HeaterCooler_u":{"name":"Buildings.Fluid.HeatExchangers.HeaterCooler_u","comment":"Heater or cooler with prescribed heat flow rate","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger","modifications":[{"name":"vol","qualifiers":["final"]}]}],"components":[{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"Q_flow_nominal","comment":"Heat flow rate at u\u003d1, positive for heating"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"u","comment":"Control input","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,40},{-100,80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"Q_flow","comment":"Heat added to the fluid","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for an ideal heater or cooler with prescribed heat flow rate to the medium.\n\u003c/p\u003e\n\u003cp\u003e\nThis model adds heat in the amount of \u003ccode\u003eQ_flow \u003d u Q_flow_nominal\u003c/code\u003e to the medium.\nThe input signal \u003ccode\u003eu\u003c/code\u003e and the nominal heat flow rate \u003ccode\u003eQ_flow_nominal\u003c/code\u003e\ncan be positive or negative.\n\u003c/p\u003e\n\u003cp\u003e\nOptionally, this model can have a flow resistance.\nIf no flow resistance is requested, set \u003ccode\u003edp_nominal\u003d0\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nFor a model that uses as an input the fluid temperature leaving at\n\u003ccode\u003eport_b\u003c/code\u003e, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.HeaterCooler_T\\\"\u003e\nBuildings.Fluid.HeatExchangers.HeaterCooler_T\u003c/a\u003e\n\u003c/p\u003e\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nThis model does not affect the humidity of the air. Therefore,\nif used to cool air below the dew point temperature, the water mass fraction\nwill not change.\n\u003c/p\u003e\n\u003ch4\u003eValidation\u003c/h4\u003e\n\u003cp\u003e\nThe model has been validated against the analytical solution in\nthe example\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Validation.HeaterCooler_u\\\"\u003e\nBuildings.Fluid.HeatExchangers.Validation.HeaterCooler_u\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Rectangle(),Text(),Text(),Rectangle()})"}},"Buildings.Controls.SetPoints.Table":{"name":"Buildings.Controls.SetPoints.Table","comment":"Model for a set point that is interpolated based on a user-specified table","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["array","parameter"],"name":"table","comment":"Table matrix ( e.g., table\u003d[u1, y1; u2, y2; u3, y3])","value":"fill(0.0,1,2)","arraySubscripts":"[:,2]"},{"className":"Real","qualifiers":["parameter"],"name":"offset","comment":"Offset of output signal","value":"0"},{"className":"Boolean","qualifiers":["parameter"],"name":"constantExtrapolation","comment":"If true, then y\u003dy1 for u\u003cu1, and y\u003dyMax for u\u003euMax","value":"true"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block can be used to schedule a set-point by using piecewise linear functions.\nFor example, the instances\n\u003c/p\u003e\n\u003cpre\u003e\nBuildings.Controls.SetPoints.Table tabLinExt(constantExtrapolation\u003dfalse,\n                                             table\u003d[20, 0.0;\n                                                    22, 0.5;\n                                                    25, 0.5;\n                                                    26, 1.0]);\nBuildings.Controls.SetPoints.Table tabConExt(constantExtrapolation\u003dtrue,\n                                             table\u003d[20, 0.0;\n                                                    22, 0.5;\n                                                    25, 0.5;\n                                                    26, 1.0]);\n\u003c/pre\u003e\n\u003cp\u003e\nwill cause the following output:\n\u003c/p\u003e\n\u003cp\u003e\n\u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Controls/SetPoints/Table.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Table output.\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nFor the default setting \u003ccode\u003econstantExtrapolation\u003dtrue\u003c/code\u003e, the\nblock outputs\n\u003ccode\u003ey\u003dy1+offset\u003c/code\u003e for \u003ccode\u003eu \u0026le; u1\u003c/code\u003e, and\n\u003ccode\u003ey\u003dyMax+offset\u003c/code\u003e for \u003ccode\u003eu \u0026ge; uMax\u003c/code\u003e.\nOtherwise, the table is linearly extrapolated with a constant derivative.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the first column must be strictly increasing.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Line(),Line(),Line(),Text(),Polygon(),Polygon(),Line(),Text(),Polygon(),Polygon(),Line()})"}},"Buildings.Fluid.Sensors.RelativeHumidity":{"name":"Buildings.Fluid.Sensors.RelativeHumidity","comment":"Ideal one port relative humidity sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"phi","comment":"Relative humidity in port medium","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the relative humidity of the fluid connected to its port.\nThe sensor is ideal, i.e. it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nNote that this sensor can only be used with media that contain the variable \u003ccode\u003ephi\u003c/code\u003e,\nwhich is typically the case for moist air models.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Text(),Line()})"}},"Buildings.Utilities.Diagnostics.AssertInequality":{"name":"Buildings.Utilities.Diagnostics.AssertInequality","comment":"Assert when condition is violated","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.Utilities.Diagnostics.BaseClasses.PartialInputCheck","modifications":[{"name":"message","value":"\"Inputs differ by more than threShold\""},{"name":"threShold","value":"0"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that triggers an assert if\n\u003ci\u003eu1 \u0026gt; u2 - threShold\u003c/i\u003e\nand \u003ci\u003et \u0026gt; t\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Utilities.Math.Functions.integerReplicator":{"name":"Buildings.Utilities.Math.Functions.integerReplicator","comment":"Replicates integer signals","components":[{"className":"Integer","qualifiers":["input"],"name":"nout","comment":"Number of outputs"},{"className":"Integer","qualifiers":["input"],"name":"u","comment":"Integer input signal"},{"className":"Integer","qualifiers":["array","output"],"name":"y","comment":"Integer output signals","arraySubscripts":"[nout]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThis function replicates the integer input signal to an array of\n\u003ccode\u003enout\u003c/code\u003e identical output signals. \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.VeroLine80slash115dash2comma2slash2":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.VeroLine80slash115dash2comma2slash2","comment":"Pump data for a Wilo Veroline IP-E 80/115-2,2/2 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2900"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{0.0,0.00381944444444,0.00770833333333,0.0111111111111,0.014375,0.0171527777778,0.0197916666667,0.0220138888889}"},{"name":"P","value":"{1712.23021583,1939.82995422,2319.7768316,2599.92683819,2775.17985612,2815.09529219,2709.57970466,2571.61543492}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{0.0,0.00381944444444,0.00770833333333,0.0111111111111,0.014375,0.0171527777778,0.0197916666667,0.0220138888889}"},{"name":"dp","value":"{157548.6,150053.76,139302.0,127431.9,113011.2,97943.04,76596.48,57133.44}"}]},{"name":"motorCooledByFluid","value":"true"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eData from:\u003ca href\u003d\\\"http://productfinder.wilo.com/nl/BE/product/0000001d000149e80001003a/fc_product_datasheet\\\"\u003e http://productfinder.wilo.com/nl/BE/product/0000001d000149e80001003a/fc_product_datasheet\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003eBuildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6 \u003c/a\u003efor more information about how the data is derived. \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Convection.Functions.HeatFlux.wall":{"name":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.wall","comment":"Free convection, wall","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.BaseClasses.PartialHeatFlux"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the buoyancy-driven convective heat flux as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  q\u0026#775; \u003d h \u0026Delta;T,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026Delta;T\u003c/i\u003e is the solid temperature minus the fluid temperature and\n\u003ci\u003eh\u003c/i\u003e is the convective heat transfer coefficient\nfor a wall, computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nh\u003d1.3 |\u0026Delta;T|\u003csup\u003e0.3333\u003c/sup\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derT_p":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derT_p","comment":"Return the partial derivative of density with respect to temperature at constant pressure","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derT_p"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the derivative of density with respect to temperature\nat constant pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Utilities.extendedPolynomial":{"name":"Buildings.Fluid.Utilities.extendedPolynomial","comment":"Polynomial that is linearly extended at user specified values","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"x value"},{"className":"Real","qualifiers":["array","input"],"name":"c","comment":"Polynomial coefficients","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["input"],"name":"xMin","comment":"Minimum x value for polynomial"},{"className":"Real","qualifiers":["input"],"name":"xMax","comment":"Maximum x value for polynomial"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"y value"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nFor \u003ci\u003ex\u003c/i\u003e between the bounds \u003ci\u003ex\u003csub\u003emin\u003c/sub\u003e \u0026lt; x \u0026lt; x\u003csub\u003emax\u003c/sub\u003e\u003c/i\u003e,\nthis function defines a polynomial\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n y \u003d \u0026sum;\u003csub\u003ei\u003d1\u003c/sub\u003e\u003csup\u003en\u003c/sup\u003e c\u003csub\u003ei\u003c/sub\u003e x\u003csup\u003ei-1\u003c/sup\u003e\n\u003c/p\u003e\nwhere \u003ci\u003en \u0026gt; 1\u003c/i\u003e and \u003ci\u003ex\u003csub\u003emin\u003c/sub\u003e, x\u003csub\u003emax\u003c/sub\u003e\u003c/i\u003e\nare parameters.\nFor \u003ci\u003ex \u0026lt; x\u003csub\u003emin\u003c/sub\u003e\u003c/i\u003e and \u003ci\u003ex \u0026gt; x\u003csub\u003emax\u003c/sub\u003e\u003c/i\u003e,\nthe polynomial is replaced by a linear function\nin such a way that the first derivative is continuous everywhere.\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derX":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derX","comment":"Return the partial derivative of density with respect to mass fractions at constant pressure and temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the partial derivative of density\nwith respect to mass fraction,\nwhich is zero as the medium is a single substance.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.winTRInteriorIrradiationExteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.winTRInteriorIrradiationExteriorShading","comment":"Hemispherical transmittance and back reflectance of a window system (glass and shading device) for interior irradiation with exterior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"traRefIntIrrExtSha","comment":"Hemispherical transmittance and back reflectance of a window system (glass and shading device) for interior irradiation with exterior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[3,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis function computes hemispherical transmittance and back reflectance of a window for interior irradiation with exterior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing the outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\nThe variables are\u003cbr/\u003e\n\u003cpre\u003e\ntraRefIntIrrExtSha[1]: Transmittance;\ntraRefIntIrrExtSha[2]: Back reflectance;\ntraRefIntIrrExtSha[3]: Dummy value\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.TwoConductor.phaseVoltages":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.phaseVoltages","comment":"Return phase to neutral voltages","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.phaseVoltages"}]},"Buildings.HeatTransfer.Interfaces.RadiosityOutflow":{"name":"Buildings.HeatTransfer.Interfaces.RadiosityOutflow","comment":"Connector for outflowing radiosity","qualifiers":["output"],"superClasses":[{"nameOfExtendedClass":"Real","modifications":[{"name":"min","value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"W\""},{"name":"nominal","value":"419"}],"annotations":{"diagram":"Diagram(graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\nThe nominal value is set to \u003ci\u003e\u0026sigma; T\u003csup\u003e4\u003c/sup\u003e \u003d \u0026sigma; 293.15\u003csup\u003e4\u003c/sup\u003e \u003d 419\u003c/i\u003e.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()})"}}],"annotations":{"diagram":"Diagram(graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\nThe nominal value is set to \u003ci\u003e\u0026sigma; T\u003csup\u003e4\u003c/sup\u003e \u003d \u0026sigma; 293.15\u003csup\u003e4\u003c/sup\u003e \u003d 419\u003c/i\u003e.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()})"}},"Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented":{"name":"Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented","comment":"Simple PV model with orientation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialAcDcParameters"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialPVOriented","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"Buildings.Electrical.PhaseSystems.OnePhase"},{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]},{"name":"terminal"},{"name":"panel"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"linearized","comment":"If \u003dtrue, linearize the load","value":"false"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as an input the direct and diffuse solar radiation from\nthe weather bus.\nThe electrical connector is an AC one phase interface.\n\u003c/p\u003e\n\u003cp\u003e\nThis model computes the active power as\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003dA \u0026nbsp; f\u003csub\u003eact\u003c/sub\u003e \u0026nbsp; \u0026eta; \u0026nbsp; G \u0026nbsp; \u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eA\u003c/i\u003e is the panel area,\n\u003ci\u003ef\u003csub\u003eact\u003c/sub\u003e\u003c/i\u003e is the fraction of the aperture area,\n\u003ci\u003e\u0026eta;\u003c/i\u003e is the panel efficiency,\n\u003ci\u003eG\u003c/i\u003e is the total solar irradiation, which is the\nsum of direct and diffuse irradiation, and\n\u003ci\u003e\u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e\u003c/i\u003e is the efficiency of the conversion between DC and AC.\nThe model takes into account the location and the orientation of the PV panel,\nspecified by the surface tilt, latitude and azimuth.\n\u003c/p\u003e\n\u003cp\u003e\nThis active power is equal to \u003ci\u003eP\u003c/i\u003e, while the reactive power is equal to \u003ci\u003eQ \u003d P \u0026nbsp; tan(acos(pf))\u003c/i\u003e,\nwhere \u003ci\u003epf\u003c/i\u003e is the power factor.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Line()})"}},"Buildings.Electrical.Transmission.Functions.selectVoltageLevel":{"name":"Buildings.Electrical.Transmission.Functions.selectVoltageLevel","comment":"This function computes the voltage level (low, medium or high) given the nominal voltage","components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["input"],"name":"V","comment":"Nominal voltage"},{"className":"Buildings.Electrical.Types.VoltageLevel","qualifiers":["output"],"name":"level","comment":"Type of voltage level"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the voltage level for a given voltage.\nThe computation is as follows:\n\u003c/p\u003e\n\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eCondition\u003c/th\u003e\n\u003cth\u003eVoltage Level\u003c/th\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci\u003e0 \u0026le; V \u0026lt; 1 kV\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eLow voltage\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci\u003e1 kV \u0026le; V \u0026lt; 50 kV\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eMedium voltage\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ci\u003e V \u0026ge; 50 kV\u003c/i\u003e\u003c/td\u003e\n\u003ctd\u003eHIgh voltage\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.InductiveLoad":{"name":"Buildings.Electrical.Interfaces.InductiveLoad","comment":"Partial model of an inductive load","qualifiers":["model","partial"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Load"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_pf_in","comment":"If true, the power factor is defined by an input","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.8","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in","comment":"Power factor","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,60}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {100,60}))"}}],"classes":[{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a generic inductive load. This model is an extension of the base load model\n\u003ca href\u003d\\\"Buildings.Electrical.Interfaces.PartialLoad\\\"\u003e\nBuildings.Electrical.Interfaces.PartialLoad\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model assumes a fixed power factor \u003ccode\u003epf\u003c/code\u003e when the flag \u003ccode\u003euse_pf_in \u003d false\u003c/code\u003e\notherwise it uses the power factor specified by the input \u003ccode\u003epf_in\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eThe power factor (either the input or the parameter) is used to compute the reactive power\n\u003ccode\u003eQ\u003c/code\u003e given the active power \u003ccode\u003eP\u003c/code\u003e\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nQ \u003d P  tan(arccos(pf))\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_0_8_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_8_0","comment":"Version 0.8.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nIn\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.ConservationEquation\\\"\u003e\nBuildings.Fluid.Interfaces.ConservationEquation\u003c/a\u003e,\nadded to \u003ccode\u003eMedium.BaseProperties\u003c/code\u003e the initialization\n\u003ccode\u003eX(start\u003dX_start[1:Medium.nX])\u003c/code\u003e. Previously, the initialization\nwas only done for \u003ccode\u003eXi\u003c/code\u003e but not for \u003ccode\u003eX\u003c/code\u003e, which caused the\nmedium to be initialized to \u003ccode\u003ereference_X\u003c/code\u003e, ignoring the value of \u003ccode\u003eX_start\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nRenamed \u003ccode\u003eBuildings.Media.PerfectGases.MoistAirNonSaturated\u003c/code\u003e\nto\n\u003ca href\u003d\\\"modelica://Buildings.Media.PerfectGases.MoistAirUnsaturated\\\"\u003e\nBuildings.Media.PerfectGases.MoistAirUnsaturated\u003c/a\u003e\nand \u003ccode\u003eBuildings.Media.GasesPTDecoupled.MoistAirNoLiquid\u003c/code\u003e\nto\n\u003ca href\u003d\\\"modelica://Buildings.Media.Air\\\"\u003e\nBuildings.Media.Air\u003c/a\u003e,\nand added \u003ccode\u003eassert\u003c/code\u003e statements if saturation occurs.\n\u003c/li\u003e\n\u003cli\u003e\nAdded regularizaation near zero flow to\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.ConstantEffectiveness\\\"\u003e\nBuildings.Fluid.HeatExchangers.ConstantEffectiveness\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.ConstantEffectiveness\\\"\u003e\nBuildings.Fluid.MassExchangers.ConstantEffectiveness\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFixed bug regarding temperature offset in\n\u003ca href\u003d\\\"modelica://Buildings.Media.PerfectGases.MoistAirUnsaturated.T_phX\\\"\u003e\nBuildings.Media.PerfectGases.MoistAirUnsaturated.T_phX\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nAdded implementation of function\n\u003ca href\u003d\\\"modelica://Buildings.Media.Air.enthalpyOfNonCondensingGas\\\"\u003e\nBuildings.Media.Air.enthalpyOfNonCondensingGas\u003c/a\u003e and its derivative.\n\u003c/li\u003e\n\u003cli\u003e\nIn \u003ca href\u003d\\\"modelica://Buildings.Media.PerfectGases.MoistAir\\\"\u003e\nBuildings.Media.PerfectGases.MoistAir\u003c/a\u003e, fixed\nbug in implementation of \u003ca href\u003d\\\"modelica://Buildings.Media.PerfectGases.MoistAir.T_phX\\\"\u003e\nBuildings.Media.PerfectGases.MoistAir.T_phX\u003c/a\u003e. In the\nprevious version, it computed the inverse of its parent class,\nwhich gave slightly different results.\n\u003c/li\u003e\n\u003cli\u003e\nIn \u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.BCVTB.BCVTB\\\"\u003e\nBuildings.Utilities.IO.BCVTB.BCVTB\u003c/a\u003e, added parameter to specify\nthe value to be sent to the BCVTB at the first data exchange,\nand added parameter that deactivates the interface. Deactivating\nthe interface is sometimes useful during debugging.\n\u003c/li\u003e\n\u003cli\u003e\nIn \u003ca href\u003d\\\"modelica://Buildings.Media.GasesPTDecoupled.MoistAir\\\"\u003e\nBuildings.Media.GasesPTDecoupled.MoistAir\u003c/a\u003e and in\n\u003ca href\u003d\\\"modelica://Buildings.Media.PerfectGases.MoistAir\\\"\u003e\nBuildings.Media.PerfectGases.MoistAir\u003c/a\u003e, added function\n\u003ccode\u003eenthalpyOfNonCondensingGas\u003c/code\u003e and its derivative.\n\u003cli\u003e\nIn \u003ca href\u003d\\\"modelica://Buildings.Media\\\"\u003e\nBuildings.Media\u003c/a\u003e,\nfixed bug in implementations of derivatives.\n\u003c/li\u003e\n\u003cli\u003e\nAdded model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.ExpansionVessel\\\"\u003e\nBuildings.Fluid.Storage.ExpansionVessel\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nAdded Wrapper function \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics.solve\\\"\u003e\nBuildings.Fluid.Movers.BaseClasses.Characteristics.solve\u003c/a\u003e for\n\u003ca href\u003d\\\"modelica://Modelica.Math.Matrices.solve\\\"\u003e\nModelica.Math.Matrices.solve\u003c/a\u003e. This is currently needed since\n\u003ca href\u003d\\\"modelica://Modelica.Math.Matrices.solve\\\"\u003e\nModelica.Math.Matrices.solve\u003c/a\u003e does not specify a\nderivative.\n\u003c/li\u003e\n\u003cli\u003e\nFixed bug in\n\u003ca href\u003d\\\"Buildings.Fluid.Storage.Stratified\\\"\u003e\nBuildings.Fluid.Storage.Stratified\u003c/a\u003e.\nIn the previous version,\nfor computing the heat conduction between the top (or bottom) segment and\nthe outside,\nthe whole thickness of the water volume was used\ninstead of only half the thickness.\n\u003cli\u003e\nIn \u003ca href\u003d\\\"Buildings.Media.ConstantPropertyLiquidWater\\\"\u003e\nBuildings.Media.ConstantPropertyLiquidWater\u003c/a\u003e, added the option to specify a compressibility.\nThis can help reducing the size of the coupled nonlinear system of equations, at\nthe expense of introducing stiffness. This change required to change the inheritance\ntree of the medium. Its base class is now\n\u003ca href\u003d\\\"Buildings.Media.Interfaces.PartialSimpleMedium\\\"\u003e\nBuildings.Media.Interfaces.PartialSimpleMedium\u003c/a\u003e,\nwhich contains the equation for the compressibility. The default setting will model\nthe flow as incompressible.\n\u003c/li\u003e\n\u003cli\u003e\nIn \u003ca href\u003d\\\"modelica://Buildings.Controls.Continuous.Examples.PIDHysteresis\\\"\u003e\nBuildings.Controls.Continuous.Examples.PIDHysteresis\u003c/a\u003e\nand \u003ca href\u003d\\\"modelica://Buildings.Controls.Continuous.Examples.PIDHysteresisTimer\\\"\u003e\nBuildings.Controls.Continuous.Examples.PIDHysteresisTimer\u003c/a\u003e,\nfixed error in default parameter \u003ccode\u003eeOn\u003c/code\u003e.\nFixed error by introducing parameter \u003ccode\u003eTd\u003c/code\u003e,\nwhich used to be hard-wired in the PID controller.\n\u003c/li\u003e\n\u003cli\u003e\nAdded more models for fans and pumps to the package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers\\\"\u003e\nBuildings.Fluid.Movers\u003c/a\u003e.\nThe models are similar to the ones in\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.Machines\\\"\u003e\nModelica.Fluid.Machines\u003c/a\u003e but have been adapted for\nair-based systems, and to include more characteristic curves\nin\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.BaseClasses.Characteristics\\\"\u003e\nBuildings.Fluid.Movers.BaseClasses.Characteristics\u003c/a\u003e.\nThe new models are better suited than the existing fan model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowMachinePolynomial\\\"\u003e\nBuildings.Fluid.Movers.FlowMachinePolynomial\u003c/a\u003e for zero flow rate.\n\u003c/li\u003e\n\u003cli\u003e\nAdded an optional mixing volume to \u003ca href\u003d\\\"modelica://Buildings.Fluid.BaseClasses.PartialThreeWayResistance\\\"\u003e\nBuildings.Fluid.BaseClasses.PartialThreeWayResistance\u003c/a\u003e\nand hence to the flow splitter and to the three-way valves. This often breaks algebraic loops and provides a state for the temperature if the mass flow rate goes to zero.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.Boreholes.UTube":{"name":"Buildings.Fluid.HeatExchangers.Boreholes.UTube","comment":"Single U-tube borehole heat exchanger","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface","modifications":[{"name":"show_T","value":"true"}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance","qualifiers":["final"],"value":"false"},{"name":"linearizeFlowResistance","qualifiers":["final"],"value":"false"}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations"}],"components":[{"className":"Buildings.HeatTransfer.Data.Soil.Generic","qualifiers":["replaceable","parameter"],"name":"matSoi","comment":"Thermal properties of soil","annotations":{"dialog":"Dialog(group \u003d \"Soil\")","placement":"Placement(transformation(extent \u003d {{2,70},{22,90}}))"}},{"className":"Buildings.HeatTransfer.Data.BoreholeFillings.Generic","qualifiers":["replaceable","parameter"],"name":"matFil","comment":"Thermal properties of the filling material","annotations":{"dialog":"Dialog(group \u003d \"Borehole\")","placement":"Placement(transformation(extent \u003d {{-68,70},{-48,90}}))"}},{"className":"Modelica.SIunits.Radius","qualifiers":["parameter"],"name":"rTub","comment":"Radius of the tubes","value":"0.02","annotations":{"dialog":"Dialog(group \u003d \"Tubes\")"}},{"className":"Modelica.SIunits.ThermalConductivity","qualifiers":["parameter"],"name":"kTub","comment":"Thermal conductivity of the tube","value":"0.5","annotations":{"dialog":"Dialog(group \u003d \"Tubes\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"eTub","comment":"Thickness of a tube","value":"0.002","annotations":{"dialog":"Dialog(group \u003d \"Tubes\")"}},{"className":"Modelica.SIunits.Height","qualifiers":["parameter"],"name":"hBor","comment":"Total height of the borehole","annotations":{"dialog":"Dialog(group \u003d \"Borehole\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"nVer","comment":"Number of segments used for discretization in the vertical direction","value":"10","annotations":{"dialog":"Dialog(group \u003d \"Borehole\")"}},{"className":"Modelica.SIunits.Radius","qualifiers":["parameter"],"name":"rBor","comment":"Radius of the borehole","value":"0.1"},{"className":"Modelica.SIunits.Radius","qualifiers":["parameter"],"name":"rExt","comment":"Radius of the soil used for the external boundary condition","value":"3","annotations":{"dialog":"Dialog(group \u003d \"Soil\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"nHor","comment":"Number of state variables in each horizontal layer of the soil","value":"10","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Soil\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TExt0_start","comment":"Initial far field temperature","value":"283.15","annotations":{"dialog":"Dialog(tab \u003d \"Initial temperature\", group \u003d \"Soil\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["array","parameter"],"name":"TExt_start","comment":"Temperature of the undisturbed ground","value":"{if z[i]\u003e\u003dz0 then TExt0_start+(z[i]-z0)*dT_dz else TExt0_starti in 1:nVer}","arraySubscripts":"[nVer]","annotations":{"dialog":"Dialog(tab \u003d \"Initial temperature\", group \u003d \"Soil\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TFil0_start","comment":"Initial temperature of the filling material for h \u003d 0...z0","value":"TExt0_start","annotations":{"dialog":"Dialog(tab \u003d \"Initial temperature\", group \u003d \"Filling material\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["array","parameter"],"name":"TFil_start","comment":"Temperature of the undisturbed ground","value":"TExt_start","arraySubscripts":"[nVer]","annotations":{"dialog":"Dialog(tab \u003d \"Initial temperature\", group \u003d \"Filling material\")"}},{"className":"Modelica.SIunits.Height","qualifiers":["parameter"],"name":"z0","comment":"Depth below which the temperature gradient starts","value":"10","annotations":{"dialog":"Dialog(tab \u003d \"Initial temperature\", group \u003d \"Temperature profile\")"}},{"className":"Real","qualifiers":["parameter"],"name":"dT_dz","comment":"Vertical temperature gradient of the undisturbed soil for h below z0","value":"0.01","modifications":[{"name":"unit","value":"\"K/m\""}],"annotations":{"dialog":"Dialog(tab \u003d \"Initial temperature\", group \u003d \"Temperature profile\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"samplePeriod","comment":"Sample period for the external boundary condition","annotations":{"dialog":"Dialog(group \u003d \"Soil\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"xC","comment":"Shank spacing, defined as the distance between the center of a pipe and the center of the borehole","value":"0.05","annotations":{"dialog":"Dialog(group \u003d \"Borehole\")"}},{"className":"Real","qualifiers":["parameter"],"name":"B0","comment":"Shape coefficient for grout resistance","value":"17.44","annotations":{"dialog":"Dialog(group \u003d \"Borehole\")"}},{"className":"Real","qualifiers":["parameter"],"name":"B1","comment":"Shape coefficient for grout resistance","value":"-0.605","annotations":{"dialog":"Dialog(group \u003d \"Borehole\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Buildings.Fluid.HeatExchangers.Boreholes.BaseClasses.BoreholeSegment","qualifiers":["array"],"name":"borHol","comment":"Discretized borehole segments","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final","each"],"value":"Medium"},{"name":"matSoi","qualifiers":["final","each"],"value":"matSoi"},{"name":"matFil","qualifiers":["final","each"],"value":"matFil"},{"name":"hSeg","qualifiers":["final","each"],"value":"hBor/(nVer)"},{"name":"samplePeriod","qualifiers":["final","each"],"value":"samplePeriod"},{"name":"rTub","qualifiers":["final","each"],"value":"rTub"},{"name":"rBor","qualifiers":["final","each"],"value":"rBor"},{"name":"rExt","qualifiers":["final","each"],"value":"rExt"},{"name":"xC","qualifiers":["final","each"],"value":"xC"},{"name":"eTub","qualifiers":["final","each"],"value":"eTub"},{"name":"kTub","qualifiers":["final","each"],"value":"kTub"},{"name":"nSta","qualifiers":["final","each"],"value":"nHor"},{"name":"m_flow_nominal","qualifiers":["final","each"],"value":"m_flow_nominal"},{"name":"m_flow_small","qualifiers":["final","each"],"value":"m_flow_small"},{"name":"dp_nominal","qualifiers":["final"],"value":"{if i\u003d\u003d1 then dp_nominal else 0i in 1:nVer}"},{"name":"TExt_start","value":"TExt_start"},{"name":"TFil_start","value":"TExt_start"},{"name":"homotopyInitialization","qualifiers":["final","each"],"value":"homotopyInitialization"},{"name":"show_T","qualifiers":["final","each"],"value":"show_T"},{"name":"computeFlowResistance","qualifiers":["final","each"],"value":"computeFlowResistance"},{"name":"from_dp","qualifiers":["final","each"],"value":"from_dp"},{"name":"linearizeFlowResistance","qualifiers":["final","each"],"value":"linearizeFlowResistance"},{"name":"deltaM","qualifiers":["final","each"],"value":"deltaM"},{"name":"energyDynamics","qualifiers":["final","each"],"value":"energyDynamics"},{"name":"massDynamics","qualifiers":["final","each"],"value":"massDynamics"},{"name":"p_start","qualifiers":["final","each"],"value":"p_start"},{"name":"T_start","qualifiers":["each"],"value":"T_start"},{"name":"X_start","qualifiers":["each"],"value":"X_start"},{"name":"C_start","qualifiers":["each"],"value":"C_start"},{"name":"C_nominal","qualifiers":["each"],"value":"C_nominal"},{"name":"allowFlowReversal","qualifiers":["each"],"value":"allowFlowReversal"}],"arraySubscripts":"[nVer]","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-10},{0,10}}))"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"Tdown","comment":"Medium temperature in pipe 1","arraySubscripts":"[nVer]"},{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"Tup","comment":"Medium temperature in pipe 2","arraySubscripts":"[nVer]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a single U-tube borehole heat exchanger.\nThe borehole heat exchanger is vertically discretized into \u003ci\u003en\u003csub\u003eseg\u003c/sub\u003e\u003c/i\u003e\nelements of height \u003ci\u003eh\u003dh\u003csub\u003eBor\u003c/sub\u003e\u0026frasl;n\u003csub\u003eseg\u003c/sub\u003e\u003c/i\u003e.\nEach segment contains a model for the heat transfer in the borehole,\nfor heat transfer in the soil and for the far-field boundary condition.\n\u003c/p\u003e\n\u003cp\u003e\nThe heat transfer in the borehole is computed using a convective heat transfer coefficient\nthat depends on the fluid velocity, a heat resistance between the two pipes, and\na heat resistance between the pipes and the circumference of the borehole.\nThe heat capacity of the fluid, and the heat capacity of the grout, is taken into account.\nThe thermal resistance and capacity network inside the borehole is computed according\nto Bauer et al., (2011).\n\u003c/p\u003e\n\u003cp\u003e\nThe heat transfer in the soil is computed using transient heat conduction in cylindrical\ncoordinates for the spatial domain \u003ci\u003er\u003csub\u003ebor\u003c/sub\u003e \u0026le; r \u0026le; r\u003csub\u003eext\u003c/sub\u003e\u003c/i\u003e.\nIn the radial direction, the spatial domain is discretized into\n\u003ci\u003en\u003csub\u003ehor\u003c/sub\u003e\u003c/i\u003e segments with uniform material properties.\nThermal properties can be specified separately for each horizontal layer.\n\u003c/p\u003e\n\u003cp\u003e\nThe far-field temperature, i.e., the temperature at the radius\n\u003ci\u003er\u003csub\u003eext\u003c/sub\u003e\u003c/i\u003e, is computed using a power-series solution\nto a line-source heat transfer problem. This temperature boundary condition\nis updated every \u003ci\u003et\u003csub\u003esample\u003c/sub\u003e\u003c/i\u003e seconds.\n\u003c/p\u003e\n\u003cp\u003e\nThe initial far-field temperature \u003ci\u003eT\u003csub\u003eext,start\u003c/sub\u003e\u003c/i\u003e, which\nis the temperature of the soil at a radius \u003ci\u003er\u003csub\u003eext\u003c/sub\u003e\u003c/i\u003e,\nis computed\nas a function of the depth \u003ci\u003ez \u0026gt; 0\u003c/i\u003e.\nFor a depth between \u003ci\u003e0 \u0026le; z \u0026le; z\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e, the temperature\nis set to \u003ci\u003eT\u003csub\u003eext,0,start\u003c/sub\u003e\u003c/i\u003e.\nThe value of \u003ci\u003ez\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e is a parameter with a default of 10 meters.\nHowever, there is large variability in the depth where the undisturbed soil temperature\nstarts.\nFor a depth of \u003ci\u003ez\u003csub\u003e0\u003c/sub\u003e \u0026le; z \u0026le; h\u003csub\u003ebor\u003c/sub\u003e\u003c/i\u003e,\nthe temperature is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  T\u003csup\u003ei\u003c/sup\u003e\u003csub\u003eext,start\u003c/sub\u003e \u003d T\u003csub\u003eext,0,start\u003c/sub\u003e + (z\u003csup\u003ei\u003c/sup\u003e - z\u003csub\u003e0\u003c/sub\u003e)  dT \u0026frasl; dz\n\u003c/p\u003e\n\u003cp\u003e\nwith \u003ci\u003ei \u0026isin; {1, ..., n\u003csub\u003ever\u003c/sub\u003e}\u003c/i\u003e,\nwhere the temperature gradient \u003ci\u003edT \u0026frasl; dz \u0026ge; 0\u003c/i\u003e is a parameter.\nAs with \u003ci\u003ez\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e, there is large variability in\n\u003ci\u003edT \u0026frasl; dz \u0026ge; 0\u003c/i\u003e. The default value is set to \u003ci\u003e1\u003c/i\u003e Kelvin per 100 meters.\nFor the temperature of the grout, the same equations are applied, with\n\u003ci\u003eT\u003csub\u003eext,0,start\u003c/sub\u003e\u003c/i\u003e replaced with\n\u003ci\u003eT\u003csub\u003efil,0,start\u003c/sub\u003e\u003c/i\u003e, and\n\u003ci\u003eT\u003csup\u003ei\u003c/sup\u003e\u003csub\u003eext,start\u003c/sub\u003e\u003c/i\u003e replaced with\n\u003ci\u003eT\u003csup\u003ei\u003c/sup\u003e\u003csub\u003efil,start\u003c/sub\u003e\u003c/i\u003e.\nThe default setting uses the same temperature for the soil and the filling material.\n\u003c/p\u003e\n\u003ch4\u003eAssumptions and limitations\u003c/h4\u003e\n\u003cp\u003e\nThe vertical heat flow is assumed to be zero and hence there is no heat flow from\nthe ground surface to the soil that could be used to regenerate the soil temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThere is no ground water flow.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nEach horizontal layer is modeled using an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Boreholes.BaseClasses.BoreholeSegment\\\"\u003e\nBuildings.HeatExchangers.Fluid.Boreholes.BaseClasses.BoreholeSegment\u003c/a\u003e.\nThis model is composed of the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Boreholes.BaseClasses.HexInternalElement\\\"\u003e\nBuildings.Fluid.HeatExchangers.Boreholes.BaseClasses.HexInternalElement\u003c/a\u003e which computes\nthe heat transfer in the pipes and the borehole filling,\nof the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Conduction.SingleLayerCylinder\\\"\u003e\nBuildings.HeatTransfer.Conduction.SingleLayerCylinder\u003c/a\u003e which computes\nthe heat transfer in the soil, and\nof the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Boreholes.BaseClasses.TemperatureBoundaryCondition\\\"\u003e\nBuildings.Fluid.HeatExchangers.Boreholes.BaseClasses.TemperatureBoundaryCondition\u003c/a\u003e which computes\nthe far-field temperature boundary condition.\nThe thermal resistor and capacitor network is computed in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Boreholes.BaseClasses.singleUTubeResistances\\\"\u003e\nBuildings.Fluid.HeatExchangers.Boreholes.BaseClasses.singleUTubeResistances\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nD. Bauer, W. Heidemann, H. M\u0026uuml;ller-Steinhagen, and H.-J. G. Diersch.\n\u003ci\u003e\n\u003ca href\u003d\\\"http://dx.doi.org/10.1002/er.1689\\\"\u003e\nThermal resistance and capacity models for borehole heat exchangers\n\u003c/a\u003e\n\u003c/i\u003e.\nInternational Journal Of Energy Research, 35:312\u0026ndash;320, 2011.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}, initialScale \u003d 0.5), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Utilities.Psychrometrics.ToTotalAir":{"name":"Buildings.Utilities.Psychrometrics.ToTotalAir","comment":"Block to convert absolute humidity from [kg/kg dry air] to [kg/kg total air]","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"XiTotalAir","comment":"Water vapor concentration in [kg/kg total air]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"XiDry","comment":"Water vapor concentration in [kg/kg dry air]","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"XNonVapor","comment":"Mass fraction of remaining substances","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-50},{120,-30}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that converts humidity concentration from [kg/kg dry air] to [kg/kg total air].\n\u003c/p\u003e\n\u003cp\u003e\nThis block may be used, for example, to convert absolute humidity that is received from\nEnergyPlus to [kg/kg total air], which is the convention used by Modelica.Media.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text()})"}},"Buildings.Controls.Continuous.NumberOfRequests":{"name":"Buildings.Controls.Continuous.NumberOfRequests","comment":"Outputs the number of signals that are above/below a certain threshold","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nin","comment":"Number of inputs"},{"className":"Real","qualifiers":["parameter"],"name":"threShold","comment":"Threshold","value":"0"},{"className":"Integer","qualifiers":["parameter"],"name":"kind","comment":"Set to 0 for u\u003ethreShold, to 1 for \u003e\u003d, to 2 for \u003c\u003d or to 3 for \u003c"},{"className":"Modelica.Blocks.Interfaces.IntegerOutput","name":"y","comment":"Number of input signals that violate the threshold","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"u","comment":"Input signals","arraySubscripts":"[nin]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that outputs the number of inputs that exceed a threshold.\nThe parameter \u003ccode\u003ekind\u003c/code\u003e is used to determine the kind of the\ninequality. The table below shows the allowed settings.\n\u003c/p\u003e\n\u003ctable border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\" summary\u003d\\\"Allowed parameter settings.\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eValue of parameter \u003ccode\u003ekind\u003c/code\u003e\u003c/th\u003e\n\u003cth\u003eOutput signal incremented by 1 for each \u003ci\u003ei \u0026isin; {1, ..., nin}\u003c/i\u003e if\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eu[i] \u0026gt; threShold\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eu[i] \u0026ge; threShold\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eu[i] \u0026le; threShold\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eu[i] \u0026lt; threShold\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\nThis model may be used to check how many rooms\nexceed a temperature threshold.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.kinematicViscosity":{},"Buildings.Electrical.Transmission.LowVoltageCables.Generic":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","comment":"Data record for a generic low voltage cable","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.MaterialProperty"},{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.BaseCable"}],"components":[{"className":"Buildings.Electrical.Types.CharacteristicResistance","qualifiers":["parameter"],"name":"RCha","comment":"Characteristic resistance of the cable","modifications":[{"name":"start","value":"0"}]},{"className":"Buildings.Electrical.Types.CharacteristicReactance","qualifiers":["parameter"],"name":"XCha","comment":"Characteristic reactance of the cable","modifications":[{"name":"start","value":"0"}]}],"classes":[{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineResistance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineResistance"}],"components":[{"className":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall resistance of a cable.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe low voltage cable is described by a characteristic resistance per unit\nlength, given this value the overall resistance is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR \u003d R\u003csub\u003eCHA\u003c/sub\u003e l\u003csub\u003eCABLE\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eR\u003csub\u003eCHA\u003c/sub\u003e\u003c/i\u003e is the characteristic resistance per unit lenght, and\n\u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineInductance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineInductance"}],"components":[{"className":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall inductance of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is low, the cables have a characteristic reactance per unit\nlength, which is specified at \u003ci\u003ef \u003d 50 Hz\u003c/i\u003e.\nThe overall inductance is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nL \u003d (X\u003csub\u003eCHA\u003c/sub\u003e/\u0026omega;) l\u003csub\u003eCABLE\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eX\u003csub\u003eCHA\u003c/sub\u003e\u003c/i\u003e is the characteristic reactance per unit lenght,\n\u003ci\u003e\u0026omega; \u003d 2 \u0026pi; f\u003c/i\u003e is the angular velocity, and \u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is\nthe length of the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineCapacitance","comment":"Function that computes the capacitance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineCapacitance"}],"components":[{"className":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall capacity of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is low, the cables do not consider the capacitive effect. Hence,\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nC \u003d 0.\n\u003c/p\u003e\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a base record for specifying physical properties for low\nvoltage commercial cables. New cables can be added by extending the\nit.\n\u003c/p\u003e\n\u003cp\u003e\nFor low voltage cables, only the characteristic resistance and reactance are\nspecified.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.enthalpyOfCondensingGas":{"name":"Buildings.Media.Air.enthalpyOfCondensingGas","comment":"Enthalpy of steam per unit mass of steam","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"steam enthalpy"}]},"Buildings.Media.Air.enthalpyOfDryAir":{},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRLC":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRLC","comment":"PI model of a line parameterized with impedance and admittance matrices","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort"}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"480"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z11","comment":"Element [1,1] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z12","comment":"Element [1,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z13","comment":"Element [1,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z22","comment":"Element [2,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z23","comment":"Element [2,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z33","comment":"Element [3,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z21","comment":"Element [2,1] of impedance matrix","value":"Z12","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z31","comment":"Element [3,1] of impedance matrix","value":"Z13","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z32","comment":"Element [3,1] of impedance matrix","value":"Z23","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B11","comment":"Element [1,1] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B12","comment":"Element [1,2] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B13","comment":"Element [1,3] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B22","comment":"Element [2,2] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B23","comment":"Element [2,3] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B33","comment":"Element [3,3] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B21","comment":"Element [2,1] of admittance matrix","value":"B12"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B31","comment":"Element [3,1] of admittance matrix","value":"B13"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B32","comment":"Element [3,2] of admittance matrix","value":"B23"}],"classes":[{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRLC line model (\u0026pi;-model) that connects two AC three-phase\nunbalanced interfaces. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRLCMatrix.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model is parameterized with an impedance matrix \u003ci\u003eZ\u003c/i\u003e and\nan admittance matrix \u003ci\u003eB\u003c/i\u003e.\nThe impedance matrix is symmetric, and therefore only the upper triangular\npart of the matrix needs to be defined.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis model is a more detailed version of the model \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL\u003c/a\u003e that includes\nthe capacitive effects of the lines.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Rectangle(),Text(),Text(),Text()})"}},"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACACTransformer":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACACTransformer","comment":"AC AC transformer three phase balanced systems","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple transformer model for three-phase\nbalanced AC systems. The model does not include core and\nmagnetic losses.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineInductance":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineInductance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic.lineInductance"}],"components":[{"className":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall inductance of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is low, the cables have a characteristic reactance per unit\nlength, which is specified at \u003ci\u003ef \u003d 50 Hz\u003c/i\u003e.\nThe overall inductance is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nL \u003d (X\u003csub\u003eCHA\u003c/sub\u003e/\u0026omega;) l\u003csub\u003eCABLE\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eX\u003csub\u003eCHA\u003c/sub\u003e\u003c/i\u003e is the characteristic reactance per unit lenght,\n\u003ci\u003e\u0026omega; \u003d 2 \u0026pi; f\u003c/i\u003e is the angular velocity, and \u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is\nthe length of the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.Temperature":{"name":"Buildings.Fluid.Sensors.Temperature","comment":"Ideal one port temperature sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"T","comment":"Temperature in port medium","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,-10},{80,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Ellipse(),Rectangle(),Polygon(),Line(),Line(),Line(),Line(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the temperature of the fluid connected to its port.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Ellipse(),Rectangle(),Polygon(),Line(),Line(),Line(),Line(),Line(),Text(),Text(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL_N","comment":"Model of an RL line parameterized with impedance matrices and neutral line","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N"}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"480"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z11","comment":"Element [1,1] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z12","comment":"Element [1,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z13","comment":"Element [1,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z14","comment":"Element [1,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z22","comment":"Element [2,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z23","comment":"Element [2,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z24","comment":"Element [2,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z33","comment":"Element [3,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z34","comment":"Element [3,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z44","comment":"Element [4,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z21","comment":"Element [2,1] of impedance matrix","value":"Z12","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z31","comment":"Element [3,1] of impedance matrix","value":"Z13","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z32","comment":"Element [3,1] of impedance matrix","value":"Z23","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z41","comment":"Element [4,1] of impedance matrix","value":"Z14","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z42","comment":"Element [4,2] of impedance matrix","value":"Z24","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z43","comment":"Element [4,3] of impedance matrix","value":"Z34","arraySubscripts":"[2]"}],"classes":[{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistive-inductive model that connects two AC three-phase\nunbalanced interfaces with neutral line. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\nThe voltage between the ports is\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRLMatrix_N.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003ei\u003c/sub\u003e\u003csup\u003e{p,n}\u003c/sup\u003e\u003c/i\u003e is the voltage phasor at the connector \u003ccode\u003ep\u003c/code\u003e or\n\u003ccode\u003en\u003c/code\u003e of the \u003ci\u003ei\u003c/i\u003e-th phase, while \u003ci\u003eI\u003csub\u003ei\u003c/sub\u003e\u003csup\u003ep\u003c/sup\u003e\u003c/i\u003e\nthe current phasor entering from the connector \u003ccode\u003ep\u003c/code\u003e of the \u003ci\u003ei\u003c/i\u003e-th phase.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model is parameterized with an impedance matrix \u003ci\u003eZ\u003c/i\u003e.\nThe matrix is symmetric thus just the upper triangular\npart of it has to be defined.\n\u003c/p\u003e\n\n\u003ch4\u003eNote\u003c/h4\u003e\n\u003cp\u003e\nThe fourth line is the neutral one.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Rectangle(),Rectangle(),Text(),Text()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificEnthalpy":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificEnthalpy","comment":"Return the specific enthalpy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificEnthalpy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific enthalpy.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface":{"name":"Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface","comment":"Direct solar irradiation on a tilted surface","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.BoundaryConditions.SolarIrradiation.BaseClasses.PartialSolarIrradiation"}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth"},{"className":"Buildings.BoundaryConditions.WeatherData.Bus","name":"weaBus","comment":"Weather data","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"inc","comment":"Incidence angle","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Angle\""},{"name":"unit","qualifiers":["final"],"value":"\"rad\""},{"name":"displayUnit","value":"\"deg\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-50},{120,-30}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the direct solar irradiation on a tilted surface.\nFor a definition of the parameters, see the\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.UsersGuide\\\"\u003eUser\u0027s Guide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Utilities.IO.BCVTB.MoistAirInterface":{"name":"Buildings.Utilities.IO.BCVTB.MoistAirInterface","comment":"Fluid interface that can be coupled to BCVTB for medium that model the air humidity","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Utilities.IO.BCVTB.BaseClasses.FluidInterface","modifications":[{"name":"bou","modifications":[{"name":"use_X_in","qualifiers":["final"],"value":"true"}]}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"HLat_flow","comment":"Latent enthalpy flow rate, positive if flow into the component","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Buildings.Fluid.Sensors.SensibleEnthalpyFlowRate","qualifiers":["array"],"name":"senEntFloRat","comment":"Sensible enthalpy flow rates","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"m_flow_nominal","qualifiers":["final","each"],"value":"m_flow_nominal"}],"arraySubscripts":"[nPorts]","annotations":{"placement":"Placement(transformation(extent \u003d {{40,-10},{20,10}}))"}},{"className":"Modelica.Blocks.Math.Sum","name":"sumHSen_flow","comment":"Sum of sensible enthalpy flow rates","modifications":[{"name":"nin","value":"nPorts"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{20,30},{40,50}}))"}},{"className":"Modelica.Blocks.Math.Feedback","name":"diff","comment":"Difference between total and sensible enthalpy flow rate","annotations":{"placement":"Placement(transformation(extent \u003d {{70,50},{90,70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"phi","comment":"Medium relative humidity","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-80},{-100,-40}}))"}},{"className":"Buildings.Utilities.Psychrometrics.X_pTphi","name":"masFra","comment":"Mass fraction","modifications":[{"name":"use_p_in","value":"false"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-60,-64},{-40,-44}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis model allows interfacing to the\n\u003ca href\u003d\\\"http://simulationresearch.lbl.gov/bcvtb\\\"\u003eBuilding Controls Virtual Test Bed\u003c/a\u003e\nan air-conditioning system\nthat uses a medium model with water vapor concentration.\n\u003cbr/\u003e\n\u003cp\u003e\nThe model takes as input signals the temperature and water vapor\nconcentration and, optionally, a bulk mass flow rate into or\nout of the system boundary. The state of the fluid\nthat flows out of this model will be at this temperature and\nwater vapor concentration. The output of this model are the sensible and\nlatent heat exchanged across the system boundary.\n\u003c/p\u003e\n\u003cp\u003e\nWhen used with the BCVTB, a building\nsimulation program such as EnergyPlus\nmay compute the room air temperatures and\nroom air humidity rate, which is then used as an input\nto this model. The sensible and latent heat flow rates may be\nsent to EnergyPlus to couple the air-conditioning system to\nthe energy balance of the building model.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e The EnergyPlus building simulation program outputs the\nabsolute humidity ratio in units of [kg/kg dry air]. Since\n\u003ccode\u003eModelica.Media\u003c/code\u003e uses [kg/kg total mass of air], this quantity\nneeds to be converted. The conversion can be done with the model\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.ToTotalAir\\\"\u003e\nBuildings.Utilities.Psychrometrics.ToTotalAir\u003c/a\u003e.\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text()})"}},"Buildings.Electrical.Utilities.VoltageControl":{"name":"Buildings.Electrical.Utilities.VoltageControl","comment":"Voltage controller","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage of the node to be controlled"},{"className":"Real","qualifiers":["parameter"],"name":"vThresh","comment":"Threshold that activates voltage ctrl (ratio of nominal voltage)","value":"0.1","modifications":[{"name":"min","value":"0.0"},{"name":"max","value":"1.0"}]},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tDelay","comment":"Time to wait before plugging the load back","value":"300"},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"T","comment":"Time constant representing the switching time","value":"0.01"},{"className":"Real","qualifiers":["parameter"],"name":"y_start","comment":"Initial value of the control output signal","value":"1.0"},{"className":"Modelica.SIunits.Voltage","qualifiers":["final","parameter"],"name":"Vmin","comment":"Low threshold","value":"V_nominal*(1-vThresh)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["final","parameter"],"name":"Vmax","comment":"High threshold","value":"V_nominal*(1+vThresh)"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"Control signal","modifications":[{"name":"start","value":"y_start"},{"name":"stateSelect","value":"StateSelect.prefer"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{96,-10},{116,10}}))"}},{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package"],"value":"PhaseSystem"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Buildings.Electrical.Utilities.Controllers.StateMachineVoltCtrl","name":"ctrl","comment":"Model that implements the state machines voltage controller","modifications":[{"name":"V_nominal","value":"V_nominal"},{"name":"vThresh","value":"vThresh"},{"name":"tDelay","value":"tDelay"}]}],"classes":[{"name":"Buildings.Electrical.Utilities.VoltageControl.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel representing a voltage controller that unplugs a load when\nits voltage is outside of the accepted thresholds.\n\u003c/p\u003e\n\u003cp\u003e\nThe model contains a finite state machine controller that detects voltage\ndeviations. If the voltage input \u003ccode\u003eV\u003c/code\u003e exceeds the\nnominal value \u003ccode\u003eV_nominal\u003c/code\u003e by more than \u003ci\u003e1+V\u003csub\u003etr\u003c/sub\u003e\u003c/i\u003e\nthen the control signal \u003ccode\u003ey\u003c/code\u003e becomes zero for\na period \u003ccode\u003et \u003d tDelay\u003c/code\u003e. If after this period the voltage is still\nhigher than the thresholds the output remains equal to zero.\nThe model has a parameter \u003ccode\u003eT\u003c/code\u003e that represents the time constant\nassociated to the electrical switch. This time constant is used to parametrize\na first order filter that represents such a dynamic effect. The presence of the first order\nfilter avoids that the output of the finite state machine controller\nare differentiated (causing runtime errors).\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Text()})"}},"Buildings.Electrical.PhaseSystems.TwoConductor.rotate":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.rotate","comment":"Rotate a vector of an angle theta (anti-counterclock)","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.rotate"}]},"Buildings.Utilities.Psychrometrics.Functions.density_pTX":{"name":"Buildings.Utilities.Psychrometrics.Functions.density_pTX","comment":"Density of air as a function of pressure, temperature and species concentration","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p","comment":"Absolute pressure of the medium"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Dry bulb temperature"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["input"],"name":"X_w","comment":"Water vapor mass fraction per unit mass total air"},{"className":"Modelica.SIunits.Density","qualifiers":["output"],"name":"d","comment":"Mass density"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction to compute the density of moist air for given\npressure, temperature and water vapor mass fraction.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the water vapor mass fraction is in \u003ci\u003ekg/kg\u003c/i\u003e\ntotal air.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Movers.SpeedControlled_Nrpm":{"name":"Buildings.Fluid.Movers.SpeedControlled_Nrpm","comment":"Fan or pump with ideally controlled speed Nrpm as input signal","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine","modifications":[{"name":"preVar","qualifiers":["final"],"value":"Buildings.Fluid.Movers.BaseClasses.Types.PrescribedVariable.Speed"},{"name":"nominalValuesDefineDefaultPressureCurve","qualifiers":["final"],"value":"false"},{"name":"computePowerUsingSimilarityLaws","qualifiers":["final"],"value":"true"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"max(per.pressure.V_flow)*rho_default"},{"name":"stageInputs","qualifiers":["final"],"value":"per.speeds","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"1\""}]},{"name":"constInput","qualifiers":["final"],"value":"per.constantSpeed","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"name":"filter","modifications":[{"name":"y_start","qualifiers":["final"],"value":"y_start"},{"name":"u_nominal","value":"1"},{"name":"u","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"name":"y","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}]}]},{"name":"eff","modifications":[{"name":"per","modifications":[{"name":"pressure","qualifiers":["final"],"value":"per.pressure"},{"name":"use_powerCharacteristic","qualifiers":["final"],"value":"per.use_powerCharacteristic"}]}]},{"name":"gaiSpe","modifications":[{"name":"u","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1/min\""}]},{"name":"k","qualifiers":["final"],"value":"1/(per.speed_rpm_nominal)"}]}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Nrpm","comment":"Prescribed rotational speed","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1/min\""}],"conditionalClause":" if inputType\u003d\u003dBuildings.Fluid.Types.InputType.Continuous","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {0,120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {0,120}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\nThis model describes a fan or pump with prescribed speed in revolutions per minute.\nThe head is computed based on the performance curve that take as an argument\nthe actual volume flow rate divided by the maximum flow rate and the relative\nspeed of the fan.\nThe efficiency of the device is computed based\non the efficiency curves that take as an argument\nthe actual volume flow rate divided by the maximum possible volume flow rate, or\nbased on the motor performance curves.\n\u003cbr/\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.UsersGuide\\\"\u003e\nUser\u0027s Guide\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Text()})"}},"Buildings.Controls.Discrete.BooleanDelay":{"name":"Buildings.Controls.Discrete.BooleanDelay","comment":"Zero order hold for boolean variable","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.BooleanSISO"},{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.DiscreteBlock","modifications":[{"name":"firstTrigger","modifications":[{"name":"fixed","value":"true"},{"name":"start","value":"firstTrigger_start"}]}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"firstTrigger_start","comment":"Start value for rising edge signals first sample instant","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that delays the boolean input signal by\none sampling interval.\nFor example,\nif \u003ci\u003eu\u003c/i\u003e denotes the input,\n\u003ci\u003ey\u003c/i\u003e denotes the output, and\n\u003ci\u003et\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e and \u003ci\u003et\u003csub\u003ei+1\u003c/sub\u003e\u003c/i\u003e\ndenote subsequent sampling\ninstants, then the model outputs\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ny(t\u003csub\u003ei+1\u003c/sub\u003e) \u003d u(t\u003csub\u003ei\u003c/sub\u003e).\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line()})"}},"Buildings.Fluid.Sensors.SpecificEntropy":{"name":"Buildings.Fluid.Sensors.SpecificEntropy","comment":"Ideal one port specific entropy sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"s","comment":"Specific entropy in port medium","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"SpecificEntropy\""},{"name":"unit","qualifiers":["final"],"value":"\"J/(kg.K)\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the specific entropy of the fluid connected to its port.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Text(),Line()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS40slash10":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS40slash10","comment":"Pump data for a staged Wilo-Top-S 40/10 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2900"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{2.29252636405e-05,0.00110041265475,0.00221610881858,0.00334708849152,0.00417239798258,0.0048448723827,0.00537979520098,0.00605991135565,0.00625859697387}"},{"name":"P","value":"{432.950095719,492.916811695,565.94308364,630.111524164,658.215613383,671.6839839,676.925957128,671.543363813,668.661679135}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{2.29252636405e-05,0.00110041265475,0.00221610881858,0.00334708849152,0.00417239798258,0.0048448723827,0.00537979520098,0.00605991135565,0.00625859697387}"},{"name":"dp","value":"{98785.5232361,97106.6860151,91320.1257409,79370.6856694,66042.1923274,53051.3974809,40227.5679296,25353.7625039,20566.1680722}"}]},{"name":"speeds_rpm","value":"{0,2600,2800}"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/000000120001ad890001003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/000000120001ad890001003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Capacitive_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Capacitive_N","comment":"Model of a three-phase unbalanced capacitive load with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_pf_in","comment":"If true, the power factor is defined by an input","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.8","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_1","comment":"Power factor of load on phase 1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase1","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_2","comment":"Power factor of load on phase 2","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase2","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {30,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {0,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_3","comment":"Power factor of load on phase 3","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase3","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {80,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {60,-100}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced capacitive load.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003cp\u003e\nThis model has a connector with four cables and it represents the neutral cable.\nThe current in the neutral cable is computed as the algebraic sum of the currents\nof the loads.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl_N\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Capacitive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Capacitive\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Line(),Line(),Line(),Line(),Text(),Rectangle(),Line(),Line(),Rectangle(),Rectangle(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Media.Specialized.Air.PerfectGas.pressure":{"name":"Buildings.Media.Specialized.Air.PerfectGas.pressure","comment":"Gas pressure","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.pressure"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nPressure is returned from the thermodynamic state record input as a simple assignment.\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.yorkCalc":{"name":"Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.yorkCalc","comment":"Cooling tower performance correlation for YorkCalc model","components":[{"className":"Modelica.SIunits.TemperatureDifference","qualifiers":["input"],"name":"TRan","comment":"Range temperature (water in - water out)","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"TWetBul","comment":"Air wet-bulb inlet temperature"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["input"],"name":"FRWat","comment":"Ratio actual over design water mass flow ratio"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["input"],"name":"FRAir","comment":"Ratio actual over design air mass flow ratio"},{"className":"Modelica.SIunits.TemperatureDifference","qualifiers":["output"],"name":"TApp","comment":"Approach temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCorrelation for approach temperature for YorkCalc cooling tower model.\nSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers.Correlations.Examples.YorkCalc\\\"\u003eExamples/YorkCalc.mo\u003c/a\u003e for the graph.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.BeamDepthInRoom":{"name":"Buildings.HeatTransfer.Windows.BeamDepthInRoom","comment":"Depth of solar beam in the room","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"String","qualifiers":["parameter"],"name":"filNam","comment":"Name of weather data file (used to read longitude, latitude and time zone)","value":"\"\"","annotations":{"dialog":"Dialog(loadSelector(filter \u003d \"Weather files (*.mos)\", caption \u003d \"Select weather file\"), group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lon","comment":"Longitude","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getLongitudeTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"deg\""}],"annotations":{"dialog":"Dialog(group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getLatitudeTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"deg\""}],"annotations":{"dialog":"Dialog(group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"timZon","comment":"Time zone","value":"Buildings.BoundaryConditions.WeatherData.BaseClasses.getTimeZoneTMY3(filNam)","modifications":[{"name":"displayUnit","value":"\"h\""}],"annotations":{"dialog":"Dialog(group \u003d \"Location\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"hWorPla","comment":"Height of workplane above ground","value":"0.75"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"hApe","comment":"Upper height of aperature above ground","annotations":{"dialog":"Dialog(group \u003d \"Aperture\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"depApe","comment":"Depth of outer corner of aperture, measured from interior surface","value":"0.15","annotations":{"dialog":"Dialog(group \u003d \"Aperture\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"depOve","comment":"Depth of overhang, meausured from other exterior surface of aperature (set to 0 if no overhang)","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Overhang\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"gapOve","comment":"Gap between upper height of aperature and lower height of overhang (set to 0 if no overhang)","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Overhang\")"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"Beam depth in room, measured perpendicular to window surface, at workplane height","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Length\""},{"name":"unit","qualifiers":["final"],"value":"\"m\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the maximum distance at which a solar beam that enters the window\nhits the workplane. The distance is measured perpendicular to the wall.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eazi\u003c/code\u003e is the azimuth of the window.\nFor example, if the window faces south, set\n\u003ccode\u003eazi\u003dBuildings.Types.Azimuth.S\u003c/code\u003e.\nThe figure below explains the parameters.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"Figure for beam depth parameters\\\"\n     src\u003d\\\"modelica://Buildings/Resources/Images/HeatTransfer/Windows/BeamDepthInRoom.png\\\"\n     border\u003d\\\"1\\\" /\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nFor a definition of the parameters, see the User\u0027s Guide\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.UsersGuide\\\"\u003e\nBuildings.BoundaryConditions.UsersGuide\u003c/a\u003e.\nThe surface azimuth is defined in\n\u003ca href\u003d\\\"modelica://Buildings.Types.Azimuth\\\"\u003e\nBuildings.Types.Azimuth\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe component requires as parameters the longitude, latitude and time zone.\nThese can automatically be assigned by setting the parameter \u003ccode\u003efilNam\u003c/code\u003e\nto a weather data file, in which case these values are read from the weather data file.\n\u003c/p\u003e\n\u003ch4\u003eAssumptions and approximations\u003c/h4\u003e\n\u003cp\u003e\nThe following assumptions and approximations are made:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nIf an overhang is present, then the corner of the overhang is the\nonly object that casts a shade. In reality, for very shallow incidence angles,\nthe top of the window frame may be sun exposed, but this\nmodel neglects any shade that is cast by the top of the window frame.\n\u003c/li\u003e\n\u003cli\u003e\nThe overhang is assumed to have infinite length in the direction of the wall,\nas this allows neglecting any effects that the corner may have at shallow incidence angles.\n\u003c/li\u003e\n\u003cli\u003e\nThe wall is vertical.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Bitmap()})"}},"Buildings.Rooms.FLEXLAB.Rooms.X3A.Closet":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3A.Closet","comment":"Model of the closet connected to test cell X3A","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"hRoo","value":"3.6576"},{"name":"AFlo","value":"3.93"},{"name":"lat","value":"0.66098585832754"},{"name":"nConExt","value":"2"},{"name":"nConBou","value":"3"},{"name":"nSurBou","value":"2"},{"name":"nConExtWin","value":"0"},{"name":"nConPar","value":"0"},{"name":"surBou","modifications":[{"name":"A","value":"{3.6576*2.886075-2.39*1.22,2.39*1.22}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","qualifiers":["each"],"value":"Buildings.Types.Tilt.Wall"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{higIns,roo}"},{"name":"A","value":"{3.6576*1.667,AFlo}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{higIns,celDiv,slaCon}"},{"name":"A","value":"{3.6576*1.524,3.6576*1.524,3.93}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Floor}"},{"name":"azi","value":"{Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.E,Buildings.Types.Azimuth.N}"}]}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall","qualifiers":["replaceable"],"name":"higIns","comment":"High insulation wall. Between X3A closet and exterior, X3A closet and electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-208},{450,-188}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall","qualifiers":["replaceable"],"name":"celDiv","comment":"Wall dividing the X3A closet and the X3B closet","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-178},{450,-158}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"roo","comment":"Construction of the roof of the closet in X3A","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-148},{450,-128}}))"}},{"className":"HeatTransfer.Data.OpaqueConstructions.Generic","name":"slaCon","comment":"Construction of the slab","modifications":[{"name":"nLay","value":"3"},{"name":"material","value":"{Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic()}"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{432,-118},{452,-98}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model for the closet attached to test cell 3A in the LBNL User Facility.\n    This documentation describes the wall constructions used in the closet. Documentation\n    describing how it should be connected to other models in the package to form a\n    complete model of test cell X3A can be found in\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3A\\\"\u003e\n    Buildings.Rooms.FLEXLAB.Rooms.X3A\u003c/a\u003e.\n    \u003c/p\u003e\n    \u003cp\u003e\n    There are four different wall sections connected to the closet modeled here. They are shown\n    in the figure below.\n    \u003c/p\u003e\n    \u003cp align\u003d\\\"center\\\"\u003e\n    \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3A/Closet.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in Closet model\\\"/\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\n    The different wall sections are represented in the model according to the following table.\n    \u003c/p\u003e\n    \u003ctable border \u003d \\\"1\\\" summary \u003d \\\"Wall sections in Closet model\\\"\u003e\n    \u003ctr\u003e\n    \u003cth\u003eWall Section Number\u003c/th\u003e\n    \u003cth\u003eDescription\u003c/th\u003e\n    \u003cth\u003eLocation in Model\u003c/th\u003e\n    \u003cth\u003eCorresponding Layer\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e1\u003c/td\u003e\n    \u003ctd\u003eNorth wall on the exterior of the buildings\u003c/td\u003e\n    \u003ctd\u003edatConExt[1]\u003c/td\u003e\n    \u003ctd\u003ehigIns\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e2\u003c/td\u003e\n    \u003ctd\u003eEast wall connected to X3B.Closet\u003c/td\u003e\n    \u003ctd\u003edatConBou[2]\u003c/td\u003e\n    \u003ctd\u003ecelDiv\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e3\u003c/td\u003e\n    \u003ctd\u003eAir space connected to partition wall and door in TestCell model\u003c/td\u003e\n    \u003ctd\u003eWall: datSurBou[1]\u003cbr/\u003e\n    Door: datSurBou[2]\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e4\u003c/td\u003e\n    \u003ctd\u003eWest wall connected to Electrical\u003c/td\u003e\n    \u003ctd\u003edatConBou[1]\u003c/td\u003e\n    \u003ctd\u003ehigIns\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003c/table\u003e\n    \u003cp\u003e\n    There are two additional surfaces which are not included in the diagram. One is the model of the roof. It is\n    modeled in datConExt[2] using the layer \u003ccode\u003eroo\u003c/code\u003e. The other is the floor, which is modeled in\n    datConBou[1] using the layer \u003ccode\u003eslaCon\u003c/code\u003e.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n    The following table describes the connections to models outside of the X3A package.. The connections in datConExt\n    are not described in the table because they are connected to the external environment, and no additional heat\n    port connections are necessary. A rationale for why the model is created this way is also provided if it is\n    considered necessary.\n    \u003c/p\u003e\n    \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Intended connections including the Closet model\\\"\u003e\n    \u003ctr\u003e\n    \u003cth\u003eLocation in Closet\u003c/th\u003e\n    \u003cth\u003eDescription of External Connection\u003c/th\u003e\n    \u003cth\u003eLocation in External Model\u003c/th\u003e\n    \u003cth\u003eRationale\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003esurf_conBou[2]\u003c/td\u003e\n    \u003ctd\u003eX3B.Closet\u003c/td\u003e\n    \u003ctd\u003eReferences a data table\u003c/td\u003e\n    \u003ctd\u003eA data table is used, instead of a model of X3B.Closet, because the goal of this model is to be able to perform\n    simulations of TestCell with minimal complexity, by simplifying the neighboring test cells. The wall separating the\n    test cells is highly insulated, and it is believed that the error in simulations caused by using a data table will\n    be negligible.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003esurf_conBou[3]\u003c/td\u003e\n    \u003ctd\u003eGround temperature\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd\u003eThere is no specific connection which is appropriate connection for this construction. surf_conBou[3] represents\n    the floor of the room, and must be connected to a heat port representing the ground temperature.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003c/table\u003e\n    \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Fluid.Boilers.BoilerPolynomial":{"name":"Buildings.Fluid.Boilers.BoilerPolynomial","comment":"Boiler with efficiency curve described by a polynomial of the temperature","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger","modifications":[{"name":"vol","qualifiers":["final"]},{"name":"show_T","value":"true"},{"name":"tau","qualifiers":["final"],"value":"VWat*rho_default/(m_flow_nominal)"}]}],"components":[{"className":"Modelica.SIunits.Power","qualifiers":["parameter"],"name":"Q_flow_nominal","comment":"Nominal heating power"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_nominal","comment":"Temperature used to compute nominal efficiency (only used if efficiency curve depends on temperature)","value":"353.15"},{"className":"Buildings.Fluid.Types.EfficiencyCurves","qualifiers":["parameter"],"name":"effCur","comment":"Curve used to compute the efficiency","value":"Buildings.Fluid.Types.EfficiencyCurves.Constant"},{"className":"Real","qualifiers":["array","parameter"],"name":"a","comment":"Coefficients for efficiency curve","value":"{0.9}","arraySubscripts":"[:]"},{"className":"Buildings.Fluid.Data.Fuels.Generic","qualifiers":["parameter"],"name":"fue","comment":"Fuel type"},{"className":"Modelica.SIunits.ThermalConductance","qualifiers":["parameter"],"name":"UA","comment":"Overall UA value","value":"0.05*Q_flow_nominal/(30)"},{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"VWat","comment":"Water volume of boiler","value":"1.5E-6*Q_flow_nominal","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", enable \u003d not energyDynamics\u003d\u003dModelica.Fluid.Types.Dynamics.SteadyState)"}},{"className":"Modelica.SIunits.Mass","qualifiers":["parameter"],"name":"mDry","comment":"Mass of boiler that will be lumped to water heat capacity","value":"1.5E-3*Q_flow_nominal","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", enable \u003d not energyDynamics\u003d\u003dModelica.Fluid.Types.Dynamics.SteadyState)"}},{"className":"Modelica.SIunits.Efficiency","name":"eta","comment":"Boiler efficiency"},{"className":"Modelica.SIunits.Power","name":"QFue_flow","comment":"Heat released by fuel"},{"className":"Modelica.SIunits.Power","name":"QWat_flow","comment":"Heat transfer from gas into water"},{"className":"Modelica.SIunits.MassFlowRate","name":"mFue_flow","comment":"Fuel mass flow rate"},{"className":"Modelica.SIunits.VolumeFlowRate","name":"VFue_flow","comment":"Fuel volume flow rate"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y","comment":"Part load ratio","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heatPort","comment":"Heat port, can be used to connect to ambient","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,62},{10,82}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Components.HeatCapacitor","name":"heaCapDry","comment":"heat capacity of boiler metal","modifications":[{"name":"C","value":"500*mDry"},{"name":"T","modifications":[{"name":"start","value":"T_start"}]}],"conditionalClause":" if not energyDynamics\u003d\u003dModelica.Fluid.Types.Dynamics.SteadyState","annotations":{"placement":"Placement(transformation(extent \u003d {{-80,12},{-60,32}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"T","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,70},{120,90}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a boiler whose efficiency is described\nby a polynomial.\nThe heat input into the medium is\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  Q\u0026#775; \u003d y Q\u0026#775;\u003csub\u003e0\u003c/sub\u003e \u0026eta; \u0026frasl; \u0026eta;\u003csub\u003e0\u003c/sub\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ey \u0026isin; [0, 1]\u003c/i\u003e is the control signal,\n\u003ci\u003eQ\u0026#775;\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e is the nominal power,\n\u003ci\u003e\u0026eta;\u003c/i\u003e is the efficiency at the current operating point, and\n\u003ci\u003e\u0026eta;\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e is the efficiency at \u003ci\u003ey\u003d1\u003c/i\u003e and\nnominal temperature \u003ci\u003eT\u003dT\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e as specified by the parameter\n\u003ccode\u003eT_nominal\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eeffCur\u003c/code\u003e determines what polynomial is used\nto compute the efficiency, which is defined as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  \u0026eta; \u003d Q\u0026#775; \u0026frasl; Q\u0026#775;\u003csub\u003ef\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003eQ\u0026#775;\u003c/i\u003e is the heat transferred to the working fluid (typically water or air), and\n\u003ci\u003eQ\u0026#775;\u003csub\u003ef\u003c/sub\u003e\u003c/i\u003e is the heat of combustion released by the fuel.\n\u003c/p\u003e\n\u003cp\u003e\nThe following polynomials can be selected to compute the efficiency:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\"  border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eParameter \u003ccode\u003eeffCur\u003c/code\u003e\u003c/th\u003e\n\u003cth\u003eEfficiency curve\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBuildings.Fluid.Types.EfficiencyCurves.Constant\u003c/td\u003e\n\u003ctd\u003e\u003ci\u003e\u0026eta; \u003d a\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBuildings.Fluid.Types.EfficiencyCurves.Polynomial\u003c/td\u003e\n\u003ctd\u003e\u003ci\u003e\u0026eta; \u003d a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e y + a\u003csub\u003e3\u003c/sub\u003e y\u003csup\u003e2\u003c/sup\u003e + ...\u003c/i\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBuildings.Fluid.Types.EfficiencyCurves.QuadraticLinear\u003c/td\u003e\n\u003ctd\u003e\u003ci\u003e\u0026eta; \u003d a\u003csub\u003e1\u003c/sub\u003e + a\u003csub\u003e2\u003c/sub\u003e  y\n        + a\u003csub\u003e3\u003c/sub\u003e y\u003csup\u003e2\u003c/sup\u003e\n        + (a\u003csub\u003e4\u003c/sub\u003e + a\u003csub\u003e5\u003c/sub\u003e  y\n        + a\u003csub\u003e6\u003c/sub\u003e y\u003csup\u003e2\u003c/sup\u003e)  T\n\u003c/i\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eT\u003c/i\u003e is the boiler outlet temperature in Kelvin.\nFor \u003ccode\u003eeffCur \u003d Buildings.Fluid.Types.EfficiencyCurves.Polynomial\u003c/code\u003e,\nan arbitrary number of polynomial coefficients can be specified.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eQ_flow_nominal\u003c/code\u003e is the power transferred to the fluid\nfor \u003ccode\u003ey\u003d1\u003c/code\u003e and, if the efficiency depends on temperature,\nfor \u003ccode\u003eT\u003dT0\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe fuel mass flow rate and volume flow rate are computed as \u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  m\u0026#775;\u003csub\u003ef\u003c/sub\u003e \u003d Q\u0026#775;\u003csub\u003ef\u003c/sub\u003e \u0026frasl; h\u003csub\u003ef\u003c/sub\u003e\n\u003c/p\u003e\n\u003cp\u003e and \u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  V\u0026#775;\u003csub\u003ef\u003c/sub\u003e \u003d m\u0026#775;\u003csub\u003ef\u003c/sub\u003e \u0026frasl; \u0026rho;\u003csub\u003ef\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere the fuel heating value\n\u003ci\u003eh\u003csub\u003ef\u003c/sub\u003e\u003c/i\u003e and the fuel mass density\n\u003ci\u003e\u0026rho;\u003csub\u003ef\u003c/sub\u003e\u003c/i\u003e are obtained from the\nparameter \u003ccode\u003efue\u003c/code\u003e.\nNote that if \u003ci\u003e\u0026eta;\u003c/i\u003e is the efficiency relative to the lower heating value,\nthen the fuel properties also need to be used for the lower heating value.\n\u003c/p\u003e\n\n\u003cp\u003e\nOptionally, the port \u003ccode\u003eheatPort\u003c/code\u003e can be connected to a heat port\noutside of this model to impose a boundary condition in order to\nmodel heat losses to the ambient. When using this \u003ccode\u003eheatPort\u003c/code\u003e,\nmake sure that the efficiency curve \u003ccode\u003eeffCur\u003c/code\u003e\ndoes not already account for this heat loss.\n\u003c/p\u003e\n\n\u003cp\u003e\nOn the Assumptions tag, the model can be parameterized to compute a transient\nor steady-state response.\nThe transient response of the boiler is computed using a first\norder differential equation to compute the boiler\u0027s water and metal temperature,\nwhich are lumped into one state. The boiler outlet temperature is equal to this water temperature.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Polygon(),Line(),Text(),Text(),Line()})"}},"Buildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger":{"name":"Buildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger","comment":"Partial model transporting two fluid streams between four ports without storing mass or energy","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialFourPortInterface"},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.FourPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance1","qualifiers":["final"],"value":"dp1_nominal\u003eModelica.Constants.eps"},{"name":"computeFlowResistance2","qualifiers":["final"],"value":"dp2_nominal\u003eModelica.Constants.eps"}]}],"components":[{"className":"Boolean","qualifiers":["constant"],"name":"prescribedHeatFlowRate1","comment":"Set to true if the heat flow rate into fluid 1 is not a function of the component temperature","value":"false"},{"className":"Boolean","qualifiers":["constant"],"name":"prescribedHeatFlowRate2","comment":"Set to true if the heat flow rate into fluid 2 is not a function of the component temperature","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["input"],"name":"Q1_flow","comment":"Heat transferred into the medium 1"},{"className":"Medium1.MassFlowRate","qualifiers":["input"],"name":"mWat1_flow","comment":"Moisture mass flow rate added to the medium 1"},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["input"],"name":"Q2_flow","comment":"Heat transferred into the medium 2"},{"className":"Medium2.MassFlowRate","qualifiers":["input"],"name":"mWat2_flow","comment":"Moisture mass flow rate added to the medium 2"},{"className":"Boolean","qualifiers":["constant"],"name":"sensibleOnly1","comment":"Set to true if sensible exchange only for medium 1"},{"className":"Boolean","qualifiers":["constant"],"name":"sensibleOnly2","comment":"Set to true if sensible exchange only for medium 2"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component transports two fluid streams between four ports, without\nstoring mass or energy. It is similar to\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\nBuildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/a\u003e,\nbut it has four ports instead of two.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003edp\u003ci\u003eN\u003c/i\u003e_nominal \u0026gt; Modelica.Constants.eps\u003c/code\u003e,\nwhere \u003ccode\u003e\u003ci\u003eN\u003c/i\u003e\u003c/code\u003e denotes the fluid \u003ci\u003e1\u003c/i\u003e or \u003ci\u003e2\u003c/i\u003e,\nthen the model computes\npressure drop due to flow friction in the respective fluid stream.\nThe pressure drop is defined by a quadratic function that goes through\nthe point \u003ccode\u003e(m\u003ci\u003eN\u003c/i\u003e_flow_nominal, dp\u003ci\u003eN\u003c/i\u003e_nominal)\u003c/code\u003e.\nAt \u003ccode\u003e|m\u003ci\u003eN\u003c/i\u003e_flow| \u0026lt; deltaM\u003ci\u003eN\u003c/i\u003e * m\u003ci\u003eN\u003c/i\u003e_flow_nominal\u003c/code\u003e,\nthe pressure drop vs. flow relation is linearized.\nIf the parameter \u003ccode\u003elinearizeFlowResistance\u003ci\u003eN\u003c/i\u003e\u003c/code\u003e is set to true,\nthen the whole pressure drop vs. flow resistance curve is linearized.\n\u003c/p\u003e\n\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThis model uses inputs and constants that need to be set by models\nthat extend or instantiate this model.\nThe following inputs need to be assigned, where \u003ccode\u003e\u003ci\u003eN\u003c/i\u003e\u003c/code\u003e denotes \u003ccode\u003e1\u003c/code\u003e or\n\u003ccode\u003e2\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eQ\u003ci\u003eN\u003c/i\u003e_flow\u003c/code\u003e, which is the heat flow rate added to the medium \u003ci\u003eN\u003c/i\u003e.\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emWat\u003ci\u003eN\u003c/i\u003e_flow\u003c/code\u003e, which is the moisture mass flow rate added to the medium \u003ci\u003eN\u003c/i\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nSet the constant \u003ccode\u003esensibleOnly\u003ci\u003eN\u003c/i\u003e\u003dtrue\u003c/code\u003e if the model that extends\nor instantiates this model sets \u003ccode\u003emWat\u003ci\u003eN\u003c/i\u003e_flow \u003d 0\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n     Note that the model does not implement \u003ccode\u003e0 \u003d Q1_flow + Q2_flow\u003c/code\u003e or\n     \u003ccode\u003e0 \u003d mXi1_flow + mXi2_flow\u003c/code\u003e. If there is no heat or mass transfer\n     with the environment, then a model that extends this model needs to provide these\n     equations.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.HeatTransfer.Data.Resistances.Generic":{"name":"Buildings.HeatTransfer.Data.Resistances.Generic","comment":"Thermal properties of heat resistances","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.BaseClasses.Material","modifications":[{"name":"c","qualifiers":["final"],"value":"0"},{"name":"d","qualifiers":["final"],"value":"0"},{"name":"k","qualifiers":["final"],"value":"0"},{"name":"x","qualifiers":["final"],"value":"0"},{"name":"nStaRef","qualifiers":["final"],"value":"0"},{"name":"nSta","qualifiers":["final"],"value":"1"},{"name":"steadyState","qualifiers":["final"],"value":"true"},{"name":"TSol","qualifiers":["final"],"value":"293.15"},{"name":"TLiq","qualifiers":["final"],"value":"293.15"},{"name":"LHea","qualifiers":["final"],"value":"0"},{"name":"phasechange","qualifiers":["final"],"value":"false"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nGeneric record for thermal properties of\nheat resistances.\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos32slash1to12":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos32slash1to12","comment":"Pump data for a Wilo Stratos 32/1-12 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"3580"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{2.11830535572e-05,0.000167865707434,0.000700939248601,0.0012450039968,0.00177258193445,0.00227268185452,0.00272332134293,0.00312450039968,0.00345423661071}"},{"name":"P","value":"{103.427852653,110.225580543,135.414121033,162.955749719,191.043411366,216.051565678,230.204882307,236.346847436,239.552825212}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{2.11830535572e-05,0.000167865707434,0.000700939248601,0.0012450039968,0.00177258193445,0.00227268185452,0.00272332134293,0.00312450039968,0.00345423661071}"},{"name":"dp","value":"{59279.4925671,59115.2927989,59000.1476354,57351.238791,54446.2693068,50284.7374612,44865.6398104,38328.4550274,32066.9663984}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000018000029770002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Fluid.Movers.Data.Generic":{"name":"Buildings.Fluid.Movers.Data.Generic","comment":"Generic data record for movers","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Buildings.Fluid.Movers.BaseClasses.Characteristics.flowParameters","qualifiers":["parameter"],"name":"pressure","comment":"Volume flow rate vs. total pressure rise","modifications":[{"name":"V_flow","value":"{0,0}"},{"name":"dp","value":"{0,0}"}],"annotations":{"dialog":"Dialog(group \u003d \"Pressure curve\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_powerCharacteristic","comment":"Use power data instead of motor efficiency","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Power computation\")"}},{"className":"Buildings.Fluid.Movers.BaseClasses.Characteristics.efficiencyParameters","qualifiers":["parameter"],"name":"hydraulicEfficiency","comment":"Hydraulic efficiency (used if use_powerCharacteristic\u003dfalse)","modifications":[{"name":"V_flow","value":"{0}"},{"name":"eta","value":"{0.7}"}],"annotations":{"dialog":"Dialog(group \u003d \"Power computation\", enable \u003d not use_powerCharacteristic)"}},{"className":"Buildings.Fluid.Movers.BaseClasses.Characteristics.efficiencyParameters","qualifiers":["parameter"],"name":"motorEfficiency","comment":"Electric motor efficiency (used if use_powerCharacteristic\u003dfalse)","modifications":[{"name":"V_flow","value":"{0}"},{"name":"eta","value":"{0.7}"}],"annotations":{"dialog":"Dialog(group \u003d \"Power computation\", enable \u003d not use_powerCharacteristic)"}},{"className":"BaseClasses.Characteristics.powerParameters","qualifiers":["parameter"],"name":"power","comment":"Volume flow rate vs. electrical power consumption (used if use_powerCharacteristic\u003dtrue)","modifications":[{"name":"V_flow","value":"{0}"},{"name":"P","value":"{0}"}],"annotations":{"dialog":"Dialog(group \u003d \"Power computation\", enable \u003d use_powerCharacteristic)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"motorCooledByFluid","comment":"If true, then motor heat is added to fluid stream","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Motor heat rejection\")"}},{"className":"Real","qualifiers":["parameter"],"name":"speed_nominal","comment":"Nominal rotational speed for flow characteristic","value":"1","modifications":[{"name":"min","qualifiers":["final"],"value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}],"annotations":{"dialog":"Dialog(group \u003d \"Normalized speeds (used in model, default values assigned from speeds in rpm\")"}},{"className":"Real","qualifiers":["parameter"],"name":"constantSpeed","comment":"Normalized speed set point, used if inputType \u003d Buildings.Fluid.Types.InputType.Constant","value":"constantSpeed_rpm/(speed_rpm_nominal)","modifications":[{"name":"min","qualifiers":["final"],"value":"0"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}],"annotations":{"dialog":"Dialog(group \u003d \"Normalized speeds (used in model, default values assigned from speeds in rpm\")"}},{"className":"Real","qualifiers":["array","parameter"],"name":"speeds","comment":"Vector of normalized speed set points, used if inputType \u003d Buildings.Fluid.Types.InputType.Stages","value":"speeds_rpm/(speed_rpm_nominal)","modifications":[{"name":"min","qualifiers":["final","each"],"value":"0"},{"name":"unit","qualifiers":["final","each"],"value":"\"1\""}],"arraySubscripts":"[:]","annotations":{"dialog":"Dialog(group \u003d \"Normalized speeds (used in model, default values assigned from speeds in rpm\")"}},{"className":"Modelica.SIunits.Conversions.NonSIunits.AngularVelocity_rpm","qualifiers":["parameter"],"name":"speed_rpm_nominal","comment":"Nominal rotational speed for flow characteristic","value":"1500","annotations":{"dialog":"Dialog(group \u003d \"Speeds in RPM\")"}},{"className":"Modelica.SIunits.Conversions.NonSIunits.AngularVelocity_rpm","qualifiers":["parameter"],"name":"constantSpeed_rpm","comment":"Speed set point, used if inputType \u003d Buildings.Fluid.Types.InputType.Constant","value":"speed_rpm_nominal","annotations":{"dialog":"Dialog(group \u003d \"Speeds in RPM\")"}},{"className":"Modelica.SIunits.Conversions.NonSIunits.AngularVelocity_rpm","qualifiers":["array","parameter"],"name":"speeds_rpm","comment":"Vector of speed set points, used if inputType \u003d Buildings.Fluid.Types.InputType.Stages","value":"{speed_rpm_nominal}","arraySubscripts":"[:]","annotations":{"dialog":"Dialog(group \u003d \"Speeds in RPM\")"}},{"className":"Boolean","qualifiers":["final","parameter"],"name":"havePressureCurve","comment":"\u003d true, if default record values are being used","value":"sum(pressure.V_flow)\u003eModelica.Constants.eps and sum(pressure.dp)\u003eModelica.Constants.eps"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRecord containing parameters for pumps or fans.\n\u003c/p\u003e\n\u003ch4\u003eTypical use\u003c/h4\u003e\n\u003cp\u003e\nThis record may be used to assign for example fan performance data using\ndeclaration such as\n\u003c/p\u003e\n\u003cpre\u003e\n  Buildings.Fluid.Movers.SpeedControlled_y fan(\n    redeclare package Medium \u003d Medium,\n      per(pressure(V_flow\u003d{0,m_flow_nominal,2*m_flow_nominal}/1.2,\n                   dp\u003d{2*dp_nominal,dp_nominal,0}))) \\\"Fan\\\";\n\u003c/pre\u003e\n\u003cp\u003e\nThis data record can be used with\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.SpeedControlled_Nrpm\\\"\u003e\nBuildings.Fluid.Movers.SpeedControlled_Nrpm\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.SpeedControlled_y\\\"\u003e\nBuildings.Fluid.Movers.SpeedControlled_y\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_dp\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_dp\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_m_flow\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_m_flow\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nAn example that uses manufacturer data can be found in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Validation.Pump_Nrpm_stratos\\\"\u003e\nBuildings.Fluid.Movers.Validation.Pump_Nrpm_stratos\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eParameters in RPM\u003c/h4\u003e\n\u003cp\u003e\nThe parameters \u003ccode\u003espeed_rpm_nominal\u003c/code\u003e, \n\u003ccode\u003econstantSpeed_rpm\u003c/code\u003e and\n\u003ccode\u003espeeds_rpm\u003c/code\u003e are used to assign the non-dimensional speeds\n\u003c/p\u003e\n\u003cpre\u003e\n  parameter Real constantSpeed(final min\u003d0, final unit\u003d\\\"1\\\") \u003d constantSpeed_rpm/speed_rpm_nominal;\n  parameter Real[:] speeds(each final min \u003d 0, each final unit\u003d\\\"1\\\") \u003d speeds_rpm/speed_rpm_nominal;\n\u003c/pre\u003e\n\u003cp\u003e\nIn addition, \u003ccode\u003espeed_rpm_nominal\u003c/code\u003e is used in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.SpeedControlled_Nrpm\\\"\u003e\nBuildings.Fluid.Movers.SpeedControlled_Nrpm\u003c/a\u003e\nto normalize the control input signal.\nOtherwise, these speed parameters in RPM are not used in the models.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.SolidsPCM.Generic":{"name":"Buildings.HeatTransfer.Data.SolidsPCM.Generic","comment":"Thermal properties of solids with heat storage","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.BaseClasses.Material","modifications":[{"name":"R","qualifiers":["final"],"value":"x/(k)"},{"name":"phasechange","qualifiers":["final"],"value":"true"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nGeneric record for phase change materials.\nThe record extends from\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.BaseClasses.Material\\\"\u003e\nBuildings.HeatTransfer.Data.BaseClasses.Material\u003c/a\u003e\nand declares parameters and constants for phase change materials.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACACTransformerFull":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Conversion.ACACTransformerFull","comment":"AC AC transformer full model for three phase balanced systems","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformerFull","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a transformer for three-phase\nbalanced AC systems. The model includes core and magnetic losses.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformerFull\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformerFull\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.OnePhase.phaseCurrents":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.phaseCurrents","comment":"Return phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.phaseCurrents"}]},"Buildings.Fluid.Interfaces.PartialFourPortInterface":{"name":"Buildings.Fluid.Interfaces.PartialFourPortInterface","comment":"Partial model transporting fluid between two ports without storing mass or energy","qualifiers":["model","partial"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialFourPort"}],"components":[{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m1_flow_nominal","comment":"Nominal mass flow rate","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m2_flow_nominal","comment":"Nominal mass flow rate","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Medium1.MassFlowRate","qualifiers":["parameter"],"name":"m1_flow_small","comment":"Small mass flow rate for regularization of zero flow","value":"1E-4*abs(m1_flow_nominal)","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Medium2.MassFlowRate","qualifiers":["parameter"],"name":"m2_flow_small","comment":"Small mass flow rate for regularization of zero flow","value":"1E-4*abs(m2_flow_nominal)","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"show_T","comment":"\u003d true, if actual temperature at port is computed","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\", group \u003d \"Diagnostics\")"}},{"className":"Medium1.MassFlowRate","name":"m1_flow","comment":"Mass flow rate from port_a1 to port_b1 (m1_flow \u003e 0 is design flow direction)","value":"port_a1.m_flow","modifications":[{"name":"start","value":"0"}]},{"className":"Modelica.SIunits.PressureDifference","name":"dp1","comment":"Pressure difference between port_a1 and port_b1","modifications":[{"name":"start","value":"0"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Medium2.MassFlowRate","name":"m2_flow","comment":"Mass flow rate from port_a2 to port_b2 (m2_flow \u003e 0 is design flow direction)","value":"port_a2.m_flow","modifications":[{"name":"start","value":"0"}]},{"className":"Modelica.SIunits.PressureDifference","name":"dp2","comment":"Pressure difference between port_a2 and port_b2","modifications":[{"name":"start","value":"0"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Medium1.ThermodynamicState","name":"sta_a1","comment":"Medium properties in port_a1","value":"Medium1.setState_phX(port_a1.p,noEvent(actualStream(port_a1.h_outflow)),noEvent(actualStream(port_a1.Xi_outflow)))","conditionalClause":" if show_T"},{"className":"Medium1.ThermodynamicState","name":"sta_b1","comment":"Medium properties in port_b1","value":"Medium1.setState_phX(port_b1.p,noEvent(actualStream(port_b1.h_outflow)),noEvent(actualStream(port_b1.Xi_outflow)))","conditionalClause":" if show_T"},{"className":"Medium2.ThermodynamicState","name":"sta_a2","comment":"Medium properties in port_a2","value":"Medium2.setState_phX(port_a2.p,noEvent(actualStream(port_a2.h_outflow)),noEvent(actualStream(port_a2.Xi_outflow)))","conditionalClause":" if show_T"},{"className":"Medium2.ThermodynamicState","name":"sta_b2","comment":"Medium properties in port_b2","value":"Medium2.setState_phX(port_b2.p,noEvent(actualStream(port_b2.h_outflow)),noEvent(actualStream(port_b2.Xi_outflow)))","conditionalClause":" if show_T"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component defines the interface for models that\ntransport two fluid streams between four ports.\nIt is similar to\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialTwoPortInterface\\\"\u003e\nBuildings.Fluid.Interfaces.PartialTwoPortInterface\u003c/a\u003e,\nbut it has four ports instead of two.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is used by other models in this package that add heat transfer,\nmass transfer and pressure drop equations.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.Density_pTX":{"name":"Buildings.Utilities.Psychrometrics.Density_pTX","comment":"Block to compute the density for given pressure, dry bulb temperature and moisture mass fraction","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T","comment":"Dry bulb temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"X_w","comment":"Water vapor mass fraction per unit mass total air","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p","comment":"Pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-90},{-100,-70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"d","comment":"Density","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/m3\""},{"name":"quantity","qualifiers":["final"],"value":"\"Density\""},{"name":"min","qualifiers":["final"],"value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock to compute the mass density of air for given\npressure, temperature and water vapor mass fraction.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the water vapor mass fraction must be in \u003ci\u003ekg/kg\u003c/i\u003e\ntotal air, and not dry air.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Text(),Line(),Line(),Line(),Polygon(),Text(),Text(),Line()})"}},"Buildings.Fluid.MassExchangers.Humidifier_u":{"name":"Buildings.Fluid.MassExchangers.Humidifier_u","comment":"Ideal humidifier or dehumidifier with prescribed water mass flow rate addition or subtraction","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger","modifications":[{"name":"Medium","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"},{"name":"vol","qualifiers":["final"]}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_T_in","comment":"Get the temperature from the input connector","value":"false"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T","comment":"Temperature of water that is added to the fluid stream (used if use_T_in\u003dfalse)","value":"293.15","annotations":{"dialog":"Dialog(enable \u003d not use_T_in)"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"mWat_flow_nominal","comment":"Water mass flow rate at u\u003d1, positive for humidification"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T_in","comment":"Temperature of water added to the fluid stream","conditionalClause":" if use_T_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-80},{-100,-40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"u","comment":"Control input","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,40},{-100,80}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for an air humidifier or dehumidifier.\n\u003c/p\u003e\n\u003cp\u003e\nThis model adds (or removes) moisture from the air stream.\nThe amount of exchanged moisture is equal to\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nm\u0026#775;\u003csub\u003ewat\u003c/sub\u003e \u003d u  m\u0026#775;\u003csub\u003ewat,nom\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eu\u003c/i\u003e is the control input signal and\n\u003ci\u003em\u0026#775;\u003csub\u003ewat,nom\u003c/sub\u003e\u003c/i\u003e is equal to the parameter \u003ccode\u003emWat_flow_nominal\u003c/code\u003e.\nThe parameter \u003ccode\u003emWat_flow_nominal\u003c/code\u003e can be positive or negative.\nIf \u003ci\u003em\u0026#775;\u003csub\u003ewat\u003c/sub\u003e\u003c/i\u003e is positive, then moisture is added\nto the air stream, otherwise it is removed.\n\u003c/p\u003e\n\u003cp\u003eIf the connector \u003ccode\u003eT_in\u003c/code\u003e is left unconnected, the value\nset by the parameter \u003ccode\u003eT\u003c/code\u003e is used for the temperature of the water that is\nadded to the air stream.\n\u003c/p\u003e\n\u003cp\u003e\nThis model can only be used with medium models that define the integer constant\n\u003ccode\u003eWater\u003c/code\u003e which needs to be equal to the index of the water mass fraction\nin the species vector.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Text(),Rectangle(),Text(),Text(),Rectangle()})"}},"Buildings.Utilities.Math.SmoothHeaviside":{"name":"Buildings.Utilities.Math.SmoothHeaviside","comment":"Once continuously differentiable approximation to the Heaviside function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"delta","comment":"Width of transition interval"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce Lipschitz continuously differentiable approximation to the \u003ci\u003eHeaviside(.,.)\u003c/i\u003e function.\nSee Example \u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothHeaviside\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothHeaviside\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Polygon(),Text(),Polygon(),Text(),Line(),Line(),Line(),Text(),Text(),Text(),Line(),Line()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_3_0_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_3_0_0","comment":"Version 3.0.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n   \u003cdiv class\u003d\\\"release-summary\\\"\u003e\n   \u003cp\u003e\n   Version 3.0.0 is a major new release.\n   \u003c/p\u003e\n   \u003cp\u003e\n     The following major changes have been done:\n   \u003cul\u003e\n     \u003cli\u003e\n       Electrochromic windows have been added. See \u003ccode\u003eBuildings.Rooms.Examples.ElectroChromicWindow\u003c/code\u003e.\n     \u003c/li\u003e\n     \u003cli\u003e\n       The models in \u003ccode\u003eBuildings.Fluid.Movers\u003c/code\u003e can now be configured to use\n       three different control input signals: a continuous signal (depending on the model\n       either normalized speed, speed in rpm, prescribed mass flow rate or prescribed head),\n       discrete stages of these quantities, or on/off.\n       The models also have been refactored to make their implementation clearer.\n     \u003c/li\u003e\n     \u003cli\u003e\n       The new package \u003ccode\u003eBuildings.Fluid.HeatPumps\u003c/code\u003e has been added.\n       This package contains models for idealized heat pumps\n       whose COP changes proportional to the change in COP of a Carnot cycle,\n       with an optional correction for the part load efficiency.\n     \u003c/li\u003e\n     \u003cli\u003e\n       Various models, in particular in the package \u003ccode\u003eBuildings.Electrical\u003c/code\u003e,\n       have been reformulated to comply with the Modelica Language Definition.\n       All models comply with the pedantic Modelica check of Dymola.\n     \u003c/li\u003e\n   \u003c/ul\u003e\n   \u003c/div\u003e\n   \u003c!-- New libraries --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatPumps\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eLibrary with heat pump models.\n                          This library contains models for idealized heat pumps\n                          whose COP changes proportional to the change in COP of a Carnot cycle.\n                          Optionally, a part load efficiency curve can be specified.\n                          The model \u003ccode\u003eBuildings.Fluid.HeatPumps.Carnot_TCon\u003c/code\u003e\n                          takes as a control input the leaving\n                          condenser fluid temperature, and the model\n                          \u003ccode\u003eBuildings.Fluid.HeatPumps.Carnot_y\u003c/code\u003e takes as\n                          a control signal the compressor speed.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c!-- New components for existing libraries --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\n   to \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions.SolarGeometry\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SolarGeometry.ProjectedShadowLength\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eBlock that computes the length of a shadow projected onto a horizontal plane\n                          into the direction that is perpendicular to the azimuth of a surface.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Electrical\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Adapter3to3\u003cbr/\u003e\n                        Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to3Ground_n\u003cbr/\u003e\n                        Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to3Ground_p\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eAdapters for unbalanced three phase systems which are required because\n                        the previous formulation used connect statements that violate the Modelica\n                        Language Definition. This change was required to enable pedantic model check and translation\n                        in Dymola 2016 FD01.\n                          This is for\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/426\\\"\u003e#426\u003c/a\u003e.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Chillers\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Chillers.Carnot_TEva\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eChiller model whose efficiency changes with temperatures\n                          similarly to a change in Carnot efficiency. The control input signal\n                          is the evaporator leaving fluid temperature.\n                          This is for\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/353\\\"\u003eAnnex 60, #353\u003c/a\u003e.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Sensors\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.PPM\u003cbr/\u003e\n                          Buildings.Fluid.Sensors.PPMTwoPort\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eSensors that measure trace substances in parts per million.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer.Windows\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.BeamDepthInRoom\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eBlock that computes the maximum distance at which\n                          a solar beam that enters the window hits the workplane.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Math\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Math.Functions.smoothInterpolation\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eFunction that interpolates for vectors \u003ccode\u003exSup[]\u003c/code\u003e, \u003ccode\u003eySup[]\u003c/code\u003e\n                          and independent variable \u003ccode\u003ex\u003c/code\u003e.\n                          The interpolation is done using a cubic Hermite spline with linear extrapolation.\n       \u003c/td\u003e\n       \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c!-- Backward compatible changes --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\n   have been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n   \u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear\u003cbr/\u003e\n                          Buildings.Fluid.Actuators.Valves.ThreeWayLinear\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the default value for valve leakage\n                       parameter \u003ccode\u003el\u003c/code\u003e from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e0.0001\u003c/code\u003e.\n                       This is the same value as is used for the two-way valves,\n                       and avoids an assertion that would be triggered if \u003ccode\u003el\u003d0\u003c/code\u003e.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n    \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.Boreholes.UTube\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eUpdated code for 64 bit on Linux and Windows.\n                          This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/485\\\"\u003eissue 485\u003c/a\u003e.\n       \u003c/td\u003e\n    \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryEffectivenessNTU\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReformulated model to allow translation in OpenModelica.\n                       This is for issue\n                        \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/490\\\"\u003e#490\u003c/a\u003e.\n    \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes.MixingVolume\u003cbr/\u003e\n                          Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded the parameter \u003ccode\u003euse_C_flow\u003c/code\u003e. If set\n                       to \u003ccode\u003etrue\u003c/code\u003e, an input connector will be enabled that can be used\n                       to add a trace substance flow rate, such as CO2, to the volume.\n    \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_m_flow\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_Nrpm\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_y\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded the parameter \u003ccode\u003einputType\u003c/code\u003e which allows\n                       to set the input as an continuous input signal,\n                       to set the input as an integer input signal that selects the stage of the mover,\n                       or to remove the input connector and use a parameter\n                       to assign the control signal.\n    \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.StratifiedEnhancedInternalHex\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eAdded option to set dynamics of heat exchanger material\n                        separately from the dynamics of the fluid inside the heat\n                        exchanger.\n                        This is for issue\n                        \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/434\\\"\u003e#434\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.FourPortHeatMassExchanger\u003cbr/\u003e\n                          Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\n\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003ePropagated parameter \u003ccode\u003eallowFlowReversal\u003c/code\u003e\n                          which can cause a simpler energy balance to be used.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialTwoPortTransport\n\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eImplemented more efficient computation of \u003ccode\u003eport_a.Xi_outflow\u003c/code\u003e\n                          and \u003ccode\u003eport_a.C_outflow\u003c/code\u003e when \u003ccode\u003eallowFlowReversal\u003dfalse\u003c/code\u003e.\n                          This is for\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/305\\\"\u003eAnnex 60 issue 305\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp\u003cbr/\u003e\n                        Buildings.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow\n\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eRefactored for a more efficient implementation.\n                        Removed double declaration of \u003ccode\u003esmooth(..)\u003c/code\u003e and \u003ccode\u003esmoothOrder\u003c/code\u003e\n                        and changed \u003ccode\u003eInline\u003dtrue\u003c/code\u003e to \u003ccode\u003eLateInline\u003dtrue\u003c/code\u003e.\n                        This is for\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/301\\\"\u003eAnnex 60 issue 301\u003c/a\u003e\n                        and for \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/279\\\"\u003eAnnex 60 issue 279\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.BaseClasses.CFDExchange\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eSet \u003ccode\u003estart\u003c/code\u003e and \u003ccode\u003efixed\u003c/code\u003e\n                          attributes in\n                          \u003ccode\u003eu[nWri](start\u003d_uStart, each fixed\u003dtrue)\u003c/code\u003e\n                          to avoid a warning in Dymola 2016 about unspecified initial conditions.\n                          This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/422\\\"\u003eissue 422\u003c/a\u003e.\u003cbr/\u003e\n                          Set \u003ccode\u003estart\u003c/code\u003e and \u003ccode\u003efixed\u003c/code\u003e\n                          attributes in\n                          \u003ccode\u003efirstTrigger(start\u003dfalse, fixed\u003dtrue)\u003c/code\u003e,\n                          \u003ccode\u003eretVal(start\u003d0, fixed\u003dtrue)\u003c/code\u003e and \u003ccode\u003emodTimRea(fixed\u003dfalse)\u003c/code\u003e\n                          to avoid such a warning in the pedantic Modelica check in Dymola 2016.\n                          This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/459\\\"\u003eissue 459\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.CFD\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eUpdated code for 64 bit on Linux and Windows.\n                          This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/485\\\"\u003eissue 485\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Math.Functions\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eRefactored \u003ccode\u003eBuildings.Utilities.Math.Functions.inverseXRegularized\u003c/code\u003e\n                        to make it more efficient as it is used in many steady-state energy balances.\n                          This closes\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/302\\\"\u003eAnnex 60 issue 302\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n  \u003c/table\u003e\n   \u003c!-- Non-backward compatible changes to existing components --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\n   have been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n   \u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n    \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SkyTemperature.BlackBody\u003cbr/\u003e\n                          Buildings.BoundaryConditions.WeatherData.Bus\n     \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eRenamed the connector from \u003ccode\u003eradHorIR\u003c/code\u003e to \u003ccode\u003eHHorIR\u003c/code\u003e\n                          This is for\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/376\\\"\u003eAnnex 60 issue 376\u003c/a\u003e.\n                          For Dymola, the conversion script updates these connections.\n                          However, this also results in a renaming of the weather bus variable\n                          \u003ccode\u003eweaBus.radHorIR\u003c/code\u003e to \u003ccode\u003eHHorIR\u003c/code\u003e, which may\n                          require a manual update.\n       \u003c/td\u003e\n     \u003c/tr\u003e\n\n    \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.StaticTwoPortConservationEquation\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the constant \u003ccode\u003esensibleOnly\u003c/code\u003e and\n                        introduced instead the parameter \u003ccode\u003euse_mWat_flow\u003c/code\u003e.\n                        The new parameter, if set to \u003ccode\u003etrue\u003c/code\u003e, will enable an input connector\n                        that can be used to add water to the conservation equation..\n                        For Dymola, the conversion script updates the model for these changes.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Chillers.Carnot\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eRenamed the model to  \u003ccode\u003eBuildings.Fluid.Chillers.Carnot_y\u003c/code\u003e\n                        due to the addition of the new model \u003ccode\u003eBuildings.Fluid.Chillers.Carnot_TEva\u003c/code\u003e.\n                        In addition, the following parameter names were changed:\n                        \u003ccode\u003euse_eta_Carnot\u003c/code\u003e was changed to \u003ccode\u003euse_eta_Carnot_nominal\u003c/code\u003e, and\n                        \u003ccode\u003eetaCar\u003c/code\u003e was changed to \u003ccode\u003eetaCarnot_nominal\u003c/code\u003e.\n                        This is for\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/353\\\"\u003eAnnex 60 issue 353\u003c/a\u003e.\n                        For Dymola, the conversion script removes these parameters.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_m_flow\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_Nrpm\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_y\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the parameters \u003ccode\u003euse_powerCharacteristics\u003c/code\u003e\n                        and \u003ccode\u003emotorCooledByFluid\u003c/code\u003e as these are already\n                        declared in the performance data record \u003ccode\u003eper\u003c/code\u003e.\n                        This is for issue\n                        \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/434\\\"\u003e#457\u003c/a\u003e.\n                        For Dymola, the conversion script removes these parameters.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_m_flow\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_Nrpm\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_y\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the public variable \u003ccode\u003er_N\u003c/code\u003e.\n                        This is for\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/417\\\"\u003eAnnex 60 issue 417\u003c/a\u003e.                        For Dymola, the conversion script will remove\n                        For Dymola, the conversion script removes\n                        assignments of \u003ccode\u003er_N(start)\u003c/code\u003e.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_m_flow\n   \u003c/td\u003e\n   \u003ctd valign\u003d\\\"top\\\"\u003eWrite a warning if no pressure curve is provided because\n                     the efficiency calculation can only be done correctly if a pressure curve\n                     is provided. The warning can be suppressed by providing a pressure curve, or\n                     by setting \u003ccode\u003enominalValuesDefineDefaultPressureCurve\u003dtrue\u003c/code\u003e.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.Data\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eReplaced the parameters\n                        \u003ccode\u003eBuildings.Fluid.Movers.Data.FlowControlled\u003c/code\u003e,\n                        \u003ccode\u003eBuildings.Fluid.Movers.Data.SpeedControlled_y\u003c/code\u003e, and\n                        \u003ccode\u003eBuildings.Fluid.Movers.Data.SpeedControlled_Nrpm\u003c/code\u003e by\n                        the parameter\n                        \u003ccode\u003eBuildings.Fluid.Movers.Data.Generic\u003c/code\u003e\n                        which is used for all four types of movers.\n                        This is for\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/417\\\"\u003eAnnex 60 issue 417\u003c/a\u003e.\n                        This change allows to correctly compute the fan or pump power also for the models\n                        \u003ccode\u003eBuildings.Fluid.Movers.FlowControlled_dp\u003c/code\u003e,\n                        \u003ccode\u003eBuildings.Fluid.Movers.FlowControlled_m_flow\u003c/code\u003e\n                        for speeds that are different from the nominal speed, provided that the user\n                        specifies the pressure curve.\n                        For Dymola, the conversion script updates this parameter.\u003cbr/\u003e\u003cbr/\u003e\n                        In the previous record\n                        \u003ccode\u003eBuildings.Fluid.Movers.Data.SpeedControlled_Nrpm\u003c/code\u003e,\n                        changed the parameter \u003ccode\u003eN_nominal\u003c/code\u003e to \u003ccode\u003espeed_rpm_nominal\u003c/code\u003e.\n                        This is for\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/396\\\"\u003eAnnex 60 issue 396\u003c/a\u003e.\n                        For Dymola, the conversion script updates this parameter.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.BaseClasses.PartialThreeWayResistance\u003cbr/\u003e\n                          Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_m_flow\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_Nrpm\u003cbr/\u003e\n                          Buildings.Fluid.Movers.FlowControlled_y\u003cbr/\u003e\n                          Buildings.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear\u003cbr/\u003e\n                          Buildings.Fluid.Actuators.Valves.ThreeWayLinear\u003cbr/\u003e\n                          Buildings.Fluid.Actuators.Valves.TwoWayEqualPercentage\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eRemoved parameter \u003ccode\u003edynamicBalance\u003c/code\u003e that overwrote the setting\n                        of \u003ccode\u003eenergyDynamics\u003c/code\u003e and \u003ccode\u003emassDynamics\u003c/code\u003e.\n                        This is for\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/411\\\"\u003e\n                        Annex 60, issue 411\u003c/a\u003e.\n                        For Dymola, the conversion script updates the models.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialTwoPort\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eRenamed the protected parameters\n                        \u003ccode\u003eport_a_exposesState\u003c/code\u003e, \u003ccode\u003eport_b_exposesState\u003c/code\u003e and\n                        \u003ccode\u003eshowDesignFlowDirection\u003c/code\u003e.\n                        This is for\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/349\\\"\u003eAnnex 60 issue 349\u003c/a\u003e\n                        and\n                        \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/351\\\"\u003eAnnex 60 issue 351\u003c/a\u003e.\n                        For Dymola, the conversion script updates models\n                        that extend from \u003ccode\u003eBuildings.Fluid.Interfaces.PartialTwoPort\u003c/code\u003e.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.FourPort\n     \u003c/td\u003e\n     \u003ctd valign\u003d\\\"top\\\"\u003eRenamed model to \u003ccode\u003eBuildings.Fluid.Interfaces.PartialFourPort\u003c/code\u003e and\n                        removed the parameters\n                        \u003ccode\u003eh_outflow_a1_start\u003c/code\u003e,\n                        \u003ccode\u003eh_outflow_b1_start\u003c/code\u003e,\n                        \u003ccode\u003eh_outflow_a2_start\u003c/code\u003e and\n                        \u003ccode\u003eh_outflow_b2_start\u003c/code\u003e\n                        to make the model similar to \u003ccode\u003eBuildings.Fluid.Interfaces.PartialTwoPort\u003c/code\u003e.\n                        See \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/299\\\"\u003eAnnex 60 issue 299\u003c/a\u003e\n                        for a discussion.\n                        For Dymola, the conversion script updates models\n                        that extend from \u003ccode\u003eBuildings.Fluid.Interfaces.FourPort\u003c/code\u003e.\n     \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.StaticTwoPortConservationEquation\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003e\n                        Revised implementation of conservation equations and\n                        added default values for outlet quantities at \u003ccode\u003eport_a\u003c/code\u003e\n                        if \u003ccode\u003eallowFlowReversal\u003dfalse\u003c/code\u003e.\n                        This is for \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/281\\\"\u003eAnnex 60 issue 281\u003c/a\u003e.\n                        Also, revised implementation so that equations are always consistent\n                        and do not lead to division by zero,\n                        also when connecting a \u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e\n                        to \u003ccode\u003eMixingVolume\u003c/code\u003e instances.\n                        Renamed \u003ccode\u003euse_safeDivision\u003c/code\u003e to \u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e.\n                        See \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/282\\\"\u003eAnnex 60 issue 282\u003c/a\u003e\n                        for a discussion.\n                        For users who simply instantiate existing component models, this change is backward\n                        compatible.\n                        However, developers who implement component models that extend from\n                        \u003ccode\u003eBuildings.Fluid.Interfaces.StaticTwoPortConservationEquation\u003c/code\u003e may need to update\n                        the parameter \u003ccode\u003euse_safeDivision\u003c/code\u003e and use instead \u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e.\n                        See the model documentation.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n       \u003c/td\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\u003cbr/\u003e\n                          Buildings.Rooms.CFD\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eThese models can now be used with electrochromic windows.\n                          This required to change the glass properties\n                          \u003ccode\u003etauSol\u003c/code\u003e, \u003ccode\u003erhoSol_a\u003c/code\u003e and \u003ccode\u003erhoSol_b\u003c/code\u003e\n                          to be arrays. For example, to convert an existing model, use\n                          \u003ccode\u003etauSol\u003d{0.6}\u003c/code\u003e instead of \u003ccode\u003etauSol\u003d0.6\u003c/code\u003e.\n                          For Dymola, the conversion script will automatically\n                          update existing models.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Obsolete\u003c/b\u003e\n       \u003c/td\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Obsolete.Fluid.Movers\u003cbr/\u003e\n                          Buildings.Obsolete.Media\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eRemoved these packages which have models from\n                          release 2.0.0.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c!-- Errors that have been fixed --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\n   that can lead to wrong simulation results):\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Chillers\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Chillers.Carnot\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong computation of state of leaving fluid\n                          \u003ccode\u003estaB1\u003c/code\u003e and \u003ccode\u003estaB2\u003c/code\u003e\n                          for the configuration without flow reversal.\n                          The previous implementation mistakenly used the \u003ccode\u003einStream\u003c/code\u003e operator.\n                          This is for\n                          \u003ca href\u003d\\\"modelica://https://github.com/lbl-srg/modelica-buildings/issues/476\\\"\u003e\n                          issue 476\u003c/a\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003c/table\u003e\n   \u003c!-- Uncritical errors --\u003e\n   \u003cp\u003e\n   The following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\n   that do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\n   units are wrong or errors in documentation):\n   \u003c/p\u003e\n   \u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d0 cellpadding\u003d2 style\u003d\\\"border-collapse:collapse;\\\"\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Electrical\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Electrical.Interfaces.PartialWindTurbine\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eReformulated test for equality of \u003ccode\u003eReal\u003c/code\u003e variables. This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/493\\\"\u003eissue 493\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Conduction.SingleLayer\u003cbr/\u003e\n                          Buildings.HeatTransfer.Data.BaseClasses\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eReformulated test for equality of \u003ccode\u003eReal\u003c/code\u003e variables. This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/493\\\"\u003eissue 493\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.FMI.FlowSplitter_u\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong assert statement. This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/442\\\"\u003eissue 442\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Chillers.Carnot\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong assert statement for test on the efficiency function. This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/468\\\"\u003eissue 468\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Media\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.Specialized.Water.TemperatureDependentDensity\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eRemoved dublicate entry of \u003ccode\u003esmooth\u003c/code\u003e and \u003ccode\u003esmoothOrder\u003c/code\u003e.\n                          This is for\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/303\\\"\u003eAnnex 60 issue 303\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.BaseClasses.MixedAirHeatGain\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eReformulated test for equality of \u003ccode\u003eReal\u003c/code\u003e variables. This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/493\\\"\u003eissue 493\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Math\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Math.Functions.BaseClasses.der_2_regNonZeroPower\u003cbr/\u003e\n                          Buildings.Utilities.Math.Functions.BaseClasses.der_polynomial\u003cbr/\u003e\n                          Buildings.Utilities.Math.Functions.BaseClasses.der_regNonZeroPower\n\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong derivative implementation and improved their regression tests.\n                          This is for\n                          \u003ca href\u003d\\\"https://github.com/iea-annex60/modelica-annex60/issues/303\\\"\u003eAnnex 60 issue 303\u003c/a\u003e.\n\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Psychrometrics\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.Density_pTX\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong default component name.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.Functions.saturationPressure\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eChanged \u003ccode\u003esmoothOrder\u003c/code\u003e from \u003ci\u003e5\u003c/i\u003e to \u003ci\u003e1\u003c/i\u003e as\n                         \u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.spliceFunction\\\"\u003e\n                         Buildings.Utilities.Math.Functions.spliceFunction\u003c/a\u003e is only once\n                         continuously differentiable.\n                         Inlined the function.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.IO.Python27\u003c/b\u003e\n       \u003c/td\u003e\n   \u003c/tr\u003e\n   \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.IO.Python27.exchange\n       \u003c/td\u003e\n       \u003ctd valign\u003d\\\"top\\\"\u003eUpdated Python implementation to allow compiling code\n                          on 64 bit Linux. Previously, on Linux a segmentation fault\n                          occurred during run-time if 64 bit code rather than\n                          32 bit code was generated. This is now corrected.\u003cbr/\u003e\n                          Also, Windows 64 bit binaries have been added.\u003cbr/\u003e\n                          This closes\n                          \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/287\\\"\u003eissue 287\u003c/a\u003e.\n       \u003c/td\u003e\n   \u003c/tr\u003e\n\n   \u003c/table\u003e\n   \u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_psX":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_psX","comment":"Return the thermodynamic state as function of p, s and composition X or Xi","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_psX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the thermodynamic state based on pressure,\nspecific entropy and mass fraction.\n\u003c/p\u003e\n\u003cp\u003e\nThe state is computed by symbolically solving\n\u003ca href\u003d\\\"modelica://Buildings.Media.Water.Detailed.specificEntropy\\\"\u003e\nBuildings.Media.Water.Detailed.specificEntropy\u003c/a\u003e\nfor temperature.\n  \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.PartialAcDcParameters":{"name":"Buildings.Electrical.Interfaces.PartialAcDcParameters","comment":"Partial model that contains basic parameters for a DC/AC conversion system","components":[{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.9","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"AC-Conversion\")"}},{"className":"Real","qualifiers":["parameter"],"name":"eta_DCAC","comment":"Efficiency of DC/AC conversion","value":"0.9","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"AC-Conversion\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model contains the minimum set of parameters necessary to describe\nan AC/DC converter.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.glassProperty":{"name":"Buildings.HeatTransfer.Windows.Functions.glassProperty","comment":"Compute angular variation and hemispherical integration of the transmittance and reflectance for each glass pane without shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialGlassRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"glass","comment":"Propertry of each glass pane","arraySubscripts":"[3,N,NSta]"},{"className":"Real","qualifiers":["array","input"],"name":"xGla","comment":"Thickness of each glass pane","arraySubscripts":"[N]"},{"className":"Modelica.SIunits.Angle","qualifiers":["array","input"],"name":"psi","comment":"Incident angles","arraySubscripts":"[HEM-1]"},{"className":"Real","qualifiers":["array","output"],"name":"layer","comment":"Transmittance, front and back reflectance","arraySubscripts":"[3,N,HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular variation and the hemispherical integration of the transmittance and reflectance for each glass pane.\nThere are two schemes for the calculation. One is for coated glass and the other is for uncoated glass.\nThe function checks the difference between front and back reflectances.\nIf the difference is less than the tolerance (0.005), it uses the formula for uncoated glass.\nOtherwise, the formula for coated glass will be used.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.thermalConductivity":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.thermalConductivity","comment":"Return the thermal conductivity","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.thermalConductivity"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the thermal conductivity.\nThe expression is obtained from Ramires et al. (1995).\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nRamires, Maria L. V. and Nieto de Castro, Carlos A. and Nagasaka, Yuchi\nand Nagashima, Akira and Assael, Marc J. and Wakeham, William A.\nStandard Reference Data for the Thermal Conductivity of Water.\n\u003ci\u003eJournal of Physical and Chemical Reference Data\u003c/i\u003e, 24, p. 1377-1381, 1995.\n\u003ca href\u003d\\\"http://dx.doi.org/10.1063/1.555963\\\"\u003eDOI:10.1063/1.555963\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimpleOriented":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimpleOriented","comment":"Simple PV source with orientation and without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.UnbalancedPV","modifications":[{"name":"pv_phase1"},{"name":"pv_phase2"},{"name":"pv_phase3"}]}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"til","comment":"Surface tilt","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface Azimith","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"BoundaryConditions.SolarIrradiation.DiffusePerez","name":"HDifTil","comment":"Diffuse irradiation on tilted surface","modifications":[{"name":"til","qualifiers":["final"],"value":"til"},{"name":"lat","qualifiers":["final"],"value":"lat"},{"name":"azi","qualifiers":["final"],"value":"azi"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{20,-80},{0,-60}}))"}},{"className":"BoundaryConditions.SolarIrradiation.DirectTiltedSurface","name":"HDirTil","comment":"Direct irradiation on tilted surface","modifications":[{"name":"til","qualifiers":["final"],"value":"til"},{"name":"lat","qualifiers":["final"],"value":"lat"},{"name":"azi","qualifiers":["final"],"value":"azi"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,-99},{40,-79}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"G","comment":"Total irradiation on tilted surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 180, origin \u003d {-76,-70}))"}},{"className":"BoundaryConditions.WeatherData.Bus","name":"weaBus","comment":"Bus with weather data","annotations":{"placement":"Placement(transformation(extent \u003d {{76,-62},{96,-42}}), iconTransformation(extent \u003d {{-10,80},{10,100}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple PV model with orientation for three-phase unbalanced systems\nwithout neutral cable connection.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.Functions.phi_pTX":{"name":"Buildings.Utilities.Psychrometrics.Functions.phi_pTX","comment":"Relative humidity for given pressure, dry bulb temperature and moisture mass fraction","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p","comment":"Absolute pressure of the medium"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Dry bulb temperature"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["input"],"name":"X_w","comment":"Water vapor mass fraction per unit mass total air"},{"className":"Real","qualifiers":["output"],"name":"phi","comment":"Relative humidity","modifications":[{"name":"unit","value":"\"1\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRelative humidity of air for given\npressure, temperature and water vapor mass fraction.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the water vapor mass fraction must be in \u003ci\u003ekg/kg\u003c/i\u003e\ntotal air, and not dry air.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_350":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_350","comment":"Annealed Al cable - kcmil 350","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"size","value":"\"350\""},{"name":"Rdc","value":"0.165682e-3"},{"name":"T_ref","value":"298.15"},{"name":"d","value":"16.789e-3"},{"name":"D","value":"34.417e-3"},{"name":"GMR","value":"Buildings.Electrical.Transmission.Functions.computeGMR(d)"},{"name":"GMD","value":"Buildings.Electrical.Transmission.Functions.computeGMD(0.1905)"},{"name":"Amp","value":"375"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAnnealed aluminium cable with a cross-sectional kcmil 350\n(thousand of Circular Mils).\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRdc  \u003d 0.165682e-3 // Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref\u003d 298.15      // Reference temperature of the material [K]\nd    \u003d 16.789e-3   // Inner diameter [m]\nD    \u003d 34.417e-3   // Outer diameter [m]\nAmp  \u003d 375         // Ampacity [A]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction17and24":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction17and24","comment":"Wall construction found in XRA","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of one of the constructions used in test cell XRA. It\n    represents the south wall, and the north wall next to the door.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of one of the constructions used in test cell XRA. It\n    represents the south wall, and the north wall next to the door.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.CoolingTowers.FixedApproach":{"name":"Buildings.Fluid.HeatExchangers.CoolingTowers.FixedApproach","comment":"Cooling tower with constant approach temperature","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.CoolingTowers.BaseClasses.CoolingTower"}],"components":[{"className":"Modelica.SIunits.TemperatureDifference","qualifiers":["parameter"],"name":"TApp","comment":"Approach temperature difference","value":"2","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"K\""}]},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TAir","comment":"Entering air dry or wet bulb temperature","modifications":[{"name":"min","value":"0"},{"name":"unit","value":"\"K\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for a steady-state or dynamic cooling tower with constant approach temperature.\nThe approach temperature is the difference between the leaving water temperature and\nthe entering air temperature.\nThe entering air temperature is used from the signal \u003ccode\u003eTAir\u003c/code\u003e. If\nconnected to the a dry-bulb temperature, then a dry cooling tower is modeled.\nIf connected to a wet-bulb temperature, then a wet cooling tower is modeled.\n\u003c/p\u003e\u003cp\u003e\nBy connecting a signal that contains either the dry-bulb or the wet-bulb\ntemperature, this model can be used to estimate the water return temperature\nfrom a cooling tower.\nFor a more detailed model, use for example the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc\\\"\u003eYorkCalc\u003c/a\u003e\nmodel.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Fluid.SolarCollectors.Data.GlazedFlatPlate.FP_ThermaLiteHS20":{"name":"Buildings.Fluid.SolarCollectors.Data.GlazedFlatPlate.FP_ThermaLiteHS20","comment":"FP - Therma-Lite, HS-20","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","modifications":[{"name":"ATyp","qualifiers":["final"],"value":"Types.Area.Gross"},{"name":"A","qualifiers":["final"],"value":"1.97"},{"name":"mDry","qualifiers":["final"],"value":"26"},{"name":"V","qualifiers":["final"],"value":"2.8/(1000)"},{"name":"dp_nominal","qualifiers":["final"],"value":"242.65"},{"name":"mperA_flow_nominal","qualifiers":["final"],"value":"0.1777"},{"name":"B0","qualifiers":["final"],"value":"-0.0693"},{"name":"B1","qualifiers":["final"],"value":"-0.2372"},{"name":"y_intercept","qualifiers":["final"],"value":"0.762"},{"name":"slope","qualifiers":["final"],"value":"-3.710"},{"name":"IAMDiff","qualifiers":["final"],"value":"0"},{"name":"C1","qualifiers":["final"],"value":"0"},{"name":"C2","qualifiers":["final"],"value":"0"},{"name":"G_nominal","qualifiers":["final"],"value":"1000"},{"name":"dT_nominal","qualifiers":["final"],"value":"10"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2012047A.\n      \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2012047A.\n      \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.SolarCollectors.ASHRAE93":{"name":"Buildings.Fluid.SolarCollectors.ASHRAE93","comment":"Model of a flat plate solar thermal collector","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.BaseClasses.PartialSolarCollector","modifications":[{"name":"perPar","qualifiers":["final"],"value":"per"}]}],"components":[{"className":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","qualifiers":["parameter"],"name":"per","comment":"Performance data","annotations":{"placement":"Placement(transformation(extent \u003d {{60,-80},{80,-60}}))"}},{"className":"BaseClasses.ASHRAESolarGain","name":"solGai","comment":"Identifies heat gained from the sun using standard ASHRAE93 calculations","modifications":[{"name":"B0","qualifiers":["final"],"value":"per.B0"},{"name":"B1","qualifiers":["final"],"value":"per.B1"},{"name":"shaCoe","qualifiers":["final"],"value":"shaCoe"},{"name":"til","qualifiers":["final"],"value":"til"},{"name":"nSeg","qualifiers":["final"],"value":"nSeg"},{"name":"y_intercept","qualifiers":["final"],"value":"per.y_intercept"},{"name":"use_shaCoe_in","qualifiers":["final"],"value":"use_shaCoe_in"},{"name":"A_c","qualifiers":["final"],"value":"TotalArea_internal"},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,38},{0,58}}))"}},{"className":"BaseClasses.ASHRAEHeatLoss","name":"heaLos","comment":"Calculates the heat lost to the surroundings using the ASHRAE93 standard calculations","modifications":[{"name":"nSeg","qualifiers":["final"],"value":"nSeg"},{"name":"slope","qualifiers":["final"],"value":"per.slope"},{"name":"y_intercept","qualifiers":["final"],"value":"per.y_intercept"},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"G_nominal","qualifiers":["final"],"value":"per.G_nominal"},{"name":"dT_nominal","value":"per.dT_nominal"},{"name":"A_c","qualifiers":["final"],"value":"TotalArea_internal"},{"name":"m_flow_nominal","value":"per.mperA_flow_nominal*per.A"},{"name":"cp_default","qualifiers":["final"],"value":"cp_default"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,6},{0,26}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n      \u003cp\u003e\n        This component models a solar thermal collector according to the ASHRAE93\n        test standard.\n      \u003c/p\u003e\n    \u003ch4\u003eNotice\u003c/h4\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          As mentioned in EnergyPlus 7.0.0 Engineering Reference, the SRCC\n          incident angle modifier equation coefficients are only valid for\n          incident angles of 60 degrees or less. Because these curves behave\n          poorly for angles greater than 60 degrees the model does not\n          calculate either direct or diffuse solar radiation gains when the\n          incidence angle is greater than 60 degrees.\n        \u003c/li\u003e\n        \u003cli\u003e\n          By default, the estimated heat capacity of the collector without\n          fluid is calculated based on the dry mass and the specific heat\n          capacity of copper.\n        \u003c/li\u003e\n      \u003c/ul\u003e\n \u003ch4\u003eReferences\u003c/h4\u003e\n   \u003cp\u003e\n     \u003ca href\u003d\\\"http://www.energyplus.gov\\\"\u003eEnergyPlus 7.0.0 Engineering Reference\u003c/a\u003e, October 13, 2011. \u003cbr/\u003e\n   \u003c/p\u003e\n \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Ellipse(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_0_6_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_6_0","comment":"Version 0.6.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nAdded the package\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.BCVTB\\\"\u003e\nBuildings.Utilities.IO.BCVTB\u003c/a\u003e\nwhich contains an interface to the\n\u003ca href\u003d\\\"http://simulationresearch.lbl.gov/bcvtb\\\"\u003eBuilding Controls Virtual Test Bed.\u003c/a\u003e\n\u003cli\u003e\nUpdated license to Modelica License 2.\n\u003cli\u003e\nReplaced\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.HumidityRatioPressure.mo\\\"\u003e\nBuildings.Utilities.Psychrometrics.HumidityRatioPressure.mo\u003c/a\u003e\nby\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.HumidityRatio_pWat.mo\\\"\u003e\nBuildings.Utilities.Psychrometrics.HumidityRatio_pWat.mo\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.VaporPressure_X.mo\\\"\u003e\nBuildings.Utilities.Psychrometrics.VaporPressure_X.mo\u003c/a\u003e\nbecause the old model used \u003ccode\u003eRealInput\u003c/code\u003e ports, which are obsolete\nin Modelica 3.0.\n\u003c/li\u003e\n\u003cli\u003e\nChanged the base class\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\nBuildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/a\u003e\nto enable computation of pressure drop of mechanical equipment.\n\u003c/li\u003e\n\u003cli\u003e\nIntroduced package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.BaseClasses.FlowModels\\\"\u003e\nBuildings.Fluid.BaseClasses.FlowModels\u003c/a\u003e to model pressure drop,\nand rewrote\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.BaseClasses.PartialResistance\\\"\u003e\nBuildings.Fluid.BaseClasses.PartialResistance\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nRedesigned package\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math\\\"\u003e\nBuildings.Utilities.Math\u003c/a\u003e to allow having blocks and functions\nwith the same name. Functions are now in\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions\\\"\u003e\nBuildings.Utilities.Math.Functions\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFixed sign error in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.BaseClasses.Stratifier\\\"\u003e\nBuildings.Fluid.Storage.BaseClasses.Stratifier\u003c/a\u003e\nwhich caused a wrong energy balance in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.StratifiedEnhanced\\\"\u003e\nBuildings.Fluid.Storage.StratifiedEnhanced\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nRenamed\n\u003ccode\u003eBuildings.Fluid.HeatExchangers.HeaterCoolerIdeal\u003c/code\u003e to\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.HeaterCoolerPrescribed\\\"\u003e\nBuildings.Fluid.HeatExchangers.HeaterCoolerPrescribed\u003c/a\u003e\nto have the same nomenclatures as is used for\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.HumidifierPrescribed\\\"\u003e\nBuildings.Fluid.MassExchangers.HumidifierPrescribed\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\nIn\n\u003ca href\u003d\\\"modelica://Buildings.Fluid/Actuators/BaseClasses/PartialDamperExponential\\\"\u003e\nBuildings.Fluid/Actuators/BaseClasses/PartialDamperExponential\u003c/a\u003e,\nadded option to compute linearization near zero based on\nthe fraction of nominal flow instead of the Reynolds number.\nThis was set as the default, as it leads most reliably to a model\nparametrization that leads to a derivative \u003ccode\u003ed m_flow/d p\u003c/code\u003e\nnear the origin that is not too steep for a Newton-based solver.\n\u003c/li\u003e\n\u003cli\u003e\nIn damper and VAV box models, added optional parameters\nto allow specifying the nominal face velocity instead of the area.\n\u003c/li\u003e\n\u003cli\u003e\nSet nominal attribute for pressure drop \u003ccode\u003edp\u003c/code\u003e in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.BaseClasses.PartialResistance\\\"\u003e\nBuildings.Fluid.BaseClasses.PartialResistance\u003c/a\u003e and in its\nchild classes.\n\u003c/li\u003e\n\u003cli\u003e\nAdded models for chiller\n(\u003ca href\u003d\\\"modelica://Buildings.Fluid.Chillers.Carnot\\\"\u003e\nBuildings.Fluid.Chillers.Carnot\u003c/a\u003e),\nfor occupancy\n(\u003ca href\u003d\\\"modelica://Buildings.Controls.SetPoints.OccupancySchedule\\\"\u003e\nBuildings.Controls.SetPoints.OccupancySchedule\u003c/a\u003e) and for\nblocks that take a vector as an argument\n(\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Min\\\"\u003e\nBuildings.Utilities.Math.Min\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Max\\\"\u003e\nBuildings.Utilities.Math.Max\u003c/a\u003e, and\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Average\\\"\u003e\nBuildings.Utilities.Math.Average\u003c/a\u003e).\n\u003c/li\u003e\n\u003cli\u003e\nChanged various variable names to be consistent with naming\nconvention used in Modelica.Fluid 1.0.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.GlazingSystems.Generic":{"name":"Buildings.HeatTransfer.Data.GlazingSystems.Generic","comment":"Thermal properties of glazing systems","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"haveExteriorShade","comment":"Set to true if window has an exterior shade (at surface a)","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"haveInteriorShade","comment":"Set to true if window has an interior shade (at surface b)","value":"false"},{"className":"Glasses.Generic","qualifiers":["array","parameter"],"name":"glass","comment":"Layer by layer declaration of glass layers, starting from outside to room-side","arraySubscripts":"[:]","annotations":{"placement":"Placement(transformation(extent \u003d {{60,60},{80,80}}))"}},{"className":"Gases.Generic","qualifiers":["array","parameter"],"name":"gas","comment":"Layer by layer declaration of glass layers, starting from outside to room-side","value":"{Buildings.HeatTransfer.Data.Gases.Air()}","arraySubscripts":"[:]","annotations":{"placement":"Placement(transformation(extent \u003d {{60,20},{80,40}}))"}},{"className":"Shades.Generic","qualifiers":["parameter"],"name":"shade","comment":"Shade","annotations":{"dialog":"Dialog(enable \u003d haveInteriorShade or haveExteriorShade)"}},{"className":"Modelica.SIunits.CoefficientOfHeatTransfer","qualifiers":["parameter"],"name":"UFra","comment":"U-value of frame"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIRFra","comment":"Infrared absorptivity of window frame","value":"0.8"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absSolFra","comment":"Solar absorptivity of window frame","value":"0.5"},{"className":"Boolean","qualifiers":["final","parameter"],"name":"haveShade","comment":"Parameter that is true if the construction has a shade","value":"haveInteriorShade or haveExteriorShade"},{"className":"Boolean","qualifiers":["final","parameter"],"name":"haveControllableWindow","comment":"Flag, true if the window allows multiple states, such as for electrochromic windows","value":"Modelica.Math.BooleanVectors.anyTrue({size(glass[iGla].tauSol,1)\u003e1iGla in 1:size(glass,1)})"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nGeneric record that implements thermophysical properties for glazing systems.\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Rooms.X3A.ClosetFullBed":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3A.ClosetFullBed","comment":"Model of the closet connected to test cell X3A intended to be connected to X3B.Closet","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"hRoo","value":"3.6576"},{"name":"AFlo","value":"3.93"},{"name":"lat","value":"0.66098585832754"},{"name":"nConExt","value":"2"},{"name":"nConBou","value":"2"},{"name":"nSurBou","value":"3"},{"name":"nConExtWin","value":"0"},{"name":"nConPar","value":"0"},{"name":"surBou","modifications":[{"name":"A","value":"{3.6576*2.886075-2.39*1.22,2.39*1.22,3.6576*1.524}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","qualifiers":["each"],"value":"Buildings.Types.Tilt.Wall"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{higIns,roo}"},{"name":"A","value":"{3.6576*1.667,AFlo}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{higIns,slaCon}"},{"name":"A","value":"{3.6576*1.524,3.93}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Floor}"},{"name":"azi","value":"{Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.N}"}]}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall","qualifiers":["replaceable"],"name":"higIns","comment":"High insulation wall. Between X3A closet and exterior, X3A closet and electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-208},{450,-188}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall","qualifiers":["replaceable"],"name":"celDiv","comment":"Wall dividing the X3A closet and the X3B closet","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-178},{450,-158}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"roo","comment":"Construction of the roof of the closet in X3A","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-148},{450,-128}}))"}},{"className":"HeatTransfer.Data.OpaqueConstructions.Generic","name":"slaCon","comment":"Construction of the slab","modifications":[{"name":"nLay","value":"3"},{"name":"material","value":"{Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic()}"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{432,-118},{452,-98}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a duplicate model of \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3A.Closet\\\"\u003e\n    Buildings.Rooms.FLEXLAB.Rooms.X3A.Closet\u003c/a\u003e with the wall separating this model and\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3B.Closet\\\"\u003e\n    Buildings.Rooms.FLEXLAB.Rooms.X3B.Closet\u003c/a\u003e removed. It is intended for use in simulations\n    which include both room models to simulate the whole test bed. If the regular models are used\n    the wall separating the closets will be modeled twice, so one model must have the wall removed.\n    This documentation only describes the walls and connections which are different from\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3A.Closet\\\"\u003e\n    Buildings.Rooms.FLEXLAB.Rooms.X3A.Closet\u003c/a\u003e. For information on the rest of the walls\n    and connections see that documentation.\n    \u003c/p\u003e\n    \u003cp\u003e\n    There are four different wall sections connected to the closet modeled here. They are shown\n    in the figure below. Only wall section 2 is described in this documentation.\n    \u003c/p\u003e\n    \u003cp align\u003d\\\"center\\\"\u003e\n    \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3A/Closet.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in Closet model\\\"/\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\n    The different wall sections are represented in the model according to the following table.\n    \u003c/p\u003e\n    \u003ctable border \u003d \\\"1\\\" summary \u003d \\\"Wall sections in Closet model\\\"\u003e\n    \u003ctr\u003e\n    \u003cth\u003eWall Section Number\u003c/th\u003e\n    \u003cth\u003eDescription\u003c/th\u003e\n    \u003cth\u003eLocation in Model\u003c/th\u003e\n    \u003cth\u003eCorresponding Layer\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003e2\u003c/td\u003e\n    \u003ctd\u003eDividing wall modeled in X3B.Closet\u003c/td\u003e\n    \u003ctd\u003esurBou[3]\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003c/table\u003e\n    \u003cp\u003e\n    As a result of removing the dividing wall construction, the location of the construction of the floor has changed.\n    The following table shows the old and new location of this wall construction.\n    \u003c/p\u003e\n    \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Changes to construction locations\\\"\u003e\n    \u003ctr\u003e\n    \u003cth\u003ePhysical Description\u003c/th\u003e\n    \u003cth\u003eLocation in Closet\u003c/th\u003e\n    \u003cth\u003eLocation in ClosetNoCelDiv\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003eConstruction modeling the floor\u003c/td\u003e\n    \u003ctd\u003edatConBou[3]\u003c/td\u003e\n    \u003ctd\u003edatConBou[2]\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003c/table\u003e\n    \u003cp\u003e\n    Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n    The following table describes the connections to models outside of the X3A package. The connections in datConExt\n    are not described in the table because they are connected to the external environment, and no additional heat\n    port connections are necessary. A rationale for why the model is created this way is also provided if it is\n    considered necessary.\n    \u003c/p\u003e\n    \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Intended connections including the Closet model\\\"\u003e\n    \u003ctr\u003e\n    \u003cth\u003eLocation in Closet\u003c/th\u003e\n    \u003cth\u003eDescription of External Connection\u003c/th\u003e\n    \u003cth\u003eLocation in External Model\u003c/th\u003e\n    \u003cth\u003eRationale\u003c/th\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd\u003esurf_surBou[3]\u003c/td\u003e\n    \u003ctd\u003eX3B.Closet\u003c/td\u003e\n    \u003ctd\u003eX3B.Closet.surf_conBou[2]\u003c/td\u003e\n    \u003ctd\u003eX3B.Closet.surf_conBou[2] is the location of the cell dividing wall in the neighboring closet. Connecting\n    X3A.ClosetNoCelDiv.surf_surBou[3] to this port models heat transfer from the wall in X3B.Closet to the air in this\n    space.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003c/table\u003e\n    \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Airflow.Multizone.DoorDiscretizedOperable":{"name":"Buildings.Airflow.Multizone.DoorDiscretizedOperable","comment":"Door model using discretization along height coordinate","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Airflow.Multizone.BaseClasses.DoorDiscretized"}],"components":[{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dpCloRat","comment":"|Closed aperture rating conditions|Pressure drop at rating condition","value":"4","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Real","qualifiers":["parameter"],"name":"CDCloRat","comment":"|Closed aperture rating conditions|Discharge coefficient","value":"1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"LClo","comment":"|Closed aperture|Effective leakage area","modifications":[{"name":"min","value":"0"}]},{"className":"Real","qualifiers":["parameter"],"name":"CDOpe","comment":"|Open aperture|Discharge coefficient","value":"0.65"},{"className":"Real","qualifiers":["parameter"],"name":"CDClo","comment":"|Closed aperture|Discharge coefficient","value":"0.65"},{"className":"Real","qualifiers":["parameter"],"name":"mOpe","comment":"|Open aperture|Flow exponent for door","value":"0.5"},{"className":"Real","qualifiers":["parameter"],"name":"mClo","comment":"|Closed aperture|Flow exponent for crack","value":"0.65"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y","comment":"Opening signal, 0\u003dclosed, 1\u003dopen","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}), iconTransformation(extent \u003d {{-120,-10},{-100,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes the bi-directional air flow through an open door.\n\u003c/p\u003e\n\u003cp\u003e\nTo compute the bi-directional flow,\nthe door is discretize along the height coordinate, and uses\nan orifice equation to compute the flow for each compartment.\n\u003c/p\u003e\n\u003cp\u003e\nThe door can be either open or closed, depending on the input signal\n\u003ci\u003ey\u003c/i\u003e.\nSet \u003ci\u003ey\u003d0\u003c/i\u003e if the door is closed, and \u003ci\u003ey\u003d1\u003c/i\u003e\nif the door is open.\nUse the model\n\u003ca href\u003d\\\"modelica://Buildings.Airflow.Multizone.Crack\\\"\u003e\nBuildings.Airflow.Multizone.Crack\n\u003c/a\u003e for a door that is always closed.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortResistance":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortResistance","comment":"Model of a resistance with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort"},{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_ref","comment":"Reference temperature","value":"298.15"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"M","comment":"Temperature constant (R_actual \u003d R*(M + T_heatPort)/(M + T_ref))","value":"507.65"},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance at temperature T_ref"},{"className":"OnePhase.Lines.TwoPortResistance","name":"phase1","comment":"Resistance line 1","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortResistance","name":"phase2","comment":"Resistance line 2","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortResistance","name":"phase3","comment":"Resistance line 3","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistive model that connects two AC three-phase\nunbalanced interfaces. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortR.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped resistance as shown in the figure above.\nAssuming that the resistance \u003ci\u003eR\u003c/i\u003e is the overall resistance of the cable,\neach line has a resistance equal to \u003ci\u003eR/3\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Rectangle(),Text()})"}},"Buildings.Utilities.Psychrometrics.Phi_pTX":{"name":"Buildings.Utilities.Psychrometrics.Phi_pTX","comment":"Block to compute the relative humidity for given pressure, dry bulb temperature and moisture mass fraction","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T","comment":"Dry bulb temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"X_w","comment":"Water vapor mass fraction per unit mass total air","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p","comment":"Pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-90},{-100,-70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"phi","comment":"Relative humidity","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock to compute the relative humidity of air for given\npressure, temperature and water vapor mass fraction.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the water vapor mass fraction must be in \u003ci\u003ekg/kg\u003c/i\u003e\ntotal air, and not dry air.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Text(),Line(),Line(),Line(),Polygon(),Text(),Line(),Text()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_d.phaseVoltages":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_d.phaseVoltages","comment":"Return phase to neutral voltages","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Voltage","qualifiers":["input"],"name":"V","comment":"system voltage"},{"className":"SI.Angle","qualifiers":["input"],"name":"phi","comment":"phase angle","value":"0"},{"className":"SI.Voltage","qualifiers":["array","output"],"name":"v","comment":"phase to neutral voltages","arraySubscripts":"[n]"}]},"Buildings.Fluid.Sensors.TraceSubstancesTwoPort":{"name":"Buildings.Fluid.Sensors.TraceSubstancesTwoPort","comment":"Ideal two port sensor for trace substance","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"C","comment":"Trace substance of the passing fluid","modifications":[{"name":"min","value":"0"},{"name":"start","value":"C_start"}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}},{"className":"String","qualifiers":["parameter"],"name":"substanceName","comment":"Name of trace substance","value":"\"CO2\""},{"className":"Real","qualifiers":["parameter"],"name":"C_start","comment":"Initial or guess value of output (\u003d state)","value":"0","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the trace substance of the passing fluid.\nThe sensor is ideal, i.e., it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.Fluid.SolarCollectors.Data.Tubular.T_JiaxingDiyiC0130":{"name":"Buildings.Fluid.SolarCollectors.Data.Tubular.T_JiaxingDiyiC0130","comment":"T - Jiaxing Diyi New Energy Co., Ltd., DIYI-C01-30","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","modifications":[{"name":"ATyp","qualifiers":["final"],"value":"Types.Area.Gross"},{"name":"A","qualifiers":["final"],"value":"4.650"},{"name":"mDry","qualifiers":["final"],"value":"95"},{"name":"V","qualifiers":["final"],"value":"1.7/(1000)"},{"name":"dp_nominal","qualifiers":["final"],"value":"100"},{"name":"mperA_flow_nominal","qualifiers":["final"],"value":"0.0142"},{"name":"B0","qualifiers":["final"],"value":"1.4564"},{"name":"B1","qualifiers":["final"],"value":"-0.9136"},{"name":"y_intercept","qualifiers":["final"],"value":"0.388"},{"name":"slope","qualifiers":["final"],"value":"-1.453"},{"name":"IAMDiff","qualifiers":["final"],"value":"0"},{"name":"C1","qualifiers":["final"],"value":"0"},{"name":"C2","qualifiers":["final"],"value":"0"},{"name":"G_nominal","qualifiers":["final"],"value":"1000"},{"name":"dT_nominal","qualifiers":["final"],"value":"10"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e.\n        SRCC# \u003d 2012036A.\n      \u003c/p\u003e\n      \u003cp\u003e\n        The ratings provided for \u003ccode\u003edp_nominal\u003c/code\u003e were suspicious\n        so 100 Pa is used instead.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e.\n        SRCC# \u003d 2012036A.\n      \u003c/p\u003e\n      \u003cp\u003e\n        The ratings provided for \u003ccode\u003edp_nominal\u003c/code\u003e were suspicious\n        so 100 Pa is used instead.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.SolarCollectors.Controls.SolarPumpController":{"name":"Buildings.Fluid.SolarCollectors.Controls.SolarPumpController","comment":"Controller which activates a circulation pump when solar radiation is above a critical level","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"delY","comment":"Width of the smoothHeaviside function","value":"0.01","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"W/m2\""}]},{"className":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","qualifiers":["parameter"],"name":"per","comment":"Performance data","annotations":{"placement":"Placement(transformation(extent \u003d {{60,60},{80,80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TIn","comment":"Fluid temperature entering the collector","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","qualifiers":["final"],"value":"\"degC\""},{"name":"quantity","value":"\"ThermodynamicTemperature\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"On/off control signal for the pump","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-18},{136,18}}))"}},{"className":"Buildings.BoundaryConditions.WeatherData.Bus","name":"weaBus","comment":"Weather data input","annotations":{"placement":"Placement(transformation(extent \u003d {{-112,50},{-92,70}}))"}},{"className":"Buildings.Fluid.SolarCollectors.Controls.BaseClasses.GCritCalc","name":"criSol","comment":"Calculates the critical insolation based on collector design and current weather conditions","modifications":[{"name":"slope","qualifiers":["final"],"value":"per.slope"},{"name":"y_intercept","qualifiers":["final"],"value":"per.y_intercept"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-58,-20},{-38,0}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"add","comment":"Compares the current insolation to the critical insolation","modifications":[{"name":"k2","qualifiers":["final"],"value":"-1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-10},{0,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n      \u003cp\u003e\n        This component models a pump controller which might be used in a solar thermal system.\n        It controls whether the pump is active or inactive based on the incident solar radiation\n        and the system parameters. The pump is activated when the incident solar radiation is\n        greater than the critical radiation.\n      \u003c/p\u003e\n      \u003cp\u003e\n        The critical radiation is defined per Equation 6.8.2 in Duffie and Beckman (2006). It is\n      \u003c/p\u003e\n      \u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n        G\u003csub\u003eTC\u003c/sub\u003e\u003d(F\u003csub\u003eR\u003c/sub\u003eU\u003csub\u003eL\u003c/sub\u003e (T\u003csub\u003eIn\u003c/sub\u003e-T\u003csub\u003eEnv\u003c/sub\u003e))/(F\u003csub\u003eR\u003c/sub\u003e(\u0026tau;\u0026alpha;))\n      \u003c/p\u003e\n      \u003cp\u003e\n        where \u003ci\u003eG\u003csub\u003eTC\u003c/sub\u003e\u003c/i\u003e is the critical solar radiation, \u003ci\u003eF\u003csub\u003eR\u003c/sub\u003eU\u003csub\u003eL\u003c/sub\u003e\u003c/i\u003e\n        is the heat loss coefficient, \u003ci\u003eT\u003csub\u003eIn\u003c/sub\u003e\u003c/i\u003e is the inlet temperature,\n        \u003ci\u003eT\u003csub\u003eEnv\u003c/sub\u003e\u003c/i\u003e is the ambient temperature, and \u003ci\u003eF\u003csub\u003eR\u003c/sub\u003e(\u0026tau;\u0026alpha;)\u003c/i\u003e\n        is the maximum efficiency.\n      \u003c/p\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        J.A. Duffie and W.A. Beckman 2006, Solar Engineering of Thermal Processes (3rd Edition),\n        John Wiley \u0026amp; Sons, Inc.\u003cbr/\u003e\n      \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.BoundaryConditions.WeatherData.Bus":{"name":"Buildings.BoundaryConditions.WeatherData.Bus","comment":"Data bus that stores weather data","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.SignalBus"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component is an expandable connector that is used to implement a bus that contains the weather data.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle()})"}},"Buildings.Electrical.PhaseSystems.TwoConductor.phaseCurrents":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.phaseCurrents","comment":"Return phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.phaseCurrents"}]},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction5and8":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction5and8","comment":"Wall construction found in test cell XRB","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of an exterior wall used in test cell XRB.\n    It is used to model both the south facing wall, and the north facing\n    wall next to the door.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Directions are stated assuming that the windows are facing south.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of an exterior wall used in test cell XRB.\n    It is used to model both the south facing wall, and the north facing\n    wall next to the door.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Directions are stated assuming that the windows are facing south.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.Actuators.Valves.Data.Linear":{"name":"Buildings.Fluid.Actuators.Valves.Data.Linear","comment":"Linear opening curve","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.Valves.Data.Generic","modifications":[{"name":"y","value":"{0,1}"},{"name":"phi","value":"{0.0001,1}"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nLinear valve opening characteristics with\na normalized leakage flow rate of \u003ci\u003e0.0001\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote\u003c/b\u003e: This record is only for demonstration,\nas the implementation in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Valves.TwoWayLinear\\\"\u003e\nBuildings.Fluid.Actuators.Valves.TwoWayLinear\u003c/a\u003e\nis more efficient.\n\u003c/p\u003e\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nLinear valve opening characteristics with\na normalized leakage flow rate of \u003ci\u003e0.0001\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote\u003c/b\u003e: This record is only for demonstration,\nas the implementation in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.Valves.TwoWayLinear\\\"\u003e\nBuildings.Fluid.Actuators.Valves.TwoWayLinear\u003c/a\u003e\nis more efficient.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_p":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_p","comment":"AC three-phase balanced terminal (\u0027positive\u0027)","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package"],"value":"PhaseSystems.OnePhase"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Text(),Polygon()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector with a vector of positive pins.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Polygon()})"}},"Buildings.Utilities.IO.BCVTB.To_degC":{"name":"Buildings.Utilities.IO.BCVTB.To_degC","comment":"Converts Kelvin to Celsius","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Kelvin","comment":"Temperature in Kelvin","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}), iconTransformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"Celsius","comment":"Temperature in Celsius","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"degC\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"-273.15"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConverts the input from degree Celsius to Kelvin.\nNote that inside Modelica, it is strongly recommended to use\nKelvin. This block is provided for convenience since the BCVTB\ninterface may couple Modelica to programs that use Celsius\nas the unit for temperature.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Polygon(),Text(),Line()})"}},"Buildings.HeatTransfer.Windows.InteriorHeatTransferConvective":{"name":"Buildings.HeatTransfer.Windows.InteriorHeatTransferConvective","comment":"Model for heat convection at the interior surface of a window that may have a shading device","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.BaseClasses.PartialWindowBoundaryCondition","modifications":[{"name":"thisSideHasShade","qualifiers":["final"],"value":"haveInteriorShade"}]}],"components":[{"className":"Modelica.SIunits.CoefficientOfHeatTransfer","qualifiers":["parameter"],"name":"hFixed","comment":"Constant convection coefficient","value":"4"},{"className":"Types.InteriorConvection","qualifiers":["parameter"],"name":"conMod","comment":"Convective heat transfer model","value":"Buildings.HeatTransfer.Types.InteriorConvection.Fixed"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"til","comment":"Surface tilt"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"QRadAbs_flow","comment":"Total net radiation that is absorbed by the shade (positive if absorbed)","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"W\""}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270, origin \u003d {-60,-110}), iconTransformation(extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270, origin \u003d {-60,-110}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"TSha","comment":"Shade temperature","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-110}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-110}))"}},{"className":"Buildings.HeatTransfer.Windows.BaseClasses.InteriorConvectionCoefficient","name":"conCoeGla","comment":"Model for the inside convective heat transfer coefficient of the glass","modifications":[{"name":"A","qualifiers":["final"],"value":"AGla"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-92,26},{-72,46}}))"}},{"className":"BaseClasses.ShadeConvection","name":"conSha","comment":"Convection model for shade","modifications":[{"name":"A","qualifiers":["final"],"value":"AGla"},{"name":"thisSideHasShade","qualifiers":["final"],"value":"thisSideHasShade"}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-8,-20},{12,0}}))"}},{"className":"BaseClasses.InteriorConvection","name":"conFra","comment":"Convective heat transfer between air and frame","modifications":[{"name":"A","qualifiers":["final"],"value":"AFra"},{"name":"til","qualifiers":["final"],"value":"til"},{"name":"conMod","qualifiers":["final"],"value":"conMod"},{"name":"hFixed","value":"hFixed"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{50,-98},{30,-78}}))"}},{"className":"BaseClasses.InteriorConvection","name":"conWinUns","comment":"Convection from unshaded part of window to outside or room air","modifications":[{"name":"A","qualifiers":["final"],"value":"AGla"},{"name":"til","qualifiers":["final"],"value":"til"},{"name":"conMod","qualifiers":["final"],"value":"conMod"},{"name":"hFixed","value":"hFixed"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,0},{40,20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for the convective heat transfer between a window shade, a window surface\nand the room air.\nThis model is applicable for the room-facing surface of a window system and\ncan be used with the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Window\\\"\u003e\nBuildings.HeatTransfer.Windows.Window\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model adds the convective heat transfer coefficient to its base model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text()})"}},"Buildings.Controls.Continuous.OffTimer":{"name":"Buildings.Controls.Continuous.OffTimer","comment":"Records the time since the input changed to false","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.partialBooleanBlockIcon"}],"components":[{"className":"Modelica.Blocks.Interfaces.BooleanInput","name":"u","comment":"Connector of Boolean input signal","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"y","comment":"Connector of Real output signal","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that records the time that has elapsed since its input signal switched to false.\n\u003c/p\u003e\n\u003cp\u003e\nAt the beginning of the simulation, this block outputs the time that has elapsed since the start of the simulation. Afterwards, whenever its input switches to false, the timer is reset.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Polygon(),Line(),Line(),Polygon(),Line()})"}},"Buildings.Fluid.Sensors.RelativePressure":{"name":"Buildings.Fluid.Sensors.RelativePressure","comment":"Ideal relative pressure sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.TranslationalSensor"}],"components":[{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a","comment":"Fluid connector of stream a","modifications":[{"name":"m_flow","modifications":[{"name":"min","value":"0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b","comment":"Fluid connector of stream b","modifications":[{"name":"m_flow","modifications":[{"name":"min","value":"0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{110,-12},{90,8}}), iconTransformation(extent \u003d {{110,-10},{90,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"p_rel","comment":"Relative pressure of port_a minus port_b","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"PressureDifference\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,-90}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 90))"}}],"classes":[{"name":"Buildings.Fluid.Sensors.RelativePressure.Medium","comment":"Medium in the sensor","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThe relative pressure \u003ccode\u003eport_a.p - port_b.p\u003c/code\u003e is determined between\nthe two ports of this component and is provided as output signal. The\nsensor should be connected in parallel with other equipment, no flow\nthrough the sensor is allowed.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Line(),Text(),Text(),Line(),Polygon()})"}},"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfDryAir":{"name":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfDryAir","comment":"Enthalpy of dry air per unit mass of dry air","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"dry air enthalpy"}]},"Buildings.Electrical.AC.OnePhase.Lines.Line":{"name":"Buildings.Electrical.AC.OnePhase.Lines.Line","comment":"Model of an electrical line","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialLine","modifications":[{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]},{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"},{"name":"commercialCable","value":"Buildings.Electrical.Transmission.Functions.selectCable_low(P_nominal,V_nominal)"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents an AC single phase cable. The model is based on\n\u003ca href\u003d\\\"Buildings.Electrical.AC.OnePhase.Lines.TwoPortRLC\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Lines.TwoPortRLC\u003c/a\u003e\nand provides functionalities to parametrize the values of \u003ci\u003eR\u003c/i\u003e, \u003ci\u003eL\u003c/i\u003e and \u003ci\u003eC\u003c/i\u003e,\neither using commercial cables or using default values.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Rectangle(),Ellipse(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_n":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_n","comment":"AC three-phase balanced terminal (\u0027negative\u0027)","qualifiers":["connector"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package"],"value":"PhaseSystems.OnePhase"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Text(),Polygon()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector with a vector of negative pins.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Text(),Polygon()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl16_ECM":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl16_ECM","comment":"Aluminum cable 16 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"2.105e-003"},{"name":"XCha","value":"0.076e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 16mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 2.105e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.076e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.DC.Conversion.DCDCConverter":{"name":"Buildings.Electrical.DC.Conversion.DCDCConverter","comment":"DC DC converter","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialConversion","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"DC voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"DC voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"eta","comment":"Converter efficiency","modifications":[{"name":"max","value":"1"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}},{"className":"Modelica.SIunits.Power","name":"LossPower","comment":"Loss power"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a DC/DC converter, based on a power balance between the two DC sides.\nThe paramater \u003ci\u003econversionFactor\u003c/i\u003e defines the ratio between the two averaged DC voltages.\nThe loss of the converter is proportional to the power transmitted at the second DC side.\nThe parameter \u003ccode\u003eeta\u003c/code\u003e is the efficiency of the transfer.\nThe loss is computed as\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003csub\u003eloss\u003c/sub\u003e \u003d (1-\u0026eta;) P\u003csub\u003eDC\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eP\u003csub\u003eDC\u003c/sub\u003e\u003c/i\u003e is the power transmitted. This model is symmetric and the power\ncan be transmitted in both directions. The loss is computed depending on the direction\nof the power flow.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Line(),Text(),Text(),Text(),Text(),Text(),Text(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Text()})"}},"Buildings.Utilities.Math.Functions.splineDerivatives":{"name":"Buildings.Utilities.Math.Functions.splineDerivatives","comment":"Function to compute the derivatives for cubic hermite spline interpolation","components":[{"className":"Real","qualifiers":["array","input"],"name":"x","comment":"Support point, strict monotone increasing","arraySubscripts":"[:]"},{"className":"Real","qualifiers":["array","input"],"name":"y","comment":"Function values at x","arraySubscripts":"[size(x,1)]"},{"className":"Boolean","qualifiers":["input"],"name":"ensureMonotonicity","comment":"Set to true to ensure monotonicity of the cubic hermite","value":"isMonotonic(y)"},{"className":"Real","qualifiers":["array","output"],"name":"d","comment":"Derivative at the support points","arraySubscripts":"[size(x,1)]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the derivatives at the support points \u003ci\u003ex\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e\nthat can be used as input for evaluating a cubic hermite spline.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003eensureMonotonicity\u003dtrue\u003c/code\u003e, then the support points \u003ci\u003ey\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e\nneed to be monotone increasing (or increasing), and the computed derivatives\n\u003ci\u003ed\u003csub\u003ei\u003c/sub\u003e\u003c/i\u003e are such that the cubic hermite is monotone increasing (or decreasing).\nThe algorithm to ensure monotonicity is based on the method described in Fritsch and Carlson (1980) for\n\u003ci\u003e\u0026rho; \u003d \u0026rho;\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis function is typically used with\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Functions.cubicHermiteLinearExtrapolation\\\"\u003e\nBuildings.Utilities.Math.Functions.cubicHermiteLinearExtrapolation\u003c/a\u003e\nwhich is used to evaluate the cubic spline.\nBecause in many applications, the shape of the spline depends on parameters,\nthis function has been implemented in such a way that all derivatives can be\ncomputed at once and then stored for use during the time stepping,\nin which the above function may be called.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nF.N. Fritsch and R.E. Carlson, \u003ca href\u003d\\\"http://dx.doi.org/10.1137/0717021\\\"\u003eMonotone piecewise cubic interpolation\u003c/a\u003e.\n\u003ci\u003eSIAM J. Numer. Anal.\u003c/i\u003e, 17 (1980), pp. 238-246.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.DirectCurrent.phasePowers":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.phasePowers","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.phasePowers"}]},"Buildings.Rooms.FLEXLAB.Data.Constructions.GlazingSystems.ASHRAE901Gla":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.GlazingSystems.ASHRAE901Gla","comment":"XGL-1 window constuction used in cells 3A, 3B and RA. ASHRAE 90.1 minimally compliant","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.GlazingSystems.Generic","modifications":[{"name":"glass","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Glasses.ID101(),Buildings.HeatTransfer.Data.Glasses.ID101()}"},{"name":"gas","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Gases.Air()}"},{"name":"UFra","value":"1.4"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a model of a window construction used in FLEXLAB test cells. It is minimally\n  compliant per the ASHRAE 90.1 specification.\n  \u003c/p\u003e\n  \u003cp\u003e\n  Note: This model is not yet completed, and is currently a placeholder. See\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n  Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e for more information.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a model of a window construction used in FLEXLAB test cells. It is minimally\n  compliant per the ASHRAE 90.1 specification.\n  \u003c/p\u003e\n  \u003cp\u003e\n  Note: This model is not yet completed, and is currently a placeholder. See\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n  Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e for more information.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.TwoConductor.thetaRef":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.thetaRef","comment":"Return absolute angle of rotating reference system","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.thetaRef"}]},"Buildings.Electrical.AC.ThreePhasesBalanced.Sensors.Probe":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sensors.Probe","comment":"Model of a probe that measures RMS voltage and angle","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Sensors.Probe","modifications":[{"name":"term"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a probe that measures the RMS voltage and the angle\nof the voltage phasor at a given point.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.setState_phX":{"name":"Buildings.Media.Specialized.Air.PerfectGas.setState_phX","comment":"Thermodynamic state as function of p, h and composition X","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"AbsolutePressure","qualifiers":["input"],"name":"p","comment":"Pressure"},{"className":"SpecificEnthalpy","qualifiers":["input"],"name":"h","comment":"Specific enthalpy"},{"className":"MassFraction","qualifiers":["array","input"],"name":"X","comment":"Mass fractions","arraySubscripts":"[:]"},{"className":"ThermodynamicState","qualifiers":["output"],"name":"state"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nFunction to set the state for given pressure, enthalpy and species concentration.\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.TwoConductor.thetaRel":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.thetaRel","comment":"Return absolute angle of rotating system as offset to thetaRef","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.thetaRel"}]},"Buildings.Electrical.Interfaces.ResistiveLoad":{"name":"Buildings.Electrical.Interfaces.ResistiveLoad","comment":"Partial model of a resistive load","qualifiers":["model","partial"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Load"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a generic resistive load. This model is an extension of the base load model\n\u003ca href\u003d\\\"Buildings.Electrical.Interfaces.PartialLoad\\\"\u003e\nBuildings.Electrical.Interfaces.PartialLoad\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.getAngle":{"name":"Buildings.HeatTransfer.Windows.Functions.getAngle","comment":"Generate incident angles","components":[{"className":"Integer","qualifiers":["input"],"name":"NDIR","comment":"Number of incident angles"},{"className":"Modelica.SIunits.Angle","qualifiers":["array","output"],"name":"psi","comment":"Array of incident angles","arraySubscripts":"[NDIR]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes discrete incident angles for the window radiation calculation. The range is from 0 to 90 degree.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC_N","comment":"Model of an RLC element with two electrical ports and neutral line cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort"},{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N"}],"components":[{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance at temperature T_ref"},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"Rn","comment":"Resistance of neutral cable at temperature T_ref"},{"className":"Modelica.SIunits.Capacitance","qualifiers":["parameter"],"name":"C","comment":"Capacity"},{"className":"Modelica.SIunits.Capacitance","qualifiers":["parameter"],"name":"Cn","comment":"Capacityof neutral cable"},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"L","comment":"Inductance"},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"Ln","comment":"Inductance of neutral cable"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_ref","comment":"Reference temperature","value":"298.15"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"M","comment":"Temperature constant (R_actual \u003d R*(M + T_heatPort)/(M + T_ref))","value":"507.65"},{"className":"Modelica.SIunits.Voltage","qualifiers":["array","parameter"],"name":"Vc1_start","comment":"Initial voltage phasor of the capacitance located in the middle of phase 1","value":"V_nominal/(sqrt(3))*{1,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["array","parameter"],"name":"Vc2_start","comment":"Initial voltage phasor of the capacitance located in the middle of phase 1","value":"V_nominal/(sqrt(3))*{-1/(2),-sqrt(3)/(2)}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["array","parameter"],"name":"Vc3_start","comment":"Initial voltage phasor of the capacitance located in the middle of phase 1","value":"V_nominal/(sqrt(3))*{-1/(2),sqrt(3)/(2)}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.FixedZ_dynamic"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"480"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\", enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Loadm.FixedZ_dynamic)"}},{"className":"OnePhase.Lines.TwoPortRLC","name":"phase1","comment":"Impedance line 1","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"C","qualifiers":["final"],"value":"C/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal/(sqrt(3))"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"Vc_start","value":"Vc1_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortRLC","name":"phase2","comment":"Impedance line 2","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"C","qualifiers":["final"],"value":"C/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal/(sqrt(3))"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"Vc_start","value":"Vc2_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortRLC","name":"phase3","comment":"Impedance line 3","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"C","qualifiers":["final"],"value":"C/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal/(sqrt(3))"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"Vc_start","value":"Vc3_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}},{"className":"OnePhase.Lines.TwoPortRLC","name":"neutral","comment":"Neutral line RLC model","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal/(sqrt(3))"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"R","qualifiers":["final"],"value":"Rn"},{"name":"C","qualifiers":["final"],"value":"Cn"},{"name":"L","qualifiers":["final"],"value":"Ln"},{"name":"Vc_start","value":"-Vc1_start-Vc2_start-Vc3_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-64},{10,-44}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRLC line model (T-model) that connects two AC three-phase\nunbalanced interfaces with neutral line. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRLC_N.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped impedances as shown in the figure above.\nAssuming that the overall cable has a resistance \u003ci\u003eR\u003c/i\u003e, an inductance\n\u003ci\u003eL\u003c/i\u003e, and a capacitance \u003ci\u003eC\u003c/i\u003e, each line has an inductance equal\nto \u003ci\u003eL/3\u003c/i\u003e, a resistance equal to \u003ci\u003eR/3\u003c/i\u003e and a capacity equal to\n\u003ci\u003eC/3\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe resistance, capacitance and inductance of the neutral cable are defined separately using the parameters\n\u003ccode\u003eRn\u003c/code\u003e \u003ccode\u003eCn\u003c/code\u003e, and \u003ccode\u003eLn\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Rectangle(),Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Text(),Text()})"}},"Buildings.Electrical.PhaseSystems.OnePhase.thetaRel":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.thetaRel","comment":"Return absolute angle of rotating system as offset to thetaRef","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.thetaRel"}]},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificInternalEnergy":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificInternalEnergy","comment":"Return the specific enthalpy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificInternalEnergy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific internal energy.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.specificHeatCapacityCp":{"name":"Buildings.Media.Air.specificHeatCapacityCp","comment":"Specific heat capacity of gas mixture at constant pressure","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.specificHeatCapacityCp"}]},"Buildings.Electrical.PhaseSystems.OnePhase.thetaRef":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.thetaRef","comment":"Return absolute angle of rotating reference system","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.thetaRef"}]},"Buildings.Fluid.Interfaces.PartialFourPort":{"name":"Buildings.Fluid.Interfaces.PartialFourPort","comment":"Partial model with four ports","qualifiers":["model","partial"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal1","comment":"\u003d true to allow flow reversal in medium 1, false restricts to design direction (port_a -\u003e port_b)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal2","comment":"\u003d true to allow flow reversal in medium 2, false restricts to design direction (port_a -\u003e port_b)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a1","comment":"Fluid connector a1 (positive design flow direction is from port_a1 to port_b1)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium1"},{"name":"m_flow","modifications":[{"name":"min","value":"if allowFlowReversal1 then -Modelica.Constants.inf else 0"}]},{"name":"h_outflow","modifications":[{"name":"start","value":"Medium1.h_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,50},{-90,70}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b1","comment":"Fluid connector b1 (positive design flow direction is from port_a1 to port_b1)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium1"},{"name":"m_flow","modifications":[{"name":"max","value":"if allowFlowReversal1 then Modelica.Constants.inf else 0"}]},{"name":"h_outflow","modifications":[{"name":"start","value":"Medium1.h_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{110,50},{90,70}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a2","comment":"Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium2"},{"name":"m_flow","modifications":[{"name":"min","value":"if allowFlowReversal2 then -Modelica.Constants.inf else 0"}]},{"name":"h_outflow","modifications":[{"name":"start","value":"Medium2.h_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{90,-70},{110,-50}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b2","comment":"Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium2"},{"name":"m_flow","modifications":[{"name":"max","value":"if allowFlowReversal2 then Modelica.Constants.inf else 0"}]},{"name":"h_outflow","modifications":[{"name":"start","value":"Medium2.h_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-90,-70},{-110,-50}}))"}}],"classes":[{"name":"Buildings.Fluid.Interfaces.PartialFourPort.Medium1","comment":"Medium 1 in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]},{"name":"Buildings.Fluid.Interfaces.PartialFourPort.Medium2","comment":"Medium 2 in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model defines an interface for components with four ports.\nThe parameters \u003ccode\u003eallowFlowReversal1\u003c/code\u003e and\n\u003ccode\u003eallowFlowReversal2\u003c/code\u003e may be used by models that extend\nthis model to treat flow reversal.\n\u003c/p\u003e\n\u003cp\u003e\nThis model is identical to\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.Interfaces.PartialTwoPort\\\"\u003e\nModelica.Fluid.Interfaces.PartialTwoPort\u003c/a\u003e, except for the\nfowllowing:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eit has four ports, and\n\u003c/li\u003e\n\u003cli\u003e\nthe parameters \u003ccode\u003eport_a_exposesState\u003c/code\u003e,\n\u003ccode\u003eport_b_exposesState\u003c/code\u003e and\n\u003ccode\u003eshowDesignFlowDirection\u003c/code\u003e\nare not implemented.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Text()})"}},"Buildings.Media.Air.specificHeatCapacityCv":{"name":"Buildings.Media.Air.specificHeatCapacityCv","comment":"Specific heat capacity of gas mixture at constant volume","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.specificHeatCapacityCv"}]},"Buildings.Media.Air.der_specificHeatCapacityCv":{},"Buildings.Media.Air.enthalpyOfGas":{"name":"Buildings.Media.Air.enthalpyOfGas","comment":"Enthalpy of gas mixture per unit mass of gas mixture","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.enthalpyOfGas"}]},"Buildings.UsersGuide.ReleaseNotes.Version_2_0_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_2_0_0","comment":"Version 2.0.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 2.0.0 is a major release that contains various new packages, models\nand improvements.\n\u003c/p\u003e\n\u003cp\u003e\nThe following major additions have been done in version 2.0:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nA CFD model\nthat is embedded in a thermal zone has been added.\nThis model is implemented in \u003ca href\u003d\\\"modelica://Buildings.Rooms.CFD\\\"\u003eBuildings.Rooms.CFD\u003c/a\u003e.\nThe CFD model is an implementation of the Fast Fluid Dynamics code\nthat allows three-dimensional CFD inside a thermal zone,\ncoupled to building heat transfer, HVAC components and feedback control loops.\n\u003c/li\u003e\n\u003cli\u003e\nA new package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical\\\"\u003eBuildings.Electrical\u003c/a\u003e\nhas been added.\nThis package allows studying\nbuildings to electrical grid integration. It includes models for loads, transformers,\ncables, batteries, PV and wind turbines.\nModels exist for DC and AC systems with two- or three-phase that can be balanced and unbalanced.\nThe models compute voltage, current, active and reactive power\nbased on the quasi-stationary assumption or using the dynamic phasorial representation.\n\u003c/li\u003e\n\u003cli\u003e\nThe new package\n\u003ca href\u003d\\\"modelica://Buildings.Controls.DemandResponse\\\"\u003e\nBuildings.Controls.DemandResponse\u003c/a\u003e\ncontains models for demand response simulation.\n\u003c/li\u003e\n\u003cli\u003e\nThe new package\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Predictors\\\"\u003e\nBuildings.Controls.Predictors\u003c/a\u003e\ncontains a data-driven model that predicts the electrical load\nof a building. The prediction can be done\neither using an average baseline or\na linear regression with respect to outside temperature.\nFor both, optionally a day-of adjustment can be made.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe tables below give more detailed information to the revisions\nof this library compared to the previous release 1.6 build 1.\n\u003c/p\u003e\n\u003c!-- New libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\"\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Electrical\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eLibrary for electrical grid simulation that\n                       allows to study building to electrical grid integration.\n                       The library contains models of loads, generation and transmission\n                       for DC and AC systems.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.DemandResponse\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eLibrary with a model for demand response prediction.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.Predictors\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eLibrary with a data-driven model that predicts the electrical load\n                     of a building. The prediction can be done\n                     either using an average baseline or\n                     a linear regression with respect to outside temperature.\n                     For both, optionally a day-of adjustment can be made.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- New components for existing libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Actuators.Valves.TwoWayPressureIndependent\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eModel of a pressure-independent two way valve.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.HeaterCooler_T\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eModel of a heater or cooler that takes as an input\n                       the set point for the temperature of the fluid that leaves\n                       the component. The set point is tracked exactly\n                       if the component has sufficient capacity.\n                       Optionally, the component can be configured to compute\n                       a dynamic rather than a steady-state response.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.Phi_pTX\u003cbr/\u003e\n                       Buildings.Utilities.Psychrometrics.Functions.phi_pTX\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eBlock and function that computes the relative humidity\n                       for given pressure, temperature and water vapor mass fraction.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.CFD\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRoom model that computes the room air flow\n                       using computational fluid dynamics (CFD).\n                       The CFD simulation is coupled to the thermal simulation of the room\n                       and, through the fluid port, to the air conditioning system.\n                       Currently, the supported CFD program is the\n                       Fast Fluid Dynamics (FFD) program.\n                       See\n                       \u003ca href\u003d\\\"modelica://Buildings.Rooms.UsersGuide.CFD\\\"\u003eBuildings.Rooms.UsersGuide.CFD\u003c/a\u003e\n                       for detailed explanations.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003c/table\u003e\n\u003c!-- Backward compatible changes --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded option to obtain the black body sky temperature\n                       from a parameter or an input signal rather than\n                       computing it in the weather data reader.\u003cbr/\u003e\u003cbr/\u003e\n                       Removed redundant connection\n                       \u003ccode\u003econnect(conHorRad.HOut, cheHorRad.HIn);\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Chillers.ElectricEIR\u003cbr/\u003e\n                       Buildings.Chillers.ElectricReformulatedEIR\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged implementation so that the model\n                       is continuously differentiable.\n                       This is for issue\n                       \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/373\\\"\u003e373\u003c/a\u003e.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryCoilCounterFlow\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged assignment of \u003ccode\u003eT_m\u003c/code\u003e to avoid using the conditionally\n                       enabled model \u003ccode\u003eele[:].mas.T\u003c/code\u003e, which is only\n                       valid in a connect statement.\n                       Moved assignments of\n                       \u003ccode\u003eQ1_flow\u003c/code\u003e, \u003ccode\u003eQ2_flow\u003c/code\u003e, \u003ccode\u003eT1\u003c/code\u003e,\n                       \u003ccode\u003eT2\u003c/code\u003e and \u003ccode\u003eT_m\u003c/code\u003e outside of equation section\n                       to avoid mixing graphical and textual modeling within the same model.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryCoilDiscretized\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved parameter \u003ccode\u003em1_flow_nominal\u003c/code\u003e, as this parameter is already\n                    declared in its base class\n                    \u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialFourPortInterface\\\"\u003e\n                    Buildings.Fluid.Interfaces.PartialFourPortInterface\u003c/a\u003e.\n                    This change avoids an error in OpenModelica as the two declarations\n                    had a different value for the \u003ccode\u003emin\u003c/code\u003e attribute, which is not valid\n                    in Modelica.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.BaseClasses.CoilRegister\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.BaseClasses.DuctManifoldDistributor\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReformulated the multiple iterators in the \u003ccode\u003esum\u003c/code\u003e function\n                       as this language construct is not supported in OpenModelica.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n    \u003ctr\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eSet start value for \u003ccode\u003ehPip(fluid(T))\u003c/code\u003e to avoid\n                       a warning about conflicting start values.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.SpeedControlled_y\u003cbr/\u003e\n                       Buildings.Fluid.Movers.SpeedControlled_Nrpm\u003cbr/\u003e\n                       Buildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                       Buildings.Fluid.Movers.FlowControlled_m_flow\n\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFor the parameter setting \u003ccode\u003euse_powerCharacteristic\u003dtrue\u003c/code\u003e,\n                     changed the computation of the power consumption at\n                     reduced speed to properly account for the\n                     affinity laws. This is in response to\n                     \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/pull/202\\\"\u003e#202\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n    \u003ctr\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.SolarCollectors.ASHRAE93\u003cbr/\u003e\n                       Buildings.Fluid.SolarCollectors.EN12975\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReformulated the model to avoid a translation error\n                       if glycol is used.\u003cbr/\u003e\n                       Propagated parameters for initialization in base class\n                       \u003ccode\u003eBuildings.Fluid.SolarCollectors.BaseClasses.PartialSolarCollector\u003c/code\u003e\n                       and set \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n    \u003ctr\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.StratifiedEnhancedInternalHex\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReplaced the \u003ccode\u003eabs()\u003c/code\u003e function in the assignment of the parameter\n                       \u003ccode\u003enSegHexTan\u003c/code\u003e as the return value of \u003ccode\u003eabs()\u003c/code\u003e\n                       is a \u003ccode\u003eReal\u003c/code\u003e which causes a type error during model check.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Conduction.MultiLayer\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the assignment of \u003ccode\u003e_T_a_start\u003c/code\u003e,\n                       \u003ccode\u003e_T_b_start\u003c/code\u003e and \u003ccode\u003eRTot\u003c/code\u003e to be\n                       in the initial equation section as opposed to\n                       the parameter declaration.\n                       This is needed to avoid an error during model check\n                       and translation in Dymola 2015 FD01 beta1.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.InteriorHeatTransferConvective\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged model to allow a temperature dependent convective heat transfer\n                       on the room side.\n                       This is for issue\n                       \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/52\\\"\u003e52\u003c/a\u003e.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Media\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.Interfaces.PartialSimpleIdealGasMedium\u003cbr/\u003e\n                       Buildings.Media.Interfaces.PartialSimpleMedium\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eSet \u003ccode\u003eT(start\u003dT_default)\u003c/code\u003e and\n                       \u003ccode\u003ep(start\u003dp_default)\u003c/code\u003e in the\n                       \u003ccode\u003eThermodynamicState\u003c/code\u003e record. Setting the start value for\n                       \u003ccode\u003eT\u003c/code\u003e is required to avoid an error due to\n                       conflicting start values when translating\n                       \u003ca href\u003d\\\"modelica://Buildings.Examples.VAVReheat.ClosedLoop\\\"\u003e\n                       Buildings.Examples.VAVReheat.ClosedLoop\u003c/a\u003e in pedantic mode.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged model to allow a temperature dependent convective heat transfer\n                       on the room side for windows.\n                       This is for issue\n                       \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/52\\\"\u003e52\u003c/a\u003e.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eRooms.BaseClasses.ExteriorBoundaryConditionsWithWindow\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eConditionally removed the shade model if no shade is present.\n                       This corrects\n                       \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/234\\\"\u003e#234\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003c/table\u003e\n\u003c!-- Non-backward compatible changes to existing components --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Airflow\u003c/b\u003e\n   \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.ZonalFlow_ACS\u003cbr/\u003e\n                       Buildings.Airflow.Multizone.ZonalFlow_m_flow\n   \u003c/td\u003e\n   \u003ctd valign\u003d\\\"top\\\"\u003eRemoved parameter \u003ccode\u003eforceErrorControlOnFlow\u003c/code\u003e as it was not used.\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n   \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n   \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\n   \u003c/td\u003e\n   \u003ctd valign\u003d\\\"top\\\"\u003eChanged the following signals for compatibility with OpenModelica:\u003cbr/\u003e\n                      \u003ccode\u003eweaBus.sol.zen\u003c/code\u003e to \u003ccode\u003eweaBus.solZen\u003c/code\u003e.\u003cbr/\u003e\n                      \u003ccode\u003eweaBus.sol.dec\u003c/code\u003e to \u003ccode\u003eweaBus.solDec\u003c/code\u003e.\u003cbr/\u003e\n                      \u003ccode\u003eweaBus.sol.alt\u003c/code\u003e to \u003ccode\u003eweaBus.solAlt\u003c/code\u003e.\u003cbr/\u003e\n                      \u003ccode\u003eweaBus.sol.solHouAng\u003c/code\u003e to \u003ccode\u003eweaBus.solHouAng\u003c/code\u003e.\u003cbr/\u003e\n                      For Dymola, the conversion script will automatically\n                      update existing models.\n   \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Examples\u003c/b\u003e\n   \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.VAVReheat.Controls.IntegerSum\n   \u003c/td\u003e\n   \u003ctd valign\u003d\\\"top\\\"\u003eRemoved block as it is not used in any model.\n                      Models that require an integer sum can use\n                      \u003ccode\u003eModelica.Blocks.MathInteger.Sum\u003c/code\u003e.\n   \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.VAVReheat.Controls.UnoccupiedOn\n   \u003c/td\u003e\n   \u003ctd valign\u003d\\\"top\\\"\u003eRemoved block as it is not used in any model.\n   \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Data.GlazingSystems.Generic\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved parameter \u003ccode\u003enLay\u003c/code\u003e as OpenModelica\n                       could not assign it during translation.\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Conduction.BaseClasses.der_temperature_u\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the input argument for this function from type\n                       \u003ccode\u003eBuildings.HeatTransfer.Data.BaseClasses.Material\u003c/code\u003e\n                       to the elements of this type as OpenModelica fails to translate the\n                       model if the input to this function is a record.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Types.Azimuth\u003cbr/\u003e\n                       Buildings.HeatTransfer.Types.Tilt\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eMoved these types from \u003ccode\u003eBuildings.HeatTransfer\u003c/code\u003e\n                       to the top-level package \u003ccode\u003eBuildings\u003c/code\u003e because\n                       they are used in \u003ccode\u003eBuildings.BoundaryConditions\u003c/code\u003e,\n                       \u003ccode\u003eBuildings.HeatTransfer\u003c/code\u003e and \u003ccode\u003eBuildings.Rooms\u003c/code\u003e.\u003cbr/\u003e\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.FixedResistances.Pipe\u003cbr/\u003e\n                       Buildings.Fluid.FixedResistances.BaseClasses.Pipe\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed pressure drop from \u003ccode\u003eres\u003c/code\u003e to\n                       \u003ccode\u003epreDro\u003c/code\u003e to use the same name as in other models.\n                       This corrects\n                       \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/271\\\"\u003e#271\u003c/a\u003e.\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryCoilDiscretized\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.WetCoilDiscretized\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReformulated flow splitter in the model to reduce\n                       the dimension of the coupled linear or nonlinear\n                       system of equations. With this revision, the optional\n                       control volume in the duct inlet has been removed\n                       as it is no longer needed. Therefore, the parameter\n                       \u003ccode\u003edl\u003c/code\u003e has also been removed.\n                       Replaced the parameters \u003ccode\u003eenergyDynamics1\u003c/code\u003e\n                       and  \u003ccode\u003eenergyDynamics2\u003c/code\u003e with\n                       \u003ccode\u003eenergyDynamics\u003c/code\u003e.\n                       Removed the parameter \u003ccode\u003eductConnectionDynamics\u003c/code\u003e.\u003cbr/\u003e\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.HeaterCoolerPrescribed\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed the model to \u003ccode\u003eHeaterCooler_u\u003c/code\u003e due to\n                       the introduction of the new model \u003ccode\u003eHeaterCooler_T\u003c/code\u003e.\u003cbr/\u003e\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitsSlab\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the models to use by default an \u003ci\u003e\u0026epsilon;-NTU\u003c/i\u003e\n                       approach for the heat transfer between the fluid and the slab\n                       rather than a finite difference scheme along the\n                       flow path.\n                       Optionally, the finite difference scheme can also be used\n                       as this is needed for some control design applications.\u003cbr/\u003e\n                       The new \u003ci\u003e\u0026epsilon;-NTU\u003c/i\u003e formulation has shown to lead to\n                       about five times faster\n                       computation on several test cases including the models in\n                       \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.Examples\\\"\u003e\n                       Buildings.Rooms.FLEXLAB.Rooms.Examples\u003c/a\u003e.\u003cbr/\u003e\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.BaseClasses.DuctManifoldFixedResistance\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReformulated flow splitter in the model to reduce\n                       the dimension of the coupled linear or nonlinear\n                       system of equations. With this revision, the optional\n                       control volume in the duct inlet has been removed\n                       as it is no longer needed. Therefore, the parameters\n                       \u003ccode\u003edl\u003c/code\u003e and \u003ccode\u003eenergyDynamics\u003c/code\u003e have\n                       also been removed.\u003cbr/\u003e\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.BaseClasses.CoilRegister\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReplaced the parameters \u003ccode\u003eenergyDynamics1\u003c/code\u003e\n                       and \u003ccode\u003eenergyDynamics2\u003c/code\u003e with\n                       the new parameter \u003ccode\u003eenergyDynamics\u003c/code\u003e.\n                       Removed the parameters \u003ccode\u003esteadyState_1\u003c/code\u003e\n                       and \u003ccode\u003esteadyState_2\u003c/code\u003e as this information\n                       is already contained in \u003ccode\u003eenergyDynamics\u003c/code\u003e.\u003cbr/\u003e\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MassExchangers.HumidifierPrescribed\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed the model to \u003ccode\u003eHumidifier_u\u003c/code\u003e due to\n                       the introduction of the new model \u003ccode\u003eHeaterCooler_T\u003c/code\u003e\n                       and to use the same naming pattern as \u003ccode\u003eHeaterCooler_u\u003c/code\u003e.\u003cbr/\u003e\n                       For Dymola, the conversion script will automatically\n                       update existing models.\n\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis package has been redesigned.\n                       The models have been renamed as follows:\u003cbr/\u003e\n                       \u003ccode\u003eBuildings.Fluid.Movers.FlowMachine_dp\u003c/code\u003e\n                       is now called\n                       \u003ccode\u003eBuildings.Fluid.Movers.FlowControlled_dp\u003c/code\u003e.\u003cbr/\u003e\n                       \u003ccode\u003eBuildings.Fluid.Movers.FlowMachine_m_flow\u003c/code\u003e\n                       is now called\n                       \u003ccode\u003eBuildings.Fluid.Movers.FlowControlled_m_flow\u003c/code\u003e.\u003cbr/\u003e\n                       \u003ccode\u003eBuildings.Fluid.Movers.FlowMachine_Nrpm\u003c/code\u003e\n                       is now called\n                       \u003ccode\u003eBuildings.Fluid.Movers.SpeedControlled_Nrpm\u003c/code\u003e.\u003cbr/\u003e\n                       \u003ccode\u003eBuildings.Fluid.Movers.FlowMachine_y\u003c/code\u003e\n                       is now called\n                       \u003ccode\u003eBuildings.Fluid.Movers.SpeedControlled_y\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       In addition, the performance\n                       data of all movers are now stored in a record.\n                       These records are in\n                       \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data\\\"\u003e\n                       Buildings.Fluid.Movers.Data\u003c/a\u003e.\n                       For most existing instances, it should be sufficient to enclose\n                       the existing performance data in a record called \u003ccode\u003eper\u003c/code\u003e.\n                       For example,\n                       \u003ccode\u003e\u003cbr/\u003e\n                       Buildings.Fluid.Movers.FlowMachine_y fan(\u003cbr/\u003e\n                       \u0026nbsp;redeclare package Medium \u003d Medium,\u003cbr/\u003e\n                       \u0026nbsp;pressure(\u003cbr/\u003e\n                       \u0026nbsp;\u0026nbsp;V_flow\u003d{0,m_flow_nominal,2*m_flow_nominal}/1.2,\u003cbr/\u003e\n                       \u0026nbsp;\u0026nbsp;dp\u003d{2*dp_nominal,dp_nominal,0})));\u003cbr/\u003e\n                       \u003c/code\u003e\n                       becomes\n                       \u003ccode\u003e\u003cbr/\u003e\n                       Buildings.Fluid.Movers.SpeedControlled_y fan(\u003cbr/\u003e\n                       \u0026nbsp;redeclare package Medium \u003d Medium,\u003cbr/\u003e\n                       \u0026nbsp;per(\u003cbr/\u003e\n                       \u0026nbsp;\u0026nbsp;pressure(\u003cbr/\u003e\n                       \u0026nbsp;\u0026nbsp;\u0026nbsp;V_flow\u003d{0,m_flow_nominal,2*m_flow_nominal}/1.2,\u003cbr/\u003e\n                       \u0026nbsp;\u0026nbsp;\u0026nbsp;dp\u003d{2*dp_nominal,dp_nominal,0})));\u003cbr/\u003e\n                       \u003c/code\u003e\n                       \u003cbr/\u003e\n                       See the \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.UsersGuide\\\"\u003e\n                       User\u0027s Guide\u003c/a\u003e for more information about these records.\n                       \u003cbr/\u003e\u003cbr/\u003e\n                       For Dymola, the conversion script will\n                       update existing models to use the old implementations\n                       which are now in the package \u003ccode\u003eBuildings.Obsolete.Fluid.Movers\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Media\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media\n    \u003c/td\u003e\n\u003ctd\u003e\n                       Renamed all media to simplify the media selection.\n                       For typical building energy simulation,\n                       \u003ca href\u003d\\\"modelica://Buildings.Media.Air\\\"\u003eBuildings.Media.Air\u003c/a\u003e and\n                       \u003ca href\u003d\\\"modelica://Buildings.Media.Water\\\"\u003eBuildings.Media.Water\u003c/a\u003e\n                       should be used.\u003cbr/\u003e\u003cbr/\u003e\n                       The following changes were made.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.GasesPTDecoupled.MoistAirUnsaturated\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Media.Air\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.ConstantPropertyLiquidWater\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Media.Water\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.PerfectGases.MoistAir\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Obsolete.Media.PerfectGases.MoistAir\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.GasesConstantDensity.MoistAirUnsaturated\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Obsolete.Media.GasesConstantDensity.MoistAirUnsaturated\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.GasesConstantDensity.MoistAir\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Obsolete.Media.GasesConstantDensity.MoistAir\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.GasesConstantDensity.SimpleAir\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Obsolete.Media.GasesConstantDensity.SimpleAir\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.IdealGases.SimpleAir\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Obsolete.Media.IdealGases.SimpleAir\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.GasesPTDecoupled.MoistAir\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Obsolete.Media.GasesPTDecoupled.MoistAir\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       Renamed \u003ccode\u003eBuildings.Media.GasesPTDecoupled.SimpleAir\u003c/code\u003e\u003cbr/\u003e\n                       to \u003ccode\u003eBuildings.Obsolete.Media.GasesPTDecoupled.SimpleAir\u003c/code\u003e.\u003cbr/\u003e\u003cbr/\u003e\n                       For Dymola, the conversion script will\n                       update existing models according to the above list.\n\n\u003c/td\u003e\n\u003c/tr\u003e\n\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.Water\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved option to model water as a compressible medium as\n                       this option was not useful.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.BaseClasses.ParameterConstructionWithWindow\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the keyword \u003ccode\u003ereplaceable\u003c/code\u003e for the parameters\n                       \u003ccode\u003eove\u003c/code\u003e and \u003ccode\u003esidFin\u003c/code\u003e.\u003cbr/\u003e\n                       Models that instantiate \u003ccode\u003eBuildings.Rooms.MixedAir\u003c/code\u003e are\n                       not affected by this change.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.Examples.BESTEST\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eMoved the package to \u003ccode\u003eBuildings.Rooms.Validation.BESTEST\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.SimulationTime\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eMoved the block \u003ccode\u003eBuildings.Utilities.SimulationTime\u003c/code\u003e\n                       to \u003ccode\u003eBuildings.Utilities.Time.ModelTime\u003c/code\u003e.\u003cbr/\u003e\n                       For Dymola, the conversion script will\n                       update existing models according to the above list.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003c/table\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error that led the total and opaque sky cover to be ten times\n                       too low if its value was obtained from the parameter or the input connector.\n                       For the standard configuration in which the sky cover is obtained from\n                       the weather data file, the model was correct. This error only affected\n                       the other two possible configurations.\n    \u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Data.Pipes\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong entries for inner and outer diameter\n                       of PEX pipes.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.Boreholes.BaseClasses.singleUTubeResistances\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error in function that used \u003ccode\u003ebeta\u003c/code\u003e\n                       before it was assigned a value.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.Stratified\u003cbr/\u003e\n                       Buildings.Fluid.Storage.StratifiedEnhanced\u003cbr/\u003e\n                       Buildings.Fluid.Storage.StratifiedEnhancedInternalHex\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReplaced the use of \u003ccode\u003eMedium.lambda_const\u003c/code\u003e with\n                       \u003ccode\u003eMedium.thermalConductivity(sta_default)\u003c/code\u003e as\n                       \u003ccode\u003elambda_const\u003c/code\u003e is not declared for all media.\n                       This avoids a translation error if certain media are used.\n    \u003c/td\u003e\n\u003c/tr\u003e\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.StratifiedEnhancedInternalHex\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected issue\n                       \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/271\\\"\u003e#271\u003c/a\u003e\n                       which led to a compilation error if the heat exchanger\n                       and the tank had different media.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.BaseClasses.GlassLayer\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected issue\n                       \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/304\\\"\u003e#304\u003c/a\u003e\n                       that led to an error in the glass temperatures if the glass conductance\n                       is very small.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded propagation of the parameter value \u003ccode\u003elinearizeRadiation\u003c/code\u003e\n                       to the window model. Prior to this change, the radiation\n                       was never linearized for computing the glass long-wave radiation.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.FLEXLAB.Rooms.Examples.TestBedX3WithRadiantFloor\u003cbr/\u003e\n                            Buildings.Rooms.FLEXLAB.Rooms.Examples.X3AWithRadiantFloor\u003cbr/\u003e\n                            Buildings.Rooms.FLEXLAB.Rooms.Examples.X3BWithRadiantFloor\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong entries for inner and outer diameter\n                       of PEX pipes.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.FixedResistances.FixedResistanceDpM\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error in documentation of computation of \u003ccode\u003ek\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.BaseClasses.GlassLayer\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged type of \u003ccode\u003etauIR\u003c/code\u003e from\n                       \u003ccode\u003eModelica.SIunits.Emissivity\u003c/code\u003e to\n                       \u003ccode\u003eModelica.SIunits.TransmissionCoefficient\u003c/code\u003e.\n                       This avoids a type error in OpenModelica.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003c/table\u003e\n\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e\n\u003c/p\u003e\n\u003cp\u003e\nWith version 2.0, we start using semantic versioning as described at \u003ca href\u003d\\\"http://semver.org/\\\"\u003ehttp://semver.org/\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl16":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl16","comment":"Aluminum cable 16 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"2.105e-003"},{"name":"XCha","value":"0.076e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 16mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 2.105e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.076e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.devAbsInteriorIrradiationInteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.devAbsInteriorIrradiationInteriorShading","comment":"Hemiperical absorptance of a shading device for interior irradiation with interior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","output"],"name":"absIntIrrIntShaDev","comment":"Hemiperical absorbtance of a shading device for interior irradiation with interior shading","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"arraySubscripts":"[NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the hemiperical absorbtance of a shading device for interior irradiation with interior shading.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRLC_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRLC_N","comment":"PI model of a line parameterized with impedance and admittance matrices and neutral line","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N"}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"480"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z11","comment":"Element [1,1] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z12","comment":"Element [1,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z13","comment":"Element [1,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z14","comment":"Element [1,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z22","comment":"Element [2,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z23","comment":"Element [2,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z24","comment":"Element [2,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z33","comment":"Element [3,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z34","comment":"Element [3,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z44","comment":"Element [4,4] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z21","comment":"Element [2,1] of impedance matrix","value":"Z12","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z31","comment":"Element [3,1] of impedance matrix","value":"Z13","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z32","comment":"Element [3,1] of impedance matrix","value":"Z23","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z41","comment":"Element [4,1] of impedance matrix","value":"Z14","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z42","comment":"Element [4,2] of impedance matrix","value":"Z24","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z43","comment":"Element [4,3] of impedance matrix","value":"Z34","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B11","comment":"Element [1,1] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B12","comment":"Element [1,2] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B13","comment":"Element [1,3] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B14","comment":"Element [1,4] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B22","comment":"Element [2,2] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B23","comment":"Element [2,3] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B24","comment":"Element [2,4] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B33","comment":"Element [3,3] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B34","comment":"Element [3,4] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["parameter"],"name":"B44","comment":"Element [4,4] of admittance matrix"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B21","comment":"Element [2,1] of admittance matrix","value":"B12"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B31","comment":"Element [3,1] of admittance matrix","value":"B13"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B32","comment":"Element [3,2] of admittance matrix","value":"B23"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B41","comment":"Element [4,1] of admittance matrix","value":"B14"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B42","comment":"Element [4,2] of admittance matrix","value":"B24"},{"className":"Modelica.SIunits.Admittance","qualifiers":["final","parameter"],"name":"B43","comment":"Element [4,3] of admittance matrix","value":"B34"}],"classes":[{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRLC line model (\u0026pi;-model) that connects two AC three-phase\nunbalanced interfaces and neutral line. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRLCMatrix_N.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model is parameterized with an impedance matrix \u003ci\u003eZ\u003c/i\u003e and\nan admittance matrix \u003ci\u003eB\u003c/i\u003e.\nThe impedance matrix is symmetric, and therefore only the upper triangular\npart of the matrix needs to be defined.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis model is a more detailed version of the model \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL_N\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL_N\u003c/a\u003e that includes\nthe capacitive effects of the lines.\n\u003c/p\u003e\n\n\u003ch4\u003eNote\u003c/h4\u003e\n\u003cp\u003e\nThe fourth line is the neutral one.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Rectangle(),Text(),Text(),Text()})"}},"Buildings.HeatTransfer.Windows.Functions.glassAbsExteriorIrradiationExteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassAbsExteriorIrradiationExteriorShading","comment":"Angular and hemispherical absorptance of each glass pane for exterior irradiation with exterior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"absExtIrrNoSha","comment":"Angular and hemispherical absorptance of each glass pane for exterior irradiation without shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,HEM,NSta]"},{"className":"Real","qualifiers":["array","output"],"name":"absExtIrrExtSha","comment":"Angular and hemispherical absorptance of each glass pane for exterior irradiation with exterior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes angular and hemispherical absorptance of each glass pane for exterior irradiation with exterior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort":{"name":"Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort","comment":"Ideal two port sensor for the specific enthalpy","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["parameter"],"name":"h_out_start","comment":"Initial or guess value of output (\u003d state)","value":"Medium.specificEnthalpy_pTX()","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"h_out","comment":"Specific enthalpy of the passing fluid","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"SpecificEnergy\""},{"name":"unit","qualifiers":["final"],"value":"\"J/kg\""},{"name":"start","value":"h_out_start"}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the specific enthalpy of a passing fluid.\nThe sensor is ideal, i.e. it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.Media.Air.der_specificHeatCapacityCp":{},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.TestBedDividingWall":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.TestBedDividingWall","comment":"Wall separating test beds","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.GypsumBoard(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","value":"10"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a dividing wall commonly found in FLEXLAB test cells.\n    It is used to separate one test cell from another (For example,\n    it is found between test cells X2B and X3A).\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a dividing wall commonly found in FLEXLAB test cells.\n    It is used to separate one test cell from another (For example,\n    it is found between test cells X2B and X3A).\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl35_ECM":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl35_ECM","comment":"Aluminum cable 35 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.956e-003"},{"name":"XCha","value":"0.074e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 35mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.956e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.074e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.Types.CFDBoundaryConditions":{"name":"Buildings.Rooms.Types.CFDBoundaryConditions","comment":"Enumeration to define boundary conditions for the CFD simulation","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Temperature","comment":"Temperature specified"},{"className":"EnumType","qualifiers":["constant"],"name":"HeatFlowRate","comment":"Heat flow rate specified"}]},"Buildings.Electrical.PhaseSystems.DirectCurrent.systemCurrent":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.systemCurrent","comment":"Return system current as function of phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.systemCurrent"}]},"Buildings.UsersGuide.ReleaseNotes.Version_0_4_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_4_0","comment":"Version 0.4.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nAdded package \u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage\\\"\u003e\nBuildings.Fluid.Storage\u003c/a\u003e\nwith models for thermal energy storage.\n\u003cli\u003e\nAdded a steady-state model for a heat and moisture exchanger with\nconstant effectiveness.\nSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.ConstantEffectiveness\\\"\u003e\nBuildings.Fluid.MassExchangers.ConstantEffectiveness\u003c/a\u003e\n\u003cli\u003e\nAdded package \u003ca href\u003d\\\"modelica://Buildings.Utilities.Reports\\\"\u003eBuildings.Utilities.Reports\u003c/a\u003e.\nThe package contains models that facilitate reporting.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Overhang":{"name":"Buildings.HeatTransfer.Windows.Overhang","comment":"For a window with an overhang, outputs the fraction of the window area exposed to the sun","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.BaseClasses.Overhang"},{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.BaseClasses.PartialShade_weatherBus"}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude","modifications":[{"name":"displayUnit","value":"\"deg\""}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth; azi\u003d -90 degree East; azi\u003d 0 South","modifications":[{"name":"displayUnit","value":"\"deg\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFor a window with an overhang, this model outputs the fraction of\nthe area that is exposed to the sun.\nThe models can also be used for doors with an overhang.\n\u003c/p\u003e\n\u003cp\u003e\nThe overhang can be asymmetrical (i.e. wR \u0026ne; wL is allowed)\nabout the vertical centerline of the window. However, the\noverhang must completely cover the window,\ni.e., \u003ccode\u003ewL \u0026ge; 0\u003c/code\u003e and \u003ccode\u003ewR \u0026ge; 0\u003c/code\u003e.\n\u003ccode\u003ewL\u003c/code\u003e and \u003ccode\u003ewR\u003c/code\u003e must be measured from the respective corner\nof the window.\n\u003c/p\u003e\n\u003cp\u003e\nThe figure below shows the parameters.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/HeatTransfer/Windows/Overhang.png\\\" /\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe surface azimuth \u003ccode\u003eazi\u003c/code\u003e is as defined in\n\u003ca href\u003d\\\"modelica://Buildings.Types.Azimuth\\\"\u003e\nBuildings.Types.Azimuth\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nThe model assumes that\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nthe overhang is at least as wide as the window, i.e.,\n\u003ci\u003ew\u003csub\u003eL\u003c/sub\u003e \u0026ge; 0\u003c/i\u003e and\n\u003ci\u003ew\u003csub\u003eR\u003c/sub\u003e \u0026ge; 0\u003c/i\u003e, and\n\u003c/li\u003e\n\u003cli\u003e\nthe overhang is horizontal.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe implementation is explained in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.BaseClasses.Overhang\\\"\u003e\nBuildings.HeatTransfer.Windows.BaseClasses.Overhang\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Bitmap()})"}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","comment":"Construction model for a roof minimally compliant with ASHRAE\n    90.1-2010. Used in test cells X3A, X3B, and XRA","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.GypsumBoard(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a roof which is minimally compliant with ASHRAE 90.1-2010.\n    It is used in the bed X3 and test cell XRA.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Note: This model is currently a work in progress. For more information see\n    the documentation available at\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n  Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e.\n\u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a roof which is minimally compliant with ASHRAE 90.1-2010.\n    It is used in the bed X3 and test cell XRA.\n    \u003c/p\u003e\n    \u003cp\u003e\n    Note: This model is currently a work in progress. For more information see\n    the documentation available at\n    \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.UsersGuide\\\"\u003e\n  Buildings.Rooms.FLEXLAB.UsersGuide\u003c/a\u003e.\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepDownYD":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepDownYD","comment":"AC AC transformer simplified equivalent circuit (YD step down)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepDownYD","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Real","qualifiers":["parameter"],"name":"XoverR","comment":"Ratio between the complex and real components of the impedance (XL/R)"},{"className":"Real","qualifiers":["parameter"],"name":"Zperc","comment":"Short circuit impedance"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of transformer to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of transformer to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a simplified equivalent transformer model with Y-Delta connection\n(voltage step down).\nThe model accounts for winding Joule losses and leakage reactances\nthat are represented by a series of a resistance \u003ci\u003eR\u003c/i\u003e and an\ninductance \u003ci\u003eL\u003c/i\u003e. The resistance and the inductance represent the\neffects of the secondary and primary side of the transformer.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVhigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVlow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVAbase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXoverR\u003c/code\u003e - ratio between reactance and resistance, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZperc\u003c/code\u003e - the short circuit impedance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the resistance and inductance.\n\u003c/p\u003e\n\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/YD_a.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepDownYD\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepDownYD\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text(),Line(),Line(),Line(),Line(),Polygon()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl25":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl25","comment":"Aluminum cable 25 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"1.292e-003"},{"name":"XCha","value":"0.075e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 25mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 1.292e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.075e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.isentropicEnthalpy":{"name":"Buildings.Media.Air.isentropicEnthalpy","comment":"Return the isentropic enthalpy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.isentropicEnthalpy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific enthalpy for\nan isentropic state change from the temperature\nthat corresponds to the state \u003ccode\u003erefState\u003c/code\u003e\nto \u003ccode\u003ereference_T\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.WyeToWyeGround":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.WyeToWyeGround","comment":"This model represent a connection between wye to wye grounded","qualifiers":["model"],"components":[{"className":"Terminal_n","name":"wye","comment":"Terminal Y","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}), iconTransformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Terminal_n","name":"wyeg","comment":"Terminal Y with ground connection","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Connection3to3Ground_n","name":"connection3to4","comment":"Adapter between Termina3 and Terminal4","annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-10},{-60,10}}))"}},{"className":"Buildings.Electrical.AC.OnePhase.Basics.Ground","name":"ground","comment":"Ground reference","annotations":{"placement":"Placement(transformation(extent \u003d {{-30,-40},{-10,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAdapter from wye (Y) to wye grounded (Yg) connector.\nA three-phase unbalanced connector has three AC single phase\nconnectors. Each AC single phase connector contains a the phase voltage,\nwhich is measured\nbetween the phase and the neutral. This model assures that the voltage of the neutral\ncable is equal to zero.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Impedance":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Impedance","comment":"Model of a resistive load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Impedance","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"star","comment":"Type of load connection: true \u003d star, false \u003d triangle","value":"true"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a three-phase balanced impedance.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003einductive\u003dtrue\u003c/code\u003e, then the\ninductance is a parameter, otherwise\nthe capacitance is a parameter.\n\u003c/p\u003e\n\u003cp\u003e\nThe boolean parameter \u003ccode\u003estar\u003c/code\u003e is used to\nselect whether the star (Y) or triangle (D)\nconfiguration is used to connect the impedance.\nBy default, the impedance is assumed to be connected\nwith a star configuration.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the connection type changes from\n\u003ccode\u003estar\u003c/code\u003e to \u003ccode\u003etriangle\u003c/code\u003e, the value of the impedance\nis recomputed in such a way that the nominal power consumed by the impedance\ndoes not change.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Line(),Text(),Rectangle(),Rectangle(),Rectangle(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitsSlab":{"name":"Buildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitsSlab","comment":"Model of multiple parallel circuits of a radiant slab","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPort","modifications":[{"name":"port_a","modifications":[{"name":"p","modifications":[{"name":"start","value":"p_start"},{"name":"nominal","value":"Medium.p_default"}]}]},{"name":"port_b","modifications":[{"name":"p","modifications":[{"name":"start","value":"p_start"},{"name":"nominal","value":"Medium.p_default"}]}]}]},{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.RadiantSlabs.BaseClasses.Slab"},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations"},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters","modifications":[{"name":"dp_nominal","value":"Modelica.Fluid.Pipes.BaseClasses.WallFriction.Detailed.pressureLoss_m_flow()"}]}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nCir","comment":"Number of parallel circuits","value":"1","modifications":[{"name":"min","value":"1"}]},{"className":"Integer","qualifiers":["parameter"],"name":"nSeg","comment":"Number of volume segments in each circuit (along flow path)","value":"if heatTransfer\u003d\u003dTypes.HeatTransfer.EpsilonNTU then 1 else 5","modifications":[{"name":"min","value":"1"}]},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"A","comment":"Surface area of radiant slab (all circuits combined)","annotations":{"dialog":"Dialog(group \u003d \"Construction\")"}},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"length","comment":"Length of the pipe of a single circuit","value":"A/(disPip)/(nCir)"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_nominal","comment":"Nominal mass flow rate of all circuits combined","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_small","comment":"Small mass flow rate of all circuits combined for regularization of zero flow","value":"1E-4*abs(m_flow_nominal)","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.SIunits.Velocity","qualifiers":["final","parameter"],"name":"v_nominal","comment":"Velocity at m_flow_nominal","value":"4*m_flow_nominal/(pipe.dIn^(2))/(Modelica.Constants.pi)/(rho_default)/(nCir)"},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Buildings.Fluid.HeatExchangers.RadiantSlabs.Types.HeatTransfer","qualifiers":["parameter"],"name":"heatTransfer","comment":"Model for heat transfer between fluid and slab","value":"Types.HeatTransfer.EpsilonNTU"},{"className":"Boolean","qualifiers":["parameter"],"name":"show_T","comment":"\u003d true, if actual temperature at port is computed","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\", group \u003d \"Diagnostics\")"}},{"className":"Modelica.SIunits.MassFlowRate","name":"m_flow","comment":"Mass flow rate from port_a to port_b (m_flow \u003e 0 is design flow direction) for all circuits combined","value":"port_a.m_flow","modifications":[{"name":"start","value":"0"}]},{"className":"Modelica.SIunits.PressureDifference","name":"dp","comment":"Pressure difference between port_a and port_b","value":"port_a.p-port_b.p","modifications":[{"name":"start","value":"0"},{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Medium.ThermodynamicState","name":"sta_a","comment":"Medium properties in port_a","value":"if homotopyInitialization then Medium.setState_phX(port_a.p,homotopy(),homotopy()) else Medium.setState_phX(port_a.p,noEvent(actualStream(port_a.h_outflow)),noEvent(actualStream(port_a.Xi_outflow)))","conditionalClause":" if show_T"},{"className":"Medium.ThermodynamicState","name":"sta_b","comment":"Medium properties in port_b","value":"if homotopyInitialization then Medium.setState_phX(port_b.p,homotopy(),homotopy()) else Medium.setState_phX(port_b.p,noEvent(actualStream(port_b.h_outflow)),noEvent(actualStream(port_b.Xi_outflow)))","conditionalClause":" if show_T"},{"className":"Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab","name":"sla","comment":"Single parallel circuit of the radiant slab","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"heatTransfer","qualifiers":["final"],"value":"heatTransfer"},{"name":"sysTyp","qualifiers":["final"],"value":"sysTyp"},{"name":"A","qualifiers":["final"],"value":"A/(nCir)"},{"name":"disPip","qualifiers":["final"],"value":"disPip"},{"name":"pipe","qualifiers":["final"],"value":"pipe"},{"name":"layers","qualifiers":["final"],"value":"layers"},{"name":"steadyStateInitial","qualifiers":["final"],"value":"steadyStateInitial"},{"name":"iLayPip","qualifiers":["final"],"value":"iLayPip"},{"name":"T_a_start","qualifiers":["final"],"value":"T_a_start"},{"name":"T_b_start","qualifiers":["final"],"value":"T_b_start"},{"name":"energyDynamics","qualifiers":["final"],"value":"energyDynamics"},{"name":"massDynamics","qualifiers":["final"],"value":"massDynamics"},{"name":"p_start","qualifiers":["final"],"value":"p_start"},{"name":"T_start","qualifiers":["final"],"value":"T_start"},{"name":"X_start","qualifiers":["final"],"value":"X_start"},{"name":"C_start","qualifiers":["final"],"value":"C_start"},{"name":"C_nominal","qualifiers":["final"],"value":"C_nominal"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m_flow_nominal/(nCir)"},{"name":"m_flow_small","qualifiers":["final"],"value":"m_flow_small/(nCir)"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"},{"name":"from_dp","qualifiers":["final"],"value":"from_dp"},{"name":"dp_nominal","qualifiers":["final"],"value":"dp_nominal"},{"name":"linearizeFlowResistance","qualifiers":["final"],"value":"linearizeFlowResistance"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM"},{"name":"nSeg","qualifiers":["final"],"value":"nSeg"},{"name":"length","qualifiers":["final"],"value":"length"},{"name":"ReC","qualifiers":["final"],"value":"4000"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a radiant slab with pipes or a capillary heat exchanger\nembedded in the construction.\nThe model is a composition of multiple models of\n\u003ca href\u003d\\\"Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\\\"\u003e\nBuildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\u003c/a\u003e\nthat are arranged in a parallel.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003enCir\u003c/code\u003e declares the number of parallel flow circuits.\nEach circuit will have the same mass flow rate, and it is exposed to the same\nport variables for the heat port at the two surfaces, and for the flow inlet and outlet.\n\u003c/p\u003e\n\u003cp\u003e\nA typical model application is as follows: Suppose a large room has a radiant slab with two parallel circuits\nwith the same pipe spacing and pipe length. Then, rather than using two instances of\n\u003ca href\u003d\\\"Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\\\"\u003e\nBuildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\u003c/a\u003e,\nthis system can be modeled using one instance of this model in order to reduce computing effort.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.RadiantSlabs.Examples.SingleCircuitMultipleCircuitEpsilonNTU\\\"\u003e\nBuildings.Fluid.HeatExchangers.RadiantSlabs.Examples.SingleCircuitMultipleCircuitEpsilonNTU\u003c/a\u003e for an example\nthat shows that the models give identical results.\n\u003c/p\u003e\n\u003cp\u003e\nSince this model is a parallel arrangment of \u003ccode\u003enCir\u003c/code\u003e models of\n\u003ca href\u003d\\\"Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\\\"\u003e\nBuildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\u003c/a\u003e,\nwe refer to\n\u003ca href\u003d\\\"Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\\\"\u003e\nBuildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\u003c/a\u003e\nfor the model documentation.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.RadiantSlabs.UsersGuide\\\"\u003e\nuser\u0027s guide\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nTo allow a better comment for the nominal mass flow rate, i.e., to specify that\nits value is for all circuits combined, this\nmodel does not inherit\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialTwoPortInterface\\\"\u003e\nBuildings.Fluid.Interfaces.PartialTwoPortInterface\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Line(),Line()})"}},"Buildings.HeatTransfer.Convection.Functions.windDirectionModifier":{"name":"Buildings.HeatTransfer.Convection.Functions.windDirectionModifier","comment":"Wind direction modifier that is used to compute the wind-driven convective heat transfer coefficient","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["input"],"name":"azi","comment":"Surface azimuth"},{"className":"Modelica.SIunits.Angle","qualifiers":["input"],"name":"dir","comment":"Wind direction (0\u003dwind from North)","modifications":[{"name":"min","value":"0"},{"name":"max","value":"2*Modelica.Constants.pi"}]},{"className":"Real","qualifiers":["output"],"name":"W","comment":"Wind direction modifier"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction that outputs \u003ci\u003e1\u003c/i\u003e if the incidence angle is below 100 degrees, and\n\u003ci\u003e0.5\u003c/i\u003e otherwise.\nThe implementation is once continuously differentiable in its input arguments.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Examples.ExteriorConvection\\\"\u003e\nBuildings.HeatTransfer.Examples.ExteriorConvection\u003c/a\u003e\nfor an example that uses this function.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.SensibleEnthalpyFlowRate":{"name":"Buildings.Fluid.Sensors.SensibleEnthalpyFlowRate","comment":"Ideal enthalphy flow rate sensor that outputs the sensible enthalpy flow rate only","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor","modifications":[{"name":"Medium","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"}]},{"nameOfExtendedClass":"Buildings.Fluid.BaseClasses.IndexMassFraction","modifications":[{"name":"substanceName","qualifiers":["final"],"value":"\"water\""}]},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"H_flow","comment":"Sensible enthalpy flow rate, positive if from port_a to port_b","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"W\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90))"}},{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["parameter"],"name":"h_out_start","comment":"Initial or guess value of measured specific sensible enthalpy","value":"Medium.enthalpyOfNonCondensingGas()","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the \u003ci\u003esensible\u003c/i\u003e enthalphy flow rate of the medium in the flow\nbetween its fluid ports. In particular, if the total enthalpy flow rate is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  H\u0026#775;\u003csub\u003etot\u003c/sub\u003e \u003d H\u0026#775;\u003csub\u003esen\u003c/sub\u003e + H\u0026#775;\u003csub\u003elat\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003eH\u0026#775;\u003csub\u003esen\u003c/sub\u003e \u003d m\u0026#775; (1-X\u003csub\u003ew\u003c/sub\u003e) c\u003csub\u003ep,air\u003c/sub\u003e\u003c/i\u003e,\nthen this sensor outputs \u003ci\u003eH\u0026#775; \u003d H\u0026#775;\u003csub\u003esen\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then the measured\nspecific sensible enthalpy \u003ci\u003eh\u003csub\u003eout\u003c/sub\u003e\u003c/i\u003e that is used to\ncompute the sensible enthalpy flow rate\n\u003ci\u003eH\u0026#775;\u003csub\u003esen\u003c/sub\u003e \u003d m\u0026#775; h\u003csub\u003eout\u003c/sub\u003e\u003c/i\u003e\nis computed using a first order differential equation.\nSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\n\u003cp\u003e\nFor a sensor that measures\n\u003ci\u003eH\u0026#775;\u003csub\u003etot\u003c/sub\u003e\u003c/i\u003e, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.EnthalpyFlowRate\\\"\u003e\nBuildings.Fluid.Sensors.EnthalpyFlowRate\u003c/a\u003e.\u003cbr/\u003e\nFor a sensor that measures\n\u003ci\u003eH\u0026#775;\u003csub\u003elat\u003c/sub\u003e\u003c/i\u003e, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.LatentEnthalpyFlowRate\\\"\u003e\nBuildings.Fluid.Sensors.LatentEnthalpyFlowRate\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe sensor is ideal, i.e., it does not influence the fluid.\nThe sensor can only be used with medium models that implement the function\n\u003ccode\u003eenthalpyOfNonCondensingGas(T)\u003c/code\u003e.\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Line(),Line(),Line(),Text(),Polygon(),Line(),Ellipse(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortInductance_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortInductance_N","comment":"Model of an inductance with two electrical ports and neutral line cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N"}],"components":[{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"L","comment":"Inductance"},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"Ln","comment":"Inductance of neutral cable"},{"className":"OnePhase.Lines.TwoPortInductance","name":"phase1","comment":"Inductance line 1","modifications":[{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,32},{10,52}}))"}},{"className":"OnePhase.Lines.TwoPortInductance","name":"phase2","comment":"Inductance line 2","modifications":[{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,2},{10,22}}))"}},{"className":"OnePhase.Lines.TwoPortInductance","name":"phase3","comment":"Inductance line 3","modifications":[{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-28},{10,-8}}))"}},{"className":"OnePhase.Lines.TwoPortInductance","name":"phase4","comment":"Inductance line 3","modifications":[{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-58},{10,-38}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nInductive model that connects two AC three-phase\nunbalanced interfaces with neutral line. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortL_N.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped inductances as shown in the figure above.\nAssuming that the inductance \u003ci\u003eL\u003c/i\u003e is the overall inductance of the cable,\neach line has an inductance equal to \u003ci\u003eL/3\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe inductance of the neutral cable is defined separately using the parameter\n\u003ccode\u003eLn\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Ellipse(),Text(),Line(),Line(),Text(),Line(),Ellipse(),Ellipse(),Rectangle(),Line()})"}},"Buildings.Fluid.FixedResistances.LosslessPipe":{"name":"Buildings.Fluid.FixedResistances.LosslessPipe","comment":"Pipe with no flow friction and no heat transfer","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface"}],"components":[{"className":"Boolean","qualifiers":["final","parameter"],"name":"from_dp","comment":"Used to satisfy replaceable models","value":"true"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a pipe with no flow resistance, no heat loss and no transport delay.\nThis model can be used to replace a \u003ccode\u003ereplaceable\u003c/code\u003e pipe model\nin flow legs in which no friction should be modeled.\nThis is for example done in the outlet port of the\nbase class for three way valves,\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Text()})"}},"Buildings.Electrical.AC.OnePhase.Loads.Impedance":{"name":"Buildings.Electrical.AC.OnePhase.Loads.Impedance","comment":"Model of a generic impedance","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Impedance","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of an impedance. This model can be used to represent any type\nof resistive, inductive or capacitive load.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the power consumed by the impedance model will drecrease if its voltage\ndecreases.\n\u003c/p\u003e\n\u003cp\u003e\nThe model of the impedance is\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nV \u003d Z i,\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eZ \u003d R + j X\u003c/i\u003e is the impedance. The value of the resistance \u003ci\u003eR\u003c/i\u003e and the\nreactance \u003ci\u003eX\u003c/i\u003e depend on the type of impedance. Different types of impedances\ncan be selected using the boolean parameters \u003ccode\u003einductive\u003c/code\u003e, \u003ccode\u003euse_R_in\u003c/code\u003e,\n\u003ccode\u003euse_L_in\u003c/code\u003e, and \u003ccode\u003euse_C_in\u003c/code\u003e. See\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Impedance\\\"\u003e\nBuildings.Electrical.Interfaces.Impedance\u003c/a\u003e for more details.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Line(),Text()})"}},"Buildings.Controls.SetPoints.OccupancySchedule.switchReal":{},"Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger":{"name":"Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger","comment":"Partial model transporting one fluid stream with storing mass or energy","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface","modifications":[{"name":"port_a","modifications":[{"name":"h_outflow","modifications":[{"name":"start","value":"h_outflow_start"}]}]},{"name":"port_b","modifications":[{"name":"h_outflow","modifications":[{"name":"start","value":"h_outflow_start"}]}]}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance","qualifiers":["final"],"value":"true"}]}],"components":[{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau","comment":"Time constant at nominal flow (if energyDynamics \u003c\u003e SteadyState)","value":"30","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamics","comment":"Type of energy balance: dynamic (3 initialization options) or steady state","value":"Modelica.Fluid.Types.Dynamics.DynamicFreeInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"massDynamics","comment":"Type of mass balance: dynamic (3 initialization options) or steady state","value":"energyDynamics","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Medium.AbsolutePressure","qualifiers":["parameter"],"name":"p_start","comment":"Start value of pressure","value":"Medium.p_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Medium.Temperature","qualifiers":["parameter"],"name":"T_start","comment":"Start value of temperature","value":"Medium.T_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X_start","comment":"Start value of mass fractions m_i/m","value":"Medium.X_default","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", enable \u003d Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C_start","comment":"Start value of trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", enable \u003d Medium.nC\u003e0)"}},{"className":"Buildings.Fluid.MixingVolumes.MixingVolume","qualifiers":["replaceable"],"name":"vol","constrainingClause":" constrainedby Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume (final redeclare package Medium \u003d Medium, nPorts \u003d 2, V \u003d m_flow_nominal*tau/(rho_default), final allowFlowReversal \u003d allowFlowReversal, final mSenFac \u003d 1, final m_flow_nominal \u003d m_flow_nominal, final energyDynamics \u003d energyDynamics, final massDynamics \u003d massDynamics, final p_start \u003d p_start, final T_start \u003d T_start, final X_start \u003d X_start, final C_start \u003d C_start)"},{"className":"Buildings.Fluid.FixedResistances.FixedResistanceDpM","name":"preDro","comment":"Pressure drop model","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"use_dh","qualifiers":["final"],"value":"false"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m_flow_nominal"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"show_T","qualifiers":["final"],"value":"false"},{"name":"from_dp","qualifiers":["final"],"value":"from_dp"},{"name":"linearized","qualifiers":["final"],"value":"linearizeFlowResistance"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"},{"name":"dp_nominal","qualifiers":["final"],"value":"dp_nominal"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-60,-10},{-40,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component transports one fluid stream.\nIt provides the basic model for implementing dynamic and steady-state\nmodels that exchange heat and water vapor with the fluid stream.\nThe model also computes the pressure drop due to the flow resistance.\nBy setting the parameter \u003ccode\u003edp_nominal\u003d0\u003c/code\u003e, the computation\nof the pressure drop can be avoided.\nThe variable \u003ccode\u003evol.heatPort.T\u003c/code\u003e always has the value of\nthe temperature of the medium that leaves the component.\nFor the actual temperatures at the port, the variables \u003ccode\u003esta_a.T\u003c/code\u003e\nand \u003ccode\u003esta_b.T\u003c/code\u003e can be used. These two variables are provided by\nthe base class\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialTwoPortInterface\\\"\u003e\nBuildings.Fluid.Interfaces.PartialTwoPortInterface\u003c/a\u003e.\n\u003c/p\u003e\n\nFor models that extend this model, see for example\n\u003cul\u003e\n\u003cli\u003e\nthe ideal heater or cooler\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.HeaterCooler_u\\\"\u003e\nBuildings.Fluid.HeatExchangers.HeaterCooler_u\u003c/a\u003e, and\n\u003c/li\u003e\n\u003cli\u003e\nthe ideal humidifier\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.Humidifier_u\\\"\u003e\nBuildings.Fluid.MassExchangers.Humidifier_u\u003c/a\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe variable names follow the conventions used in\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.Examples.HeatExchanger.BaseClasses.BasicHX\\\"\u003e\nModelica.Fluid.Examples.HeatExchanger.BaseClasses.BasicHX\n\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Media.Specialized.Air.PerfectGas.density":{"name":"Buildings.Media.Specialized.Air.PerfectGas.density","comment":"Gas density","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.density"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nDensity is computed from pressure, temperature and composition in the thermodynamic state record applying the ideal gas law.\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.ToDryAir":{"name":"Buildings.Utilities.Psychrometrics.ToDryAir","comment":"Block to convert absolute humidity from [kg/kg total air] to [kg/kg dry air]","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"XiDry","comment":"Water vapor concentration in [kg/kg dry air]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"XiTotalAir","comment":"Water vapor concentration in [kg/kg total air]","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that converts humidity concentration from [kg/kg total air] to [kg/kg dry air].\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text()})"}},"Buildings.HeatTransfer.Convection.Functions.HeatFlux.floor":{"name":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.floor","comment":"Free convection, floor","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.BaseClasses.PartialHeatFlux"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the buoyancy-driven convective heat flux as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  q\u0026#775; \u003d h \u0026Delta;T,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026Delta;T\u003c/i\u003e is the solid temperature minus the fluid temperature and\n\u003ci\u003eh\u003c/i\u003e is the convective heat transfer coefficient\nfor a floor, computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nh\u003dk |\u0026Delta;T|\u003csup\u003e0.3333\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ek\u003d0.76\u003c/i\u003e if the fluid is warmer than the floor,\nor \u003ci\u003ek\u003d1.51\u003c/i\u003e otherwise.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.SolarCollectors.Types.Area":{"name":"Buildings.Fluid.SolarCollectors.Types.Area","comment":"Enumeration to define the area type used in solar collector calculation","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Gross","comment":"Gross area"},{"className":"EnumType","qualifiers":["constant"],"name":"Aperture","comment":"Net aperture area"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n      Enumeration used to define the different types of area measurements used\n      in solar collector testing.\n    \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl35":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl35","comment":"Aluminum cable 35 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.923e-003"},{"name":"XCha","value":"0.074e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 35mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.923e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.074e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.Functions.selectCable_low":{"name":"Buildings.Electrical.Transmission.Functions.selectCable_low","comment":"This function is used to automatically select the\n    type of cable for low voltages","components":[{"className":"Modelica.SIunits.Power","qualifiers":["input"],"name":"P_nominal","comment":"Rated power","value":"0"},{"className":"Modelica.SIunits.Voltage","qualifiers":["input"],"name":"V_nominal","comment":"Rated voltage","value":"0"},{"className":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","qualifiers":["output"],"name":"cable","comment":"Cable"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function selects the default cable for a low voltage\ntransmission line.\n\u003c/p\u003e\n\u003cp\u003e\nThe function takes as inputs the nominal voltage \u003ci\u003eV\u003csub\u003enominal\u003c/sub\u003e\u003c/i\u003e and the\nnominal power \u003ci\u003eP\u003csub\u003enominal\u003c/sub\u003e\u003c/i\u003e. It computes the maximum current current that\ncan flow through the cable as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nI\u003csub\u003eMAX\u003c/sub\u003e \u003d S\u003csub\u003eF\u003c/sub\u003e P\u003csub\u003enominal\u003c/sub\u003e / V\u003csub\u003enominal\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eS\u003csub\u003eF\u003c/sub\u003e\u003c/i\u003e is the safety factor. By default the safety factor is equal to \u003ci\u003e1.2\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nUsing \u003ci\u003eI\u003csub\u003eMAX\u003c/sub\u003e\u003c/i\u003e, the function selects the smallest cable that has an ampacity\nhigher than I\u003csub\u003eMAX\u003c/sub\u003e. The cables are selected from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.LowVoltageCables\\\"\u003e\nBuildings.Electrical.Transmission.LowVoltageCables\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Conduction.SingleLayer":{"name":"Buildings.HeatTransfer.Conduction.SingleLayer","comment":"Model for single layer heat conductance","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Conduction.BaseClasses.PartialConductor","modifications":[{"name":"R","qualifiers":["final"],"value":"if material.R\u003cModelica.Constants.eps then material.x/(material.k)/(A) else material.R/(A)"}]}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["array"],"name":"T","comment":"Temperature at the states","modifications":[{"name":"start","value":"{T_a_start+(T_b_start-T_a_start)*UA*sum(if k\u003d\u003d1 or k\u003d\u003dnSta+1 then RnSta2 else RnStak in 1:i)i in 1:nSta}"},{"name":"nominal","qualifiers":["each"],"value":"300"}],"arraySubscripts":"[nSta]"},{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["array"],"name":"Q_flow","comment":"Heat flow rate from state i to i+1","arraySubscripts":"[nSta+1]"},{"className":"Modelica.SIunits.SpecificInternalEnergy","qualifiers":["array"],"name":"u","comment":"Definition of specific internal energy (enthalpy in solids)!","modifications":[{"name":"start","value":"material.c*{T_a_start+(T_b_start-T_a_start)*UA*sum(if k\u003d\u003d1 or k\u003d\u003dnSta+1 then RnSta2 else RnStak in 1:i)i in 1:nSta}"},{"name":"nominal","qualifiers":["each"],"value":"270000"}],"arraySubscripts":"[nSta]"},{"className":"Data.BaseClasses.Material","qualifiers":["replaceable","parameter"],"name":"material","comment":"Material from Data.Solids, Data.SolidsPCM or Data.Resistances","annotations":{"placement":"Placement(transformation(extent \u003d {{60,60},{80,80}}))"}},{"className":"Boolean","qualifiers":["parameter"],"name":"steadyStateInitial","comment":"\u003dtrue initializes dT(0)/dt\u003d0, false initializes T(0) at fixed temperature using T_a_start and T_b_start","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_a_start","comment":"Initial temperature at port_a, used if steadyStateInitial \u003d false","value":"293.15","annotations":{"dialog":"Dialog(group \u003d \"Initialization\", enable \u003d not steadyStateInitial)"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_b_start","comment":"Initial temperature at port_b, used if steadyStateInitial \u003d false","value":"293.15","annotations":{"dialog":"Dialog(group \u003d \"Initialization\", enable \u003d not steadyStateInitial)"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis is a model of a heat conductor for a single layer of homogeneous material\nthat computes transient or steady-state heat conduction.\n\n\u003ch4\u003eTransient heat conduction in materials without phase change\u003c/h4\u003e\n\u003cp\u003e\nIf the material is a record that extends\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.Solids\\\"\u003e\nBuildings.HeatTransfer.Data.Solids\u003c/a\u003e and its\nspecific heat capacity (as defined by the record \u003ccode\u003ematerial.c\u003c/code\u003e)\nis non-zero, then this model computes \u003ci\u003etransient\u003c/i\u003e heat conduction, i.e., it\ncomputes a numerical approximation to the solution of the heat equation\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n   \u0026rho; c (\u0026part; T(s,t) \u0026frasl; \u0026part;t) \u003d\n    k (\u0026part;\u0026sup2; T(s,t) \u0026frasl; \u0026part;s\u0026sup2;),\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026rho;\u003c/i\u003e\nis the mass density,\n\u003ci\u003ec\u003c/i\u003e\nis the specific heat capacity per unit mass,\n\u003ci\u003eT\u003c/i\u003e\nis the temperature at location \u003ci\u003es\u003c/i\u003e and time \u003ci\u003et\u003c/i\u003e and\n\u003ci\u003ek\u003c/i\u003e is the heat conductivity.\nAt the locations \u003ci\u003es\u003d0\u003c/i\u003e and \u003ci\u003es\u003dx\u003c/i\u003e, where \u003ci\u003ex\u003c/i\u003e is the\nmaterial thickness, the temperature and heat flow rate is equal to the\ntemperature and heat flow rate of the heat ports.\n\u003c/p\u003e\n\u003ch4\u003eTransient heat conduction in phase change materials\u003c/h4\u003e\n\u003cp\u003e\nIf the material is declared using a record of type\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.SolidsPCM\\\"\u003e\nBuildings.HeatTransfer.Data.SolidsPCM\u003c/a\u003e, the heat transfer\nin a phase change material is computed.\nThe record \u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.SolidsPCM\\\"\u003e\nBuildings.HeatTransfer.Data.SolidsPCM\u003c/a\u003e\ndeclares the solidus temperature \u003ccode\u003eTSol\u003c/code\u003e,\nthe liquidus temperature \u003ccode\u003eTLiq\u003c/code\u003e and the latent heat of\nphase transformation \u003ccode\u003eLHea\u003c/code\u003e.\nFor heat transfer with phase change, the specific internal energy \u003ci\u003eu\u003c/i\u003e\nis the dependent variable, rather than the temperature.\nTherefore, the governing equation is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n   \u0026rho; (\u0026part; u(s,t) \u0026frasl; \u0026part;t) \u003d\n    k (\u0026part;\u0026sup2; T(s,t) \u0026frasl; \u0026part;s\u0026sup2;).\n\u003c/p\u003e\n\u003cp\u003e\nThe constitutive\nrelation between specific internal energy \u003ci\u003eu\u003c/i\u003e and temperature \u003ci\u003eT\u003c/i\u003e is defined in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Conduction.BaseClasses.enthalpyTemperature\\\"\u003e\nBuildings.HeatTransfer.Conduction.BaseClasses.enthalyTemperature\u003c/a\u003e by using\ncubic hermite spline interpolation with linear extrapolation.\n\u003c/p\u003e\n\u003ch4\u003eSteady-state heat conduction\u003c/h4\u003e\n\u003cp\u003e\nIf \u003ccode\u003ematerial.c\u003d0\u003c/code\u003e, or if the material extends\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.Resistances\\\"\u003e\nBuildings.HeatTransfer.Data.Resistances\u003c/a\u003e,\nthen steady-state heat conduction is computed. In this situation, the heat\nflow between its heat ports is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n   Q \u003d A \u0026nbsp; k \u0026frasl; x \u0026nbsp; (T\u003csub\u003ea\u003c/sub\u003e-T\u003csub\u003eb\u003c/sub\u003e),\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003eA\u003c/i\u003e is the cross sectional area,\n\u003ci\u003ex\u003c/i\u003e is the layer thickness,\n\u003ci\u003eT\u003csub\u003ea\u003c/sub\u003e\u003c/i\u003e is the temperature at port a and\n\u003ci\u003eT\u003csub\u003eb\u003c/sub\u003e\u003c/i\u003e is the temperature at port b.\n\u003c/p\u003e\n\u003ch4\u003eSpatial discretization\u003c/h4\u003e\n\u003cp\u003e\nTo spatially discretize the heat equation, the construction is\ndivided into compartments with \u003ccode\u003ematerial.nSta \u0026ge; 1\u003c/code\u003e state variables.\nThe state variables are connected to each other through thermal conductors.\nThere is also a thermal conductor\nbetween the surfaces and the outermost state variables. Thus, to obtain\nthe surface temperature, use \u003ccode\u003eport_a.T\u003c/code\u003e (or \u003ccode\u003eport_b.T\u003c/code\u003e)\nand not the variable \u003ccode\u003eT[1]\u003c/code\u003e.\nEach compartment has the same material properties.\nTo build multi-layer constructions,\nuse\n\u003ca href\u003d\\\"Buildings.HeatTransfer.Conduction.MultiLayer\\\"\u003e\nBuildings.HeatTransfer.Conduction.MultiLayer\u003c/a\u003e instead of this model.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Polygon(),Polygon(),Rectangle(),Text(),Rectangle(),Text()})"}},"Buildings.Electrical.Interfaces.Ground":{"name":"Buildings.Electrical.Interfaces.Ground","comment":"Generalized model of a ground connection.","qualifiers":["model"],"components":[{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystem"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-8,92},{8,108}}), iconTransformation(extent \u003d {{-8,92},{8,108}}))"}}],"classes":[{"name":"Buildings.Electrical.Interfaces.Ground.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nGiven a generic electric connector\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Terminal\\\"\u003e\nBuildings.Electrical.Interfaces.Terminal\u003c/a\u003e this\nmodel imposes the following condition on the voltage \u003ccode\u003eV[PhaseSystem.n]\u003c/code\u003e\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u003cb\u003eV\u003c/b\u003e \u003d \u003cspan style\u003d\\\"text-decoration: overline;\\\"\u003e0\u003c/span\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003cspan style\u003d\\\"text-decoration: overline;\\\"\u003e0\u003c/span\u003e is a null vector of length \u003ccode\u003ePhaseSystem.n\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.FixedVoltage":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.FixedVoltage","comment":"Fixed three-phase balanced AC voltage source","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Sources.FixedVoltage","modifications":[{"name":"terminal"},{"name":"f","modifications":[{"name":"start","value":"60"}]},{"name":"V","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a constant voltage source, specifying the complex voltage\nby the RMS voltage and the phase shift.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line()})"}},"Buildings.Electrical.Types.LoadConnection":{"name":"Buildings.Electrical.Types.LoadConnection","comment":"Enumeration that defines the type of connection can be used for three-phase unbalanced systems","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"wye_to_wyeg","comment":"Wye to wye grounded"},{"className":"EnumType","qualifiers":["constant"],"name":"wye_to_delta","comment":"Wye to delta"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis type is used to describe different types of connections that can be used in\nunbalanced three phase systems.\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.Gases.density":{"name":"Buildings.HeatTransfer.Data.Gases.density","comment":"Function to compute the mass density","components":[{"className":"Buildings.HeatTransfer.Data.Gases.Generic","qualifiers":["input"],"name":"gas","comment":"Record of gas data"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Gas temperature"},{"className":"Modelica.SIunits.Density","qualifiers":["output"],"name":"rho","comment":"Mass density"}]},"Buildings.Media.Specialized.Air.PerfectGas.setState_dTX":{"name":"Buildings.Media.Specialized.Air.PerfectGas.setState_dTX","comment":"Thermodynamic state as function of d, T and composition X","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Density","qualifiers":["input"],"name":"d","comment":"Density"},{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"Temperature"},{"className":"MassFraction","qualifiers":["array","input"],"name":"X","comment":"Mass fractions","value":"reference_X","arraySubscripts":"[:]"},{"className":"ThermodynamicState","qualifiers":["output"],"name":"state","comment":"Thermodynamic state"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  The thermodynamic state record\n  is computed from density d, temperature T and composition X.\n\u003c/html\u003e\""}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS30slash5":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.TopS30slash5","comment":"Pump data for a staged Wilo-Top-S 30/5 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"2650"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{4.24448217317e-06,0.000275419732126,0.000501792114695,0.000688077721185,0.000827202414639,0.00101584606678,0.0011714770798,0.00132710809281,0.00148981324278,0.00166195057536}"},{"name":"P","value":"{83.0171256559,101.117659669,113.263045942,122.28302674,128.764680916,135.257448954,139.852003784,143.350736549,145.269964752,146.115128625}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{4.24448217317e-06,0.000275419732126,0.000501792114695,0.000688077721185,0.000827202414639,0.00101584606678,0.0011714770798,0.00132710809281,0.00148981324278,0.00166195057536}"},{"name":"dp","value":"{52688.1456954,49223.2450331,45151.986755,40994.1059603,37269.3377483,31205.7615894,25661.9205298,19598.3443709,12755.1655629,4699.27152318}"}]},{"name":"speeds_rpm","value":"{0,1890,2190,2650}"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000000000296670002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/00000000000296670002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerFull":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerFull","comment":"AC AC transformer detailed equivalent circuit (YY)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Nominal frequency","modifications":[{"name":"start","value":"60"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"R1","comment":"Resistance on side 1 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"L1","comment":"Inductance on side 1 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"R2","comment":"Resistance on side 2 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"L2","comment":"Inductance on side 2 of the transformer (pu)","modifications":[{"name":"min","value":"0"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"magEffects","comment":"If \u003dtrue introduce magnetization effects","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Magnetization\")"}},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"Rm","comment":"Magnetization resistance (pu)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Magnetization\", enable \u003d magEffects)"}},{"className":"Buildings.Electrical.Types.PerUnit","qualifiers":["parameter"],"name":"Lm","comment":"Magnetization inductance (pu)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Magnetization\", enable \u003d magEffects)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of converter to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of converter to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a detailed transformer model that takes into accounts the winding Joule losses,\nand the leakage reactances on the primary and secondary side. The model also takes into account\nthe core or iron losses and the losses due to magnetization effects.\n\u003c/p\u003e\n\u003cp\u003e\nThe losses are represented by a series of resistances \u003ci\u003eR\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003eR\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e,\n\u003ci\u003eR\u003csub\u003em\u003c/sub\u003e\u003c/i\u003e and inductances \u003ci\u003eL\u003csub\u003e1\u003c/sub\u003e\u003c/i\u003e, \u003ci\u003eL\u003csub\u003e2\u003c/sub\u003e\u003c/i\u003e, and\n\u003ci\u003eL\u003csub\u003em\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVhigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVlow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVAbase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ef\u003c/code\u003e - frequency,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR_1, L_1\u003c/code\u003e - resistance and inductance at primary side (per unit),\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR_2, L_2\u003c/code\u003e - resistance and inductance at secondary side (per unit), and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eR_m, L_m\u003c/code\u003e - resistance and inductance for magnetization effects (per unit).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the nominal impedances\nat the primary and secondary side. Given these values, the per unit values are transformed into\nthe actual values of the resistances and inductancs.\n\u003c/p\u003e\n\u003cp\u003e\nThe magnetization losses can be enabled or disabled using the boolean flag \u003ccode\u003emagEffects\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/YY.png\\\"/\u003e\n\u003c/p\u003e\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformerFull\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformerFull\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterYY\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfDryAir":{"name":"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfDryAir","comment":"Derivative of enthalpy of dry air per unit mass of dry air","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"Real","qualifiers":["input"],"name":"der_T","comment":"temperature derivative"},{"className":"Real","qualifiers":["output"],"name":"der_h","comment":"derivative of dry air enthalpy"}]},"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortResistance":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortResistance","comment":"Model of a resistance with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortResistance","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistance that connects two AC three-phase\nbalanced interfaces. This model can be used to represent a\ncable in a three-phase balanced AC system.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Lines.TwoPortResistance\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Lines.TwoPortResistance\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.specificHelmholtzEnergy":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificHelmholtzEnergy","comment":"Specific Helmholtz energy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.specificHelmholtzEnergy"},{"nameOfExtendedClass":"Modelica.Icons.Function"}]},"Buildings.Controls.Predictors.ElectricalLoad.incrementIndex":{},"Buildings.Electrical.AC.OnePhase.Sources.FixedVoltage":{"name":"Buildings.Electrical.AC.OnePhase.Sources.FixedVoltage","comment":"Fixed single phase AC voltage source","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Source","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"}]}],"components":[{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Frequency of the source","modifications":[{"name":"start","value":"60"}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"RMS voltage of the source","modifications":[{"name":"start","value":"110"}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phiSou","comment":"Phase shift of the source","value":"0"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a constant voltage source. The complex voltage is specified by the RMS voltage\nand the phase shift.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Ellipse(),Line(),Text(),Line(),Line(),Line(),Line(),Text()})"}},"Buildings.Utilities.Math.Functions.smoothLimit":{"name":"Buildings.Utilities.Math.Functions.smoothLimit","comment":"Once continuously differentiable approximation to the limit function","components":[{"className":"Real","qualifiers":["input"],"name":"x","comment":"Variable"},{"className":"Real","qualifiers":["input"],"name":"l","comment":"Low limit"},{"className":"Real","qualifiers":["input"],"name":"u","comment":"Upper limit"},{"className":"Real","qualifiers":["input"],"name":"deltaX","comment":"Width of transition interval"},{"className":"Real","qualifiers":["output"],"name":"y","comment":"Result"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce continuously differentiable approximation to the \u003ccode\u003elimit(.,.)\u003c/code\u003e function.\nThe output is bounded to be in \u003ci\u003e[l, u]\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the limit need not be respected, such as illustrated in\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothMin\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothMin\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl70_ECM":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl70_ECM","comment":"Aluminum cable 70mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.488e-003"},{"name":"XCha","value":"0.072e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 70mm^2, ECM type.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.488e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.072e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.SolarCollectors.Data.GlazedFlatPlate.FP_SolahartKf":{"name":"Buildings.Fluid.SolarCollectors.Data.GlazedFlatPlate.FP_SolahartKf","comment":"FP - Solahart Kf","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","modifications":[{"name":"ATyp","qualifiers":["final"],"value":"Types.Area.Gross"},{"name":"A","qualifiers":["final"],"value":"2.003"},{"name":"mDry","qualifiers":["final"],"value":"42"},{"name":"V","qualifiers":["final"],"value":"3.8/(1000)"},{"name":"dp_nominal","qualifiers":["final"],"value":"93.89"},{"name":"mperA_flow_nominal","qualifiers":["final"],"value":"0.0194"},{"name":"B0","qualifiers":["final"],"value":"-0.137"},{"name":"B1","qualifiers":["final"],"value":"0.0166"},{"name":"y_intercept","qualifiers":["final"],"value":"0.775"},{"name":"slope","qualifiers":["final"],"value":"-5.103"},{"name":"IAMDiff","qualifiers":["final"],"value":"0"},{"name":"C1","qualifiers":["final"],"value":"0"},{"name":"C2","qualifiers":["final"],"value":"0"},{"name":"G_nominal","qualifiers":["final"],"value":"1000"},{"name":"dT_nominal","qualifiers":["final"],"value":"10"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2012021A.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2012021A.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC","comment":"Model of an RLC element with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort"},{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort"}],"components":[{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance at temperature T_ref"},{"className":"Modelica.SIunits.Capacitance","qualifiers":["parameter"],"name":"C","comment":"Capacity"},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"L","comment":"Inductance"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_ref","comment":"Reference temperature","value":"298.15"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"M","comment":"Temperature constant (R_actual \u003d R*(M + T_heatPort)/(M + T_ref))","value":"507.65"},{"className":"Modelica.SIunits.Voltage","qualifiers":["array","parameter"],"name":"Vc1_start","comment":"Initial voltage phasor of the capacitance located in the middle of phase 1","value":"V_nominal/(sqrt(3))*{1,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["array","parameter"],"name":"Vc2_start","comment":"Initial voltage phasor of the capacitance located in the middle of phase 1","value":"V_nominal/(sqrt(3))*{-1/(2),-sqrt(3)/(2)}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["array","parameter"],"name":"Vc3_start","comment":"Initial voltage phasor of the capacitance located in the middle of phase 1","value":"V_nominal/(sqrt(3))*{-1/(2),sqrt(3)/(2)}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.FixedZ_dynamic"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"480"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\", enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Loadm.FixedZ_dynamic)"}},{"className":"OnePhase.Lines.TwoPortRLC","name":"phase1","comment":"Impedance line 1","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"C","qualifiers":["final"],"value":"C/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal/(sqrt(3))"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"Vc_start","value":"Vc1_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortRLC","name":"phase2","comment":"Impedance line 2","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"C","qualifiers":["final"],"value":"C/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal/(sqrt(3))"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"Vc_start","value":"Vc2_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortRLC","name":"phase3","comment":"Impedance line 3","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"C","qualifiers":["final"],"value":"C/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal/(sqrt(3))"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"Vc_start","value":"Vc3_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRLC line model (T-model) that connects two AC three-phase\nunbalanced interfaces. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRLC.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped impedances as shown in the figure above.\nAssuming that the overall cable has a resistance \u003ci\u003eR\u003c/i\u003e, an inductance\n\u003ci\u003eL\u003c/i\u003e, and a capacitance \u003ci\u003eC\u003c/i\u003e, each line has an inductance equal\nto \u003ci\u003eL/3\u003c/i\u003e, a resistance equal to \u003ci\u003eR/3\u003c/i\u003e and a capacity equal to\n\u003ci\u003eC/3\u003c/i\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Rectangle(),Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Text(),Text()})"}},"Buildings.Electrical.AC.OnePhase.Lines.TwoPortRLC":{"name":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortRLC","comment":"Model of an RLC element with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialTwoPortRLC","modifications":[{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]},{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["array","parameter"],"name":"Vc_start","comment":"Initial voltage phasor of the capacitance located in the middle of the line","value":"{V_nominal,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.FixedZ_dynamic"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}}],"annotations":{"diagram":"Diagram(graphics \u003d {Rectangle(),Line(),Line()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a series of two resistive-inductive impedances and a capacitance\nthat connects two AC single phase interfaces.\nThis model can be used to represent a cable in a AC grid.\n\u003c/p\u003e\n\u003cp\u003e\nThe model represents the lumped resistances and capacity, as a T-model, as shown in the figure below.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/OnePhase/Lines/twoPortRLC.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nAs can be seen in the figure, the resistance \u003ci\u003eR\u003c/i\u003e and the inductance \u003ci\u003eL\u003c/i\u003e are split in two halves\nand the capacitance is located in the center.\nThe capacitance in the center is optional. If it is not present, set the\nparameter \u003ccode\u003eC\u003d0\u003c/code\u003e.\nThe model is either dynamic or static depending on the\npresence of the capacitive effect.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phase":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phase","comment":"Return phase","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"x","arraySubscripts":"[n]"},{"className":"SI.Angle","qualifiers":["output"],"name":"phase"}]},"Buildings.Fluid.FMI.InletAdaptor":{"name":"Buildings.Fluid.FMI.InletAdaptor","comment":"Model for exposing a fluid inlet to the FMI interface","qualifiers":["model"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Buildings.Fluid.FMI.Interfaces.Inlet","name":"inlet","comment":"Fluid inlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final"],"value":"use_p_in"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b","comment":"Fluid port","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"p","comment":"Pressure","modifications":[{"name":"unit","value":"\"Pa\""}],"conditionalClause":" if use_p_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-110}))"}}],"classes":[{"name":"Buildings.Fluid.FMI.InletAdaptor.Medium","comment":"Medium model within the source","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that is used to connect an input signal to a fluid port.\nThe model needs to be used in conjunction with an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.OutletAdaptor\\\"\u003e\nBuildings.Fluid.FMI.OutletAdaptor\u003c/a\u003e in order for\nfluid mass flow rate and pressure to be properly assigned to\nthe acausal fluid models.\n\u003c/p\u003e\n\u003cp\u003e\nSee \n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.TwoPortComponent\\\"\u003e\nBuildings.Fluid.FMI.TwoPortComponent\u003c/a\u003e\nor\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.Examples.FMUs.ResistanceVolume\\\"\u003e\nBuildings.Fluid.FMI.Examples.FMUs.ResistanceVolume\u003c/a\u003e\nfor how to use this model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Line(),Ellipse(),Rectangle(),Polygon(),Text(),Ellipse(),Text(),Line(),Text()})"}},"Buildings.HeatTransfer.Data.Gases.thermalConductivity":{"name":"Buildings.HeatTransfer.Data.Gases.thermalConductivity","comment":"Function to compute the thermal conductivity of gases","components":[{"className":"Buildings.HeatTransfer.Data.Gases.Generic","qualifiers":["input"],"name":"gas","comment":"Record of gas data"},{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Gas temperature"},{"className":"Modelica.SIunits.ThermalConductivity","qualifiers":["output"],"name":"k","comment":"Thermal conductivity"}]},"Buildings.Electrical.DC.Sources.VoltageSource":{"name":"Buildings.Electrical.DC.Sources.VoltageSource","comment":"Model of a generoic DC voltage source","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.VariableVoltageSource","modifications":[{"name":"V","modifications":[{"name":"start","value":"1"}]},{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal"},{"name":"potentialReference","qualifiers":["final"],"value":"true"},{"name":"definiteReference","qualifiers":["final"],"value":"false"}]}],"components":[{"className":"Modelica.Electrical.Analog.Interfaces.NegativePin","name":"n","comment":"Negative pin","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a simple DC voltage source with variable voltage.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Line(),Line(),Text(),Text(),Text()})"}},"Buildings.Fluid.FMI.FlowSplitter_u":{"name":"Buildings.Fluid.FMI.FlowSplitter_u","comment":"Container to export a flow splitter as an FMU","qualifiers":["block"],"components":[{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["array","parameter"],"name":"m_flow_nominal","comment":"Nominal mass flow rate for each outlet","modifications":[{"name":"min","qualifiers":["each"],"value":"0"}],"arraySubscripts":"[nout]"},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Integer","qualifiers":["parameter"],"name":"nout","comment":"Number of outlets","modifications":[{"name":"min","value":"1"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Interfaces.Inlet","name":"inlet","comment":"Fluid inlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final"],"value":"use_p_in"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Interfaces.Outlet","qualifiers":["array"],"name":"outlet","comment":"Fluid outlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final","each"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final","each"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final","each"],"value":"use_p_in"}],"arraySubscripts":"[nout]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"u","comment":"Control signal for the mass flow rates","modifications":[{"name":"unit","value":"\"1\""}],"arraySubscripts":"[nout]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}), iconTransformation(extent \u003d {{-120,70},{-100,90}}))"}}],"classes":[{"name":"Buildings.Fluid.FMI.FlowSplitter_u.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that takes as an input the inflowing fluid at the port \u003ccode\u003einlet\u003c/code\u003e\nand a vector of control signals for the mass flow rates \u003ccode\u003eu\u003c/code\u003e.\nThe mass flow of all outlet ports \u003ccode\u003ei\u003c/code\u003e\nis set to the value of \u003ccode\u003eu[i] m_flow_nominal[i]\u003c/code\u003e.\nIf the inflowing mass flow rate at the port \u003ccode\u003einlet\u003c/code\u003e is not equal\nto the sum of \u003ccode\u003eu[i] m_flow_in[i]\u003c/code\u003e, the simulation stops with an assert.\n\u003c/p\u003e\n\u003ch4\u003eAssumptions and limitations\u003c/h4\u003e\n\u003cp\u003e\nThe mass flow rates at all outlet ports must be non-negative.\nReverse flow is not yet implemented.\nIf either of these limitations are violated, then\nthe model stops with an error.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Text(),Rectangle(),Rectangle(),Ellipse(),Polygon(),Rectangle(),Ellipse(),Polygon(),Rectangle()})"}},"Buildings.HeatTransfer.Windows.Window":{"name":"Buildings.HeatTransfer.Windows.Window","comment":"Model for a window","qualifiers":["model"],"components":[{"className":"Buildings.HeatTransfer.Data.GlazingSystems.Generic","qualifiers":["parameter"],"name":"glaSys","comment":"Glazing system","annotations":{"placement":"Placement(transformation(extent \u003d {{150,174},{170,194}}))"}},{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"A","comment":"Heat transfer area"},{"className":"Real","qualifiers":["parameter"],"name":"fFra","comment":"Fraction of frame","value":"0.1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Area","qualifiers":["final","parameter"],"name":"AFra","comment":"Frame area","value":"fFra*A"},{"className":"Modelica.SIunits.Area","qualifiers":["final","parameter"],"name":"AGla","comment":"Glass area","value":"A-AFra"},{"className":"Boolean","qualifiers":["parameter"],"name":"linearize","comment":"Set to true to linearize emissive power","value":"false"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"til","comment":"Surface tilt","modifications":[{"name":"displayUnit","value":"\"deg\""}]},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Interfaces.RadiosityOutflow","name":"JOutUns_a","comment":"Outgoing radiosity that connects to unshaded part of glass at exterior side","annotations":{"placement":"Placement(transformation(extent \u003d {{-200,70},{-220,90}}))"}},{"className":"Interfaces.RadiosityInflow","name":"JInUns_a","comment":"Incoming radiosity that connects to unshaded part of glass at exterior side","annotations":{"placement":"Placement(transformation(extent \u003d {{-220,110},{-200,130}}))"}},{"className":"Interfaces.RadiosityOutflow","name":"JOutSha_a","comment":"Outgoing radiosity that connects to shaded part of glass at exterior side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-200,-110},{-220,-90}}))"}},{"className":"Interfaces.RadiosityInflow","name":"JInSha_a","comment":"Incoming radiosity that connects to shaded part of glass at exterior side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-220,-70},{-200,-50}}))"}},{"className":"Interfaces.RadiosityOutflow","name":"JOutUns_b","comment":"Outgoing radiosity that connects to unshaded part of glass at room-side","annotations":{"placement":"Placement(transformation(extent \u003d {{200,110},{220,130}}))"}},{"className":"Interfaces.RadiosityInflow","name":"JInUns_b","comment":"Incoming radiosity that connects to unshaded part of glass at room-side","annotations":{"placement":"Placement(transformation(extent \u003d {{220,70},{200,90}}))"}},{"className":"Interfaces.RadiosityOutflow","name":"JOutSha_b","comment":"Outgoing radiosity that connects to shaded part of glass at room-side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{200,-70},{220,-50}}))"}},{"className":"Interfaces.RadiosityInflow","name":"JInSha_b","comment":"Incoming radiosity that connects to shaded part of glass at room-side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{220,-110},{200,-90}}))"}},{"className":"Buildings.HeatTransfer.Windows.BaseClasses.CenterOfGlass","name":"glaUns","comment":"Model for unshaded center of glass","modifications":[{"name":"glaSys","qualifiers":["final"],"value":"glaSys"},{"name":"A","qualifiers":["final"],"value":"AGla"},{"name":"til","qualifiers":["final"],"value":"til"},{"name":"linearize","qualifiers":["final"],"value":"linearize"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,10},{10,30}}))"}},{"className":"Buildings.HeatTransfer.Windows.BaseClasses.CenterOfGlass","name":"glaSha","comment":"Model for shaded center of glass","modifications":[{"name":"glaSys","qualifiers":["final"],"value":"glaSys"},{"name":"A","qualifiers":["final"],"value":"AGla"},{"name":"til","qualifiers":["final"],"value":"til"},{"name":"linearize","qualifiers":["final"],"value":"linearize"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-30},{10,-10}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Components.ThermalConductor","name":"frame","comment":"Thermal conductance of frame","modifications":[{"name":"G","value":"AFra*glaSys.UFra"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-170},{10,-150}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"glaUns_a","comment":"Heat port at unshaded glass of exterior-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-210,10},{-190,30}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"glaUns_b","comment":"Heat port at unshaded glass of room-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{190,10},{210,30}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"glaSha_a","comment":"Heat port at shaded glass of exterior-facing surface","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-210,-30},{-190,-10}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"glaSha_b","comment":"Heat port at shaded glass of room-facing surface","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{190,-30},{210,-10}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"fra_a","comment":"Heat port at frame of exterior-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-210,-170},{-190,-150}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"fra_b","comment":"Heat port at frame of room-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{192,-170},{212,-150}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"uSha","comment":"Control signal for the shading device. 0: unshaded; 1: fully shaded (removed if no shade is present)","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-240,140},{-200,180}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"QAbsUns_flow","comment":"Solar radiation absorbed by unshaded part of glass","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"W\""},{"name":"quantity","qualifiers":["each"],"value":"\"Power\""}],"arraySubscripts":"[size(glaSys.glass,1)]","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-80,-220}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-80,-220}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"QAbsSha_flow","comment":"Solar radiation absorbed by shaded part of glass","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"W\""},{"name":"quantity","qualifiers":["each"],"value":"\"Power\""}],"arraySubscripts":"[size(glaSys.glass,1)]","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {60,-220}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {80,-220}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-200,-200},{200,200}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003ch4\u003eOverview\u003c/h4\u003e\n\u003cp\u003e\nThis is a model for a window system. The equations are similar to the\nequations used in the Window 5 model and described in TARCOG 2006.\nThe model computes\nthe heat balance from the exterior surface to\nthe room-facing surface for a window system.\nThe window system can have\nan exterior or an interior shade, but not both, or it can\nhave no shade.\nThe convective heat transfer between the window system and the outside air\nor the room is \u003cem\u003enot\u003c/em\u003e computed by this model.\nThey can be computed using the models\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.ExteriorHeatTransfer\\\"\u003e\nBuildings.HeatTransfer.Windows.ExteriorHeatTransfer\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.InteriorHeatTransfer\\\"\u003e\nBuildings.HeatTransfer.Windows.InteriorHeatTransfer\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nTo calculate the angular transmittance, reflectance and absorptance of a glazing system, Window 5 model first calculates the value for each wave length, then calculate the weighted value over entire wave lengths.\nCurrent window model in Buildings library only uses the weighted value of each glass.\nAs a result, there are some differences in prediciton between the current Modelica window model and WINDOW 5.\nThe difference is small for single layer window or multi-layer window with the same glasses.\nBut it can be large for multi-layer window with different glasses.\n\u003c/p\u003e\n\n\u003ch4\u003eParameters\u003c/h4\u003e\n\u003cp\u003e\nThis model takes as the parameter \u003ccode\u003eglaSys\u003c/code\u003e a data record\nfrom the package\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.GlazingSystems\\\"\u003e\nBuildings.HeatTransfer.Data.GlazingSystems\u003c/a\u003e.\nThis data record specifies the properties of the glasses,\nthe gas fills, the frame and of\nthe shades, if any shade is present.\nWhether a shade is present or not is determined by the parameters\n\u003ccode\u003eglaSys.haveExteriorShade\u003c/code\u003e and\n\u003ccode\u003eglaSys.haveInteriorShade\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003elinearize\u003c/code\u003e can be used\nto linearize the model equations.\n\u003c/p\u003e\n\u003ch4\u003ePorts\u003c/h4\u003e\n\u003cp\u003e\nIf a shade is present, then the input port \u003ccode\u003eu\u003c/code\u003e is used\nto determine the\nshade position. Set \u003ccode\u003eu\u003d0\u003c/code\u003e to have the window in the\nunshaded mode,\nand set \u003ccode\u003eu\u003d1\u003c/code\u003e to have the window shade completely deployed.\nAny intermediate value is possible.\nIf no shade is present, then this port will be removed.\n\u003c/p\u003e\n\u003cp\u003e\nFor the heat ports, the suffix \u003ccode\u003e_a\u003c/code\u003e is used for the exterior, outside-facing side\nof the window, and the suffix \u003ccode\u003e_b\u003c/code\u003e is used for the interior, room-facing surface\nof the window.\nEach side has heat ports that connect to the glass, to the frame, and, optionally, to the\nshade. If no shade is present, then the heat port to the shade will be removed.\n\u003c/p\u003e\n\n\u003ch4\u003eDescription of the Physics\u003c/h4\u003e\n\u003cp\u003e\nThe model has three main submodels that implement the relevant\nheat balances:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nThe model \u003ccode\u003eframe\u003c/code\u003e computes heat conduction\nthrough the frame.\n\u003c/li\u003e\n\u003cli\u003e\nThe model \u003ccode\u003eglaUns\u003c/code\u003e computes the heat balance of the part of the\nwindow that is unshaded. For example, if \u003ccode\u003eu\u003d0.2\u003c/code\u003e, then this model accounts for\nthe 80% of the window that is not behind the shade or blind.\n\u003c/li\u003e\n\u003cli\u003e\nThe model \u003ccode\u003eglaSha\u003c/code\u003e computes the heat balance of the part of the\nwindow that is shaded. For example, if \u003ccode\u003eu\u003d0.2\u003c/code\u003e, then this model accounts for\nthe 20% of the window that is behind the shade or blind.\nIf the parameter \u003ccode\u003eglaSys\u003c/code\u003e specifies that the window has no exterior\nand no interior shade, then the model \u003ccode\u003eglaSha\u003c/code\u003e will be removed.\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\nThe models \u003ccode\u003eglaUns\u003c/code\u003e and \u003ccode\u003eglaSha\u003c/code\u003e\ncompute the solar radiation that is absorbed by each\nglass pane and the solar radiation that is transitted\nthrough the window as a function of the solar incidence angle.\nThey then compute a heat balance that takes into account heat conduction through the glass,\nheat convection through the gas layer,\nand infrared radiation from the exterior and the room through the glass and gas layers.\nThe infrared radiative heat exchange is computed using a radiosity balance.\nHeat conduction through the frame is computed using a heat flow path that is parallel to the\nglazing system, i.e., there is no heat exchange between the frame\nand the glazing layer.\n\u003c/p\u003e\n\n\u003ch4\u003eValidation\u003c/h4\u003e\n\u003cp\u003e\nThe window model has been validated by using measurement data at LBNL\u0027s Test Cell 71T and by using\na comparative model validation with the WINDOW 6 program. These validations are described in Nouidui et al. (2012).\nThe window model has also been validated as part of the BESTEST validations that are implemented in\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.Validation.BESTEST\\\"\u003e\nBuildings.Rooms.Examples.BESTEST\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\nTARCOG 2006: Carli, Inc., TARCOG: Mathematical models for calculation\nof thermal performance of glazing systems with or without\nshading devices, Technical Report, Oct. 17, 2006.\n\u003c/p\u003e\n\n\u003cp\u003e\nThierry Stephane Nouidui, Michael Wetter, and Wangda Zuo.\n\u003ca href\u003d\\\"modelica://Buildings/Resources/Images/HeatTransfer/Windows/2012-simBuild-windowValidation.pdf\\\"\u003e\nValidation of the window model of the Modelica Buildings library.\u003c/a\u003e\n\u003ci\u003eProc. of the 5th SimBuild Conference\u003c/i\u003e, Madison, WI, USA, August 2012.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Polygon(),Line(),Polygon(),Text(),Text(),Polygon(),Line(),Line(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Line(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Electrical.AC.OnePhase.Sensors.Probe":{"name":"Buildings.Electrical.AC.OnePhase.Sensors.Probe","comment":"Model of a probe that measures RMS voltage and angle","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Icons.GeneralizedProbe"}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"110"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"perUnit","comment":"If true, display voltage in p.u.","value":"true"},{"className":"Interfaces.Terminal_n","qualifiers":["replaceable"],"name":"term","comment":"Electrical connector","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"V","comment":"Voltage phasor magnitude","modifications":[{"name":"unit","value":"if perUnit then \"1\" else \"V\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,20},{80,40}}), iconTransformation(extent \u003d {{60,20},{80,40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"theta","comment":"Voltage phasor angle","modifications":[{"name":"unit","value":"\"rad\""},{"name":"displayUnit","value":"\"deg\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{60,-40},{80,-20}}), iconTransformation(extent \u003d {{60,-40},{80,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a probe that measures the RMS voltage and the angle\nof the voltage phasor at a given point.\n\u003c/p\u003e\n\u003cp\u003e\nOptionally, given a reference voltage, the model can compute the voltage in per unit.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl50":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl50","comment":"Aluminum cable 50 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.641e-003"},{"name":"XCha","value":"0.073e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 50mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.641e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.073e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.GeneralizedSensor_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.GeneralizedSensor_N","comment":"Sensor for power, voltage and current (4 wire system, with neutral cable)","qualifiers":["model"],"components":[{"className":"Interfaces.Terminal4_n","name":"terminal_n","comment":"Electrical connector side N","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Interfaces.Terminal4_p","name":"terminal_p","comment":"Electrical connector side P","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"V","comment":"Voltage","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"ElectricPotential\""},{"name":"unit","qualifiers":["final","each"],"value":"\"V\""}],"arraySubscripts":"[4]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {10,-40}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"I","comment":"Current","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"ElectricCurrent\""},{"name":"unit","qualifiers":["final","each"],"value":"\"A\""}],"arraySubscripts":"[4]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {70,-40}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"S","comment":"Phase powers","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"Power\""},{"name":"unit","qualifiers":["final","each"],"value":"\"W\""}],"arraySubscripts":"[4,terminal_n.phase[1].PhaseSystem.n]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-50,-40}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-90}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIdeal sensor that measures power, voltage and current in a three-phase unbalanced system\nwith neutral cable.\nThe two components of the power \u003ci\u003eS\u003c/i\u003e are the active and reactive power for each phase.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Ellipse(),Line(),Text(),Polygon(),Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Line(),Text(),Text(),Text()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_0_2_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_2_0","comment":"Version 0.2.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nNew in this version are models for two and three way valves.\nIn addition, the \u003ccode\u003eFluids\u003c/code\u003e package has been slightly revised.\nThe package \u003ccode\u003eFluid.BaseClasses\u003c/code\u003e has been added because in\nthe previous version, partial models for fixed resistances\nwhere part of the \u003ccode\u003eActuator\u003c/code\u003e package.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineCapacitance":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineCapacitance","comment":"Function that computes the capacitance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineCapacitance"}],"components":[{"className":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall capacity of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is medium or high, the cables have geometric parameters that can\nbe used to compute the capacity as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nC \u003d l\u003csub\u003eCABLE\u003c/sub\u003e 2 \u0026pi; \u0026epsilon;\u003csub\u003e0\u003c/sub\u003e/log(GMD/r),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable,\n\u003ci\u003e\u0026epsilon;\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e is the dielectric constant of the air, \u003ci\u003eGMD\u003c/i\u003e\nis the geometric mean distance, and \u003ci\u003er \u003d d/2\u003c/i\u003e where \u003ci\u003ed\u003c/i\u003e is the inner\ndiameter of the cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_dTX":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_dTX","comment":"Return thermodynamic state from d, T, and X or Xi","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Density","qualifiers":["input"],"name":"d","comment":"Density"},{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"Temperature"},{"className":"MassFraction","qualifiers":["array","input"],"name":"X","comment":"Mass fractions","value":"reference_X","arraySubscripts":"[:]"},{"className":"ThermodynamicState","qualifiers":["output"],"name":"state","comment":"Thermodynamic state record"}]},"Buildings.Fluid.Sources.FixedBoundary":{"name":"Buildings.Fluid.Sources.FixedBoundary","comment":"Boundary source component","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Fluid.Sources.BaseClasses.PartialSource"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_p","comment":"select p or d","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Boundary pressure or Boundary density\")"}},{"className":"Medium.AbsolutePressure","qualifiers":["parameter"],"name":"p","comment":"Boundary pressure","value":"Medium.p_default","annotations":{"dialog":"Dialog(group \u003d \"Boundary pressure or Boundary density\", enable \u003d use_p)"}},{"className":"Medium.Density","qualifiers":["parameter"],"name":"d","comment":"Boundary density","value":"Medium.density_pTX()","annotations":{"dialog":"Dialog(group \u003d \"Boundary pressure or Boundary density\", enable \u003d not use_p)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_T","comment":"select T or h","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Boundary temperature or Boundary specific enthalpy\")"}},{"className":"Medium.Temperature","qualifiers":["parameter"],"name":"T","comment":"Boundary temperature","value":"Medium.T_default","annotations":{"dialog":"Dialog(group \u003d \"Boundary temperature or Boundary specific enthalpy\", enable \u003d use_T)"}},{"className":"Medium.SpecificEnthalpy","qualifiers":["parameter"],"name":"h","comment":"Boundary specific enthalpy","value":"Medium.h_default","annotations":{"dialog":"Dialog(group \u003d \"Boundary temperature or Boundary specific enthalpy\", enable \u003d not use_T)"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X","comment":"Boundary mass fractions m_i/m","value":"Medium.X_default","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(group \u003d \"Only for multi-substance flow\", enable \u003d Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C","comment":"Boundary trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(group \u003d \"Only for trace-substance flow\", enable \u003d Medium.nC\u003e0)"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model defines constant values for boundary conditions:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e Boundary pressure or boundary density.\u003c/li\u003e\n\u003cli\u003e Boundary temperature or boundary specific enthalpy.\u003c/li\u003e\n\u003cli\u003e Boundary composition (only for multi-substance or trace-substance flow).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nNote, that boundary temperature, density, specific enthalpy,\nmass fractions and trace substances have only an effect if the mass flow\nis from the Boundary into the port. If mass is flowing from\nthe port into the boundary, the boundary definitions,\nwith exception of boundary pressure, do not have an effect.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Ellipse(),Text()})"}},"Buildings.Electrical.Interfaces.Source":{"name":"Buildings.Electrical.Interfaces.Source","comment":"Partial model of a generic source.","qualifiers":["model"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"potentialReference","comment":"Serve as potential root for the reference angle theta","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Reference Parameters\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"definiteReference","comment":"Serve as definite root for the reference angle theta","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Reference Parameters\")"}},{"className":"Modelica.SIunits.Power","qualifiers":["array"],"name":"S","comment":"Complex power S[1] \u003d P, S[2]\u003d Q","value":"PhaseSystem.phasePowers_vi(terminal.v,terminal.i)","arraySubscripts":"[PhaseSystem.n]"},{"className":"Modelica.SIunits.Angle","name":"phi","comment":"Phase shift with respect to reference angle","value":"PhaseSystem.phase(terminal.v)-PhaseSystem.phase(-terminal.i)"},{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","replaceable","package","final"],"value":"PhaseSystem"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{92,-8},{108,8}}))"}}],"classes":[{"name":"Buildings.Electrical.Interfaces.Source.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase"}]},{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generic source.\n\u003c/p\u003e\n\u003cp\u003e\nIn case the phase system has \u003ccode\u003ePhaseSystem.m \u0026gt; 0\u003c/code\u003e and\nthus the connectors are over determined,\nthe source can be selected to serve as reference point.\nThe parameters \u003ccode\u003epotentialReference\u003c/code\u003e and \u003ccode\u003edefiniteReference\u003c/code\u003e\nare used to define if the source model should be selected as source for\nthe reference angles \u003ccode\u003etheta\u003c/code\u003e or not.\nMore information about overdetermined connectors can be found\nin \u003ca href\u003d\\\"#Olsson2008\\\"\u003eOlsson Et Al. (2008)\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"Olsson2008\\\"/\u003e\nHans Olsson, Martin Otter, Sven Erik Mattson and Hilding Elmqvist.\u003cbr/\u003e\n\u003ca href\u003d\\\"http://elib-v3.dlr.de/55892/1/otter2008-modelica-balanced-models.pdf\\\"\u003e\nBalanced Models in Modelica 3.0 for Increased Model Quality\u003c/a\u003e.\u003cbr/\u003e\nProc. of the 7th Modelica Conference, Bielefeld, Germany, March 2008.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction2":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction2","comment":"South wall in test bed X2","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of the external wall used in test bed X2.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of the external wall used in test bed X2.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction1":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction1","comment":"North wall in FLEXLAB closets, west wall in XRA, east wall in XRB, west wall in X1A","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"5"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a construction of an exterior wall used in some FLEXLAB test cells. It should be used in\n  the north wall in all FLEXLAB closets, west wall in XRA, east wall in XRB and west wall in X1A.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a construction of an exterior wall used in some FLEXLAB test cells. It should be used in\n  the north wall in all FLEXLAB closets, west wall in XRA, east wall in XRB and west wall in X1A.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.glassAbsInteriorIrradiationExteriorShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassAbsInteriorIrradiationExteriorShading","comment":"Hemispherical absorptance of each glass pane for interior irradiation with exterior shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialWindowShadingRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"absIntIrrNoSha","comment":"Absorptance for interior irradiation without shading","arraySubscripts":"[N,NSta]"},{"className":"Real","qualifiers":["array","output"],"name":"absIntIrrExtSha","comment":"Hemispherical absorptance of each glass pane for interior irradiation with exterior shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[N,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the hemispherical absorptance of each glass pane for interior irradiation with exterior shading.\nPane \u003ccode\u003e1\u003c/code\u003e is facing the outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Air.specificEntropy":{"name":"Buildings.Media.Air.specificEntropy","comment":"Return the specific entropy, only valid for phi\u003c1","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.specificEntropy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific entropy.\n\u003c/p\u003e\n\u003cp\u003e\nThe specific entropy of the mixture is obtained from\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ns \u003d s\u003csub\u003es\u003c/sub\u003e + s\u003csub\u003em\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003es\u003csub\u003es\u003c/sub\u003e\u003c/i\u003e is the entropy change due to the state change\n(relative to the reference temperature) and\n\u003ci\u003es\u003csub\u003em\u003c/sub\u003e\u003c/i\u003e is the entropy change due to mixing\nof the dry air and water vapor.\n\u003c/p\u003e\n\u003cp\u003e\nThe entropy change due to change in state is obtained from\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ns\u003csub\u003es\u003c/sub\u003e \u003d c\u003csub\u003ev\u003c/sub\u003e ln(T/T\u003csub\u003e0\u003c/sub\u003e) + R ln(v/v\u003csub\u003e0\u003c/sub\u003e) \u003cbr/\u003e\n\u003d c\u003csub\u003ev\u003c/sub\u003e ln(T/T\u003csub\u003e0\u003c/sub\u003e) + R ln(\u0026rho;\u003csub\u003e0\u003c/sub\u003e/\u0026rho;)\n\u003c/p\u003e\n\u003cp\u003eIf we assume \u003ci\u003e\u0026rho; \u003d p\u003csub\u003e0\u003c/sub\u003e/(R T)\u003c/i\u003e,\nand because \u003ci\u003ec\u003csub\u003ep\u003c/sub\u003e \u003d c\u003csub\u003ev\u003c/sub\u003e + R\u003c/i\u003e,\nwe can write\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ns\u003csub\u003es\u003c/sub\u003e \u003d c\u003csub\u003ev\u003c/sub\u003e ln(T/T\u003csub\u003e0\u003c/sub\u003e) + R ln(T/T\u003csub\u003e0\u003c/sub\u003e) \u003cbr/\u003e\n\u003dc\u003csub\u003ep\u003c/sub\u003e ln(T/T\u003csub\u003e0\u003c/sub\u003e).\n\u003c/p\u003e\n\u003cp\u003e\nNext, the entropy of mixing is obtained from a reversible isothermal\nexpansion process. Hence,\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  s\u003csub\u003em\u003c/sub\u003e \u003d -R \u0026sum;\u003csub\u003ei\u003c/sub\u003e( X\u003csub\u003ei\u003c/sub\u003e \u0026frasl; M\u003csub\u003ei\u003c/sub\u003e\n  ln(Y\u003csub\u003ei\u003c/sub\u003e p/p\u003csub\u003e0\u003c/sub\u003e)),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eR\u003c/i\u003e is the gas constant,\n\u003ci\u003eX\u003c/i\u003e is the mass fraction,\n\u003ci\u003eM\u003c/i\u003e is the molar mass, and\n\u003ci\u003eY\u003c/i\u003e is the mole fraction.\n\u003c/p\u003e\n\u003cp\u003e\nTo obtain the state for a given pressure, entropy and mass fraction, use\n\u003ca href\u003d\\\"modelica://Buildings.Media.Air.setState_psX\\\"\u003e\nBuildings.Media.Air.setState_psX\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nThis function is only valid for a relative humidity below 100%.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction3":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction3","comment":"North wall of the electrical room in all test cells","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"4"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of the north wall of the electrical room in all test cells.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of the north wall of the electrical room in all test cells.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.FMI.Sink_T":{"name":"Buildings.Fluid.FMI.Sink_T","comment":"FMI model for a sink with temperature for reverse flow as an input","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.BaseClasses.BaseIcon"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T_in","comment":"Prescribed boundary temperature","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"X_w_in","comment":"Prescribed boundary composition","modifications":[{"name":"unit","value":"\"1\""}],"conditionalClause":" if Medium.nXi\u003e0","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,10},{-100,50}}), iconTransformation(extent \u003d {{-140,10},{-100,50}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_in","comment":"Prescribed boundary composition","arraySubscripts":"[Medium.nC]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-40},{-100,0}}), iconTransformation(extent \u003d {{-140,-40},{-100,0}}))"}},{"className":"Interfaces.Inlet","name":"inlet","comment":"Fluid port","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final"],"value":"use_p_in"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{120,-10},{100,10}}))"}},{"className":"Buildings.Fluid.FMI.Interfaces.PressureOutput","name":"p","comment":"Pressure","conditionalClause":" if use_p_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 180, origin \u003d {-110,-80}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 180, origin \u003d {-120,-80}))"}}],"classes":[{"name":"Buildings.Fluid.FMI.Sink_T.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a sink that takes as an input the medium properties\ntemperature, mass fractions (if \u003ccode\u003eMedium.nXi \u0026gt; 0\u003c/code\u003e)\nand trace substances (if \u003ccode\u003eMedium.nC \u0026gt; 0\u003c/code\u003e).\nThese properties are used during reverse flow.\n\u003c/p\u003e\n\u003cp\u003e\nFor a system of components with the connectors of the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI\\\"\u003e\nBuildings.Fluid.FMI\u003c/a\u003e\npackage, this component is required to set the medium properties\nfor the reverse flow.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003euse_p_in\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e,\nthen the model as an output connector \u003ccode\u003ep\u003c/code\u003e.\nThis can be used to obtain the pressure of the sink, which\nmay be needed to iteratively solve for the mass flow rate.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRL_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRL_N","comment":"Model of a resistive-inductive element with two electrical ports and neutral line cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort"},{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N"}],"components":[{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance at temperature T_ref"},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"Rn","comment":"Resistance of neutral cable at temperature T_ref"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_ref","comment":"Reference temperature","value":"298.15"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"M","comment":"Temperature constant (R_actual \u003d R*(M + T_heatPort)/(M + T_ref))","value":"507.65"},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"L","comment":"Inductance"},{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"Ln","comment":"Inductance of neutral cable"},{"className":"Modelica.SIunits.Current","qualifiers":["array","parameter"],"name":"i1_start","comment":"Initial current phasor of phase 1 (positive if entering from terminal p)","value":"{0,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Current","qualifiers":["array","parameter"],"name":"i2_start","comment":"Initial current phasor of phase 2 (positive if entering from terminal p)","value":"{0,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Modelica.SIunits.Current","qualifiers":["array","parameter"],"name":"i3_start","comment":"Initial current phasor of phase 3 (positive if entering from terminal p)","value":"{0,0}","arraySubscripts":"[2]","annotations":{"dialog":"Dialog(enable \u003d mode\u003d\u003dBuildings.Electrical.Types.Load.FixedZ_dynamic)"}},{"className":"Buildings.Electrical.Types.Load","qualifiers":["parameter"],"name":"mode","comment":"Type of model (e.g., steady state, dynamic, prescribed power consumption, etc.)","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state","modifications":[{"name":"min","value":"Buildings.Electrical.Types.Load.FixedZ_steady_state"},{"name":"max","value":"Buildings.Electrical.Types.Load.FixedZ_dynamic"}],"annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase1","comment":"Impedance line 1","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"i_start","value":"i1_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase2","comment":"Impedance line 2","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"i_start","value":"i2_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase3","comment":"Impedance line 3","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"i_start","value":"i3_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"neutral","comment":"neutral cable RL model","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"mode","qualifiers":["final"],"value":"mode"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"R","qualifiers":["final"],"value":"Rn"},{"name":"L","qualifiers":["final"],"value":"Ln"},{"name":"i_start","value":"-i1_start-i2_start-i3_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-66},{10,-46}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistive-inductive model that connects two AC three-phase\nunbalanced interfaces with neutral line. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRL_N.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped impedances as shown in the figure above.\nAssuming that the overall cable has a resistance \u003ci\u003eR\u003c/i\u003e and an inductance\n\u003ci\u003eL\u003c/i\u003e, each line has an inductance equal to \u003ci\u003eL/3\u003c/i\u003e and a resistance\nequal to \u003ci\u003eR/3\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe resistance and the inductance of the neutral cable are defined separately using the parameters\n\u003ccode\u003eRn\u003c/code\u003e and \u003ccode\u003eLn\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Rectangle(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Text()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl150":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl150","comment":"Aluminum cable 150mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.206e-003"},{"name":"XCha","value":"0.070e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 150mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.206e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.070e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_0_12_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_12_0","comment":"Version 0.12.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e The packages whose name ends with \u003ccode\u003eBeta\u003c/code\u003e\nare still being validated.\n\u003c/p\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical error\u003c/b\u003e has been fixed (i.e. error\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n  \u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n  \u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.InfraredRadiationExchange\\\"\u003e\n  Buildings.Rooms.BaseClasses.InfraredRadiationExchange\u003c/a\u003e\u003c/td\u003e\n      \u003ctd valign\u003d\\\"top\\\"\u003eThe model \u003ccode\u003eBuildings.Rooms.BaseClasses.InfraredRadiationExchange\u003c/code\u003e\n      had an error in the view factor approximation.\n      The error caused too much radiosity to flow from large to small surfaces because the law of reciprocity\n      for view factors was not satisfied. This led to low surface temperatures if a surface had a large area\n      compared to other surfaces.\n      The bug has been fixed by rewriting the view factor calculation.\n      \u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\nThe following improvements and additions have been made:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nUpdated library to Modelica 3.2.\n\u003c/li\u003e\n\u003cli\u003e\nAdded \u003ccode\u003ehomotopy\u003c/code\u003e operator.\n\u003c/li\u003e\n\u003cli\u003e\nRestructured package \u003ca href\u003d\\\"modelica://Buildings.HeatTransfer\\\"\u003e\nBuildings.HeatTransfer\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nRewrote the models in \u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators\\\"\u003e\nBuildings.Fluid.Actuators\u003c/a\u003e to avoid having the flow coefficient\n\u003ccode\u003ek\u003c/code\u003e as an algebraic variable.\nThis increases robustness.\n\u003c/li\u003e\n\u003cli\u003e\nRewrote energy, species and trace substance balance in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\\\"\u003e\nBuildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/a\u003e\nto better handle zero mass flow rate.\n\u003c/li\u003e\n\u003cli\u003e\nImplemented functions \u003ccode\u003eenthalpyOfCondensingGas\u003c/code\u003e and \u003ccode\u003esaturationPressure\u003c/code\u003e\nin single substance media\nto allow use of the room model with media that do not contain water vapor.\n\u003c/li\u003e\n\u003cli\u003e\nRevised \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources.Outside\\\"\u003e\nBuildings.Fluid.Sources.Outside\u003c/a\u003e\nto allow use of the room model with media that do not contain water vapor.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.DirectCurrent.phaseCurrents":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.phaseCurrents","comment":"Return phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.phaseCurrents"}]},"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid","comment":"Electrical grid","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Sources.Grid","modifications":[{"name":"terminal"},{"name":"f","modifications":[{"name":"start","value":"60"}]},{"name":"V","modifications":[{"name":"start","value":"480"}]},{"name":"sou"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that can be used to represent the electrical grid supply.\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.Grid\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.Grid\u003c/a\u003e for\nmore information.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfNonCondensingGas":{"name":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfNonCondensingGas","comment":"Enthalpy of non-condensing gas per unit mass of steam","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"enthalpy"}]},"Buildings.HeatTransfer.Sources.PrescribedHeatFlow":{"name":"Buildings.HeatTransfer.Sources.PrescribedHeatFlow","comment":"Prescribed heat flow boundary condition","qualifiers":["model"],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Q_flow","annotations":{"placement":"Placement(transformation(origin \u003d {-100,0}, extent \u003d {{20,-20},{-20,20}}, rotation \u003d 180))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"port","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Line(),Line(),Polygon(),Polygon()})","documentationInfo":"info \u003d \"\u003cHTML\u003e\n\u003cp\u003e\nThis model allows a specified amount of heat flow rate to be \\\"injected\\\"\ninto a thermal system at a given port.  The amount of heat\nis given by the input signal Q_flow into the model. The heat flows into the\ncomponent to which the component PrescribedHeatFlow is connected,\nif the input signal is positive.\n\u003c/p\u003e\n\u003cp\u003e\nThis model is identical to\n\u003ca href\u003d\\\"modelica://Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow\\\"\u003e\nModelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow\u003c/a\u003e, except that\nthe parameters \u003ccode\u003ealpha\u003c/code\u003e and \u003ccode\u003eT_ref\u003c/code\u003e have\nbeen deleted as these can cause division by zero in some fluid flow models.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Line(),Line(),Polygon(),Polygon(),Rectangle(),Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfCondensingGas":{"name":"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfCondensingGas","comment":"Derivative of enthalpy of steam per unit mass of steam","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"Real","qualifiers":["input"],"name":"der_T","comment":"temperature derivative"},{"className":"Real","qualifiers":["output"],"name":"der_h","comment":"derivative of steam enthalpy"}]},"Buildings.Airflow.Multizone.MediumColumnDynamic":{"name":"Buildings.Airflow.Multizone.MediumColumnDynamic","comment":"Vertical shaft with no friction and storage of heat and mass","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations"}],"components":[{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"h","comment":"Height of shaft","value":"3","modifications":[{"name":"min","value":"0"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (port_a -\u003e port_b)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow_nominal","comment":"Nominal mass flow rate","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition, used only for steady-state model\")"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a","comment":"Fluid connector a (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"min","value":"if allowFlowReversal then -Constants.inf else 0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,90},{10,110}}), iconTransformation(extent \u003d {{-10,90},{10,110}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_b","name":"port_b","comment":"Fluid connector b (positive design flow direction is from port_a to port_b)","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"m_flow","modifications":[{"name":"max","value":"if allowFlowReversal then Constants.inf else 0"}]},{"name":"p","modifications":[{"name":"start","value":"Medium.p_default"}]}],"annotations":{"placement":"Placement(transformation(extent \u003d {{10,-110},{-10,-90}}), iconTransformation(extent \u003d {{10,-110},{-10,-90}}))"}},{"className":"Buildings.Fluid.MixingVolumes.MixingVolume","name":"vol","comment":"Air volume in the shaft","modifications":[{"name":"nPorts","qualifiers":["final"],"value":"2"},{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m_flow_nominal"},{"name":"V","qualifiers":["final"],"value":"V"},{"name":"energyDynamics","qualifiers":["final"],"value":"energyDynamics"},{"name":"massDynamics","qualifiers":["final"],"value":"massDynamics"},{"name":"p_start","qualifiers":["final"],"value":"p_start"},{"name":"T_start","qualifiers":["final"],"value":"T_start"},{"name":"X_start","qualifiers":["final"],"value":"X_start"},{"name":"C_start","qualifiers":["final"],"value":"C_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {-20,0}))"}},{"className":"MediumColumn","name":"colTop","comment":"Medium column that connects to top port","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"densitySelection","qualifiers":["final"],"value":"Buildings.Airflow.Multizone.Types.densitySelection.fromBottom"},{"name":"h","value":"h/(2)"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,40},{10,60}}))"}},{"className":"MediumColumn","name":"colBot","comment":"Medium colum that connects to bottom port","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"densitySelection","qualifiers":["final"],"value":"Buildings.Airflow.Multizone.Types.densitySelection.fromTop"},{"name":"h","value":"h/(2)"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-60},{10,-40}}))"}},{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"V","comment":"Volume in medium shaft"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_HeatTransfer","comment":"\u003d true to use the HeatTransfer model","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\", group \u003d \"Heat transfer\")"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heatPort","comment":"Heat port to exchange energy with the fluid volume","conditionalClause":" if use_HeatTransfer","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"classes":[{"name":"Buildings.Airflow.Multizone.MediumColumnDynamic.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]},{"name":"Buildings.Airflow.Multizone.MediumColumnDynamic.HeatTransfer","qualifiers":["replaceable","model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Fluid.Vessels.BaseClasses.HeatTransfer.IdealHeatTransfer"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model contains a completely mixed fluid volume and\nmodels that take into account the pressure difference of\na medium column that is at the same temperature as the\nfluid volume. It can be used to model the pressure difference\ncaused by a stack effect.\u003c/p\u003e\n\u003cp\u003e\nSet the parameter \u003ccode\u003euse_HeatTransfer\u003dtrue\u003c/code\u003e to expose\na \u003ccode\u003eheatPort\u003c/code\u003e. This \u003ccode\u003eheatPort\u003c/code\u003e can be used\nto add or subtract heat from the volume. This allows, for example,\nto use this model in conjunction with a model for heat transfer through\nwalls to model a solar chimney that stores heat.\n\u003c/p\u003e\n\u003cp\u003e\nFor a steady-state model, use\n\u003ca href\u003d\\\"modelica://Buildings.Airflow.Multizone.MediumColumn\\\"\u003e\nBuildings.Airflow.Multizone.MediumColumn\u003c/a\u003e instead of this model.\n\u003c/p\u003e\n\u003cp\u003eIn this model, the parameter \u003ccode\u003eh\u003c/code\u003e must always be positive, and the port \u003ccode\u003eport_a\u003c/code\u003e must be\nat the top of the column.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Text(),Text(),Text(),Rectangle(),Text(),Rectangle(),Rectangle(),Rectangle(),Ellipse(),Line()})"}},"Buildings.Electrical.PhaseSystems.DirectCurrent.activePower":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.activePower","comment":"Return total power as function of phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.activePower"}]},"Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCell":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3A.TestCell","comment":"Model of LBNL User Test Facility Cell X3A","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"AFlo","value":"60.97"},{"name":"nSurBou","value":"4"},{"name":"nConPar","value":"0"},{"name":"nConBou","value":"5"},{"name":"nConExt","value":"4"},{"name":"nConExtWin","value":"1"},{"name":"hRoo","value":"3.6576"},{"name":"surBou","modifications":[{"name":"A","value":"{6.645*3.09,6.645*1.51,6.645*0.91,6.645*3.65}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","qualifiers":["each"],"value":"Buildings.Types.Tilt.Floor"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{extDoo,R16p8Wal,R20Wal,bedDiv}"},{"name":"A","value":"{1.3716*2.39,3.6576*2.52-2.39*1.3716,6.6675*9.144,3.6576*1.524}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling,Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.S,Buildings.Types.Azimuth.W}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{bedDiv,celDiv,parCon,parDoo,R52Wal}"},{"name":"A","value":"{3.6576*7.62,3.6576*9.144,3.6576*2.886075-2.39*1.22,2.39*1.22,3.6576*1.2614}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.W,Buildings.Types.Azimuth.E,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.N}"}]},{"name":"datConExtWin","modifications":[{"name":"layers","value":"{R16p8Wal}"},{"name":"A","value":"{6.6675*3.6576}"},{"name":"glaSys","value":"{glaSys}"},{"name":"hWin","value":"{1.8288}"},{"name":"wWin","value":"{5.88}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall}"},{"name":"azi","value":"{Buildings.Types.Azimuth.S}"}]},{"name":"intConMod","value":"Buildings.HeatTransfer.Types.InteriorConvection.Temperature"},{"name":"extConMod","value":"Buildings.HeatTransfer.Types.ExteriorConvection.TemperatureWind"},{"name":"lat","value":"0.66098585832754"}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction10and23","qualifiers":["replaceable"],"name":"R16p8Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-168},{430,-148}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.CellAndElectricalDividingWall","qualifiers":["replaceable"],"name":"R52Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-192},{430,-172}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"R20Wal","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-216},{430,-196}}))"}},{"className":"Data.Constructions.GlazingSystems.ASHRAE901Gla","qualifiers":["replaceable"],"name":"glaSys","annotations":{"placement":"Placement(transformation(extent \u003d {{436,-192},{456,-172}}))"}},{"className":"Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionWall","qualifiers":["replaceable"],"name":"parCon","annotations":{"placement":"Placement(transformation(extent \u003d {{436,-216},{456,-196}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall","qualifiers":["replaceable"],"name":"celDiv","comment":"Construction of wall connecting to cell UF90X3B","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-144},{430,-124}}))"}},{"className":"Data.Constructions.OpaqueConstructions.DividingWalls.TestBedDividingWall","qualifiers":["replaceable"],"name":"bedDiv","comment":"Construction of wall connecting to cell UF90X2B","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-120},{430,-100}}))"}},{"className":"Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionDoor","qualifiers":["replaceable"],"name":"parDoo","comment":"Door used in partition walls in FLEXLAB test cells","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-96},{430,-76}}))"}},{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorInsulated","qualifiers":["replaceable"],"name":"extDoo","comment":"Construction of an exterior door","annotations":{"placement":"Placement(transformation(extent \u003d {{410,-72},{430,-52}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a model for test cell 3A in the LBNL User Facility. This model is intended to represent\n  the main space in test cell 3A. This documentation describes the wall constructions used to model\n  test cell X3A. Documentation describing how it is to be combined to other room models to create\n  a model of the full test cell can be found in\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3A\\\"\u003eBuildings.Rooms.FLEXLAB.Rooms.X3A\u003c/a\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  There are 7 different wall sections described in the model. They are shown in the figure below.\n  \u003c/p\u003e\n  \u003cp align\u003d\\\"center\\\"\u003e\n  \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3A/TestCell.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in test cell model\\\"/\u003e\n  \u003c/p\u003e\n  \u003cp\u003e\n  The different wall sections are entered into the model according to the following table.\n  \u003c/p\u003e\n  \u003ctable border \u003d \\\"1\\\" summary\u003d\\\"Description of walls in test cell room model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eWall Section Number\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n  \u003cth\u003eLocation in Model\u003c/th\u003e\n  \u003cth\u003eCorresponding Layer\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e1\u003c/td\u003e\n  \u003ctd\u003eThe west wall is modeled in two parts. One part represents the dividing wall between test cells X3A\n  and X2B. The other part represents a portion of the wall exposed to the ambient conditions. Wall\n  1 is the section of wall connected to test cell X2B.\u003c/td\u003e\n  \u003ctd\u003edatConBou[1]\u003c/td\u003e\n  \u003ctd\u003ebedDiv\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e2\u003c/td\u003e\n  \u003ctd\u003eThe west wall is modeled in two parts. One part represents the dividing wall between test cell X3A\n  and test cell X2B. The other part represents a portion of the wall exposed to the ambient conditions. Wall\n  2 is the section of wall exposed to ambient conditions.\u003c/td\u003e\n  \u003ctd\u003edatConExt[4]\u003c/td\u003e\n  \u003ctd\u003ebedDiv\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e3\u003c/td\u003e\n  \u003ctd\u003eThis is the north exterior wall of test cell X3A. There are actually two constructions\n  used here. One construction models the wall, the other construction models a door. The area\n  calculation for the wall in the model shows the calculation of the total wall area minus the door area.\u003c/td\u003e\n  \u003ctd\u003eDoor: datConExt[1]; Wall: datConExt[2]\u003c/td\u003e\n  \u003ctd\u003eDoor: extDoo; Wall: R16p8Wal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e4\u003c/td\u003e\n  \u003ctd\u003eThis north wall borders an electrical room. It models the heat transfer between test cell\n  X3A and the externally modeled electrical room. For an example see\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.Examples.X3AWithRadiantFloor\\\"\u003e\n  Buildings.Rooms.FLEXLAB.Rooms.Examples.X3AWithRadiantFloor\u003c/a\u003e.\u003c/td\u003e\n  \u003ctd\u003edatConBou[5]\u003c/td\u003e\n  \u003ctd\u003eR52Wal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e5\u003c/td\u003e\n  \u003ctd\u003eThis north wall borders an externally modeled closet. For an example see\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.Examples.X3AWithRadiantFloor\\\"\u003e\n  Buildings.Rooms.FLEXLAB.Rooms.Examples.X3AWithRadiantFloor\u003c/a\u003e. Similar to wall section\n  3 this wall section contains both a wall construction and a door construction. The wall area\n  calculation shows the total wall area minus the door area.\u003c/td\u003e\n  \u003ctd\u003eDoor: datConBou[4]; Wall: datConBou[3]\u003c/td\u003e\n  \u003ctd\u003eDoor: parDoo; Wall: parCon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e6\u003c/td\u003e\n  \u003ctd\u003eThis east wall connects to test cell UF90X3B. This wall is removable, but this model was\n  developed assuming that the wall is installed.\u003c/td\u003e\n  \u003ctd\u003edatConBou[2]\u003c/td\u003e\n  \u003ctd\u003ecelDiv\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e7\u003c/td\u003e\n  \u003ctd\u003eThis is the south wall of test cell X3A. It includes both a wall construction and\n  windows. The bottoms of the windows are 3 ft above the floor.\u003c/td\u003e\n  \u003ctd\u003edatConExtWin[1]\u003c/td\u003e\n  \u003ctd\u003eWindow: glaSys; Wall: R16p8Wal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003cp\u003e\n  An eigth construction, not shown in the figure, models the ceiling. It is modeled in datConExt[3] using\n  the layer \u003ccode\u003eR20Wal\u003c/code\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  The test cell can be configured with several different floor types. The options include radiant conditioning,\n  a slab on grade floor with no conditioning, or a raised floor. Because of this uncertainty in floor design, a\n  model of the floor itself is not included in this model. The user must include a model for the floor in any\n  applications of this model.\n  \u003c/p\u003e\n  \u003cp\u003e\n  Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n  The following table describes the connections to models outside of the X3A package. The connections in datConExt\n  are not described in the table because they are connected to the external environment, and no additional heat\n  port connections are necessary. A rationale for why the model is created this way is also provided if it is\n  considered necessary.\n  \u003c/p\u003e\n  \u003ctable border \u003d\\\"1\\\" summary\u003d\\\"Description of intended connections including TestCell model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eLocation in TestCell\u003c/th\u003e\n  \u003cth\u003eDescription of External Connection\u003c/th\u003e\n  \u003cth\u003eLocation in External Model\u003c/th\u003e\n  \u003cth\u003eRationale\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003esurf_conBou[1]\u003c/td\u003e\n  \u003ctd\u003eTemperature of test cell X2B\u003c/td\u003e\n  \u003ctd\u003eReferences a data table\u003c/td\u003e\n  \u003ctd\u003eA data table is used, instead of a model of test cell X2B, because the goal of this model is to be able to perform\n  simulations of TestCell with minimal complexity, by simplifying the neighboring test cells. The wall separating the\n  test beds is highly insulated, and it is believed that the error in simulations caused by using a data table will\n  be negligible.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003esurf_conBou[2]\u003c/td\u003e\n  \u003ctd\u003eTemperature of test cell X3B\u003c/td\u003e\n  \u003ctd\u003eReferences a data table\u003c/td\u003e\n  \u003ctd\u003eSee rationale for surf_ConBou[1]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Media.Air.der_enthalpyOfCondensingGas":{},"Buildings.Fluid.Sensors.TraceSubstances":{"name":"Buildings.Fluid.Sensors.TraceSubstances","comment":"Ideal one port trace substances sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"String","qualifiers":["parameter"],"name":"substanceName","comment":"Name of trace substance","value":"\"CO2\""},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"C","comment":"Trace substance in port medium","modifications":[{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the trace substances contained in the fluid connected to its port.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Text(),Line()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.activePower":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.activePower","comment":"Return total power as function of phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.activePower"}]},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl70":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl70","comment":"Aluminum cable 70mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.5071e-003"},{"name":"XCha","value":"0.072e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 70mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.5071e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.072e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.LatentEnthalpyFlowRate":{"name":"Buildings.Fluid.Sensors.LatentEnthalpyFlowRate","comment":"Ideal enthalphy flow rate sensor that outputs the latent enthalpy flow rate only","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor","modifications":[{"name":"Medium","qualifiers":["redeclare","replaceable","package"],"value":"Modelica.Media.Interfaces.PartialCondensingGases"}]},{"nameOfExtendedClass":"Buildings.Fluid.BaseClasses.IndexMassFraction","modifications":[{"name":"substanceName","qualifiers":["final"],"value":"\"water\""}]},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"H_flow","comment":"Latent enthalpy flow rate, positive if from port_a to port_b","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"W\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90))"}},{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["parameter"],"name":"h_out_start","comment":"Initial or guess value of measured specific latent enthalpy","value":"Medium.specificEnthalpy_pTX()-Medium.enthalpyOfNonCondensingGas()","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the \u003ci\u003elatent\u003c/i\u003e enthalphy flow rate of the medium in the flow\nbetween its fluid ports. In particular, if the total enthalpy flow rate is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  H\u0026#775;\u003csub\u003etot\u003c/sub\u003e \u003d H\u0026#775;\u003csub\u003esen\u003c/sub\u003e + H\u0026#775;\u003csub\u003elat\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003eH\u0026#775;\u003csub\u003esen\u003c/sub\u003e \u003d m\u0026#775; (1-X\u003csub\u003ew\u003c/sub\u003e) c\u003csub\u003ep,air\u003c/sub\u003e\u003c/i\u003e,\nthen this sensor outputs \u003ci\u003eH\u0026#775; \u003d H\u0026#775;\u003csub\u003elat\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then the measured\nspecific latent enthalpy \u003ci\u003eh\u003csub\u003eout\u003c/sub\u003e\u003c/i\u003e that is used to\ncompute the latent enthalpy flow rate\n\u003ci\u003eH\u0026#775;\u003csub\u003elat\u003c/sub\u003e \u003d m\u0026#775; h\u003csub\u003eout\u003c/sub\u003e\u003c/i\u003e\nis computed using a first order differential equation.\nSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003cp\u003e\nFor a sensor that measures\n\u003ci\u003eH\u0026#775;\u003csub\u003etot\u003c/sub\u003e\u003c/i\u003e, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.EnthalpyFlowRate\\\"\u003e\nBuildings.Fluid.Sensors.EnthalpyFlowRate\u003c/a\u003e.\u003cbr/\u003e\nFor a sensor that measures\n\u003ci\u003eH\u0026#775;\u003csub\u003esen\u003c/sub\u003e\u003c/i\u003e, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.SensibleEnthalpyFlowRate\\\"\u003e\nBuildings.Fluid.Sensors.SensibleEnthalpyFlowRate\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe sensor is ideal, i.e., it does not influence the fluid.\nThe sensor can only be used with medium models that implement the function\n\u003ccode\u003eenthalpyOfNonCondensingGas(T)\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Line(),Text(),Ellipse(),Ellipse(),Line(),Polygon(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction9":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction9","comment":"South wall in test bed X1","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of the south wall in test bed X1.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of the south wall in test bed X1.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.DryEffectivenessNTU":{"name":"Buildings.Fluid.HeatExchangers.DryEffectivenessNTU","comment":"Heat exchanger with effectiveness - NTU relation and no moisture condensation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.BaseClasses.PartialEffectiveness","modifications":[{"name":"sensibleOnly1","value":"true"},{"name":"sensibleOnly2","value":"true"},{"name":"Q1_flow","value":"eps*QMax_flow"},{"name":"Q2_flow","value":"-Q1_flow"},{"name":"mWat1_flow","value":"0"},{"name":"mWat2_flow","value":"0"}]}],"components":[{"className":"Modelica.SIunits.HeatFlowRate","qualifiers":["parameter"],"name":"Q_flow_nominal","comment":"Nominal heat transfer","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_a1_nominal","comment":"Nominal temperature at port a1","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_a2_nominal","comment":"Nominal temperature at port a2","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"con","qualifiers":["parameter"],"name":"configuration","comment":"Heat exchanger configuration"},{"className":"Real","qualifiers":["parameter"],"name":"r_nominal","comment":"Ratio between air-side and water-side convective heat transfer (hA-value) at nominal condition","value":"2/(3)","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Buildings.Fluid.HeatExchangers.BaseClasses.HADryCoil","name":"hA","comment":"Model for convective heat transfer coefficient","modifications":[{"name":"r_nominal","qualifiers":["final"],"value":"r_nominal"},{"name":"UA_nominal","qualifiers":["final"],"value":"UA_nominal"},{"name":"m_flow_nominal_w","qualifiers":["final"],"value":"m1_flow_nominal"},{"name":"m_flow_nominal_a","qualifiers":["final"],"value":"m2_flow_nominal"},{"name":"waterSideTemperatureDependent","value":"false"},{"name":"airSideTemperatureDependent","value":"false"}]},{"className":"Modelica.SIunits.ThermalConductance","name":"UA","comment":"UA value"},{"className":"Real","name":"eps","comment":"Heat exchanger effectiveness","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Real","name":"Z","comment":"Ratio of capacity flow rate (CMin/CMax)","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.ThermalConductance","qualifiers":["final","parameter"],"name":"UA_nominal","comment":"Nominal UA value","modifications":[{"name":"fixed","value":"false"}]},{"className":"Real","qualifiers":["final","parameter"],"name":"NTU_nominal","comment":"Nominal number of transfer units","modifications":[{"name":"min","value":"0"},{"name":"fixed","value":"false"}]},{"className":"Real","qualifiers":["final","parameter"],"name":"eps_nominal","comment":"Nominal heat transfer effectiveness","modifications":[{"name":"fixed","value":"false"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a heat exchanger without humidity condensation.\nThis model transfers heat in the amount of\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  Q \u003d Q\u003csub\u003emax\u003c/sub\u003e  \u0026epsilon;\u003cbr/\u003e\n  \u0026epsilon; \u003d f(NTU, Z, flowRegime),\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003eQ\u003csub\u003emax\u003c/sub\u003e\u003c/i\u003e is the maximum heat that can be transferred,\n\u003ci\u003e\u0026epsilon;\u003c/i\u003e is the heat transfer effectiveness,\n\u003ci\u003eNTU\u003c/i\u003e is the Number of Transfer Units,\n\u003ci\u003eZ\u003c/i\u003e is the ratio of minimum to maximum capacity flow rate and\n\u003ci\u003eflowRegime\u003c/i\u003e is the heat exchanger flow regime.\nsuch as\nparallel flow, cross flow or counter flow.\n\u003c/p\u003e\n\u003cp\u003e\nThe flow regimes depend on the heat exchanger configuration. All configurations\ndefined in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Types.HeatExchangerConfiguration\\\"\u003e\nBuildings.Fluid.Types.HeatExchangerConfiguration\u003c/a\u003e\nare supported.\n\u003c/p\u003e\n\u003cp\u003e\nFor a heat and moisture exchanger, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.ConstantEffectiveness\\\"\u003e\nBuildings.Fluid.MassExchangers.ConstantEffectiveness\u003c/a\u003e\ninstead of this model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle()})"}},"Buildings.Fluid.Sensors.Pressure":{"name":"Buildings.Fluid.Sensors.Pressure","comment":"Ideal pressure sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"p","comment":"Pressure at port","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the absolute pressure of the fluid connected to its port.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Line(),Line(),Text(),Text()})"}},"Buildings.Utilities.Math.PowerLinearized":{"name":"Buildings.Utilities.Math.PowerLinearized","comment":"Power function that is linearized below a user-defined threshold","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"n","comment":"Exponent"},{"className":"Real","qualifiers":["parameter"],"name":"x0","comment":"Abscissa value below which linearization occurs"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nFunction that approximates \u003ci\u003ey\u003dx\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e\nwhere \u003ci\u003e0 \u0026lt; n\u003c/i\u003e so that\n\u003cul\u003e\n\u003cli\u003ethe function is defined and monotone increasing for all \u003ci\u003ex\u003c/i\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ci\u003edy/dx\u003c/i\u003e is bounded and continuous everywhere (for \u003ci\u003en \u0026lt; 1\u003c/i\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nFor \u003ci\u003ex \u0026lt; x\u003csub\u003e0\u003c/sub\u003e\u003c/i\u003e, this function replaces\n\u003ci\u003ey\u003dx\u003csup\u003en\u003c/sup\u003e\u003c/i\u003e by\na linear function that is continuously differentiable everywhere.\n\u003c/p\u003e\n\u003cp\u003e\nA typical use of this function is to replace\n\u003ci\u003eT \u003d T4\u003csup\u003e(1/4)\u003c/sup\u003e\u003c/i\u003e in a radiation balance to ensure that the\nfunction is defined everywhere. This can help solving the initialization problem\nwhen a solver may be far from a solution and hence \u003ci\u003eT4 \u0026lt; 0\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee the package \u003ccode\u003eExamples\u003c/code\u003e for the graph.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl75":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl75","comment":"Aluminum cable 75mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.431e-003"},{"name":"XCha","value":"0.072e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 75mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.431e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.072e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Radiosity.OutdoorRadiosity":{"name":"Buildings.HeatTransfer.Radiosity.OutdoorRadiosity","comment":"Model for the outdoor radiosity that strikes the window","qualifiers":["model"],"components":[{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"A","comment":"Area of receiving surface"},{"className":"Real","qualifiers":["parameter"],"name":"vieFacSky","comment":"View factor from receiving surface to sky (\u003d1 for roofs)","modifications":[{"name":"min","qualifiers":["final"],"value":"0"},{"name":"max","qualifiers":["final"],"value":"1"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"linearize","comment":"Set to true to linearize emissive power","value":"false"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T0","comment":"Temperature used to linearize radiative heat transfer","value":"293.15","annotations":{"dialog":"Dialog(enable \u003d linearize)"}},{"className":"Real","name":"TRad4","comment":"4th power of the mean outdoor temperature","modifications":[{"name":"unit","value":"\"K4\""}]},{"className":"Modelica.SIunits.Temperature","name":"TRad","comment":"Mean radiant temperature"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TOut","comment":"Outside temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}), iconTransformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TBlaSky","comment":"Black body sky temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}), iconTransformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Buildings.HeatTransfer.Interfaces.RadiosityOutflow","name":"JOut","comment":"Radiosity that flows out of component","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for the infrared radiosity balance of the outdoor environment.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Line(),Line(),Line(),Line(),Line(),Rectangle(),Rectangle(),Text(),Text()})"}},"Buildings.Fluid.Sensors.PPMTwoPort":{"name":"Buildings.Fluid.Sensors.PPMTwoPort","comment":"Ideal two port trace substances sensor outputting in parts per million","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor","modifications":[{"name":"port_a","modifications":[{"name":"C_outflow","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"MassFraction\""},{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"},{"name":"max","value":"1"}]}]},{"name":"port_b","modifications":[{"name":"C_outflow","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"MassFraction\""},{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"},{"name":"max","value":"1"}]}]}]},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"String","qualifiers":["parameter"],"name":"substanceName","comment":"Name of trace substance","value":"\"CO2\""},{"className":"Real","qualifiers":["parameter"],"name":"C_start","comment":"Initial or guess value of output (\u003d state)","value":"0","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.MolarMass","qualifiers":["parameter"],"name":"MM","comment":"Molar mass of the trace substance","value":"Modelica.Media.IdealGases.Common.SingleGasesData.CO2.MM"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"ppm","comment":"Trace substance in port medium in ppm","modifications":[{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,110}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the trace substance of the passing fluid\nin parts per million.\nThe sensor is ideal, i.e., it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.Media.Specialized.Air.PerfectGas.GasProperties":{},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortResistance_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortResistance_N","comment":"Model of a resistance with two electrical ports and neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort"},{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_ref","comment":"Reference temperature","value":"298.15"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"M","comment":"Temperature constant (R_actual \u003d R*(M + T_heatPort)/(M + T_ref))","value":"507.65"},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"R","comment":"Resistance at temperature T_ref"},{"className":"Modelica.SIunits.Resistance","qualifiers":["parameter"],"name":"Rn","comment":"Resistance of neutral cable at temperature T_ref"},{"className":"OnePhase.Lines.TwoPortResistance","name":"phase1","comment":"Resistance line 1","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortResistance","name":"phase2","comment":"Resistance line 2","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortResistance","name":"phase3","comment":"Resistance line 3","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}},{"className":"OnePhase.Lines.TwoPortResistance","name":"neutral","comment":"Resistance neutral cable","modifications":[{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"useHeatPort","qualifiers":["final"],"value":"useHeatPort"},{"name":"R","qualifiers":["final"],"value":"Rn"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-64},{10,-44}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistive model that connects two AC three-phase\nunbalanced interfaces with neutral line. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortR_N.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped resistance as shown in the figure above.\nAssuming that the resistance \u003ci\u003eR\u003c/i\u003e is the overall resistance of the cable,\neach line has a resistance equal to \u003ci\u003eR/3\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe resistance of the neutral cable is defined separately using the parameter\n\u003ccode\u003eRn\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Line(),Line(),Rectangle(),Text()})"}},"Buildings.Media.Water.BaseProperties":{"name":"Buildings.Media.Water.BaseProperties","comment":"Base properties","qualifiers":["model"],"components":[{"className":"Temperature","name":"T","comment":"Temperature of medium","modifications":[{"name":"stateSelect","value":"if preferredMediumStates then StateSelect.prefer else StateSelect.default"}]},{"className":"InputAbsolutePressure","name":"p","comment":"Absolute pressure of medium"},{"className":"InputMassFraction","qualifiers":["array"],"name":"Xi","comment":"Structurally independent mass fractions","value":"fill(0,0)","arraySubscripts":"[nXi]"},{"className":"InputSpecificEnthalpy","name":"h","comment":"Specific enthalpy of medium"},{"className":"Modelica.SIunits.SpecificInternalEnergy","name":"u","comment":"Specific internal energy of medium"},{"className":"Modelica.SIunits.Density","name":"d","comment":"Density of medium","value":"d_const"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["array"],"name":"X","comment":"Mass fractions (\u003d (component mass)/total mass  m_i/m)","value":"{1}","arraySubscripts":"[nX]"},{"className":"Modelica.SIunits.SpecificHeatCapacity","qualifiers":["final"],"name":"R","comment":"Gas constant (of mixture if applicable)","value":"0"},{"className":"Modelica.SIunits.MolarMass","qualifiers":["final"],"name":"MM","comment":"Molar mass (of mixture or single fluid)","value":"MM_const"},{"className":"ThermodynamicState","name":"state","comment":"Thermodynamic state record for optional functions"},{"className":"Boolean","qualifiers":["parameter"],"name":"preferredMediumStates","comment":"\u003d true if StateSelect.prefer shall be used for the independent property variables of the medium","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["final","parameter"],"name":"standardOrderComponents","comment":"If true, and reducedX \u003d true, the last element of X will be computed from the other ones","value":"true"},{"className":"Modelica.SIunits.Conversions.NonSIunits.Temperature_degC","name":"T_degC","comment":"Temperature of medium in [degC]","value":"Modelica.SIunits.Conversions.to_degC(T)"},{"className":"Modelica.SIunits.Conversions.NonSIunits.Pressure_bar","name":"p_bar","comment":"Absolute pressure of medium in [bar]","value":"Modelica.SIunits.Conversions.to_bar(p)"}],"classes":[{"name":"Buildings.Media.Water.BaseProperties.InputAbsolutePressure","comment":"Pressure as input signal connector","qualifiers":["input"],"superClasses":[{"nameOfExtendedClass":"Modelica.SIunits.AbsolutePressure"}]},{"name":"Buildings.Media.Water.BaseProperties.InputSpecificEnthalpy","comment":"Specific enthalpy as input signal connector","qualifiers":["input"],"superClasses":[{"nameOfExtendedClass":"Modelica.SIunits.SpecificEnthalpy"}]},{"name":"Buildings.Media.Water.BaseProperties.InputMassFraction","comment":"Mass fraction as input signal connector","qualifiers":["input"],"superClasses":[{"nameOfExtendedClass":"Modelica.SIunits.MassFraction"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This base properties model is identical to\n    \u003ca href\u003d\\\"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\\\"\u003e\n    Modelica.Media.Water.ConstantPropertyLiquidWater\u003c/a\u003e,\n    except that the equation\n    \u003ccode\u003eu \u003d cv_const*(T - reference_T)\u003c/code\u003e\n    has been replaced by \u003ccode\u003eu\u003dh\u003c/code\u003e because\n    \u003ccode\u003ecp_const\u003dcv_const\u003c/code\u003e.\n    \u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.glassTRExteriorIrradiationNoShading":{"name":"Buildings.HeatTransfer.Windows.Functions.glassTRExteriorIrradiationNoShading","comment":"Transmittance and reflectance of glass panes for exterior irradiation without shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialGlassRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"layer","comment":"Angular data of glass pane","arraySubscripts":"[3,N,HEM,NSta]"},{"className":"Real","qualifiers":["array","output"],"name":"traRef","comment":"Transmittance and reflectance of each glass pane for exterior irradiation without shading","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[3,N,N,HEM,NSta]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular variation of the transmittance and reflectance of each glass pane for exteior irradiation without shading.\nIt accounts for the transmittance and reflectance among different panes.\nPane \u003ccode\u003e1\u003c/code\u003e is facing outside and pane \u003ccode\u003eN\u003c/code\u003e is facing the room.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.BoundaryConditions.Types.DataSource":{"name":"Buildings.BoundaryConditions.Types.DataSource","comment":"Enumeration to define data source","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"File","comment":"Use data from file"},{"className":"EnumType","qualifiers":["constant"],"name":"Parameter","comment":"Use parameter"},{"className":"EnumType","qualifiers":["constant"],"name":"Input","comment":"Use input connector"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnumeration to define the data source used in the weather data reader.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.RelativeHumidityTwoPort":{"name":"Buildings.Fluid.Sensors.RelativeHumidityTwoPort","comment":"Ideal two port relative humidity sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"phi","comment":"Relative humidity of the passing fluid","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"},{"name":"start","value":"phi_start"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {1,110}))"}},{"className":"Real","qualifiers":["parameter"],"name":"phi_start","comment":"Initial or guess value of output (\u003d state)","value":"0.5","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the relative humidity of the fluid flowing from\n\u003ccode\u003eport_a\u003c/code\u003e to \u003ccode\u003eport_b\u003c/code\u003e.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nNote that this sensor can only be used with media that contain the variable \u003ccode\u003ephi\u003c/code\u003e,\nwhich is typically the case for moist air models.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.HeatTransfer.Sources.PrescribedTemperature":{"name":"Buildings.HeatTransfer.Sources.PrescribedTemperature","comment":"Variable temperature boundary condition in Kelvin","qualifiers":["model"],"components":[{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"port","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Line(),Polygon()})","documentationInfo":"info \u003d \"\u003cHTML\u003e\n\u003cp\u003e\nThis model represents a variable temperature boundary condition.\nThe temperature in [K] is given as input signal \u003cb\u003eT\u003c/b\u003e\nto the model. The effect is that an instance of this model acts as\nan infinite reservoir able to absorb or generate as much energy\nas required to keep the temperature at the specified value.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Line(),Text(),Text(),Polygon()})"}},"Buildings.Fluid.FMI.TwoPortComponent":{"name":"Buildings.Fluid.FMI.TwoPortComponent","comment":"Container to export thermofluid flow models with two ports as an FMU","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.FMI.TwoPort"}],"components":[{"className":"Buildings.Fluid.Interfaces.PartialTwoPort","qualifiers":["replaceable"],"name":"com","constrainingClause":" constrainedby Buildings.Fluid.Interfaces.PartialTwoPort (final redeclare package Medium \u003d Medium, final allowFlowReversal \u003d allowFlowReversal)"},{"className":"Modelica.Blocks.Sources.RealExpression","name":"dpCom","comment":"Pressure drop of the component","modifications":[{"name":"y","value":"com.port_a.p-com.port_b.p"}],"conditionalClause":" if use_p_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-90},{-20,-70}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock that serves as a container to export a thermofluid flow component.\nThis block contains a replaceable model \u003ccode\u003ecom\u003c/code\u003e that needs to\nbe redeclared to export any model that has as its base class\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialTwoPort\\\"\u003e\nBuildings.Fluid.Interfaces.PartialTwoPort\u003c/a\u003e.\nThis allows exporting a large variety of thermofluid flow models\nwith a simple redeclare.\n\u003c/p\u003e\n\u003cp\u003e\nSee for example\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.Examples.FMUs.FixedResistanceDpM\\\"\u003e\nBuildings.Fluid.FMI.Examples.FMUs.FixedResistanceDpM\u003c/a\u003e\nor\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.Examples.FMUs.HeaterCooler_u\\\"\u003e\nBuildings.Fluid.FMI.Examples.FMUs.HeaterCooler_u\u003c/a\u003e\nfor how to use this block.\n\u003c/p\u003e\n\u003cp\u003e\nNote that this block must not be used if the instance \u003ccode\u003ecom\u003c/code\u003e\nsets a constant pressure. In such a situation, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.TwoPort\\\"\u003e\nBuildings.Fluid.FMI.TwoPort\u003c/a\u003e\ntogether with\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.InletAdaptor\\\"\u003e\nBuildings.Fluid.FMI.InletAdaptor\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.OutletAdaptor\\\"\u003e\nBuildings.Fluid.FMI.OutletAdaptor\u003c/a\u003e\nand set the pressure to be equal to the port \u003ccode\u003ep\u003c/code\u003e of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.OutletAdaptor\\\"\u003e\nBuildings.Fluid.FMI.OutletAdaptor\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.systemCurrent":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.systemCurrent","comment":"Return system current as function of phase currents","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Current","qualifiers":["array","input"],"name":"i","arraySubscripts":"[n]"},{"className":"SI.Current","qualifiers":["output"],"name":"I"}]},"Buildings.Fluid.SolarCollectors.Data.GlazedFlatPlate.FP_GuangdongFSPTY95":{"name":"Buildings.Fluid.SolarCollectors.Data.GlazedFlatPlate.FP_GuangdongFSPTY95","comment":"FP - Guandong Fivestar Solar Energy Co, FS-PTY95-2.0","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","modifications":[{"name":"ATyp","qualifiers":["final"],"value":"Types.Area.Gross"},{"name":"A","qualifiers":["final"],"value":"2"},{"name":"mDry","qualifiers":["final"],"value":"35"},{"name":"V","qualifiers":["final"],"value":"1.7/(1000)"},{"name":"dp_nominal","qualifiers":["final"],"value":"235"},{"name":"mperA_flow_nominal","qualifiers":["final"],"value":"0.02"},{"name":"B0","qualifiers":["final"],"value":"-0.2165"},{"name":"B1","qualifiers":["final"],"value":"0.023"},{"name":"y_intercept","qualifiers":["final"],"value":"0.678"},{"name":"slope","qualifiers":["final"],"value":"-4.426"},{"name":"IAMDiff","qualifiers":["final"],"value":"0"},{"name":"C1","qualifiers":["final"],"value":"0"},{"name":"C2","qualifiers":["final"],"value":"0"},{"name":"G_nominal","qualifiers":["final"],"value":"1000"},{"name":"dT_nominal","qualifiers":["final"],"value":"10"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2012043A.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003ch4\u003eReferences\u003c/h4\u003e\n      \u003cp\u003e\n        Ratings data taken from the \u003ca href\u003d\\\"http://www.solar-rating.org\\\"\u003e\n        Solar Rating and Certification Corporation website\u003c/a\u003e. SRCC# \u003d 2012043A.\u003cbr/\u003e\n      \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.WindTurbine":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sources.WindTurbine","comment":"Model of a simple wind turbine generator","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Sources.WindTurbine","modifications":[{"name":"terminal"},{"name":"load"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a wind turbine whose power is computed as a function of wind-speed as defined in a table.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.WindTurbine\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.WindTurbine\u003c/a\u003e for\nmore information.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.OnePhase.j":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.j","comment":"Return vector rotated by 90 degrees","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.j"}]},"Buildings.Utilities.Math.SmoothMin":{"name":"Buildings.Utilities.Math.SmoothMin","comment":"Once continuously differentiable approximation to the minimum function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SI2SO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"deltaX","comment":"Width of transition interval"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce continuously differentiable approximation to the \u003ci\u003emin(.,.)\u003c/i\u003e function.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the minimum need not be respected, such as illustrated in\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothMin\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothMin\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text()})"}},"Buildings.Airflow.Multizone.DoorDiscretizedOpen":{"name":"Buildings.Airflow.Multizone.DoorDiscretizedOpen","comment":"Door model using discretization along height coordinate","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Airflow.Multizone.BaseClasses.DoorDiscretized"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes the bi-directional air flow through an open door.\n\u003c/p\u003e\n\u003cp\u003e\nTo compute the bi-directional flow,\nthe door is discretize along the height coordinate.\nAn orifice equation is used to compute the flow for each compartment.\n\u003c/p\u003e\n\u003cp\u003e\nIn this model, the door is always open.\nUse the model\n\u003ca href\u003d\\\"modelica://Buildings.Airflow.Multizone.DoorDiscretizedOperable\\\"\u003e\nBuildings.Airflow.Multizone.DoorDiscretizedOperable\u003c/a\u003e\nfor a door that can either be open or closed.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.Functions.isMonotonic":{"name":"Buildings.Utilities.Math.Functions.isMonotonic","comment":"Returns true if the argument is a monotonic sequence","components":[{"className":"Real","qualifiers":["array","input"],"name":"x","comment":"Sequence to be tested","arraySubscripts":"[:]"},{"className":"Boolean","qualifiers":["input"],"name":"strict","comment":"Set to true to test for strict monotonicity","value":"false"},{"className":"Boolean","qualifiers":["output"],"name":"monotonic","comment":"True if x is monotonic increasing or decreasing"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns \u003ccode\u003etrue\u003c/code\u003e if its argument is\nmonotonic increasing or decreasing, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\nIf \u003ccode\u003estrict\u003dtrue\u003c/code\u003e, then strict monotonicity is tested,\notherwise weak monotonicity is tested.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimple_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.PVsimple_N","comment":"Simple PV source with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.UnbalancedPV_N","modifications":[{"name":"pv_phase1"},{"name":"pv_phase2"},{"name":"pv_phase3"}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"G","comment":"Total solar irradiation per unit area","modifications":[{"name":"unit","value":"\"W/m2\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,110}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple PV model for three-phase unbalanced systems with neutral cable connection.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.PVSimple\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.PVSimple\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Airflow.Multizone.ZonalFlow_m_flow":{"name":"Buildings.Airflow.Multizone.ZonalFlow_m_flow","comment":"Zonal flow with input air change per second","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Airflow.Multizone.BaseClasses.ZonalFlow"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"mAB_flow","comment":"Mass flow rate from A to B","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,90},{-100,110}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"mBA_flow","comment":"Mass flow rate from B to A","annotations":{"placement":"Placement(transformation(extent \u003d {{120,-110},{100,-90}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model computes the air exchange between volumes.\n\u003c/p\u003e\n\u003cp\u003e\nInput is the mass flow rate from \u003ci\u003eA\u003c/i\u003e to \u003ci\u003eB\u003c/i\u003e and from \u003ci\u003eB\u003c/i\u003e to \u003ci\u003eA\u003c/i\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Windows.Functions.glassPropertyCoated":{"name":"Buildings.HeatTransfer.Windows.Functions.glassPropertyCoated","comment":"Compute angular variation and hemispherical integration of the transmittance and reflectance for a coated glass pane without shading","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Windows.Functions.BaseClasses.partialSingleGlassRadiation"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"glass","comment":"Propertry of one glass pane","arraySubscripts":"[3]"},{"className":"Modelica.SIunits.Angle","qualifiers":["array","input"],"name":"psi","comment":"Incident angles","arraySubscripts":"[HEM-1]"},{"className":"Real","qualifiers":["array","output"],"name":"layer","comment":"Transmittance, front and back reflectance","arraySubscripts":"[3,HEM]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the angular variation and the hemispherical integration of the transmittance and reflectance for one coated glass pane.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Interfaces.PrescribedOutletState":{"name":"Buildings.Fluid.Interfaces.PrescribedOutletState","comment":"Component that assigns the outlet fluid property at port_a based on an input signal","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortTransport","modifications":[{"name":"dp_start","qualifiers":["final"],"value":"0"},{"name":"show_T","value":"false"},{"name":"show_V_flow","value":"false"}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PrescribedOutletStateParameters","modifications":[{"name":"T_start","value":"Medium.T_default"}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TSet","comment":"Set point temperature of the fluid that leaves port_b","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {-120,80}, extent \u003d {{20,-20},{-20,20}}, rotation \u003d 180))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"Q_flow","comment":"Heat added to the fluid (if flow is from port_a to port_b)","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,70},{120,90}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model sets the temperature of the medium that leaves \u003ccode\u003eport_a\u003c/code\u003e\nto the value given by the input \u003ccode\u003eTSet\u003c/code\u003e, subject to optional\nlimitations on the heating and cooling capacity.\n\u003c/p\u003e\n\u003cp\u003e\nIn case of reverse flow, the set point temperature is still applied to\nthe fluid that leaves \u003ccode\u003eport_b\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003eenergyDynamics\u003c/code\u003e is not equal to\n\u003ccode\u003eModelica.Fluid.Types.Dynamics.SteadyState\u003c/code\u003e,\nthe component models the dynamic response using a first order differential equation.\nThe time constant of the component is equal to the parameter \u003ccode\u003etau\u003c/code\u003e.\nThis time constant is adjusted based on the mass flow rate using\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026tau;\u003csub\u003eeff\u003c/sub\u003e \u003d \u0026tau; |m\u0026#775;| \u0026frasl; m\u0026#775;\u003csub\u003enom\u003c/sub\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026tau;\u003csub\u003eeff\u003c/sub\u003e\u003c/i\u003e is the effective time constant for the given mass flow rate\n\u003ci\u003em\u0026#775;\u003c/i\u003e and\n\u003ci\u003e\u0026tau;\u003c/i\u003e is the time constant at the nominal mass flow rate\n\u003ci\u003em\u0026#775;\u003csub\u003enom\u003c/sub\u003e\u003c/i\u003e.\nThis type of dynamics is equal to the dynamics that a completely mixed\ncontrol volume would have.\n\u003c/p\u003e\n\u003cp\u003e\nThis model has no pressure drop.\nSee \u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.HeaterCooler_T\\\"\u003e\nBuildings.Fluid.HeatExchangers.HeaterCooler_T\u003c/a\u003e\nfor a model that instantiates this model and that has a pressure drop.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Text(),Text()})"}},"Buildings.Electrical.PhaseSystems.OnePhase.divide":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.divide","comment":"Divide two complex numbers represented by vectors x[2] and y[2]","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.divide"}]},"Buildings.Electrical.Transmission.LowVoltageCables.Cu100":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Cu100","comment":"Cu cable 100 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Cu"},{"name":"M","value":"234.5+273.15"},{"name":"Amp","value":"230"},{"name":"RCha","value":"0.181e-003"},{"name":"XCha","value":"0.072e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCopper cable with a cross-sectional area of 100mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.181e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.072e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl95":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl95","comment":"Aluminum cable 95mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.320e-003"},{"name":"XCha","value":"0.072e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 95mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.320e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.072e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.OnePhase.phase":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.phase","comment":"Return phase","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.phase"}]},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHelmholtzEnergy":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHelmholtzEnergy","comment":"Return the specific Helmholtz energy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.specificHelmholtzEnergy"},{"nameOfExtendedClass":"Modelica.Icons.Function"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the specific Helmholtz energy.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.SpecificEnthalpy":{"name":"Buildings.Fluid.Sensors.SpecificEnthalpy","comment":"Ideal one port specific enthalpy sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"h_out","comment":"Specific enthalpy in port medium","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"SpecificEnergy\""},{"name":"unit","qualifiers":["final"],"value":"\"J/kg\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the specific enthalpy of the fluid connected to its port.\nThe sensor is ideal, i.e. it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Text(),Line()})"}},"Buildings.Fluid.HeatExchangers.DXCoils.Data.DoubleSpeed":{"name":"Buildings.Fluid.HeatExchangers.DXCoils.Data.DoubleSpeed"},"Buildings.Utilities.Psychrometrics.X_pTphi":{"name":"Buildings.Utilities.Psychrometrics.X_pTphi","comment":"Return steam mass fraction as a function of relative humidity phi and temperature T","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.Utilities.Psychrometrics.BaseClasses.HumidityRatioVaporPressure"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T","comment":"Temperature","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"phi","comment":"Relative humidity (0...1)","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-80},{-100,-40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"X","comment":"Steam mass fraction","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[Medium.nX]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"classes":[{"name":"Buildings.Utilities.Psychrometrics.X_pTphi.Medium","comment":"Medium model","qualifiers":["package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock to compute the water vapor concentration based on\npressure, temperature and relative humidity.\n\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003euse_p_in\u003c/code\u003e is false (default option), the \u003ccode\u003ep\u003c/code\u003e parameter\nis used as atmospheric pressure,\nand the \u003ccode\u003ep_in\u003c/code\u003e input connector is disabled;\nif \u003ccode\u003euse_p_in\u003c/code\u003e is true, then the \u003ccode\u003ep\u003c/code\u003e parameter is ignored,\nand the value provided by the input connector is used instead.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phasePowers":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phasePowers","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phasePowers"}]},"Buildings.Fluid.Storage.ExpansionVessel":{"name":"Buildings.Fluid.Storage.ExpansionVessel","comment":"Expansion vessel with fixed pressure","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations","modifications":[{"name":"energyDynamics","qualifiers":["final"],"value":"Modelica.Fluid.Types.Dynamics.FixedInitial"},{"name":"massDynamics","qualifiers":["final"],"value":"Modelica.Fluid.Types.Dynamics.FixedInitial"},{"name":"mSenFac","qualifiers":["final"],"value":"1"}]}],"components":[{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"V_start","comment":"Volume of liquid stored in the vessel at the start of the simulation","modifications":[{"name":"start","value":"1"}]},{"className":"Modelica.SIunits.Pressure","qualifiers":["parameter"],"name":"p","comment":"Constant pressure of the expansion vessel","value":"Medium.p_default"},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a","comment":"Fluid port","modifications":[{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-110},{10,-90}}))"}},{"className":"Modelica.SIunits.Mass","name":"m","comment":"Mass of liquid in the vessel"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a pressure expansion vessel. The vessel has a constant pressure\nthat is equal to the value of the parameter \u003ccode\u003ep_start\u003c/code\u003e.\nThe model takes into account the energy and mass balance of the medium.\nIt has no heat exchange with the ambient.\n\u003c/p\u003e\n\u003cp\u003e\nThe expansion vessel needs to be used in closed loops that contain\nwater to set a reference pressure and, for liquids where the\ndensity is modeled as a function of temperature, to allow for\nthe thermal expansion of the liquid.\n\u003c/p\u003e\n\u003cp\u003e\nNote that alternatively, the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources.FixedBoundary\\\"\u003e\nBuildings.Fluid.Sources.FixedBoundary\u003c/a\u003e may be used to set\na reference pressure. The main difference between these two models\nis that in this model, there is an energy and mass balance for the volume.\nIn contrast, for\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources.FixedBoundary\\\"\u003e\nBuildings.Fluid.Sources.FixedBoundary\u003c/a\u003e,\nany mass flow rate that flows out of the model will be at a user-specified temperature.\nTherefore, \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sources.FixedBoundary\\\"\u003e\nBuildings.Fluid.Sources.FixedBoundary\u003c/a\u003e leads to smaller systems\nof equations, which may result in faster simulation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Rectangle(),Rectangle(),Polygon(),Rectangle()})"}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.jj":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.jj","comment":"Vectorized version of j","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Real","qualifiers":["array","input"],"name":"xx","comment":"array of voltage or current vectors","arraySubscripts":"[:,:]"},{"className":"Real","qualifiers":["array","output"],"name":"yy","comment":"array of rotated vectors","arraySubscripts":"[size(xx,1),size(xx,2)]"}]},"Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez":{"name":"Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez","comment":"Hemispherical diffuse irradiation on a tilted surface using Perez\u0027s anisotropic sky model","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.BoundaryConditions.SolarIrradiation.BaseClasses.PartialSolarIrradiation"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"rho","comment":"Ground reflectance","value":"0.2","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude"},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth"},{"className":"Boolean","qualifiers":["parameter"],"name":"outSkyCon","comment":"Output contribution of diffuse irradiation from sky","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"outGroCon","comment":"Output contribution of diffuse irradiation from ground","value":"false"},{"className":"Modelica.Blocks.Math.Add","name":"add","comment":"Block to add radiations","annotations":{"placement":"Placement(transformation(extent \u003d {{60,-10},{80,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"HSkyDifTil","comment":"Hemispherical diffuse solar irradiation on a tilted surface from the sky","conditionalClause":" if outSkyCon","annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"HGroDifTil","comment":"Hemispherical diffuse solar irradiation on a tilted surface from the ground","conditionalClause":" if outGroCon","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-70},{120,-50}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component computes the hemispherical diffuse irradiation on a tilted surface using an anisotropic\nsky model proposed by Perez.\nFor a definition of the parameters, see the\n\u003ca href\u003d\\\"modelica://Buildings.BoundaryConditions.UsersGuide\\\"\u003eUser\u0027s Guide\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\nP. Ineichen, R. Perez and R. Seals (1987).\n\u003ci\u003eThe Importance of Correct Albedo Determination for Adequately Modeling Energy Received by Tilted Surface\u003c/i\u003e,\nSolar Energy, 39(4): 301-305.\n\u003c/li\u003e\n\u003cli\u003e\nR. Perez, R. Seals, P. Ineichen, R. Stewart and D. Menicucci (1987).\n\u003ci\u003eA New Simplified Version of the Perez Diffuse Irradiance Model for Tilted Surface\u003c/i\u003e,\nSolar Energy, 39(3): 221-231.\n\u003c/li\u003e\n\u003cli\u003e\nR. Perez, P. Ineichen, R. Seals, J. Michalsky and R. Stewart (1990).\n\u003ci\u003eModeling Dyalight Availability and Irradiance Componets From Direct and Global Irradiance\u003c/i\u003e,\nSolar Energy, 44(5):271-289.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfLiquid":{"name":"Buildings.Media.Specialized.Air.PerfectGas.der_enthalpyOfLiquid","comment":"Temperature derivative of enthalpy of liquid per unit mass of liquid","qualifiers":["replaceable"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"Real","qualifiers":["input"],"name":"der_T","comment":"temperature derivative"},{"className":"Real","qualifiers":["output"],"name":"der_h","comment":"derivative of liquid enthalpy"}]},"Buildings.Fluid.FixedResistances.SplitterFixedResistanceDpM":{"name":"Buildings.Fluid.FixedResistances.SplitterFixedResistanceDpM","comment":"Flow splitter with fixed resistance at each port","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.BaseClasses.BaseIcon"},{"nameOfExtendedClass":"Buildings.Fluid.BaseClasses.PartialThreeWayResistance","modifications":[{"name":"mDyn_flow_nominal","value":"sum(abs(m_flow_nominal[:])/(3))"},{"name":"res1"},{"name":"res2"},{"name":"res3"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_dh","comment":"Set to true to specify hydraulic diameter","value":"false","annotations":{"dialog":"Dialog(enable \u003d not linearized)"}},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["array","parameter"],"name":"m_flow_nominal","comment":"Mass flow rate. Set negative at outflowing ports.","arraySubscripts":"[3]","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Pressure","qualifiers":["array","parameter"],"name":"dp_nominal","comment":"Pressure. Set negative at outflowing ports.","modifications":[{"name":"displayUnit","qualifiers":["each"],"value":"\"Pa\""}],"arraySubscripts":"[3]","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Real","qualifiers":["parameter"],"name":"deltaM","comment":"Fraction of nominal mass flow rate where transition to turbulent occurs","value":"0.3","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(enable \u003d not use_dh and not linearized)"}},{"className":"Modelica.SIunits.Length","qualifiers":["array","parameter"],"name":"dh","comment":"Hydraulic diameter","value":"{1,1,1}","arraySubscripts":"[3]","annotations":{"dialog":"Dialog(enable \u003d use_dh and not linearized)"}},{"className":"Real","qualifiers":["array","parameter"],"name":"ReC","comment":"Reynolds number where transition to turbulent starts","value":"{4000,4000,4000}","modifications":[{"name":"min","qualifiers":["each"],"value":"0"}],"arraySubscripts":"[3]","annotations":{"dialog":"Dialog(enable \u003d use_dh and not linearized)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearized","comment":"\u003d true, use linear relation between m_flow and dp for any flow rate","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a flow splitter or mixer with a fixed resistance in each flow leg.\nIn each flow lag, a pressure drop can be modeled, and at the fluid junction,\na mixing volume can be modeled.\n\u003c/p\u003e\n\u003cp\u003e\nThe pressure drop is implemented using the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\\\"\u003e\nBuildings.Fluid.FixedResistances.FixedResistanceDpM\u003c/a\u003e.\nIf its nominal pressure drop is set to zero, then the pressure drop\nmodel will be removed.\nFor example, the pressure drop declaration\n\u003c/p\u003e\n\u003cpre\u003e\n  m_flow_nominal\u003d{ 0.1, 0.1,  -0.2},\n  dp_nominal \u003d   {500,    0, -6000}\n\u003c/pre\u003e\n\u003cp\u003e\nwould model a mixer that has the nominal flow rates and associated pressure drops\nas shown in the figure below. Note that \u003ccode\u003eport_3\u003c/code\u003e is set to negative values.\nThe negative values indicate that at the nominal conditions, fluid is leaving the component.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Fluid/FixedResistances/SplitterFixedResistanceDpM.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nOptionally, at the fluid junction, a control volume can be modeled.\nThis is implemented using the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Delays.DelayFirstOrder\\\"\u003e\nBuildings.Fluid.Delays.DelayFirstOrder\u003c/a\u003e.\nThe fluid volume is modeled if\n\u003ccode\u003eenergyDynamics \u003c\u003e Modelica.Fluid.Types.Dynamics.SteadyState\u003c/code\u003e.\nThe control volume has the size\n\u003c/p\u003e\n\u003cpre\u003e\n  V \u003d sum(abs(m_flow_nominal[:])/3)*tau/rho_nominal\n\u003c/pre\u003e\n\u003cp\u003e\nwhere \u003ccode\u003etau\u003c/code\u003e is a parameter and \u003ccode\u003erho_nominal\u003c/code\u003e is the density\nof the medium in the volume at nominal condition.\nSetting \u003ccode\u003eenergyDynamics\u003dModelica.Fluid.Types.Dynamics.FixedInitial\u003c/code\u003e\ncan help reducing the size of the nonlinear\nsystem of equations.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Polygon(),Ellipse()})"}},"Buildings.Fluid.HeatExchangers.WetCoilCounterFlow":{"name":"Buildings.Fluid.HeatExchangers.WetCoilCounterFlow","comment":"Counterflow coil with discretization along the flow paths and humidity condensation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.DryCoilCounterFlow","modifications":[{"name":"ele","qualifiers":["each","final"]}]}],"components":[{"className":"Modelica.SIunits.HeatFlowRate","name":"QSen2_flow","comment":"Sensible heat input into air stream (negative if air is cooled)"},{"className":"Modelica.SIunits.HeatFlowRate","name":"QLat2_flow","comment":"Latent heat input into air (negative if air is dehumidified)"},{"className":"Real","name":"SHR","comment":"Sensible to total heat ratio","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}]},{"className":"Modelica.SIunits.MassFlowRate","name":"mWat_flow","comment":"Water flow rate"}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}, initialScale \u003d 0.5), graphics \u003d {Text(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a discretized coil with water vapor condensation.\nThe coil consists of two flow paths which are, at the design flow direction,\nin opposite direction to model a counterflow heat exchanger.\nThe flow paths are discretized into \u003ccode\u003enEle\u003c/code\u003e elements.\nEach element is modeled by an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.HexElement\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.HexElement\u003c/a\u003e.\nEach element has a state variable for the metal.\n\u003c/p\u003e\n\u003cp\u003e\nThe convective heat transfer coefficients can, for each fluid individually, be\ncomputed as a function of the flow rate and/or the temperature,\nor assigned to a constant. This computation is done using an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.HADryCoil\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.HADryCoil\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIn this model, the water (or liquid) flow path\nneeds to be connected to \u003ccode\u003eport_a1\u003c/code\u003e and \u003ccode\u003eport_b1\u003c/code\u003e, and\nthe air flow path needs to be connected to the other two ports.\n\u003c/p\u003e\n\u003cp\u003e\nThe mass transfer from the fluid 2 to the metal is computed using a similarity law between\nheat and mass transfer, as implemented by the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.MassExchange\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.MassExchange\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThis model can only be used with medium models that\nimplement the function \u003ccode\u003eenthalpyOfLiquid\u003c/code\u003e and that contain\nan integer variable \u003ccode\u003eWater\u003c/code\u003e whose value is the element number where\nthe water vapor is stored in the species concentration vector. Examples for\nsuch media are\n\u003ca href\u003d\\\"modelica://Buildings.Media.Air\\\"\u003e\nBuildings.Media.Air\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Modelica.Media.Air.MoistAir\\\"\u003e\nModelica.Media.Air.MoistAir\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nTo model this coil for conditions without humidity condensation, use the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DryCoilCounterFlow\\\"\u003e\nBuildings.Fluid.HeatExchangers.DryCoilCounterFlow\u003c/a\u003e instead of this model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Media.Specialized.Air.PerfectGas.saturationPressureLiquid":{"name":"Buildings.Media.Specialized.Air.PerfectGas.saturationPressureLiquid","comment":"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"Tsat","comment":"saturation temperature"},{"className":"Modelica.SIunits.AbsolutePressure","qualifiers":["output"],"name":"psat","comment":"saturation pressure"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nSaturation pressure of water above the triple point temperature is computed from temperature. It\u0027s range of validity is between\n273.16 and 373.16 K. Outside these limits a less accurate result is returned.\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.PartialPVOriented":{"name":"Buildings.Electrical.Interfaces.PartialPVOriented","comment":"Base model of a PV system with orientation","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialPvBase"}],"components":[{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"til","comment":"Surface tilt","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"lat","comment":"Latitude","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"azi","comment":"Surface azimuth","annotations":{"dialog":"Dialog(group \u003d \"Orientation\")"}},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"110"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package","final"],"value":"PhaseSystem"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"PartialPV","qualifiers":["replaceable"],"name":"panel","constrainingClause":" constrainedby PartialPV (final redeclare package PhaseSystem \u003d PhaseSystem, final A \u003d A, final fAct \u003d fAct, final eta \u003d eta)"},{"className":"BoundaryConditions.WeatherData.Bus","name":"weaBus","comment":"Weather data","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,80},{10,100}}), iconTransformation(extent \u003d {{-10,80},{10,100}}))"}}],"classes":[{"name":"Buildings.Electrical.Interfaces.PartialPVOriented.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nPartial model of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as an input the\ndirect and diffuse solar radiation from the weather data bus.\n\u003c/p\u003e\n\u003cp\u003e\nThis model computes the power as \u003ci\u003eP\u003dA \u0026nbsp; f\u003csub\u003eact\u003c/sub\u003e \u0026nbsp; \u0026eta; \u0026nbsp; G\u003c/i\u003e,\nwhere \u003ci\u003eA\u003c/i\u003e is the panel area,\n\u003ci\u003ef\u003csub\u003eact\u003c/sub\u003e\u003c/i\u003e is the fraction of the aperture area,\n\u003ci\u003e\u0026eta;\u003c/i\u003e is the panel efficiency and\n\u003ci\u003eG\u003c/i\u003e is the total solar irradiation, which is the sum of\ndirect and diffuse irradiation.\nThe model takes into account the location and the orientation of the PV panel,\nspecified by the surface tilt, latitude and azimuth.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Line(),Text(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Text()})"}},"Buildings.Electrical.PhaseSystems.DirectCurrent.thetaRef":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.thetaRef","comment":"Return absolute angle of rotating reference system","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.thetaRef"}]},"Buildings.Electrical.PhaseSystems.DirectCurrent.thetaRel":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.thetaRel","comment":"Return absolute angle of rotating system as offset to thetaRef","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.thetaRel"}]},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phasePowers":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.phasePowers","comment":"Return phase powers","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.ActivePower","qualifiers":["input"],"name":"P","comment":"active system power"},{"className":"SI.Angle","qualifiers":["input"],"name":"phi","comment":"phase angle","value":"0"},{"className":"SI.Power","qualifiers":["array","output"],"name":"p","comment":"phase powers","arraySubscripts":"[n]"}]},"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfCondensingGas":{"name":"Buildings.Media.Specialized.Air.PerfectGas.enthalpyOfCondensingGas","comment":"Enthalpy of steam per unit mass of steam","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Temperature","qualifiers":["input"],"name":"T","comment":"temperature"},{"className":"SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"steam enthalpy"}]},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to3Ground_p":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to3Ground_p","comment":"Adapter between Terminal4 (3 phases and ground) and Terminal3 P","qualifiers":["model"],"components":[{"className":"Terminal_p","name":"terminal4","comment":"Connector with neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}), iconTransformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_p","name":"ground4","comment":"Connector for neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{-114,-70},{-94,-50}}), iconTransformation(extent \u003d {{-114,-70},{-94,-50}}))"}},{"className":"Terminal_p","name":"terminal3","comment":"Connector without neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAdapter between electric connectors type p for AC three-phase unbalanced systems.\nThis adapter connects a connector without neutral cable to a connector without\nneutral cable.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Electrical.Transmission.Grids.TestGrid2Nodes":{"name":"Buildings.Electrical.Transmission.Grids.TestGrid2Nodes","comment":"Simple model of a grid with 2 nodes and 1 link","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.Grids.PartialGrid","modifications":[{"name":"nNodes","value":"2"},{"name":"nLinks","value":"1"},{"name":"fromTo","value":"[[1, 2]]"},{"name":"l","value":"[200]"},{"name":"cables"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a simple grid with two nodes and a single link between them.\n\u003c/p\u003e\n\u003cp\u003e\nThe picture below describes the grid topology.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/Transmission/Grids/testGrid2Nodes.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to3Ground_n":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Connection3to3Ground_n","comment":"Adapter between Terminal4 (3 phases and ground) and Terminal3 N","qualifiers":["model"],"components":[{"className":"Terminal_n","name":"terminal4","comment":"Connector for side with neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}), iconTransformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_n","name":"ground4","comment":"Connector for neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{-109,-70},{-89,-50}}), iconTransformation(extent \u003d {{-109,-70},{-89,-50}}))"}},{"className":"Terminal_n","name":"terminal3","comment":"Connector without neutral","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAdapter between electric connectors type n for AC three-phase unbalanced systems.\nThis adapter connects a connector without neutral cable to a connector without\nneutral cable.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab":{"name":"Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab","comment":"Model of a single circuit of a radiant slab","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.RadiantSlabs.BaseClasses.Slab"},{"nameOfExtendedClass":"Buildings.Fluid.FixedResistances.BaseClasses.Pipe","modifications":[{"name":"nSeg","value":"if heatTransfer\u003d\u003dTypes.HeatTransfer.EpsilonNTU then 1 else 5"},{"name":"diameter","qualifiers":["final"],"value":"pipe.dIn"},{"name":"length","value":"A/(disPip)"},{"name":"thicknessIns","qualifiers":["final"],"value":"0"},{"name":"lambdaIns","qualifiers":["final"],"value":"0.04"},{"name":"dp_nominal","value":"Modelica.Fluid.Pipes.BaseClasses.WallFriction.Detailed.pressureLoss_m_flow()"},{"name":"preDro","modifications":[{"name":"dp","modifications":[{"name":"nominal","value":"200*length"}]}]}]}],"components":[{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"A","comment":"Surface area of radiant slab","annotations":{"dialog":"Dialog(group \u003d \"Construction\")"}},{"className":"Buildings.Fluid.HeatExchangers.RadiantSlabs.Types.HeatTransfer","qualifiers":["parameter"],"name":"heatTransfer","comment":"Model for heat transfer between fluid and slab","value":"Types.HeatTransfer.EpsilonNTU"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_c_start","comment":"Initial construction temperature in the layer that contains the pipes, used if steadyStateInitial \u003d false","value":"(T_a_start*con_b[1].layers.R+T_b_start*con_a[1].layers.R)/(layers.R)","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Construction\")"}},{"className":"Modelica.SIunits.Velocity","qualifiers":["final","parameter"],"name":"v_nominal","comment":"Velocity at m_flow_nominal","value":"4*m_flow_nominal/(pipe.dIn^(2))/(Modelica.Constants.pi)/(rho_default)"},{"className":"Buildings.HeatTransfer.Conduction.MultiLayer","qualifiers":["array"],"name":"con_a","comment":"Construction near the surface port surf_a","modifications":[{"name":"A","qualifiers":["final","each"],"value":"A/(nSeg)"},{"name":"steadyStateInitial","qualifiers":["each"],"value":"steadyStateInitial"},{"name":"layers","qualifiers":["each"],"modifications":[{"name":"nLay","qualifiers":["final"],"value":"iLayPip"},{"name":"material","qualifiers":["final"],"value":"{layers.material[i]i in 1:iLayPip}"},{"name":"absIR_a","value":"layers.absIR_a"},{"name":"absIR_b","value":"layers.absIR_b"},{"name":"absSol_a","value":"layers.absSol_a"},{"name":"absSol_b","value":"layers.absSol_b"},{"name":"roughness_a","value":"layers.roughness_a"}]},{"name":"T_a_start","qualifiers":["each"],"value":"T_a_start"},{"name":"T_b_start","qualifiers":["each"],"value":"T_c_start"}],"arraySubscripts":"[nSeg]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {40,50}))"}},{"className":"Buildings.HeatTransfer.Conduction.MultiLayer","qualifiers":["array"],"name":"con_b","comment":"Construction near the surface port surf_b","modifications":[{"name":"A","qualifiers":["final","each"],"value":"A/(nSeg)"},{"name":"steadyStateInitial","qualifiers":["each"],"value":"steadyStateInitial"},{"name":"layers","qualifiers":["each"],"modifications":[{"name":"nLay","qualifiers":["final"],"value":"layers.nLay-iLayPip"},{"name":"material","qualifiers":["final"],"value":"{layers.material[i]i in iLayPip+1:layers.nLay}"},{"name":"absIR_a","value":"layers.absIR_a"},{"name":"absIR_b","value":"layers.absIR_b"},{"name":"absSol_a","value":"layers.absSol_a"},{"name":"absSol_b","value":"layers.absSol_b"},{"name":"roughness_a","value":"layers.roughness_a"}]},{"name":"T_a_start","qualifiers":["each"],"value":"T_c_start"},{"name":"T_b_start","qualifiers":["each"],"value":"T_b_start"}],"arraySubscripts":"[nSeg]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {40,-58}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a single flow circuit of a radiant slab with pipes or a capillary heat exchanger\nembedded in the construction.\nFor a model with multiple parallel flow circuits, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitsSlab\\\"\u003e\nBuildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitsSlab\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.RadiantSlabs.UsersGuide\\\"\u003e\nuser\u0027s guide\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Line(),Line()})"}},"Buildings.HeatTransfer.Data.Glasses.Generic":{"name":"Buildings.HeatTransfer.Data.Glasses.Generic","comment":"Thermal properties of window glass","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Record"}],"components":[{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"x","comment":"Thickness","value":"0.003"},{"className":"Modelica.SIunits.ThermalConductivity","qualifiers":["parameter"],"name":"k","comment":"Thermal conductivity","value":"1"},{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["array","parameter"],"name":"tauSol","comment":"Solar transmittance","value":"{0.6}","arraySubscripts":"[:]"},{"className":"Modelica.SIunits.ReflectionCoefficient","qualifiers":["array","parameter"],"name":"rhoSol_a","comment":"Solar reflectance of surface a (usually outside-facing surface)","value":"{0.075}","arraySubscripts":"[:]"},{"className":"Modelica.SIunits.ReflectionCoefficient","qualifiers":["array","parameter"],"name":"rhoSol_b","comment":"Solar reflectance of surface b (usually room-facing surface)","value":"{0.075}","arraySubscripts":"[:]"},{"className":"Modelica.SIunits.TransmissionCoefficient","qualifiers":["parameter"],"name":"tauIR","comment":"Infrared transmissivity of glass","value":"0"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIR_a","comment":"Infrared absorptivity of surface a (usually outside-facing surface)","value":"0.84"},{"className":"Modelica.SIunits.Emissivity","qualifiers":["parameter"],"name":"absIR_b","comment":"Infrared absorptivity of surface b (usually room-facing surface)","value":"0.84"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis record implements thermophysical properties for window glass.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.Glasses\\\"\u003e\nBuildings.HeatTransfer.Data.Glasses\u003c/a\u003e\nfor instructions.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.systemVoltage":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.systemVoltage","comment":"Return system voltage as function of phase voltages","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Voltage","qualifiers":["array","input"],"name":"v","arraySubscripts":"[n]"},{"className":"SI.Voltage","qualifiers":["output"],"name":"V"}]},"Buildings.Fluid.Sensors.TemperatureTwoPort":{"name":"Buildings.Fluid.Sensors.TemperatureTwoPort","comment":"Ideal two port temperature sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"T","comment":"Temperature of the passing fluid","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"},{"name":"start","value":"T_start"}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_start","comment":"Initial or guess value of output (\u003d state)","value":"Medium.T_default","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"transferHeat","comment":"if true, temperature T converges towards TAmb when no flow","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Heat transfer\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TAmb","comment":"Fixed ambient temperature for heat transfer","value":"Medium.T_default","annotations":{"dialog":"Dialog(enable \u003d transferHeat, group \u003d \"Heat transfer\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tauHeaTra","comment":"Time constant for heat transfer, default 20 minutes","value":"1200","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(enable \u003d transferHeat, group \u003d \"Heat transfer\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the temperature of the medium in the flow\nbetween its fluid ports. The sensor does not influence the fluid.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output \u003ci\u003eT\u003c/i\u003e\nconverges to the temperature of the incoming fluid using\na first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003cp\u003e\nIf \u003ccode\u003etransferHeat \u003d true\u003c/code\u003e, then heat transfer with the ambient is\napproximated and \u003ci\u003eT\u003c/i\u003e converges towards the fixed ambient\ntemperature \u003ci\u003eT\u003csub\u003eAmb\u003c/sub\u003e\u003c/i\u003e using a first order approximation\nwith a time constant of \u003ccode\u003etauHeaTra\u003c/code\u003e.\nNote that no energy is exchanged with the fluid as the\nsensor does not influence the fluid temperature.\n\u003c/p\u003e\n\u003cp\u003e\nSetting \u003ccode\u003etransferHeat \u003d true\u003c/code\u003e is useful, for example,\nif the sensor is used to measure the fluid temperature in\na system with on/off control on the mass flow rate.\nIf \u003ccode\u003etransferHeat\u003c/code\u003e were \u003ccode\u003efalse\u003c/code\u003e, then the sensor output \u003ci\u003eT\u003c/i\u003e\nwould remain constant if the mass flow rate is set to zero, and hence\nthe controller may never switch the mass flow rate on again.\n\u003c/p\u003e\n\u003cp\u003e\nIn general, applications in which the sensor output is not used to switch\nthe mass flow rate on should set \u003ccode\u003etransferHeat\u003dfalse\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Ellipse(),Line(),Line(),Line(),Rectangle(),Polygon(),Text(),Line(),Line(),Line(),Line(),Polygon()})"}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionDoor":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.PartitionConstructions.PartitionDoor","comment":"Model of a partition door. Air is neglected","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"2"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a parition door. It is used in every test cell\n    as the door between the cell itself and the closet.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of a parition door. It is used in every test cell\n    as the door between the cell itself and the closet.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.Interfaces.FourPortHeatMassExchanger":{"name":"Buildings.Fluid.Interfaces.FourPortHeatMassExchanger","comment":"Model transporting two fluid streams between four ports with storing mass or energy","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialFourPortInterface","modifications":[{"name":"port_a1","modifications":[{"name":"h_outflow","modifications":[{"name":"start","value":"h1_outflow_start"}]}]},{"name":"port_b1","modifications":[{"name":"h_outflow","modifications":[{"name":"start","value":"h1_outflow_start"}]}]},{"name":"port_a2","modifications":[{"name":"h_outflow","modifications":[{"name":"start","value":"h2_outflow_start"}]}]},{"name":"port_b2","modifications":[{"name":"h_outflow","modifications":[{"name":"start","value":"h2_outflow_start"}]}]}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.FourPortFlowResistanceParameters","modifications":[{"name":"computeFlowResistance1","qualifiers":["final"],"value":"true"},{"name":"computeFlowResistance2","qualifiers":["final"],"value":"true"}]}],"components":[{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau1","comment":"Time constant at nominal flow","value":"30","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"tau2","comment":"Time constant at nominal flow","value":"30","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamics","comment":"Type of energy balance: dynamic (3 initialization options) or steady state","value":"Modelica.Fluid.Types.Dynamics.DynamicFreeInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"massDynamics","comment":"Type of mass balance: dynamic (3 initialization options) or steady state","value":"energyDynamics","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Medium1.AbsolutePressure","qualifiers":["parameter"],"name":"p1_start","comment":"Start value of pressure","value":"Medium1.p_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 1\")"}},{"className":"Medium1.Temperature","qualifiers":["parameter"],"name":"T1_start","comment":"Start value of temperature","value":"Medium1.T_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 1\")"}},{"className":"Medium1.MassFraction","qualifiers":["array","parameter"],"name":"X1_start","comment":"Start value of mass fractions m_i/m","value":"Medium1.X_default","arraySubscripts":"[Medium1.nX]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 1\", enable \u003d Medium1.nXi\u003e0)"}},{"className":"Medium1.ExtraProperty","qualifiers":["array","parameter"],"name":"C1_start","comment":"Start value of trace substances","value":"fill(0,Medium1.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium1.extraPropertiesNames"}],"arraySubscripts":"[Medium1.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 1\", enable \u003d Medium1.nC\u003e0)"}},{"className":"Medium1.ExtraProperty","qualifiers":["array","parameter"],"name":"C1_nominal","comment":"Nominal value of trace substances. (Set to typical order of magnitude.)","value":"fill(1E-2,Medium1.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium1.extraPropertiesNames"}],"arraySubscripts":"[Medium1.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 1\", enable \u003d Medium1.nC\u003e0)"}},{"className":"Medium2.AbsolutePressure","qualifiers":["parameter"],"name":"p2_start","comment":"Start value of pressure","value":"Medium2.p_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 2\")"}},{"className":"Medium2.Temperature","qualifiers":["parameter"],"name":"T2_start","comment":"Start value of temperature","value":"Medium2.T_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 2\")"}},{"className":"Medium2.MassFraction","qualifiers":["array","parameter"],"name":"X2_start","comment":"Start value of mass fractions m_i/m","value":"Medium2.X_default","arraySubscripts":"[Medium2.nX]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 2\", enable \u003d Medium2.nXi\u003e0)"}},{"className":"Medium2.ExtraProperty","qualifiers":["array","parameter"],"name":"C2_start","comment":"Start value of trace substances","value":"fill(0,Medium2.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium2.extraPropertiesNames"}],"arraySubscripts":"[Medium2.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 2\", enable \u003d Medium2.nC\u003e0)"}},{"className":"Medium2.ExtraProperty","qualifiers":["array","parameter"],"name":"C2_nominal","comment":"Nominal value of trace substances. (Set to typical order of magnitude.)","value":"fill(1E-2,Medium2.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium2.extraPropertiesNames"}],"arraySubscripts":"[Medium2.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", group \u003d \"Medium 2\", enable \u003d Medium2.nC\u003e0)"}},{"className":"Buildings.Fluid.MixingVolumes.MixingVolume","name":"vol1","comment":"Volume for fluid 1","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium1"},{"name":"nPorts","value":"2"},{"name":"V","value":"m1_flow_nominal*tau1/(rho1_nominal)"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal1"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m1_flow_nominal"},{"name":"energyDynamics","value":"if tau1\u003eModelica.Constants.eps then energyDynamics else Modelica.Fluid.Types.Dynamics.SteadyState"},{"name":"massDynamics","value":"if tau1\u003eModelica.Constants.eps then massDynamics else Modelica.Fluid.Types.Dynamics.SteadyState"},{"name":"p_start","qualifiers":["final"],"value":"p1_start"},{"name":"T_start","qualifiers":["final"],"value":"T1_start"},{"name":"X_start","qualifiers":["final"],"value":"X1_start"},{"name":"C_start","qualifiers":["final"],"value":"C1_start"},{"name":"C_nominal","qualifiers":["final"],"value":"C1_nominal"},{"name":"mSenFac","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,70},{10,50}}))"}},{"className":"Buildings.Fluid.MixingVolumes.MixingVolume","qualifiers":["replaceable"],"name":"vol2","constrainingClause":" constrainedby Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume (final redeclare package Medium \u003d Medium2, nPorts \u003d 2, V \u003d m2_flow_nominal*tau2/(rho2_nominal), final allowFlowReversal \u003d allowFlowReversal2, mSenFac \u003d 1, final m_flow_nominal \u003d m2_flow_nominal, energyDynamics \u003d if tau2\u003eModelica.Constants.eps then energyDynamics else Modelica.Fluid.Types.Dynamics.SteadyState, massDynamics \u003d if tau2\u003eModelica.Constants.eps then massDynamics else Modelica.Fluid.Types.Dynamics.SteadyState, final p_start \u003d p2_start, final T_start \u003d T2_start, final X_start \u003d X2_start, final C_start \u003d C2_start, final C_nominal \u003d C2_nominal)"},{"className":"Modelica.SIunits.HeatFlowRate","name":"Q1_flow","comment":"Heat flow rate into medium 1","value":"vol1.heatPort.Q_flow"},{"className":"Modelica.SIunits.HeatFlowRate","name":"Q2_flow","comment":"Heat flow rate into medium 2","value":"vol2.heatPort.Q_flow"},{"className":"Buildings.Fluid.FixedResistances.FixedResistanceDpM","name":"preDro1","comment":"Pressure drop model for fluid 1","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium1"},{"name":"use_dh","qualifiers":["final"],"value":"false"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m1_flow_nominal"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM1"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal1"},{"name":"show_T","qualifiers":["final"],"value":"false"},{"name":"from_dp","qualifiers":["final"],"value":"from_dp1"},{"name":"linearized","qualifiers":["final"],"value":"linearizeFlowResistance1"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"},{"name":"dp_nominal","qualifiers":["final"],"value":"dp1_nominal"},{"name":"dh","qualifiers":["final"],"value":"1"},{"name":"ReC","qualifiers":["final"],"value":"4000"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-80,70},{-60,90}}))"}},{"className":"Buildings.Fluid.FixedResistances.FixedResistanceDpM","name":"preDro2","comment":"Pressure drop model for fluid 2","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium2"},{"name":"use_dh","qualifiers":["final"],"value":"false"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"m2_flow_nominal"},{"name":"deltaM","qualifiers":["final"],"value":"deltaM2"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal2"},{"name":"show_T","qualifiers":["final"],"value":"false"},{"name":"from_dp","qualifiers":["final"],"value":"from_dp2"},{"name":"linearized","qualifiers":["final"],"value":"linearizeFlowResistance2"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"},{"name":"dp_nominal","qualifiers":["final"],"value":"dp2_nominal"},{"name":"dh","qualifiers":["final"],"value":"1"},{"name":"ReC","qualifiers":["final"],"value":"4000"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{80,-90},{60,-70}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis component transports two fluid streams between four ports.\nIt provides the basic model for implementing a dynamic heat exchanger.\n\u003c/p\u003e\n\u003cp\u003e\nThe model can be used as-is, although there will be no heat or mass transfer\nbetween the two fluid streams.\nTo add heat transfer, heat flow can be added to the heat port of the two volumes.\nSee for example\n\u003ca href\u003d\\\"Buildings.Fluid.Chillers.Carnot_y\\\"\u003e\nBuildings.Fluid.Chillers.Carnot_y\u003c/a\u003e.\nTo add moisture input into (or moisture output from) volume \u003ccode\u003evol2\u003c/code\u003e,\nthe model can be replaced as shown in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.BaseClasses.HexElement\\\"\u003e\nBuildings.Fluid.HeatExchangers.BaseClasses.HexElement\u003c/a\u003e.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nThe variable names follow the conventions used in\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.HeatExchangers.BasicHX\\\"\u003e\nModelica.Fluid.HeatExchangers.BasicHX\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Controls.DemandResponse.Client":{"name":"Buildings.Controls.DemandResponse.Client","comment":"Demand response client","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.BlockIcon"}],"components":[{"className":"Modelica.SIunits.Time","qualifiers":["final","parameter"],"name":"tPeriod","comment":"Period, generally one day","value":"24*3600"},{"className":"Modelica.SIunits.Time","qualifiers":["final","parameter"],"name":"tSample","comment":"Sample period, generally 900 or 3600 seconds","value":"tPeriod/(nSam)"},{"className":"Integer","qualifiers":["parameter"],"name":"nSam","comment":"Number of samples in a day. For 1 hour sampling, set to 24"},{"className":"Integer","qualifiers":["parameter"],"name":"nPre","comment":"Number of intervals for which future load need to be predicted (set to one to only predict current time, or to nSam to predict one day)","value":"1","modifications":[{"name":"min","value":"1"}]},{"className":"Integer","qualifiers":["parameter"],"name":"nHis","comment":"Number of history terms to be stored for baseline computation","value":"10","modifications":[{"name":"min","value":"1"}]},{"className":"Buildings.Controls.Predictors.Types.PredictionModel","qualifiers":["parameter"],"name":"predictionModel","comment":"Load prediction model","value":"Buildings.Controls.Predictors.Types.PredictionModel.WeatherRegression"},{"className":"Buildings.Controls.Interfaces.DayTypeInput","qualifiers":["array"],"name":"typeOfDay","comment":"Type of day for the current and the future days for which a prediction is to be made.\n    Typically, this has dimension 2 for predictions up to and including 24 hours, and 2+n for any additional day","arraySubscripts":"[integer((nPre-1)/(nSam))+2]","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,90},{-100,70}}), iconTransformation(extent \u003d {{-120,90},{-100,70}}))"}},{"className":"Modelica.Blocks.Interfaces.BooleanInput","name":"isEventDay","comment":"If true, this day remains an event day until midnight","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,50},{-100,30}}), iconTransformation(extent \u003d {{-120,50},{-100,30}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"ECon","comment":"Consumed electrical power","modifications":[{"name":"unit","value":"\"J\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}), iconTransformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.Blocks.Interfaces.BooleanInput","name":"shed","comment":"Signal, true if load needs to be shed at the current time","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-40},{-100,-20}}), iconTransformation(extent \u003d {{-120,-40},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"yShed","comment":"Amount of load to shed. Set to 0.5 to shed 50% of load","modifications":[{"name":"min","value":"-1"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-60},{-100,-40}}), iconTransformation(extent \u003d {{-120,-60},{-100,-40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TOut","comment":"Outside air temperature","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"conditionalClause":" if predictionModel\u003d\u003dBuildings.Controls.Predictors.Types.PredictionModel.WeatherRegression","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-80},{-100,-60}}), iconTransformation(extent \u003d {{-120,-80},{-100,-60}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"TOutFut","comment":"Future outside air temperatures","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"K\""}],"arraySubscripts":"[nPre-1]","conditionalClause":" if predictionModel\u003d\u003dBuildings.Controls.Predictors.Types.PredictionModel.WeatherRegression","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-100},{-100,-80}}), iconTransformation(extent \u003d {{-120,-100},{-100,-80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"PPre","comment":"Predicted power consumption for the current time interval, taking into account yShed","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"PPreNoShe","comment":"Predicted power consumption for the current and future time intervals, not taking into account yShed","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"W\""}],"arraySubscripts":"[nPre]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,40},{120,60}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel for a data-driven demand response client that predicts the future load and\nallows to apply a load shedding factor.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as a parameter the number of samples in a day, which is generally\n\u003ci\u003e24\u003c/i\u003e for one hour sampling or \u003ci\u003e96\u003c/i\u003e for \u003ci\u003e15\u003c/i\u003e minute sampling.\nInput to the model are the consumed energy up to the current time instant,\nthe current temperature,\nthe type of the day, which may be a working day, non-working day or holiday\nas defined in\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Types.Day\\\"\u003e\nBuildings.Controls.Types.Day\u003c/a\u003e,\na boolean signal that indicates whether it is an event day,\nand a signal that if \u003ccode\u003etrue\u003c/code\u003e, causes the load to be shed.\nThe input signal \u003ccode\u003eyShed\u003c/code\u003e determines how much of the load\nwill be shed if \u003ccode\u003eshed\u003dtrue\u003c/code\u003e. If \u003ccode\u003eshed\u003dfalse\u003c/code\u003e, then\nthis signal is ignored.\n\u003c/p\u003e\n\u003cp\u003e\nOutput of the model is the prediction of the power that will be consumed\nin the current sampling interval, i.e., generally in the next 1 hour or the\nnext 15 minutes.\nIf the parameter \u003ccode\u003enPre \u0026gt; 1\u003c/code\u003e, then the prediction is done\nfor multiple time intervals. All of these predictions can be obtained from\nthe output \u003ccode\u003ePPreNoShe\u003c/code\u003e. This output does not take into account\n\u003ccode\u003eyShed\u003c/code\u003e.\nThe output \u003ccode\u003ePPre\u003c/code\u003e is\n\u003ccode\u003ePPre \u003d yShed * PPreNoShe[1]\u003c/code\u003e if \u003ccode\u003eshed\u003dtrue\u003c/code\u003e,\notherwise it is\n\u003ccode\u003ePPre \u003d PPreNoShe[1]\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe baseline prediction is computed in\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Predictors.ElectricalLoad\\\"\u003e\nBuildings.Controls.Predictors.ElectricalLoad\u003c/a\u003e.\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Line":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.Line","comment":"Model of an electrical line without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort"},{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialBaseLine","modifications":[{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]},{"name":"commercialCable","value":"Buildings.Electrical.Transmission.Functions.selectCable_low(P_nominal,V_nominal)"}]}],"components":[{"className":"OnePhase.Lines.TwoPortRL","name":"phase1","comment":"Impedance line 1","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"modelMode"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase2","comment":"Impedance line 2","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"modelMode"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortRL","name":"phase3","comment":"Impedance line 3","modifications":[{"name":"useHeatPort","qualifiers":["final"],"value":"true"},{"name":"T_ref","qualifiers":["final"],"value":"T_ref"},{"name":"M","qualifiers":["final"],"value":"M"},{"name":"R","qualifiers":["final"],"value":"R/(3)"},{"name":"L","qualifiers":["final"],"value":"L/(3)"},{"name":"mode","qualifiers":["final"],"value":"modelMode"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents an AC three-phase unbalanced cable without\nneutral connection. The model is based on\n\u003ca href\u003d\\\"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortRLC\u003c/a\u003e\nand provides functionalities to parametrize the values of \u003ci\u003eR\u003c/i\u003e, \u003ci\u003eL\u003c/i\u003e and \u003ci\u003eC\u003c/i\u003e\nusing either commercial cables or default values.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Rectangle(),Ellipse(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phasePowers_vi":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phasePowers_vi","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq.phasePowers_vi"}]},"Buildings.Fluid.FMI.Source_T":{"name":"Buildings.Fluid.FMI.Source_T","comment":"FMI model for a boundary with mass flow rate, pressure and temperature as an input","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.BaseClasses.BaseIcon"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"m_flow_in","comment":"Prescribed mass flow source","modifications":[{"name":"unit","value":"\"kg/s\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,80},{-100,120}}), iconTransformation(extent \u003d {{-140,80},{-100,120}}))"}},{"className":"Buildings.Fluid.FMI.Interfaces.PressureInput","name":"p_in","comment":"Prescribed boundary pressure","conditionalClause":" if use_p_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,28},{-100,68}}), iconTransformation(extent \u003d {{-140,28},{-100,68}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T_in","comment":"Prescribed boundary temperature","modifications":[{"name":"unit","value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"X_w_in","comment":"Prescribed boundary composition","modifications":[{"name":"unit","value":"\"1\""}],"conditionalClause":" if Medium.nXi\u003e0","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-70},{-100,-30}}), iconTransformation(extent \u003d {{-140,-70},{-100,-30}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_in","comment":"Prescribed boundary composition","arraySubscripts":"[Medium.nC]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-120},{-100,-80}}), iconTransformation(extent \u003d {{-140,-120},{-100,-80}}))"}},{"className":"Interfaces.Outlet","name":"outlet","comment":"Fluid port","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final"],"value":"use_p_in"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"classes":[{"name":"Buildings.Fluid.FMI.Source_T.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a source that takes as an input the mass flow rate,\npressure and the medium properties\ntemperature, mass fractions (if \u003ccode\u003eMedium.nXi \u0026gt; 0\u003c/code\u003e)\nand trace substances (if \u003ccode\u003eMedium.nC \u0026gt; 0\u003c/code\u003e).\n\u003c/p\u003e\n\u003cp\u003e\nFor a system of components with the connectors of the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI\\\"\u003e\nBuildings.Fluid.FMI\u003c/a\u003e\npackage, this component is required to set the pressure\nand the mass flow rate of the system.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl120":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.PvcAl120","comment":"Aluminum cable 120mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"RCha","value":"0.269e-003"},{"name":"XCha","value":"0.071e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAluminium cable with a cross-sectional area of 120mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.269e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.071e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.Solids.Generic":{"name":"Buildings.HeatTransfer.Data.Solids.Generic","comment":"Thermal properties of solids with heat storage","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.BaseClasses.Material","modifications":[{"name":"R","qualifiers":["final"],"value":"x/(k)"},{"name":"TSol","qualifiers":["final"],"value":"293.15"},{"name":"TLiq","qualifiers":["final"],"value":"293.15"},{"name":"LHea","qualifiers":["final"],"value":"0"},{"name":"phasechange","qualifiers":["final"],"value":"false"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nGeneric record for solid materials.\nThe material is characterized by its\nthermal conductivity, mass density and specific\nheat capacity.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.Cu10":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Cu10","comment":"Cu cable 10 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Cu"},{"name":"M","value":"234.5+273.15"},{"name":"Amp","value":"65"},{"name":"RCha","value":"1.81e-003"},{"name":"XCha","value":"0.076e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCopper cable with a cross-sectional area of 10mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 1.810-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.076e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.GeneralizedSensor":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.GeneralizedSensor","comment":"Sensor for power, voltage and current (3 wire system, no neutral cable)","qualifiers":["model"],"components":[{"className":"Interfaces.Terminal_n","name":"terminal_n","comment":"Electrical connector side N","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Interfaces.Terminal_p","name":"terminal_p","comment":"Electrical connector side P","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"V","comment":"Voltage","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"ElectricPotential\""},{"name":"unit","qualifiers":["final","each"],"value":"\"V\""}],"arraySubscripts":"[3]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {10,-40}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"I","comment":"Current","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"ElectricCurrent\""},{"name":"unit","qualifiers":["final","each"],"value":"\"A\""}],"arraySubscripts":"[3]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {70,-40}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"S","comment":"Phase powers","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"Power\""},{"name":"unit","qualifiers":["final","each"],"value":"\"W\""}],"arraySubscripts":"[3,terminal_n.phase[1].PhaseSystem.n]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-50,-40}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-90}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIdeal sensor that measures power, voltage and current in a three-phase unbalanced system\nwithout a neutral cable.\nThe two components of the power \u003ci\u003eS\u003c/i\u003e are the active and reactive power for each phase.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Ellipse(),Line(),Text(),Polygon(),Line(),Line(),Line(),Line(),Line(),Line(),Ellipse(),Line(),Text(),Text(),Text()})"}},"Buildings.Utilities.Math.IntegerReplicator":{"name":"Buildings.Utilities.Math.IntegerReplicator","comment":"Integer signal replicator","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.IntegerBlock"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nout","comment":"Number of outputs","value":"1"},{"className":"Modelica.Blocks.Interfaces.IntegerInput","name":"u","comment":"Connector of integer input signal","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.IntegerOutput","qualifiers":["array"],"name":"y","comment":"Connector of integer output signals","arraySubscripts":"[nout]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block replicates the integer input signal to an array of \u003ccode\u003enout\u003c/code\u003e identical output signals.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Line(),Line(),Line(),Line(),Ellipse()})"}},"Buildings.Utilities.Math.Functions.spliceFunction":{"name":"Buildings.Utilities.Math.Functions.spliceFunction","components":[{"className":"Real","qualifiers":["input"],"name":"pos","comment":"Argument of x \u003e 0"},{"className":"Real","qualifiers":["input"],"name":"neg","comment":"Argument of x \u003c 0"},{"className":"Real","qualifiers":["input"],"name":"x","comment":"Independent value"},{"className":"Real","qualifiers":["input"],"name":"deltax","comment":"Half width of transition interval"},{"className":"Real","qualifiers":["output"],"name":"out","comment":"Smoothed value"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction to provide a once continuously differentiable transition between\nto arguments.\n\u003c/p\u003e\u003cp\u003e\nThe function is adapted from\n\u003ca href\u003d\\\"modelica://Modelica.Media.Air.MoistAir.Utilities.spliceFunction\\\"\u003e\nModelica.Media.Air.MoistAir.Utilities.spliceFunction\u003c/a\u003e and provided here\nfor easier accessability to model developers.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.TestCellDividngWall","comment":"Wall separating test cells within a test bed","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.GypsumBoard(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","value":"7"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a dividing wall used to separate test cells within a given\n    test bed. For example, it is installed between test cells X3A and\n    X3B.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a dividing wall used to separate test cells within a given\n    test bed. For example, it is installed between test cells X3A and\n    X3B.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Controls.SetPoints.HotWaterTemperatureReset":{"name":"Buildings.Controls.SetPoints.HotWaterTemperatureReset","comment":"Block to compute the supply and return set point of heating systems","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"m","comment":"Exponent for heat transfer","value":"1.3"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TSup_nominal","comment":"Supply temperature","annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TRet_nominal","comment":"Return temperature","annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TRoo_nominal","comment":"Room temperature","value":"293.15","annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TOut_nominal","comment":"Outside temperature","annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_TRoo_in","comment":"Get the room temperature set point from the input connector","value":"false"},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TRoo","comment":"Fixed value of room temperature set point","value":"293.15","annotations":{"dialog":"Dialog(enable \u003d not use_TRoo_in)"}},{"className":"Modelica.SIunits.TemperatureDifference","qualifiers":["parameter"],"name":"dTOutHeaBal","comment":"Offset for heating curve","value":"8","modifications":[{"name":"displayUnit","value":"\"K\""}]},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TRoo_in","comment":"Room air temperature set point","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"conditionalClause":" if use_TRoo_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-139,-80},{-99,-40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TOut","comment":"Outside temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,40},{-100,80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"TSup","comment":"Setpoint for supply temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"TRet","comment":"Setpoint for return temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-70},{120,-50}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block computes the set point temperatures for the\nsupply and return temperature of a heating system.\nThe set point for the room air temperature can either be specified\nby a parameter, or it can be an input to the model. The latter allows\nto use this model with systems that have night set back.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003edTOutHeaBal\u003c/code\u003e can be used to shift the heating curve\nto take into account that heat gains from solar, equipment and people\nmake up for some of the transmission losses.\nFor example, in energy efficient houses, the heating may not be switched on if\nthe outside air temperature is greater than\n\u003ci\u003e12\u003c/i\u003e\u0026deg;C, even if a room temperature of \u003ci\u003e20\u003c/i\u003e\u0026deg;C is required.\nIn such a situation, set \u003ccode\u003edTOutHeaBal\u003d20-12\u003d8\u003c/code\u003e Kelvin to\nshift the heating curve.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Line(),Line(),Polygon(),Line(),Line(),Line(),Text(),Text(),Text(),Text()})"}},"Buildings.UsersGuide.Contact":{"name":"Buildings.UsersGuide.Contact","comment":"Contact","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Contact"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003ch4\u003e\u003cfont color\u003d\\\"#008000\\\" size\u003d\\\"5\\\"\u003eContact\u003c/font\u003e\u003c/h4\u003e\n\u003cp\u003e\nThe development of the Buildings library is organized by\u003cbr/\u003e\n\u003ca href\u003d\\\"http://simulationresearch.lbl.gov/wetter\\\"\u003eMichael Wetter\u003c/a\u003e\u003cbr/\u003e\n    Lawrence Berkeley National Laboratory (LBNL)\u003cbr/\u003e\n    One Cyclotron Road\u003cbr/\u003e\n    Bldg. 90-3147\u003cbr/\u003e\n    Berkeley, CA 94720\u003cbr/\u003e\n    USA\u003cbr/\u003e\n    email: \u003ca href\u003d\\\"mailto:MWetter@lbl.gov\\\"\u003eMWetter@lbl.gov\u003c/a\u003e\u003cbr/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.Functions.X_pW":{"name":"Buildings.Utilities.Psychrometrics.Functions.X_pW","comment":"Humidity ratio for given water vapor pressure","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p_w","comment":"Water vapor pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"0.003"},{"name":"nominal","value":"1000"}]},{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p","comment":"Total pressure","value":"101325"},{"className":"Modelica.SIunits.MassFraction","qualifiers":["output"],"name":"X_w","comment":"Species concentration at dry bulb temperature","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"nominal","value":"0.01"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction to compute the humidity ratio for a given water vapor partial pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort_N","comment":"Partial model interface for a two port component with neutral cable","qualifiers":["model","partial"],"components":[{"className":"Terminal4_p","name":"terminal_p","comment":"Electric terminal side p","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}},{"className":"Terminal4_n","name":"terminal_n","comment":"Electric terminal side n","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nInterface model for an AC three-phase unbalanced component with two ports\nand with neutral cable.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.DirectCurrent.rotate":{"name":"Buildings.Electrical.PhaseSystems.DirectCurrent.rotate","comment":"Rotate a vector of an angle theta (anti-counterclock)","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.DirectCurrent.rotate"}]},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.rotate":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.rotate","comment":"Rotate a vector of an angle theta (anti-counterclock)","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.rotate"}]},"Buildings.Electrical.PhaseSystems.OnePhase.phaseVoltages":{"name":"Buildings.Electrical.PhaseSystems.OnePhase.phaseVoltages","comment":"Return phase to neutral voltages","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase.phaseVoltages"}]},"Buildings.Media.Air.density_derp_T":{"name":"Buildings.Media.Air.density_derp_T","comment":"Return the partial derivative of density with respect to pressure at constant temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.density_derp_T"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the partial derivative of density\nwith respect to pressure at constant temperature.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Rooms.X3B.Electrical":{"name":"Buildings.Rooms.FLEXLAB.Rooms.X3B.Electrical","comment":"Model of the electrical room attached to test cell X3A","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.MixedAir","modifications":[{"name":"hRoo","value":"3.6576"},{"name":"AFlo","value":"2.39"},{"name":"lat","value":"0.66098585832754"},{"name":"nSurBou","value":"2"},{"name":"nConExt","value":"4"},{"name":"nConExtWin","value":"0"},{"name":"nConPar","value":"0"},{"name":"nConBou","value":"1"},{"name":"surBou","modifications":[{"name":"A","value":"{3.6576*1.2641,3.6576*1.524}"},{"name":"absIR","qualifiers":["each"],"value":"0.9"},{"name":"absSol","qualifiers":["each"],"value":"0.9"},{"name":"til","qualifiers":["each"],"value":"Buildings.Types.Tilt.Wall"}]},{"name":"datConExt","modifications":[{"name":"layers","value":"{eleExt,eleExt,extDooUn,roo}"},{"name":"A","value":"{3.6576*1.26413,3.6576*1.524-2.38658*1.524,2.38658*1.524,2.39}"},{"name":"til","value":"{Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Wall,Buildings.Types.Tilt.Ceiling}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N,Buildings.Types.Azimuth.E,Buildings.Types.Azimuth.E,Buildings.Types.Azimuth.N}"}]},{"name":"datConBou","modifications":[{"name":"layers","value":"{slaCon}"},{"name":"A","value":"{2.39}"},{"name":"til","value":"{Buildings.Types.Tilt.Floor}"},{"name":"azi","value":"{Buildings.Types.Azimuth.N}"}]}]}],"components":[{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.Construction3","qualifiers":["replaceable"],"name":"eleExt","comment":"Construction describing the exterior walls in the electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-210},{450,-190}}))"}},{"className":"Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorUninsulated","qualifiers":["replaceable"],"name":"extDooUn","comment":"Construction describing the door in the electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-178},{450,-158}}))"}},{"className":"Data.Constructions.OpaqueConstructions.Roofs.ASHRAE_901_2010Roof","qualifiers":["replaceable"],"name":"roo","comment":"Construction describing the roof of the electrical room","annotations":{"placement":"Placement(transformation(extent \u003d {{430,-148},{450,-128}}))"}},{"className":"HeatTransfer.Data.OpaqueConstructions.Generic","name":"slaCon","comment":"Construction of the slab","modifications":[{"name":"nLay","value":"3"},{"name":"material","value":"{Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic(),Buildings.HeatTransfer.Data.Solids.Generic()}"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{428,-118},{448,-98}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003e\n  This is a model for the electrical room connected to test cell 3B in the LBNL User Facility.\n  Other models are provided for the main space of the test cell and the connected closet. This\n  documentation describes the wall constructions used in the electrical room model. For\n  documentation describing how the room models are to be connected to develop a model of the\n  entire X3B test cell see\n  \u003ca href\u003d\\\"modelica://Buildings.Rooms.FLEXLAB.Rooms.X3B\\\"\u003e\n  Buildings.Rooms.FLEXLAB.Rooms.X3B\u003c/a\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  There are 4 different wall sections described in the model. They are shown in the figure below.\n  \u003c/p\u003e\n  \u003cp align\u003d\\\"center\\\"\u003e\n  \u003cimg src\u003d\\\"modelica://Buildings/Resources/Images/Rooms/FLEXLAB/Rooms/X3B/Electrical.png\\\" border\u003d\\\"1\\\" alt\u003d\\\"Wall sections in TestCell model\\\"/\u003e\n  \u003c/p\u003e\n  \u003cp\u003e\n  The different wall sections are entered into the model according to the following table.\n  \u003c/p\u003e\n  \u003ctable border\u003d\\\"1\\\" summary\u003d\\\"Description of wall sections in Electrical\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eWall Section Number\u003c/th\u003e\n  \u003cth\u003eDescription\u003c/th\u003e\n  \u003cth\u003eLocation in Model\u003c/th\u003e\n  \u003cth\u003eCorresponding Layer\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e1\u003c/td\u003e\n  \u003ctd\u003eSouth air space connecting to TestCell\u003c/td\u003e\n  \u003ctd\u003esurBou[1]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e2\u003c/td\u003e\n  \u003ctd\u003eWest air space connecting to Closet\u003c/td\u003e\n  \u003ctd\u003esurBou[2]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e3\u003c/td\u003e\n  \u003ctd\u003eNorth exterior wall\u003c/td\u003e\n  \u003ctd\u003edatConExt[1]\u003c/td\u003e\n  \u003ctd\u003eeleExt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003e4\u003c/td\u003e\n  \u003ctd\u003eEast exterior door and wall\u003c/td\u003e\n  \u003ctd\u003e  Wall: datConExt[2]\u003cbr/\u003e\n  Door: datConExt[3]\u003c/td\u003e\n  \u003ctd\u003e  Wall: eleExt\u003cbr/\u003e\n  Door: extDooUn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003cp\u003e\n  There are two additional surfaces which are not included in the diagram. One is the model of the roof. It is\n  modeled in datConExt[4] using the layer \u003ccode\u003eroo\u003c/code\u003e. The other is the floor, which is modeled in\n  datConBou[1] using the layer \u003ccode\u003eslaCon\u003c/code\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n  Several of the connections in this model are intended to be connected to specific surfaces in other room models.\n  The following table describes the connections to rooms which are not in the X3B package. The constructions in\n  datConExt are not described in the table because they are connected to the external environment, and no\n  additional heat port connections are necessary. A rationale for why the model is created this way is also\n  provided if it is considered necessary.\n  \u003c/p\u003e\n  \u003ctable border \u003d\\\"1\\\" summary \u003d \\\"Description of intended connections including Electrical model\\\"\u003e\n  \u003ctr\u003e\n  \u003cth\u003eLocation in Electrical\u003c/th\u003e\n  \u003cth\u003eDescription of External Connection\u003c/th\u003e\n  \u003cth\u003eRationale\u003c/th\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n  \u003ctd\u003esurf_conBou[1]\u003c/td\u003e\n  \u003ctd\u003eConnection to ground temperature model\u003c/td\u003e\n  \u003ctd\u003eThis port represents the bottom of the floor in the space. It is to be connected to a heat port representing\n  the temperature of the ground.\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Bitmap(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Text(),Text(),Text(),Text()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.Cu20":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Cu20","comment":"Cu cable 20 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Cu"},{"name":"M","value":"234.5+273.15"},{"name":"Amp","value":"95"},{"name":"RCha","value":"0.905e-003"},{"name":"XCha","value":"0.075e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCopper cable with a cross-sectional area of 20mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.905e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.075e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Interfaces.ConservationEquation":{"name":"Buildings.Fluid.Interfaces.ConservationEquation","comment":"Lumped volume with mass and energy balance","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations"}],"components":[{"className":"Boolean","qualifiers":["constant"],"name":"initialize_p","comment":"\u003d true to set up initial equations for pressure","value":"not Medium.singleState"},{"className":"Boolean","qualifiers":["constant"],"name":"simplify_mWat_flow","comment":"Set to true to cause port_a.m_flow + port_b.m_flow \u003d 0 even if mWat_flow is non-zero","value":"true"},{"className":"Integer","qualifiers":["parameter"],"name":"nPorts","comment":"Number of ports","value":"0","annotations":{"dialog":"Dialog(connectorSizing \u003d true, tab \u003d \"General\", group \u003d \"Ports\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_mWat_flow","comment":"Set to true to enable input connector for moisture mass flow rate","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_C_flow","comment":"Set to true to enable input connector for trace substance","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Q_flow","comment":"Sensible plus latent heat flow rate transferred into the medium","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,40},{-100,80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"mWat_flow","comment":"Moisture mass flow rate added to the medium","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"MassFlowRate\""},{"name":"unit","value":"\"kg/s\""}],"conditionalClause":" if use_mWat_flow","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,0},{-100,40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_flow","comment":"Trace substance mass flow rate added to the medium","arraySubscripts":"[Medium.nC]","conditionalClause":" if use_C_flow","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"hOut","comment":"Leaving specific enthalpy of the component","modifications":[{"name":"unit","value":"\"J/kg\""},{"name":"start","value":"hStart"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {-50,110}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"XiOut","comment":"Leaving species concentration of the component","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"1\""},{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[Medium.nXi]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,110}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"COut","comment":"Leaving trace substances of the component","modifications":[{"name":"min","qualifiers":["each"],"value":"0"}],"arraySubscripts":"[Medium.nC]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {50,110}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"UOut","comment":"Internal energy of the component","modifications":[{"name":"unit","value":"\"J\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 0, origin \u003d {110,20}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"mXiOut","comment":"Species mass of the component","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"unit","qualifiers":["each"],"value":"\"kg\""}],"arraySubscripts":"[Medium.nXi]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 0, origin \u003d {110,-20}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"mOut","comment":"Mass of the component","modifications":[{"name":"min","value":"0"},{"name":"unit","value":"\"kg\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 0, origin \u003d {110,60}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"mCOut","comment":"Trace substance mass of the component","modifications":[{"name":"min","qualifiers":["each"],"value":"0"},{"name":"unit","qualifiers":["each"],"value":"\"kg\""}],"arraySubscripts":"[Medium.nC]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 0, origin \u003d {110,-60}))"}},{"className":"Modelica.Fluid.Vessels.BaseClasses.VesselFluidPorts_b","qualifiers":["array"],"name":"ports","comment":"Fluid inlets and outlets","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final","each"],"value":"Medium"}],"arraySubscripts":"[nPorts]","annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-10},{40,10}}, origin \u003d {0,-100}))"}},{"className":"Medium.BaseProperties","name":"medium","comment":"Medium properties","modifications":[{"name":"p","modifications":[{"name":"start","value":"p_start"}]},{"name":"h","modifications":[{"name":"start","value":"hStart"}]},{"name":"T","modifications":[{"name":"start","value":"T_start"}]},{"name":"Xi","modifications":[{"name":"start","value":"X_start[1:Medium.nXi]"}]},{"name":"X","modifications":[{"name":"start","value":"X_start"}]},{"name":"d","modifications":[{"name":"start","value":"rho_start"}]}]},{"className":"Modelica.SIunits.Energy","name":"U","comment":"Internal energy of fluid","modifications":[{"name":"start","value":"fluidVolume*rho_start*Medium.specificInternalEnergy(Medium.setState_pTX())+(T_start-Medium.reference_T)*CSen"}]},{"className":"Modelica.SIunits.Mass","name":"m","comment":"Mass of fluid"},{"className":"Modelica.SIunits.Mass","qualifiers":["array"],"name":"mXi","comment":"Masses of independent components in the fluid","arraySubscripts":"[Medium.nXi]"},{"className":"Modelica.SIunits.Mass","qualifiers":["array"],"name":"mC","comment":"Masses of trace substances in the fluid","arraySubscripts":"[Medium.nC]"},{"className":"Medium.ExtraProperty","qualifiers":["array"],"name":"C","comment":"Trace substance mixture content","modifications":[{"name":"nominal","value":"C_nominal"}],"arraySubscripts":"[Medium.nC]"},{"className":"Modelica.SIunits.MassFlowRate","name":"mb_flow","comment":"Mass flows across boundaries"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["array"],"name":"mbXi_flow","comment":"Substance mass flows across boundaries","arraySubscripts":"[Medium.nXi]"},{"className":"Medium.ExtraPropertyFlowRate","qualifiers":["array"],"name":"mbC_flow","comment":"Trace substance mass flows across boundaries","arraySubscripts":"[Medium.nC]"},{"className":"Modelica.SIunits.EnthalpyFlowRate","name":"Hb_flow","comment":"Enthalpy flow across boundaries or energy source/sink"},{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"fluidVolume","comment":"Volume"},{"className":"Modelica.SIunits.HeatCapacity","qualifiers":["final","parameter"],"name":"CSen","comment":"Aditional heat capacity for implementing mFactor","value":"(mSenFac-1)*rho_default*cp_default*fluidVolume"}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBasic model for an ideally mixed fluid volume with the ability to store mass and energy.\nIt implements a dynamic or a steady-state conservation equation for energy and mass fractions.\nThe model has zero pressure drop between its ports.\n\u003c/p\u003e\n\u003cp\u003e\nIf the constant \u003ccode\u003esimplify_mWat_flow \u003d true\u003c/code\u003e then adding\nmoisture does not increase the mass of the volume or the leaving mass flow rate.\nIt does however change the mass fraction \u003ccode\u003emedium.Xi\u003c/code\u003e.\nThis allows to decouple the moisture balance from the pressure drop equations.\nIf \u003ccode\u003esimplify_mWat_flow \u003d false\u003c/code\u003e, then\nthe outlet mass flow rate is\n\u003ci\u003em\u003csub\u003eout\u003c/sub\u003e \u003d m\u003csub\u003ein\u003c/sub\u003e  (1 + \u0026Delta; X\u003csub\u003ew\u003c/sub\u003e)\u003c/i\u003e,\nwhere \n\u003ci\u003e\u0026Delta; X\u003csub\u003ew\u003c/sub\u003e\u003c/i\u003e is the change in water vapor mass\nfraction across the component. In this case,\nthis component couples\nthe energy calculation to the\npressure drop versus mass flow rate calculations.\nHowever, in typical building HVAC systems,\n\u003ci\u003e\u0026Delta; X\u003csub\u003ew\u003c/sub\u003e\u003c/i\u003e \u0026lt; \u003ci\u003e0.005\u003c/i\u003e kg/kg.\nHence, by tolerating a relative error of \u003ci\u003e0.005\u003c/i\u003e in the mass balance,\none can decouple these equations.\nDecoupling these equations avoids having\nto compute the energy balance of the humidifier\nand its upstream components when solving for the\npressure drop of downstream components.\nTherefore, the default value is \u003ccode\u003esimplify_mWat_flow \u003d true\u003c/code\u003e.\n\u003c/p\u003e\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nSet the parameter \u003ccode\u003euse_mWat_flow_in\u003dtrue\u003c/code\u003e to enable an\ninput connector for \u003ccode\u003emWat_flow\u003c/code\u003e.\nOtherwise, the model uses \u003ccode\u003emWat_flow \u003d 0\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIf the constant \u003ccode\u003esimplify_mWat_flow \u003d true\u003c/code\u003e, which is its default value,\nthen the equation\n\u003c/p\u003e\n\u003cpre\u003e\n  port_a.m_flow + port_b.m_flow \u003d - mWat_flow;\n\u003c/pre\u003e\n\u003cp\u003e\nis simplified as\n\u003c/p\u003e\n\u003cpre\u003e\n  port_a.m_flow + port_b.m_flow \u003d 0;\n\u003c/pre\u003e\n\u003cp\u003e\nThis causes an error in the mass balance of about \u003ci\u003e0.5%\u003c/i\u003e, but generally leads to\nsimpler equations because the pressure drop equations are then decoupled from the\nmass exchange in this component.\n\u003c/p\u003e\n\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nWhen extending or instantiating this model, the input\n\u003ccode\u003efluidVolume\u003c/code\u003e, which is the actual volume occupied by the fluid,\nneeds to be assigned.\nFor most components, this can be set to a parameter.\n\u003c/p\u003e\nInput connectors of the model are\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eQ_flow\u003c/code\u003e, which is the sensible plus latent heat flow rate added to the medium,\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emWat_flow\u003c/code\u003e, which is the moisture mass flow rate added to the medium, and\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eC_flow\u003c/code\u003e, which is the trace substance mass flow rate added to the medium.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nThe model can be used as a dynamic model or as a steady-state model.\nHowever, for a steady-state model with exactly two fluid ports connected,\nthe model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation\\\"\u003e\nBuildings.Fluid.Interfaces.StaticTwoPortConservationEquation\u003c/a\u003e\nprovides a more efficient implementation.\n\u003c/p\u003e\n\u003cp\u003e\nFor a model that instantiates this model, see\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\\\"\u003e\nBuildings.Fluid.MixingVolumes.MixingVolume\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Text(),Text(),Line(),Line(),Polygon(),Polygon(),Line(),Text()})"}},"Buildings.Utilities.Psychrometrics.Functions.pW_X":{"name":"Buildings.Utilities.Psychrometrics.Functions.pW_X","comment":"Water vapor pressure for given humidity ratio","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.MassFraction","qualifiers":["input"],"name":"X_w","comment":"Species concentration at dry bulb temperature","modifications":[{"name":"min","value":"0"},{"name":"max","value":"0.99999"},{"name":"nominal","value":"0.01"}]},{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p","comment":"Total pressure","value":"101325"},{"className":"Modelica.SIunits.Pressure","qualifiers":["output"],"name":"p_w","comment":"Water vapor pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nFunction to compute the water vapor partial pressure for a given humidity ratio.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Movers.SpeedControlled_y":{"name":"Buildings.Fluid.Movers.SpeedControlled_y","comment":"Fan or pump with ideally controlled normalized speed y as input signal","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.BaseClasses.PartialFlowMachine","modifications":[{"name":"preVar","qualifiers":["final"],"value":"Buildings.Fluid.Movers.BaseClasses.Types.PrescribedVariable.Speed"},{"name":"nominalValuesDefineDefaultPressureCurve","qualifiers":["final"],"value":"false"},{"name":"computePowerUsingSimilarityLaws","qualifiers":["final"],"value":"true"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"max(per.pressure.V_flow)*rho_default"},{"name":"stageInputs","qualifiers":["final"],"value":"per.speeds","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"1\""}]},{"name":"constInput","qualifiers":["final"],"value":"per.constantSpeed","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"name":"filter","modifications":[{"name":"y_start","qualifiers":["final"],"value":"y_start"},{"name":"u_nominal","value":"1"},{"name":"u","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"name":"y","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}]}]},{"name":"eff","modifications":[{"name":"per","modifications":[{"name":"pressure","qualifiers":["final"],"value":"per.pressure"},{"name":"use_powerCharacteristic","qualifiers":["final"],"value":"per.use_powerCharacteristic"}]}]},{"name":"gaiSpe","modifications":[{"name":"u","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"1\""}]},{"name":"k","qualifiers":["final"],"value":"1/(per.speed_nominal)"}]}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"y","comment":"Constant normalized rotational speed","modifications":[{"name":"min","value":"0"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if inputType\u003d\u003dBuildings.Fluid.Types.InputType.Continuous","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {0,120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d -90, origin \u003d {-2,120}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model describes a fan or pump with prescribed normalized speed.\nThe input connector provides the normalized rotational speed (between 0 and 1).\nThe head is computed based on the performance curve that take as an argument\nthe actual volume flow rate divided by the maximum flow rate and the relative\nspeed of the fan.\nThe efficiency of the device is computed based\non the efficiency curves that take as an argument\nthe actual volume flow rate divided by the maximum possible volume flow rate, or\nbased on the motor performance curves.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.UsersGuide\\\"\u003e\nUser\u0027s Guide\u003c/a\u003e for more information.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Text()})"}},"Buildings.Electrical.AC.OnePhase.Sources.PVSimple":{"name":"Buildings.Electrical.AC.OnePhase.Sources.PVSimple","comment":"Simple PV model","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialAcDcParameters"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialPV","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"Buildings.Electrical.PhaseSystems.OnePhase"},{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"110"}]}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"linearized","comment":"If \u003dtrue, introduce a linearization in the load","value":"false"},{"className":"Buildings.Electrical.AC.OnePhase.Loads.Capacitive","qualifiers":["replaceable"],"name":"load","comment":"Load model","modifications":[{"name":"mode","value":"Buildings.Electrical.Types.Load.VariableZ_P_input"},{"name":"pf","qualifiers":["final"],"value":"pf"},{"name":"V_nominal","qualifiers":["final"],"value":"V_nominal"},{"name":"P_nominal","qualifiers":["final"],"value":"0"},{"name":"linearized","qualifiers":["final"],"value":"linearized"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-10},{-20,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nThe electrical connector is an AC interface.\n\u003c/p\u003e\n\u003cp\u003e\nThis model computes the active power as\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP\u003dA \u0026nbsp; f\u003csub\u003eact\u003c/sub\u003e \u0026nbsp; \u0026eta; \u0026nbsp; G \u0026nbsp; \u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eA\u003c/i\u003e is the panel area,\n\u003ci\u003ef\u003csub\u003eact\u003c/sub\u003e\u003c/i\u003e is the fraction of the aperture area,\n\u003ci\u003e\u0026eta;\u003c/i\u003e is the panel efficiency,\n\u003ci\u003eG\u003c/i\u003e is the total solar irradiation, which is the\nsum of direct and diffuse irradiation, and\n\u003ci\u003e\u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e\u003c/i\u003e is the efficiency of the conversion\nbetween DC and AC.\n\u003c/p\u003e\n\u003cp\u003e\nThis active power is equal to \u003ci\u003eP\u003c/i\u003e,\nwhile the reactive power is equal to \u003ci\u003eQ \u003d P \u0026nbsp; tan(acos(pf)) \u003c/i\u003e\nwhere \u003ci\u003epf\u003c/i\u003e is the power factor.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e This model takes as input the total solar irradiation on the panel.\nThis has to be computed converting the incoming radiation to take tilt and azimuth into account.\nFor a model that implements this conversion, use\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Sources.PVSimpleOriented\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.Functions.R_AC_correction":{"name":"Buildings.Electrical.Transmission.Functions.R_AC_correction","comment":"This function computes the correction factor of the DC resistance for AC systems at 60 Hz","components":[{"className":"String","qualifiers":["input"],"name":"size","comment":"Size of the commercial cable (AWG or kcmil)"},{"className":"Buildings.Electrical.Transmission.Types.Material","qualifiers":["input"],"name":"material","comment":"Material of the cable"},{"className":"Real","qualifiers":["output"],"name":"correction","comment":"Correction factor"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes a correction factor for adapting the DC resistance\nwhen working with AC voltages. The correction factor assumes \u003ci\u003ef \u003d 60 Hz\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe correction is based on the type of cabel (AWG or kcmil) and the material.\n\u003c/p\u003e\n\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eType (AWG or kcmil)\u003c/th\u003e\n\u003cth\u003eMaterial\u003c/th\u003e\n\u003cth\u003eCorrection factor\u003c/th\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1/0\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e2/0\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.001\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e3/0\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.001\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e4/0\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.001\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e250\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.002\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.003\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e350\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.004\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.005\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.007\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.010\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.013\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e750\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.015\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.017\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1000\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.026\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1250\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.040\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1500\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.058\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1750\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.079\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e2000\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.100\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e2500\u003c/td\u003e\u003ctd\u003eAluminium\u003c/td\u003e\u003ctd\u003e1.142\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eType (AWG or kcmil)\u003c/th\u003e\n\u003cth\u003eMaterial\u003c/th\u003e\n\u003cth\u003eCorrection factor\u003c/th\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1/0\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.0\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e2/0\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.001\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e3/0\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.002\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e4/0\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.004\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e250\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.005\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e300\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.006\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e350\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.009\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e400\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.011\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e500\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.018\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e600\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.025\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e700\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.034\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e750\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.039\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e800\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.044\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1000\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.067\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1250\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.102\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1500\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.142\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e1750\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.185\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e2000\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.233\u003c/td\u003e\n\u003c/tr\u003e\n\u003c!-- ************ --\u003e\n\u003ctr\u003e\n\u003ctd\u003e2500\u003c/td\u003e\u003ctd\u003eCopper\u003c/td\u003e\u003ctd\u003e1.326\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003c/html\u003e\""}},"Buildings.Media.Air.setState_pTX":{"name":"Buildings.Media.Air.setState_pTX","comment":"Return thermodynamic state as function of p, T and composition X or Xi","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.setState_pTX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThe \u003ca href\u003d\\\"modelica://Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState\\\"\u003e\nthermodynamic state record\u003c/a\u003e is computed from pressure p, temperature T and composition X.\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.LowVoltageCables.Cu25":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Cu25","comment":"Cu cable 25 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Cu"},{"name":"M","value":"234.5+273.15"},{"name":"Amp","value":"110"},{"name":"RCha","value":"0.727e-003"},{"name":"XCha","value":"0.075e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCopper cable with a cross-sectional area of 25mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.727e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.075e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorInsulated":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.ExteriorConstructions.ExteriorDoorInsulated","comment":"Model of an insulated exterior door","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood()}"},{"name":"nLay","qualifiers":["final"],"value":"3"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of an insulated exterior door. It is used in all\n    FLEXLAB test cell models.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a model of an insulated exterior door. It is used in all\n    FLEXLAB test cell models.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos50slash1to12":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos50slash1to12","comment":"Pump data for a Wilo Stratos 50/1-12 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"3690"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{5.55555555556e-07,0.00209948320413,0.00303617571059,0.00389750215332,0.0046188630491,0.00546942291128,0.00621231696813,0.00695521102498,0.00755813953488}"},{"name":"P","value":"{205.291823945,337.504763698,400.584905585,453.68913657,488.040727585,515.872422868,528.307902115,531.276246541,523.90128749}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{5.55555555556e-07,0.00209948320413,0.00303617571059,0.00389750215332,0.0046188630491,0.00546942291128,0.00621231696813,0.00695521102498,0.00755813953488}"},{"name":"dp","value":"{74298.6885246,74154.3248189,73404.0823485,70722.2584827,66879.2916508,59372.6282882,49547.6683187,37985.8558902,27964.6709874}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000018000029520002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerDD":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerDD","comment":"AC AC transformer simplified equivalent circuit (DD)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterDD","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Real","qualifiers":["parameter"],"name":"XoverR","comment":"Ratio between the complex and real components of the impedance (XL/R)"},{"className":"Real","qualifiers":["parameter"],"name":"Zperc","comment":"Short circuit impedance"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of transformer to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of transformer to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a simplified equivalent transformer model with Delta-Delta connection.\nThe model accounts for winding Joule losses and leakage reactances\nthat are represented by a series of a resistance \u003ci\u003eR\u003c/i\u003e and an\ninductance \u003ci\u003eL\u003c/i\u003e. The resistance and the inductance represent the\neffects of the secondary and primary side of the transformer.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVhigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVlow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVAbase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXoverR\u003c/code\u003e - ratio between reactance and resistance, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZperc\u003c/code\u003e - the short circuit impedance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the resistance and inductance.\n\u003c/p\u003e\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/DD.png\\\"/\u003e\n\u003c/p\u003e\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterDD\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterDD\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text(),Line(),Line()})"}},"Buildings.Controls.Predictors.Types.PredictionModel":{"name":"Buildings.Controls.Predictors.Types.PredictionModel","comment":"Enumeration for the prediction models","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Average","comment":"Average load of previous days"},{"className":"EnumType","qualifiers":["constant"],"name":"WeatherRegression","comment":"Regression model based on outside temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnumeration for the prediction models.\nThe possible values are\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nAverage\n\u003c/li\u003e\n\u003cli\u003e\nWeatherRegression\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Water.enthalpyOfLiquid":{"name":"Buildings.Media.Water.enthalpyOfLiquid","comment":"Return the specific enthalpy of liquid","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Temperature","qualifiers":["input"],"name":"T","comment":"Temperature"},{"className":"Modelica.SIunits.SpecificEnthalpy","qualifiers":["output"],"name":"h","comment":"Specific enthalpy"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnthalpy of the water.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.TwoConductor.phasePowers":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.phasePowers","comment":"Return phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.phasePowers"}]},"Buildings.Fluid.Sources.MassFlowSource_h":{"name":"Buildings.Fluid.Sources.MassFlowSource_h","comment":"Ideal flow source that produces a prescribed mass flow with prescribed specific enthalpy, mass fraction and trace substances","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Fluid.Sources.BaseClasses.PartialSource"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_m_flow_in","comment":"Get the mass flow rate from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_h_in","comment":"Get the specific enthalpy from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_X_in","comment":"Get the composition from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_C_in","comment":"Get the trace substances from the input connector","value":"false"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow","comment":"Fixed mass flow rate going out of the fluid port","value":"0","annotations":{"dialog":"Dialog(enable \u003d not use_m_flow_in)"}},{"className":"Medium.SpecificEnthalpy","qualifiers":["parameter"],"name":"h","comment":"Fixed value of specific enthalpy","value":"Medium.h_default","annotations":{"dialog":"Dialog(enable \u003d not use_h_in)"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X","comment":"Fixed value of composition","value":"Medium.X_default","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(enable \u003d not use_X_in and Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C","comment":"Fixed values of trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(enable \u003d not use_C_in and Medium.nC\u003e0)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"m_flow_in","comment":"Prescribed mass flow rate","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}],"conditionalClause":" if use_m_flow_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,60},{-80,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"h_in","comment":"Prescribed fluid specific enthalpy","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"J/kg\""}],"conditionalClause":" if use_h_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}), iconTransformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"X_in","comment":"Prescribed fluid composition","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"kg/kg\""},{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","conditionalClause":" if use_X_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_in","comment":"Prescribed boundary trace substances","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","conditionalClause":" if use_C_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-100},{-80,-60}}), iconTransformation(extent \u003d {{-120,-100},{-80,-60}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModels an ideal flow source, with prescribed values of flow rate, temperature and composition:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e Prescribed mass flow rate.\u003c/li\u003e\n\u003cli\u003e Prescribed specific enthalpy.\u003c/li\u003e\n\u003cli\u003e Boundary composition (only for multi-substance or trace-substance flow).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf \u003ccode\u003euse_m_flow_in\u003c/code\u003e is false (default option), the \u003ccode\u003em_flow\u003c/code\u003e parameter\nis used as boundary pressure, and the \u003ccode\u003em_flow_in\u003c/code\u003e input connector is disabled; if \u003ccode\u003euse_m_flow_in\u003c/code\u003e is true, then the \u003ccode\u003em_flow\u003c/code\u003e parameter is ignored, and the value provided by the input connector is used instead.\u003c/p\u003e\n\u003cp\u003eThe same applies to the temperature, composition and trace substances.\u003c/p\u003e\n\u003cp\u003e\nNote, that boundary temperature,\nmass fractions and trace substances have only an effect if the mass flow\nis from the boundary into the port. If mass is flowing from\nthe port into the boundary, the boundary definitions,\nwith exception of boundary flow rate, do not have an effect.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Rectangle(),Ellipse(),Polygon(),Text(),Ellipse(),Text(),Text(),Text(),Text(),Text()})"}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.der_specificHeatCapacityCp":{},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.FixedVoltage_N":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.FixedVoltage_N","comment":"Fixed voltage source with neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sources.BaseClasses.PartialSource_N"}],"components":[{"className":"Modelica.SIunits.Frequency","qualifiers":["parameter"],"name":"f","comment":"Frequency of the source","modifications":[{"name":"start","value":"60"}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V","comment":"RMS voltage of the source","modifications":[{"name":"start","value":"480"}]},{"className":"Modelica.SIunits.Angle","qualifiers":["parameter"],"name":"phiSou","comment":"Phase shift of the source","value":"0"},{"className":"Boolean","qualifiers":["parameter"],"name":"potentialReference","comment":"Serve as potential root for the reference angle theta","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Reference Parameters\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"definiteReference","comment":"Serve as definite root for the reference angle theta","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Reference Parameters\")"}},{"className":"Modelica.SIunits.Angle","qualifiers":["constant"],"name":"angle120","comment":"Phase shift between the phase voltages","value":"2*Modelica.Constants.pi/(3)"},{"className":"OnePhase.Sources.FixedVoltage","qualifiers":["array"],"name":"vPhase","comment":"Voltage sources on the three-phase","modifications":[{"name":"f","qualifiers":["each"],"value":"f"},{"name":"phiSou","value":"{phiSou,phiSou+angle120,phiSou+2*angle120}"},{"name":"potentialReference","value":"{potentialReference,potentialReference,potentialReference}"},{"name":"definiteReference","value":"{definiteReference,false,false}"},{"name":"V","qualifiers":["each"],"value":"V/(sqrt(3))"}],"arraySubscripts":"[3]","annotations":{"placement":"Placement(transformation(extent \u003d {{-30,-10},{-10,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a constant voltage source, specifying the complex\nvoltage by the RMS voltage and the phase shift. The model has also\nthe neutral cable, connected to a ground reference by default.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameters \u003ccode\u003epotentialReference\u003c/code\u003e and \u003ccode\u003edefiniteReference\u003c/code\u003e\nare used to define if the source model should be selected as source for\nthe reference angles \u003ccode\u003etheta\u003c/code\u003e or not.\nMore information about overdetermined connectors can be found\nin \u003ca href\u003d\\\"#Olsson2008\\\"\u003eOlsson Et Al. (2008)\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"Olsson2008\\\"/\u003e\nHans Olsson, Martin Otter, Sven Erik Mattson and Hilding Elmqvist.\u003cbr/\u003e\n\u003ca href\u003d\\\"http://elib-v3.dlr.de/55892/1/otter2008-modelica-balanced-models.pdf\\\"\u003e\nBalanced Models in Modelica 3.0 for Increased Model Quality\u003c/a\u003e.\u003cbr/\u003e\nProc. of the 7th Modelica Conference, Bielefeld, Germany, March 2008.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Line(),Line(),Line(),Line(),Text(),Text()})"}},"Buildings.Fluid.FMI.OutletAdaptor":{"name":"Buildings.Fluid.FMI.OutletAdaptor","comment":"Model for exposing a fluid outlet to the FMI interface","qualifiers":["model"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Buildings.Fluid.FMI.Interfaces.Outlet","name":"outlet","comment":"Fluid outlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final"],"value":"use_p_in"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Fluid.Interfaces.FluidPort_a","name":"port_a","comment":"Fluid port","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}), iconTransformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Buildings.Fluid.FMI.Interfaces.PressureInput","name":"p","comment":"Pressure to be sent to outlet","conditionalClause":" if use_p_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {0,-120}))"}}],"classes":[{"name":"Buildings.Fluid.FMI.OutletAdaptor.Medium","comment":"Medium model within the source","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel that is used to connect a fluid port with an output signal.\nThe model needs to be used in conjunction with an instance of\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.InletAdaptor\\\"\u003e\nBuildings.Fluid.FMI.InletAdaptor\u003c/a\u003e in order for\nfluid mass flow rate and pressure to be properly assigned to\nthe acausal fluid models.\n\u003c/p\u003e\n\u003cp\u003e\nSee \n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.TwoPortComponent\\\"\u003e\nBuildings.Fluid.FMI.TwoPortComponent\u003c/a\u003e\nor\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.Examples.FMUs.ResistanceVolume\\\"\u003e\nBuildings.Fluid.FMI.Examples.FMUs.ResistanceVolume\u003c/a\u003e\nfor how to use this model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text(),Line(),Rectangle(),Text(),Line(),Text()})"}},"Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation":{"name":"Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation","comment":"Partial model for static energy and mass conservation equations","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface"}],"components":[{"className":"Boolean","qualifiers":["constant"],"name":"simplify_mWat_flow","comment":"Set to true to cause port_a.m_flow + port_b.m_flow \u003d 0 even if mWat_flow is non-zero","value":"true"},{"className":"Boolean","qualifiers":["constant"],"name":"prescribedHeatFlowRate","comment":"Set to true if the heat flow rate is not a function of a temperature difference to the fluid temperature","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_mWat_flow","comment":"Set to true to enable input connector for moisture mass flow rate","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_C_flow","comment":"Set to true to enable input connector for trace substance","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Q_flow","comment":"Sensible plus latent heat flow rate transferred into the medium","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"mWat_flow","comment":"Moisture mass flow rate added to the medium","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"MassFlowRate\""},{"name":"unit","value":"\"kg/s\""}],"conditionalClause":" if use_mWat_flow","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_flow","comment":"Trace substance mass flow rate added to the medium","arraySubscripts":"[Medium.nC]","conditionalClause":" if use_C_flow","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"hOut","comment":"Leaving specific enthalpy of the component","modifications":[{"name":"unit","value":"\"J/kg\""},{"name":"start","value":"Medium.specificEnthalpy_pTX()"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {-50,110}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {-50,110}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"XiOut","comment":"Leaving species concentration of the component","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"1\""},{"name":"min","qualifiers":["each"],"value":"0"},{"name":"max","qualifiers":["each"],"value":"1"}],"arraySubscripts":"[Medium.nXi]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,110}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"COut","comment":"Leaving trace substances of the component","modifications":[{"name":"min","qualifiers":["each"],"value":"0"}],"arraySubscripts":"[Medium.nC]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {50,110}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model transports fluid between its two ports, without storing mass or energy.\nIt implements a steady-state conservation equation for energy and mass fractions.\nThe model has zero pressure drop between its ports.\n\u003c/p\u003e\n\n\u003ch4\u003eTypical use and important parameters\u003c/h4\u003e\n\u003cp\u003e\nSet the parameter \u003ccode\u003euse_mWat_flow_in\u003dtrue\u003c/code\u003e to enable an\ninput connector for \u003ccode\u003emWat_flow\u003c/code\u003e.\nOtherwise, the model uses \u003ccode\u003emWat_flow \u003d 0\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nIf the constant \u003ccode\u003esimplify_mWat_flow \u003d true\u003c/code\u003e, which is its default value,\nthen the equation\n\u003c/p\u003e\n\u003cpre\u003e\n  port_a.m_flow + port_b.m_flow \u003d - mWat_flow;\n\u003c/pre\u003e\n\u003cp\u003e\nis simplified as\n\u003c/p\u003e\n\u003cpre\u003e\n  port_a.m_flow + port_b.m_flow \u003d 0;\n\u003c/pre\u003e\n\u003cp\u003e\nThis causes an error in the mass balance of about \u003ci\u003e0.5%\u003c/i\u003e, but generally leads to\nsimpler equations because the pressure drop equations are then decoupled from the\nmass exchange in this component.\n\u003c/p\u003e\n\n\u003cp\u003e\nTo increase the numerical robustness of the model, the constant\n\u003ccode\u003eprescribedHeatFlowRate\u003c/code\u003e can be set.\nUse the following settings:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e if the \u003ci\u003eonly\u003c/i\u003e means of heat transfer\nat the \u003ccode\u003eheatPort\u003c/code\u003e is a prescribed heat flow rate that\nis \u003ci\u003enot\u003c/i\u003e a function of the temperature difference\nbetween the medium and an ambient temperature. Examples include an ideal electrical heater,\na pump that rejects heat into the fluid stream, or a chiller that removes heat based on a performance curve.\nIf the \u003ccode\u003eheatPort\u003c/code\u003e is not connected, then set \u003ccode\u003eprescribedHeatFlowRate\u003dtrue\u003c/code\u003e as\nin this case, \u003ccode\u003eheatPort.Q_flow\u003d0\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003eSet \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e if there is heat flow at the \u003ccode\u003eheatPort\u003c/code\u003e\ncomputed as \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e, for some temperature \u003ci\u003eT\u003c/i\u003e and some conductance \u003ci\u003eK\u003c/i\u003e,\nwhich may itself be a function of temperature or mass flow rate.\u003cbr/\u003e\nIf there is a combination of \u003ci\u003eK * (T-heatPort.T)\u003c/i\u003e and a prescribed heat flow rate,\nfor example a solar collector that dissipates heat to the ambient and receives heat from\nthe solar radiation, then set \u003ccode\u003eprescribedHeatFlowRate\u003dfalse\u003c/code\u003e.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIf \u003ccode\u003eprescribedHeatFlow\u003dtrue\u003c/code\u003e, then energy and mass balance\nequations are formulated to guard against numerical problems near\nzero flow that can occur if \u003ccode\u003eQ_flow\u003c/code\u003e or \u003ccode\u003em_flow\u003c/code\u003e\nare the results of an iterative solver.\n\u003c/p\u003e\n\u003ch4\u003eImplementation\u003c/h4\u003e\n\u003cp\u003e\nInput connectors of the model are\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eQ_flow\u003c/code\u003e, which is the sensible plus latent heat flow rate added to the medium,\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emWat_flow\u003c/code\u003e, which is the moisture mass flow rate added to the medium, and\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eC_flow\u003c/code\u003e, which is the trace substance mass flow rate added to the medium.\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\nThe model can only be used as a steady-state model with two fluid ports.\nFor a model with a dynamic balance, and more fluid ports, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.ConservationEquation\\\"\u003e\nBuildings.Fluid.Interfaces.ConservationEquation\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Rectangle(),Text(),Text(),Text(),Text(),Text(),Line(),Polygon(),Polygon(),Line(),Line(),Line(),Line()})"}},"Buildings.HeatTransfer.Types.ExteriorConvection":{"name":"Buildings.HeatTransfer.Types.ExteriorConvection","comment":"Enumeration defining the convective heat transfer model for exterior surfaces","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"Fixed","comment":"Fixed coefficient (a user-specified parameter is used)"},{"className":"EnumType","qualifiers":["constant"],"name":"TemperatureWind","comment":"Wind speed and temperature dependent"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis enumeration is used to set the function\nthat is used to compute the convective\nheat transfer coefficient for exterior (outside-side facing) surfaces.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.Sensors.PPM":{"name":"Buildings.Fluid.Sensors.PPM","comment":"Ideal one port trace substances sensor outputting in parts per million","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialAbsoluteSensor","modifications":[{"name":"port","modifications":[{"name":"C_outflow","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"MassFraction\""},{"name":"unit","qualifiers":["final"],"value":"\"1\""},{"name":"min","value":"0"},{"name":"max","value":"1"}]}]}]},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"String","qualifiers":["parameter"],"name":"substanceName","comment":"Name of trace substance","value":"\"CO2\""},{"className":"Modelica.SIunits.MolarMass","qualifiers":["parameter"],"name":"MM","comment":"Molar mass of the trace substance","value":"Modelica.Media.IdealGases.Common.SingleGasesData.CO2.MM"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"ppm","comment":"Trace substance in port medium in ppm","modifications":[{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the trace substance concentration in ppm contained in the fluid connected to its port.\nThe sensor is ideal, i.e., it does not influence the fluid.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eMM\u003c/code\u003e is the molar mass of the trace substance.\nFor a list of molar masses, see\n\u003ca href\u003d\\\"modelica://Modelica.Media.IdealGases.Common.SingleGasesData\\\"\u003e\nModelica.Media.IdealGases.Common.SingleGasesData\u003c/a\u003e\nand\n\u003ca href\u003d\\\"modelica://Modelica.Media.IdealGases.Common.FluidData\\\"\u003e\nModelica.Media.IdealGases.Common.FluidData\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nRead the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e\nprior to using this model with one fluid port.\n\u003c/p\u003e\n\u003ch4\u003eAssumptions\u003c/h4\u003e\n\u003cp\u003e\nThis sensor assumes that the concentration \u003ci\u003eC\u003c/i\u003e of the medium\nis in mass fraction. Otherwise, the conversion to \u003ci\u003eppm\u003c/i\u003e will be\nwrong.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Text(),Text(),Line()})"}},"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_10":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_10","comment":"Annealed Al cable - AWG 1/0","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"size","value":"\"1/0\""},{"name":"Rdc","value":"0.551181e-3"},{"name":"T_ref","value":"298.15"},{"name":"d","value":"9.195e-3"},{"name":"D","value":"26.543e-3"},{"name":"GMR","value":"Buildings.Electrical.Transmission.Functions.computeGMR(d)"},{"name":"GMD","value":"Buildings.Electrical.Transmission.Functions.computeGMD(0.1905)"},{"name":"Amp","value":"195"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAnnealed aluminium cable with a cross-sectional AWG 1/0\n(American Wire Gauge).\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRdc  \u003d 0.551181e-3 // Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref\u003d 298.15      // Reference temperature of the material [K]\nd    \u003d 9.195e-3    // Inner diameter [m]\nD    \u003d 26.543e-3   // Outer diameter [m]\nAmp  \u003d 195         // Ampacity [A]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.Network":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.Network","comment":"Three phases balanced AC network","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.BaseClasses.PartialNetwork","modifications":[{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]},{"name":"terminal"},{"name":"grid"},{"name":"lines"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["array"],"name":"VAbs","comment":"RMS voltage of the grid nodes","arraySubscripts":"[grid.nNodes]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a generalized electrical AC three-phase balanced network.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.BaseClasses.PartialNetwork\\\"\u003e\nBuildings.Electrical.Transmission.BaseClasses.PartialNetwork\u003c/a\u003e\nfor information about the network model.\n\u003c/p\u003e\n\u003cp\u003e\nSee \u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.Grids.PartialGrid\\\"\u003e\nBuildings.Electrical.Transmission.Grids.PartialGrid\u003c/a\u003e\nfor more information about the topology of the network, such as\nthe number of nodes, how they are connected, and the length of each connection.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepDownDY":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.ACACTransformerStepDownDY","comment":"AC AC transformer simplified equivalent circuit (DY step down)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepDownDY","modifications":[{"name":"conv1"},{"name":"conv2"},{"name":"conv3"}]}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VHigh","comment":"Rms voltage on side 1 of the transformer (primary side)"},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"VLow","comment":"Rms voltage on side 2 of the transformer (secondary side)"},{"className":"Modelica.SIunits.ApparentPower","qualifiers":["parameter"],"name":"VABase","comment":"Nominal power of the transformer"},{"className":"Real","qualifiers":["parameter"],"name":"XoverR","comment":"Ratio between the complex and real components of the impedance (XL/R)"},{"className":"Real","qualifiers":["parameter"],"name":"Zperc","comment":"Short circuit impedance"},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_1","comment":"Connect side 1 of transformer to ground","value":"false","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 1\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"ground_2","comment":"Connect side 2 of transformer to ground","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Ground\", group \u003d \"side 2\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a simplified equivalent transformer model with Y-Delta connection\n(voltage step down).\nThe model accounts for winding Joule losses and leakage reactances\nthat are represented by a series of a resistance \u003ci\u003eR\u003c/i\u003e and an\ninductance \u003ci\u003eL\u003c/i\u003e. The resistance and the inductance represent the\neffects of the secondary and primary side of the transformer.\n\u003c/p\u003e\n\u003cp\u003e\nThe model is parameterized using the following parameters\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVhigh\u003c/code\u003e - RMS voltage at primary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVlow\u003c/code\u003e - RMS voltage at secondary side,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVAbase\u003c/code\u003e - apparent nominal power of the transformer,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eXoverR\u003c/code\u003e - ratio between reactance and resistance, and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eZperc\u003c/code\u003e - the short circuit impedance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nGiven the nominal conditions, the model computes the values of the resistance and inductance.\n\u003c/p\u003e\n\n\u003ch4\u003eConfiguration:\u003c/h4\u003e\n\u003cp\u003e\nThe image below describes the connection of the windings.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Conversion/BaseClasses/DY_a.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003ch4\u003eNote:\u003c/h4\u003e\n\u003cp\u003e\nThis model reuses models from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Conversion.ACACTransformer\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepDownDY\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Conversion.BaseClasses.PartialConverterStepDownDY\u003c/a\u003e for\ndetails on the connections.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text(),Text(),Text(),Text(),Text(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Line(),Text(),Text(),Line(),Line(),Line(),Line(),Polygon()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.Cu35":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Cu35","comment":"Cu cable 35 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Cu"},{"name":"M","value":"234.5+273.15"},{"name":"Amp","value":"130"},{"name":"RCha","value":"0.517e-003"},{"name":"XCha","value":"0.074e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCopper cable with a cross-sectional area of 35mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.517e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.074e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.IO.FLEXLAB.CalBayComm":{"name":"Buildings.Utilities.IO.FLEXLAB.CalBayComm","comment":"Model calling a Python script to communicate with the CalBay adapter","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Example"},{"nameOfExtendedClass":"Modelica.Icons.UnderConstruction"}],"components":[{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"samplePeriod","comment":"Sample period for communication","value":"30"},{"className":"Modelica.Blocks.Sources.CombiTimeTable","name":"setPoint","comment":"Setpoint for lights","modifications":[{"name":"tableOnFile","value":"false"},{"name":"extrapolation","value":"Modelica.Blocks.Types.Extrapolation.Periodic"},{"name":"smoothness","value":"Modelica.Blocks.Types.Smoothness.ConstantSegments"},{"name":"table","value":"[-1, 12; 119, 6; 239, 8; 359, 9; 479, 10; 599, 12]"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-80,-10},{-60,10}}))"}},{"className":"Utilities.IO.Python27.Real_Real","name":"calBay","comment":"Interface to CalBay communication","modifications":[{"name":"functionName","value":"\"CalBayComm\""},{"name":"nDblWri","value":"1"},{"name":"nDblRea","value":"2"},{"name":"moduleName","value":"\"CalBayComm\""},{"name":"samplePeriod","qualifiers":["final"],"value":"samplePeriod"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{40,-10},{60,10}}))"}},{"className":"Modelica.Blocks.Math.Feedback","name":"feedback","comment":"Control error","annotations":{"placement":"Placement(transformation(extent \u003d {{-40,-10},{-20,10}}))"}},{"className":"lightingController","name":"controller","comment":"Controller for light level","modifications":[{"name":"samplePeriod","qualifiers":["final"],"value":"samplePeriod"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{0,-10},{20,10}}))"}}],"classes":[{"name":"Buildings.Utilities.IO.FLEXLAB.CalBayComm.lightingController","comment":"Block for control law","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"samplePeriod","comment":"Sample period of component"},{"className":"Modelica.Blocks.Math.Gain","name":"gain","modifications":[{"name":"k","value":"10"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-68,-10},{-48,10}}))"}},{"className":"Modelica.Blocks.Nonlinear.Limiter","name":"limiter","comment":"Output limiter to constrain control signal","modifications":[{"name":"uMax","value":"100"},{"name":"uMin","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{40,-10},{60,10}}))"}},{"className":"Modelica.Blocks.Math.Add","name":"add","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"Modelica.Blocks.Discrete.ZeroOrderHold","name":"zeroOrderHold","comment":"Zero order hold for feedback","modifications":[{"name":"samplePeriod","qualifiers":["final"],"value":"samplePeriod"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{10,-50},{-10,-30}}))"}}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n            \u003cp\u003e\n            This example demonstrates how a Python script and model of a controller\n            can be used to control experiments in the FLEXLAB test cells. It uses\n            an instance of\n            \u003ca href\u003d\\\"modelica://Buildings.Utilities.IO.Python27.Real_Real\\\"\u003e\n            Buildings.Utilities.IO.Python27.Real_Real\u003c/a\u003e to communicate with the\n            CalBay adapter. The Python script is located at\n            \u003ca href\u003d\\\"file://Buildings/Resources/Python-Sources/CalBayComm.py\\\"\u003e\n            Buildings/Resources/Python-Sources/CalBayComm.py\u003c/a\u003e. The script must be\n            edited before it will effectively communicate with the CalBay adapter.\n            The necessary changes include:\n            \u003c/p\u003e\n            \u003cul\u003e\n            \u003cli\u003eThe script currently does not have valid login or password credentials.\n            The credentials will have to be replaced before communication with the\n            CalBay adapter will succeed.\u003c/li\u003e\n            \u003cli\u003eTo avoid accidental manipulation of controls, the script currently does\n            not include effective commands. The desired commands must be added to the\n            program before it will have any effect.\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cp\u003e\n            More details describing the necessary changes to the script are provided in\n            the documentation of the script itself.\n            \u003c/p\u003e\n            \u003cp\u003e\n            \u003cb\u003eNote:\u003c/b\u003e\n            This model is marked as under construction because the\n            application programming interface for data exchange with the CalBay adaptor\n            of FLEXLAB has not yet been finalized.\n            The model works, however, with the CalBay infrastructure as of October 2013.\n            \u003c/p\u003e\n            \u003c/html\u003e\""}},"Buildings.Media.Air.specificInternalEnergy":{"name":"Buildings.Media.Air.specificInternalEnergy","comment":"Specific internal energy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.specificInternalEnergy"},{"nameOfExtendedClass":"Modelica.Icons.Function"}]},"Buildings.Fluid.Actuators.Valves.TwoWayQuickOpening":{"name":"Buildings.Fluid.Actuators.Valves.TwoWayQuickOpening","comment":"Two way valve with quick opening flow characteristics","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValveKv","modifications":[{"name":"phi","value":"if homotopyInitialization then homotopy() else l+Modelica.Fluid.Utilities.regPow(y_actual,alpInv,delta0)*(1-l)"}]}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"alp","comment":"Parameter for valve characteristics, alp\u003e0","value":"2"},{"className":"Real","qualifiers":["parameter"],"name":"delta0","comment":"Range of significant deviation from power law","value":"0.01"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nTwo way valve with a power function for the valve opening characteristic.\nValves that need to open quickly typically have such a valve characteristics.\n\u003c/p\u003e\u003cp\u003e\nThis model is based on the partial valve model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\\\"\u003e\nBuildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003c/a\u003e.\nCheck this model for more information, such\nas the regularization near the origin.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Types.SurfaceRoughness":{"name":"Buildings.HeatTransfer.Types.SurfaceRoughness","comment":"Enumeration defining the surface roughness","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"VeryRough","comment":"Very rough"},{"className":"EnumType","qualifiers":["constant"],"name":"Rough","comment":"Rough"},{"className":"EnumType","qualifiers":["constant"],"name":"Medium","comment":"Medium rough"},{"className":"EnumType","qualifiers":["constant"],"name":"MediumSmooth","comment":"Medium smooth"},{"className":"EnumType","qualifiers":["constant"],"name":"Smooth","comment":"Smooth"},{"className":"EnumType","qualifiers":["constant"],"name":"VerySmooth","comment":"Very smooth"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis enumeration is used to define the surface roughness\nwhich may be used to compute the convective heat transfer coefficients of\nbuilding construction.\n\u003c/p\u003e\n\u003cp\u003e\nThe surface roughness will be used to compute the\nwind-driven convective heat transfer coefficient in\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Convection.Exterior\\\"\u003e\nBuildings.HeatTransfer.Convection.Exterior\u003c/a\u003e.\nThe possible surface roughness are\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\n\u003cth\u003eRoughness index\u003c/th\u003e\n\u003cth\u003eExample material\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eVeryRough\u003c/td\u003e     \u003ctd\u003eStucco\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eRough\u003c/td\u003e         \u003ctd\u003eBrick\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eMediumRough\u003c/td\u003e   \u003ctd\u003eConcrete\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eMediumSmooth\u003c/td\u003e  \u003ctd\u003eClear pine\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eSmooth\u003c/td\u003e        \u003ctd\u003eSmooth plaster\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eVerySmooth\u003c/td\u003e    \u003ctd\u003eGlass\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.OnePhase.Basics.Ground":{"name":"Buildings.Electrical.AC.OnePhase.Basics.Ground","comment":"Ground connection","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.Ground","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a connection to the ground.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesBalanced.Storage.Battery":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Storage.Battery","comment":"Simple model of a battery","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Storage.Battery","modifications":[{"name":"terminal"},{"name":"V_nominal","modifications":[{"name":"start","value":"480"}]},{"name":"bat"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple model of a battery.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as an input the power to be stored in the battery (if \u003ci\u003eP \u0026gt; 0\u003c/i\u003e)\nor to be extracted from the battery. This model takes into account the efficiency of the conversion\nbetween DC and AC \u003ci\u003e\u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe output connector \u003ccode\u003eSOC\u003c/code\u003e is the state of charge of the battery.\nThis model does not enforce that the state of charge is between zero and one.\nHowever, each time the state of charge crosses zero or one, a warning will\nbe written to the simulation log file.\nThe model also does not limit the current through the battery. The user should\nprovide a control so that only a reasonable amount of power is exchanged,\nand that the state of charge remains between zero and one.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isobaricExpansionCoefficient":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isobaricExpansionCoefficient","comment":"Return the isobaric expansion coefficient","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.isobaricExpansionCoefficient"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the isobaric expansion coefficient,\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026beta;\u003csub\u003ep\u003c/sub\u003e \u003d - 1 \u0026frasl; v \u0026nbsp; (\u0026part; v \u0026frasl; \u0026part; T)\u003csub\u003ep\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ev\u003c/i\u003e is the specific volume,\n\u003ci\u003eT\u003c/i\u003e is the temperature and\n\u003ci\u003ep\u003c/i\u003e is the pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.Functions.selectCable_med":{"name":"Buildings.Electrical.Transmission.Functions.selectCable_med","comment":"This function is used to automatically select the\n    type of cable for medium voltages","components":[{"className":"Modelica.SIunits.Power","qualifiers":["input"],"name":"P_nominal","comment":"Rated power","value":"0"},{"className":"Modelica.SIunits.Voltage","qualifiers":["input"],"name":"V_nominal","comment":"Rated voltage","value":"0"},{"className":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","qualifiers":["output"],"name":"cable","comment":"Cable"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function selects the default cable for a medium voltage\ntransmission line.\n\u003c/p\u003e\n\u003cp\u003e\nThe function takes as inputs the nominal voltage \u003ci\u003eV\u003csub\u003enominal\u003c/sub\u003e\u003c/i\u003e and the\nnominal power \u003ci\u003eP\u003csub\u003enominal\u003c/sub\u003e\u003c/i\u003e. It computes the maximum current current that\ncan flow through the cable as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nI\u003csub\u003eMAX\u003c/sub\u003e \u003d S\u003csub\u003eF\u003c/sub\u003e P\u003csub\u003enominal\u003c/sub\u003e / V\u003csub\u003enominal\u003c/sub\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eS\u003csub\u003eF\u003c/sub\u003e\u003c/i\u003e is the safety factor. By default the safety factor is equal to \u003ci\u003e1.2\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nUsing \u003ci\u003eI\u003csub\u003eMAX\u003c/sub\u003e\u003c/i\u003e, the function selects the smallest cable that has an ampacity\nhigher than I\u003csub\u003eMAX\u003c/sub\u003e. The cables are selected from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.MediumVoltageCables\\\"\u003e\nBuildings.Electrical.Transmission.MediumVoltageCables\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phase":{"name":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phase","comment":"Return phase","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.ThreePhase_dq0.phase"}]},"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_40":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_40","comment":"Annealed Al cable - AWG 4/0","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"size","value":"\"4/0\""},{"name":"Rdc","value":"0.274278e-3"},{"name":"T_ref","value":"298.15"},{"name":"d","value":"13.005e-3"},{"name":"D","value":"30.353e-3"},{"name":"GMR","value":"Buildings.Electrical.Transmission.Functions.computeGMR(d)"},{"name":"GMD","value":"Buildings.Electrical.Transmission.Functions.computeGMD(0.1905)"},{"name":"Amp","value":"285"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAnnealed aluminium cable with a cross-sectional AWG 4/0\n(American Wire Gauge).\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRdc  \u003d 0.274278e-3 // Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref\u003d 298.15      // Reference temperature of the material [K]\nd    \u003d 13.005e-3   // Inner diameter [m]\nD    \u003d 30.353e-3   // Outer diameter [m]\nAmp  \u003d 285         // Ampacity [A]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.Copyright":{"name":"Buildings.UsersGuide.Copyright","comment":"Copyright","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Information"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003ch4\u003e\u003cfont color\u003d\\\"#008000\\\" size\u003d\\\"5\\\"\u003eCopyright\u003c/font\u003e\u003c/h4\u003e\n\u003cp\u003e\nCopyright (c) 2009-2015, The Regents of the University of California, through Lawrence Berkeley National Laboratory (subject to receipt of any required approvals from the U.S. Dept. of Energy). All rights reserved.\n\u003c/p\u003e\n\u003cp\u003e\nIf you have questions about your rights to use or distribute this software, please contact Berkeley Lab\u0027s Technology Transfer Department at\n\u003ca href\u003d\\\"mailto:TTD@lbl.gov\\\"\u003eTTD@lbl.gov\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\nNOTICE. This software was developed under partial funding from the U.S. Department of Energy. As such, the U.S. Government has been granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software to reproduce, prepare derivative works, and perform publicly and display publicly. Beginning five (5) years after the date permission to assert copyright is obtained from the U.S. Department of Energy, and subject to any subsequent five (5) year renewals, the U.S. Government is granted for itself and others acting on its behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software to reproduce, prepare derivative works, distribute copies to the public, perform publicly and display publicly, and to permit others to do so.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortMatrixRL","comment":"Model of an RL line parameterized with impedance matrices","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort"}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"480"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z11","comment":"Element [1,1] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z12","comment":"Element [1,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z13","comment":"Element [1,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z22","comment":"Element [2,2] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z23","comment":"Element [2,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","parameter"],"name":"Z33","comment":"Element [3,3] of impedance matrix","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z21","comment":"Element [2,1] of impedance matrix","value":"Z12","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z31","comment":"Element [3,1] of impedance matrix","value":"Z13","arraySubscripts":"[2]"},{"className":"Modelica.SIunits.Impedance","qualifiers":["array","final","parameter"],"name":"Z32","comment":"Element [3,1] of impedance matrix","value":"Z23","arraySubscripts":"[2]"}],"classes":[{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nResistive-inductive model that connects two AC three-phase\nunbalanced interfaces. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\nThe voltage between the ports is\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortRLMatrix.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003ei\u003c/sub\u003e\u003csup\u003e{p,n}\u003c/sup\u003e\u003c/i\u003e is the voltage phasor at the connector \u003ccode\u003ep\u003c/code\u003e or\n\u003ccode\u003en\u003c/code\u003e of the \u003ci\u003ei\u003c/i\u003e-th phase, while \u003ci\u003eI\u003csub\u003ei\u003c/sub\u003e\u003csup\u003ep\u003c/sup\u003e\u003c/i\u003e\nthe current phasor entering from the connector \u003ccode\u003ep\u003c/code\u003e of the \u003ci\u003ei\u003c/i\u003e-th phase.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model is parameterized with an impedance matrix \u003ci\u003eZ\u003c/i\u003e.\nThe matrix is symmetric thus just the upper triangular\npart of it has to be defined.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line(),Rectangle(),Rectangle(),Text(),Text()})"}},"Buildings.Fluid.Sources.Boundary_pT":{"name":"Buildings.Fluid.Sources.Boundary_pT","comment":"Boundary with prescribed pressure, temperature, composition and trace substances","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Fluid.Sources.BaseClasses.PartialSource"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"Get the pressure from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_T_in","comment":"Get the temperature from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_X_in","comment":"Get the composition from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_C_in","comment":"Get the trace substances from the input connector","value":"false"},{"className":"Medium.AbsolutePressure","qualifiers":["parameter"],"name":"p","comment":"Fixed value of pressure","value":"Medium.p_default","annotations":{"dialog":"Dialog(enable \u003d not use_p_in)"}},{"className":"Medium.Temperature","qualifiers":["parameter"],"name":"T","comment":"Fixed value of temperature","value":"Medium.T_default","annotations":{"dialog":"Dialog(enable \u003d not use_T_in)"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X","comment":"Fixed value of composition","value":"Medium.X_default","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(enable \u003d not use_X_in and Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C","comment":"Fixed values of trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(enable \u003d not use_C_in and Medium.nC\u003e0)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p_in","comment":"Prescribed boundary pressure","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"Pa\""}],"conditionalClause":" if use_p_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T_in","comment":"Prescribed boundary temperature","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"conditionalClause":" if use_T_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"X_in","comment":"Prescribed boundary composition","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"kg/kg\""},{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","conditionalClause":" if use_X_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_in","comment":"Prescribed boundary trace substances","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","conditionalClause":" if use_C_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-100},{-100,-60}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nDefines prescribed values for boundary conditions:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e Prescribed boundary pressure.\u003c/li\u003e\n\u003cli\u003e Prescribed boundary temperature.\u003c/li\u003e\n\u003cli\u003e Boundary composition (only for multi-substance or trace-substance flow).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf \u003ccode\u003euse_p_in\u003c/code\u003e is false (default option), the \u003ccode\u003ep\u003c/code\u003e parameter\nis used as boundary pressure, and the \u003ccode\u003ep_in\u003c/code\u003e input connector is disabled; if \u003ccode\u003euse_p_in\u003c/code\u003e is true, then the \u003ccode\u003ep\u003c/code\u003e parameter is ignored, and the value provided by the input connector is used instead.\u003c/p\u003e\n\u003cp\u003eThe same applies to the temperature, composition and trace substances.\u003c/p\u003e\n\u003cp\u003e\nNote, that boundary temperature,\nmass fractions and trace substances have only an effect if the mass flow\nis from the boundary into the port. If mass is flowing from\nthe port into the boundary, the boundary definitions,\nwith exception of boundary pressure, do not have an effect.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Ellipse(),Text(),Line(),Line(),Line(),Line(),Text(),Text(),Text(),Text()})"}},"Buildings.Airflow.Multizone.ZonalFlow_ACS":{"name":"Buildings.Airflow.Multizone.ZonalFlow_ACS","comment":"Zonal flow with input air change per second","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Airflow.Multizone.BaseClasses.ZonalFlow"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"useDefaultProperties","comment":"Set to true to use constant density","value":"false"},{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"V","comment":"Volume of room"},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"ACS","comment":"Air change per seconds, relative to the smaller of the two volumes","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,90},{-100,110}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model computes the air exchange between volumes.\n\u003c/p\u003e\n\u003cp\u003e\nInput is the air change per seconds. The volume flow rate is computed as\n\u003c/p\u003e\n\u003cpre\u003e\n  V_flow \u003d ACS * V\n\u003c/pre\u003e\n\u003cp\u003e\nwhere \u003ccode\u003eACS\u003c/code\u003e is an input and the volume \u003ccode\u003eV\u003c/code\u003e is a parameter.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Utilities.Math.BooleanReplicator":{"name":"Buildings.Utilities.Math.BooleanReplicator","comment":"Boolean signal replicator","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.BooleanBlock"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nout","comment":"Number of outputs","value":"1"},{"className":"Modelica.Blocks.Interfaces.BooleanInput","name":"u","comment":"Connector of boolean input signal","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.BooleanOutput","qualifiers":["array"],"name":"y","comment":"Connector of boolean output signals","arraySubscripts":"[nout]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block replicates the boolean input signal to an array of \u003ccode\u003enout\u003c/code\u003e identical output signals.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Line(),Line(),Line(),Line(),Ellipse()})"}},"Buildings.Fluid.FixedResistances.Pipe":{"name":"Buildings.Fluid.FixedResistances.Pipe","comment":"Pipe with finite volume discretization along flow path","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.FixedResistances.BaseClasses.Pipe","modifications":[{"name":"diameter","value":"sqrt(4*m_flow_nominal/(rho_default)/(v_nominal)/(Modelica.Constants.pi))"},{"name":"dp_nominal","value":"2*dpStraightPipe_nominal"},{"name":"preDro","modifications":[{"name":"dp","modifications":[{"name":"nominal","value":"length*10"}]}]}]}],"components":[{"className":"Modelica.SIunits.Velocity","qualifiers":["parameter"],"name":"v_nominal","comment":"Velocity at m_flow_nominal (used to compute default diameter)","value":"0.15"},{"className":"Modelica.SIunits.Length","qualifiers":["parameter"],"name":"roughness","comment":"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness \u003d false)","value":"2.5e-5","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["final","parameter"],"name":"dpStraightPipe_nominal","comment":"Pressure loss of a straight pipe at m_flow_nominal","value":"Modelica.Fluid.Pipes.BaseClasses.WallFriction.Detailed.pressureLoss_m_flow()","modifications":[{"name":"displayUnit","value":"\"Pa\""}]},{"className":"Boolean","qualifiers":["parameter"],"name":"useMultipleHeatPorts","comment":"\u003d true to use one heat port for each segment of the pipe, false to use a single heat port for the entire pipe","value":"false"},{"className":"Modelica.Thermal.HeatTransfer.Components.ThermalConductor","qualifiers":["array"],"name":"conPipWal","comment":"Thermal conductance through pipe wall","modifications":[{"name":"G","qualifiers":["each"],"value":"2*Modelica.Constants.pi*lambdaIns*length/(nSeg)/(Modelica.Math.log((diameter/(2.0)+thicknessIns)/(diameter/(2.0))))"}],"arraySubscripts":"[nSeg]","annotations":{"placement":"Placement(transformation(extent \u003d {{-28,-38},{-8,-18}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Components.ThermalCollector","name":"colAllToOne","comment":"Connector to assign multiple heat ports to one heat port","modifications":[{"name":"m","value":"nSeg"}],"conditionalClause":" if not useMultipleHeatPorts","annotations":{"placement":"Placement(transformation(extent \u003d {{-6,-6},{6,6}}, rotation \u003d 180, origin \u003d {-50,10}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heatPort","comment":"Single heat port that connects to outside of pipe wall (default, enabled when useMultipleHeatPorts\u003dfalse)","conditionalClause":" if not useMultipleHeatPorts","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,40},{10,20}}), iconTransformation(extent \u003d {{-10,60},{10,40}}))"}},{"className":"Modelica.Fluid.Interfaces.HeatPorts_a","qualifiers":["array"],"name":"heatPorts","comment":"Multiple heat ports that connect to outside of pipe wall (enabled if useMultipleHeatPorts\u003dtrue)","arraySubscripts":"[nSeg]","conditionalClause":" if useMultipleHeatPorts","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-70},{11,-50}}), iconTransformation(extent \u003d {{-30,-60},{30,-40}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a pipe with flow resistance and optional heat exchange with environment.\n\u003c/p\u003e\n\u003ch4\u003eHeat loss calculation\u003c/h4\u003e\n\u003cp\u003e\nThere are two possible configurations:\n\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\nIf \u003ccode\u003euseMultipleHeatPorts\u003dfalse\u003c/code\u003e (default option), the pipe uses a single heat port\nfor the heat exchange with the environment. Note that if the heat port\nis unconnected, then all volumes are still connected through the heat conduction elements\n\u003ccode\u003econPipWal\u003c/code\u003e.\nTherefore, they exchange a small amount of heat, which is not physical.\nTo avoid this, set \u003ccode\u003euseMultipleHeatPorts\u003dtrue\u003c/code\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nIf \u003ccode\u003euseMultipleHeatPorts\u003dtrue\u003c/code\u003e,\nthen one heat port for each segment of the pipe is\nused for the heat exchange with the environment.\nIf the heat port is unconnected, then the pipe has no heat loss.\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4\u003ePressure drop calculation\u003c/h4\u003e\n\u003cp\u003e\nThe default value for the parameter \u003ccode\u003ediameter\u003c/code\u003e is computed such that the flow velocity\nis equal to \u003ccode\u003ev_nominal\u003d0.15\u003c/code\u003e for a mass flow rate of \u003ccode\u003em_flow_nominal\u003c/code\u003e.\nBoth parameters, \u003ccode\u003ediameter\u003c/code\u003e and \u003ccode\u003ev_nominal\u003c/code\u003e, can be overwritten\nby the user.\nThe default value for \u003ccode\u003edp_nominal\u003c/code\u003e is two times the pressure drop that the pipe\nwould have if it were straight with no fittings.\nThe factor of two that takes into account the pressure loss of fittings can be overwritten.\nThese fittings could also be explicitly modeled outside of this component using models from\nthe package\n\u003ca href\u003d\\\"modelica://Modelica.Fluid.Fittings\\\"\u003e\nModelica.Fluid.Fittings\u003c/a\u003e.\nFor mass flow rates other than \u003ccode\u003em_flow_nominal\u003c/code\u003e, the model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\\\"\u003e\nBuildings.Fluid.FixedResistances.FixedResistanceDpM\u003c/a\u003e is used to\ncompute the pressure drop.\n\u003c/p\u003e\n\u003cp\u003e\nFor a steady-state model of a flow resistance, use\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FixedResistances.FixedResistanceDpM\\\"\u003e\nBuildings.Fluid.FixedResistances.FixedResistanceDpM\u003c/a\u003e instead of this model.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.der_enthalpyOfLiquid":{},"Buildings.Media.Air.saturationPressure":{"name":"Buildings.Media.Air.saturationPressure","comment":"Saturation curve valid for 223.16 \u003c\u003d T \u003c\u003d 373.16 (and slightly outside with less accuracy)","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.saturationPressure"}]},"Buildings.Electrical.PhaseSystems.TwoConductor.phase":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.phase","comment":"Return phase","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.phase"}]},"Buildings.Fluid.Sources.MassFlowSource_T":{"name":"Buildings.Fluid.Sources.MassFlowSource_T","comment":"Ideal flow source that produces a prescribed mass flow with prescribed temperature, mass fraction and trace substances","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Fluid.Sources.BaseClasses.PartialSource"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_m_flow_in","comment":"Get the mass flow rate from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_T_in","comment":"Get the temperature from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_X_in","comment":"Get the composition from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_C_in","comment":"Get the trace substances from the input connector","value":"false"},{"className":"Modelica.SIunits.MassFlowRate","qualifiers":["parameter"],"name":"m_flow","comment":"Fixed mass flow rate going out of the fluid port","value":"0","annotations":{"dialog":"Dialog(enable \u003d not use_m_flow_in)"}},{"className":"Medium.Temperature","qualifiers":["parameter"],"name":"T","comment":"Fixed value of temperature","value":"Medium.T_default","annotations":{"dialog":"Dialog(enable \u003d not use_T_in)"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X","comment":"Fixed value of composition","value":"Medium.X_default","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(enable \u003d not use_X_in and Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C","comment":"Fixed values of trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(enable \u003d not use_C_in and Medium.nC\u003e0)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"m_flow_in","comment":"Prescribed mass flow rate","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"kg/s\""}],"conditionalClause":" if use_m_flow_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,60},{-80,100}}), iconTransformation(extent \u003d {{-120,60},{-80,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"T_in","comment":"Prescribed fluid temperature","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"conditionalClause":" if use_T_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}), iconTransformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"X_in","comment":"Prescribed fluid composition","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"kg/kg\""},{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","conditionalClause":" if use_X_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_in","comment":"Prescribed boundary trace substances","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","conditionalClause":" if use_C_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-100},{-80,-60}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModels an ideal flow source, with prescribed values of flow rate, temperature, composition and trace substances:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e Prescribed mass flow rate.\u003c/li\u003e\n\u003cli\u003e Prescribed temperature.\u003c/li\u003e\n\u003cli\u003e Boundary composition (only for multi-substance or trace-substance flow).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf \u003ccode\u003euse_m_flow_in\u003c/code\u003e is false (default option), the \u003ccode\u003em_flow\u003c/code\u003e parameter\nis used as boundary pressure, and the \u003ccode\u003em_flow_in\u003c/code\u003e input connector is disabled; if \u003ccode\u003euse_m_flow_in\u003c/code\u003e is true, then the \u003ccode\u003em_flow\u003c/code\u003e parameter is ignored, and the value provided by the input connector is used instead.\u003c/p\u003e\n\u003cp\u003eThe same applies to the temperature, composition and trace substances.\u003c/p\u003e\n\u003cp\u003e\nNote, that boundary temperature,\nmass fractions and trace substances have only an effect if the mass flow\nis from the boundary into the port. If mass is flowing from\nthe port into the boundary, the boundary definitions,\nwith exception of boundary flow rate, do not have an effect.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Rectangle(),Ellipse(),Polygon(),Text(),Text(),Ellipse(),Text(),Text(),Text(),Text()})"}},"Buildings.HeatTransfer.Convection.Functions.HeatFlux.ceiling":{"name":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.ceiling","comment":"Free convection, ceiling","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Convection.Functions.HeatFlux.BaseClasses.PartialHeatFlux"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the buoyancy-driven convective heat flux as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  q\u0026#775; \u003d h \u0026Delta;T,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003e\u0026Delta;T\u003c/i\u003e is the solid temperature minus the fluid temperature and\n\u003ci\u003eh\u003c/i\u003e is the convective heat transfer coefficient\nfor a ceiling, computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nh\u003dk |\u0026Delta;T|\u003csup\u003e0.3333\u003c/sup\u003e,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ek\u003d1.51\u003c/i\u003e if the fluid is warmer than the ceiling,\nor \u003ci\u003ek\u003d0.76\u003c/i\u003e otherwise.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.ProbeWye":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.ProbeWye","comment":"Model of a probe that measures voltage magnitude and angle (Wye configuration)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Sensors.BaseClasses.GeneralizedProbe"}],"components":[{"className":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal_n","name":"term","comment":"Electrical connector","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 90, origin \u003d {0,-90}))"}},{"className":"Interfaces.WyeToWyeGround","name":"wyeToWyeGround","comment":"Y to Y grounded transformation","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, origin \u003d {20,0}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a probe that measures the RMS voltage and the angle\nof the voltage phasors at a given point. The probes are connected\nin the Wye (Y) grounded configuration.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line(),Line()})"}},"Buildings.Electrical.PhaseSystems.TwoConductor.systemCurrent":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.systemCurrent","comment":"Return system current as function of phase currents","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.systemCurrent"}]},"Buildings.Utilities.Psychrometrics.X_pW":{"name":"Buildings.Utilities.Psychrometrics.X_pW","comment":"Humidity ratio for given water vapor pressure","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Buildings.Utilities.Psychrometrics.BaseClasses.HumidityRatioVaporPressure"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"X_w","comment":"Species concentration at dry bulb temperature","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"nominal","value":"0.01"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p_w","comment":"Water vapor pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"0.003"},{"name":"start","value":"2000"},{"name":"nominal","value":"1000"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Modelica.SIunits.MassFraction","qualifiers":["output"],"name":"x_w","comment":"Water mass fraction per mass of dry air","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"nominal","value":"0.01"},{"name":"start","value":"0.001"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock to compute the humidity ratio for a given water vapor partial pressure.\n\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003euse_p_in\u003c/code\u003e is false (default option), the \u003ccode\u003ep\u003c/code\u003e parameter\nis used as atmospheric pressure,\nand the \u003ccode\u003ep_in\u003c/code\u003e input connector is disabled;\nif \u003ccode\u003euse_p_in\u003c/code\u003e is true, then the \u003ccode\u003ep\u003c/code\u003e parameter is ignored,\nand the value provided by the input connector is used instead.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Text()})"}},"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations":{"name":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations","comment":"Declarations for lumped volumes","components":[{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"energyDynamics","comment":"Type of energy balance: dynamic (3 initialization options) or steady state","value":"Modelica.Fluid.Types.Dynamics.DynamicFreeInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"massDynamics","comment":"Type of mass balance: dynamic (3 initialization options) or steady state","value":"energyDynamics","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["final","parameter"],"name":"substanceDynamics","comment":"Type of independent mass fraction balance: dynamic (3 initialization options) or steady state","value":"energyDynamics","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["final","parameter"],"name":"traceDynamics","comment":"Type of trace substance balance: dynamic (3 initialization options) or steady state","value":"energyDynamics","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Medium.AbsolutePressure","qualifiers":["parameter"],"name":"p_start","comment":"Start value of pressure","value":"Medium.p_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Medium.Temperature","qualifiers":["parameter"],"name":"T_start","comment":"Start value of temperature","value":"Medium.T_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X_start","comment":"Start value of mass fractions m_i/m","value":"Medium.X_default","modifications":[{"name":"quantity","value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", enable \u003d Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C_start","comment":"Start value of trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", enable \u003d Medium.nC\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C_nominal","comment":"Nominal value of trace substances. (Set to typical order of magnitude.)","value":"fill(1E-2,Medium.nC)","modifications":[{"name":"quantity","value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\", enable \u003d Medium.nC\u003e0)"}},{"className":"Real","qualifiers":["parameter"],"name":"mSenFac","comment":"Factor for scaling the sensible thermal mass of the volume","value":"1","modifications":[{"name":"min","value":"1"}],"annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\")"}}],"classes":[{"name":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis class contains parameters and medium properties\nthat are used in the lumped  volume model, and in models that extend the\nlumped volume model.\n\u003c/p\u003e\n\u003cp\u003e\nThese parameters are used by\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.ConservationEquation\\\"\u003e\nBuildings.Fluid.Interfaces.ConservationEquation\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes.MixingVolume\\\"\u003e\nBuildings.Fluid.MixingVolumes.MixingVolume\u003c/a\u003e,\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.MixedAir\\\"\u003e\nBuildings.Rooms.MixedAir\u003c/a\u003e, and by\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.BaseClasses.MixedAir\\\"\u003e\nBuildings.Rooms.BaseClasses.MixedAir\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Math.InverseXRegularized":{"name":"Buildings.Utilities.Math.InverseXRegularized","comment":"Function that approximates 1/x by a twice continuously differentiable function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"delta","comment":"Abscissa value below which approximation occurs","modifications":[{"name":"min","value":"0"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eFunction that approximates \u003ci\u003ey\u003d1 \u0026frasl; x\u003c/i\u003e inside the interval \u003ci\u003e-\u0026delta; \u0026le; x \u0026le; \u0026delta;\u003c/i\u003e. The approximation is twice continuously differentiable with a bounded derivative on the whole real line. \u003c/p\u003e\n\u003cp\u003eSee the package \u003ccode\u003eExamples\u003c/code\u003e for the graph. \u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Media.Air.isothermalCompressibility":{"name":"Buildings.Media.Air.isothermalCompressibility","comment":"Isothermal compressibility factor","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.isothermalCompressibility"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the isothermal compressibility coefficient.\nThe isothermal compressibility is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n\u0026kappa;\u003csub\u003eT\u003c/sub\u003e \u003d -1 \u0026frasl; v \u0026nbsp; (\u0026part; v \u0026frasl; \u0026part; p)\u003csub\u003eT\u003c/sub\u003e\n  \u003d -1 \u0026frasl; p,\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003ev\u003c/i\u003e is the specific volume,\n\u003ci\u003eT\u003c/i\u003e is the temperature and\n\u003ci\u003ep\u003c/i\u003e is the pressure.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.Radiators.RadiatorEN442_2":{"name":"Buildings.Fluid.HeatExchangers.Radiators.RadiatorEN442_2","comment":"Dynamic radiator for space heating","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.PartialTwoPortInterface","modifications":[{"name":"show_T","value":"true"},{"name":"m_flow_nominal","value":"abs(Q_flow_nominal/(cp_nominal)/(T_a_nominal-T_b_nominal))"}]},{"nameOfExtendedClass":"Buildings.Fluid.Interfaces.LumpedVolumeDeclarations","modifications":[{"name":"X_start","qualifiers":["final"],"value":"Medium.X_default"},{"name":"C_start","qualifiers":["final"],"value":"fill(0,Medium.nC)"},{"name":"C_nominal","qualifiers":["final"],"value":"fill(1E-2,Medium.nC)"},{"name":"mSenFac","qualifiers":["final"],"value":"1+500*mDry/(VWat*cp_nominal*Medium.density(Medium.setState_pTX(Medium.p_default,Medium.T_default,Medium.X_default)))"}]}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nEle","comment":"Number of elements used in the discretization","value":"5","modifications":[{"name":"min","value":"1"}]},{"className":"Real","qualifiers":["parameter"],"name":"fraRad","comment":"Fraction radiant heat transfer","value":"0.35","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Power","qualifiers":["parameter"],"name":"Q_flow_nominal","comment":"Nominal heating power (positive for heating)","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_a_nominal","comment":"Water inlet temperature at nominal condition","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_b_nominal","comment":"Water outlet temperature at nominal condition","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TAir_nominal","comment":"Air temperature at nominal condition","value":"293.15","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"TRad_nominal","comment":"Radiative temperature at nominal condition","value":"TAir_nominal","annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Real","qualifiers":["parameter"],"name":"n","comment":"Exponent for heat transfer","value":"1.24"},{"className":"Modelica.SIunits.Volume","qualifiers":["parameter"],"name":"VWat","comment":"Water volume of radiator","value":"5.8E-6*abs(Q_flow_nominal)","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", enable \u003d not energyDynamics\u003d\u003dModelica.Fluid.Types.Dynamics.SteadyState)"}},{"className":"Modelica.SIunits.Mass","qualifiers":["parameter"],"name":"mDry","comment":"Dry mass of radiator that will be lumped to water heat capacity","value":"0.0263*abs(Q_flow_nominal)","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", enable \u003d not energyDynamics\u003d\u003dModelica.Fluid.Types.Dynamics.SteadyState)"}},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.SIunits.HeatFlowRate","name":"QCon_flow","comment":"Heat input into the water due to convective heat transfer with room air","value":"heatPortCon.Q_flow"},{"className":"Modelica.SIunits.HeatFlowRate","name":"QRad_flow","comment":"Heat input into the water due to radiative heat transfer with room","value":"heatPortRad.Q_flow"},{"className":"Modelica.SIunits.HeatFlowRate","name":"Q_flow","comment":"Heat input into the water","value":"QCon_flow+QRad_flow"},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heatPortCon","comment":"Heat port for convective heat transfer with room air temperature","annotations":{"placement":"Placement(transformation(extent \u003d {{-30,62},{-10,82}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"heatPortRad","comment":"Heat port for radiative heat transfer with room radiation temperature","annotations":{"placement":"Placement(transformation(extent \u003d {{10,62},{30,82}}))"}},{"className":"Fluid.MixingVolumes.MixingVolume","qualifiers":["array"],"name":"vol","comment":"Volume for fluid stream","modifications":[{"name":"Medium","qualifiers":["redeclare","package","each"],"value":"Medium"},{"name":"nPorts","qualifiers":["each"],"value":"2"},{"name":"V","qualifiers":["each"],"value":"VWat/(nEle)"},{"name":"m_flow_nominal","qualifiers":["final","each"],"value":"m_flow_nominal"},{"name":"energyDynamics","qualifiers":["final","each"],"value":"energyDynamics"},{"name":"massDynamics","qualifiers":["final","each"],"value":"massDynamics"},{"name":"p_start","qualifiers":["final","each"],"value":"p_start"},{"name":"T_start","qualifiers":["final","each"],"value":"T_start"},{"name":"X_start","qualifiers":["final","each"],"value":"X_start"},{"name":"C_start","qualifiers":["final","each"],"value":"C_start"},{"name":"mSenFac","qualifiers":["final","each"],"value":"mSenFac"}],"arraySubscripts":"[nEle]","annotations":{"placement":"Placement(transformation(extent \u003d {{-9,0},{11,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a radiator that can be used as a dynamic or steady-state model.\nThe required parameters are data that are typically available from\nmanufacturers that follow the European Norm EN 442-2.\n\u003c/p\u003e\n\u003cp\u003e\nHowever, to allow for varying mass flow rates, the transferred heat is computed\nusing a discretization along the water flow path, and heat is exchanged between\neach compartment and a uniform room air and radiation temperature.\nThis discretization is different from the computation in EN 442-2, which\nmay yield water outlet temperatures that are below\nthe room temperature at low mass flow rates.\nFurthermore, rather than using only one room temperature, this model uses\na room air and room radiation temperature.\n\u003c/p\u003e\n\u003cp\u003e\nThe transferred heat is modeled as follows:\nLet \u003ci\u003eN\u003c/i\u003e denote the number of elements used to discretize the radiator model.\nFor each element \u003ci\u003ei \u0026isin; {1, \u0026hellip; , N}\u003c/i\u003e,\nthe convective and radiative heat transfer\n\u003ci\u003eQ\u003csup\u003ei\u003c/sup\u003e\u003csub\u003ec\u003c/sub\u003e\u003c/i\u003e and\n\u003ci\u003eQ\u003csup\u003ei\u003c/sup\u003e\u003csub\u003er\u003c/sub\u003e\u003c/i\u003e\nfrom the radiator to the room is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\n  Q\u003csup\u003ei\u003c/sup\u003e\u003csub\u003ec\u003c/sub\u003e \u003d sign(T\u003csup\u003ei\u003c/sup\u003e-T\u003csub\u003ea\u003c/sub\u003e)\n     (1-f\u003csub\u003er\u003c/sub\u003e) UA \u0026frasl; N |T\u003csup\u003ei\u003c/sup\u003e-T\u003csub\u003ea\u003c/sub\u003e|\u003csup\u003en\u003c/sup\u003e\n  \u003cbr/\u003e \u003cbr/\u003e\n  Q\u003csup\u003ei\u003c/sup\u003e\u003csub\u003er\u003c/sub\u003e \u003d sign(T\u003csup\u003ei\u003c/sup\u003e-T\u003csub\u003er\u003c/sub\u003e)\n     f\u003csub\u003er\u003c/sub\u003e UA \u0026frasl; N |T\u003csup\u003ei\u003c/sup\u003e-T\u003csub\u003er\u003c/sub\u003e|\u003csup\u003en\u003c/sup\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere\n\u003ci\u003eT\u003csup\u003ei\u003c/sup\u003e\u003c/i\u003e is the water temperature of the element,\n\u003ci\u003eT\u003csub\u003ea\u003c/sub\u003e\u003c/i\u003e is the temperature of the room air,\n\u003ci\u003eT\u003csub\u003er\u003c/sub\u003e\u003c/i\u003e is the radiative temperature,\n\u003ci\u003e0 \u0026lt; f\u003csub\u003er\u003c/sub\u003e \u0026lt; 1\u003c/i\u003e is the fraction of radiant to total heat transfer,\n\u003ci\u003eUA\u003c/i\u003e is the UA-value of the radiator,\nand\n\u003ci\u003en\u003c/i\u003e is an exponent for the heat transfer.\nThe model computes the UA-value by numerically solving the above equations\nfor given\nnominal heating power, nominal temperatures, fraction radiant to total heat transfer\nand exponent for heat transfer.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eenergyDynamics\u003c/code\u003e (in the Assumptions tab),\ndetermines whether the model computes the dynamic or the steady-state response.\nFor the transient response, heat storage is computed using a\nfinite volume approach for the\nwater and the metal mass, which are both assumed to be at the same\ntemperature.\n\u003c/p\u003e\n\u003cp\u003e\nThe default parameters for the heat capacities are valid for a flat plate radiator without fins,\nwith one plate of water carying fluid, and a height of 0.42 meters.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Ellipse(),Rectangle(),Rectangle(),Ellipse(),Rectangle(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.Cu50":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Cu50","comment":"Cu cable 50 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Cu"},{"name":"M","value":"234.5+273.15"},{"name":"Amp","value":"170"},{"name":"RCha","value":"0.362e-003"},{"name":"XCha","value":"0.073e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCopper cable with a cross-sectional area of 50mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.362e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.073e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_30":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Annealed_Al_30","comment":"Annealed Al cable - AWG 3/0","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Al"},{"name":"M","value":"228.1+273.15"},{"name":"size","value":"\"3/0\""},{"name":"Rdc","value":"0.344488e-3"},{"name":"T_ref","value":"298.15"},{"name":"d","value":"11.582e-3"},{"name":"D","value":"28.956e-3"},{"name":"GMR","value":"Buildings.Electrical.Transmission.Functions.computeGMR(d)"},{"name":"GMD","value":"Buildings.Electrical.Transmission.Functions.computeGMD(0.1905)"},{"name":"Amp","value":"250"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAnnealed aluminium cable with a cross-sectional AWG 2/0\n(American Wire Gauge).\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRdc  \u003d 0.344488e-3 // Characteristic DC resistance at T \u003d T_ref[Ohm/m]\nT_ref\u003d 298.15      // Reference temperature of the material [K]\nd    \u003d 11.582e-3   // Inner diameter [m]\nD    \u003d 28.956e-3   // Outer diameter [m]\nAmp  \u003d 250         // Ampacity [A]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortRLC":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortRLC","comment":"Model of a RLC element with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortRLC","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRLC impedance that connects two AC three-phase\nbalanced interfaces. This model can be used to represent a\ncable in a three-phase balanced AC system.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Lines.TwoPortRLC\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Lines.TwoPortRLC\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Rooms.Constructions.ConstructionWithWindow":{"name":"Buildings.Rooms.Constructions.ConstructionWithWindow","comment":"Model for an opaque construction that has one window embedded in the construction","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.Constructions.BaseClasses.PartialConstruction","modifications":[{"name":"AOpa","qualifiers":["final"],"value":"A-AWin"}]}],"components":[{"className":"Modelica.SIunits.Area","qualifiers":["parameter"],"name":"AWin","comment":"Heat transfer area of window","annotations":{"dialog":"Dialog(group \u003d \"Glazing system\")"}},{"className":"Real","qualifiers":["parameter"],"name":"fFra","comment":"Fraction of window frame divided by total window area","value":"0.1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Glazing system\")"}},{"className":"Modelica.SIunits.Area","qualifiers":["final","parameter"],"name":"AFra","comment":"Frame area","value":"fFra*AWin","annotations":{"dialog":"Dialog(group \u003d \"Glazing system\")"}},{"className":"Modelica.SIunits.Area","qualifiers":["final","parameter"],"name":"AGla","comment":"Glass area","value":"AWin-AFra","annotations":{"dialog":"Dialog(group \u003d \"Glazing system\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearizeRadiation","comment":"Set to true to linearize emissive power","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Glazing system\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"homotopyInitialization","comment":"\u003d true, use homotopy method","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"HeatTransfer.Data.GlazingSystems.Generic","qualifiers":["replaceable","parameter"],"name":"glaSys","comment":"Material properties of glazing system","annotations":{"dialog":"Dialog(group \u003d \"Glazing system\")","placement":"Placement(transformation(extent \u003d {{140,80},{160,100}}))"}},{"className":"HeatTransfer.Windows.Window","name":"win","comment":"Window model","modifications":[{"name":"glaSys","qualifiers":["final"],"value":"glaSys"},{"name":"A","qualifiers":["final"],"value":"AWin"},{"name":"fFra","qualifiers":["final"],"value":"fFra"},{"name":"linearize","qualifiers":["final"],"value":"linearizeRadiation"},{"name":"til","qualifiers":["final"],"value":"til"},{"name":"homotopyInitialization","qualifiers":["final"],"value":"homotopyInitialization"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-114,-184},{112,42}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityOutflow","name":"JOutUns_a","comment":"Outgoing radiosity that connects to unshaded part of glass at exterior side","annotations":{"placement":"Placement(transformation(extent \u003d {{-300,-30},{-320,-10}}), iconTransformation(extent \u003d {{-300,-30},{-320,-10}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityInflow","name":"JInUns_a","comment":"Incoming radiosity that connects to unshaded part of glass at exterior side","annotations":{"placement":"Placement(transformation(extent \u003d {{-320,10},{-300,30}}), iconTransformation(extent \u003d {{-320,10},{-300,30}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityOutflow","name":"JOutSha_a","comment":"Outgoing radiosity that connects to shaded part of glass at exterior side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-300,-210},{-320,-190}}), iconTransformation(extent \u003d {{-300,-210},{-320,-190}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityInflow","name":"JInSha_a","comment":"Incoming radiosity that connects to shaded part of glass at exterior side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-320,-170},{-300,-150}}), iconTransformation(extent \u003d {{-320,-170},{-300,-150}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"glaUns_a","comment":"Heat port at unshaded glass of exterior-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-310,-90},{-290,-70}}), iconTransformation(extent \u003d {{-310,-90},{-290,-70}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"glaSha_a","comment":"Heat port at shaded glass of exterior-facing surface","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-310,-130},{-290,-110}}), iconTransformation(extent \u003d {{-310,-130},{-290,-110}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a","name":"fra_a","comment":"Heat port at frame of exterior-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{-310,-270},{-290,-250}}), iconTransformation(extent \u003d {{-310,-270},{-290,-250}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"uSha","comment":"Control signal for the shading device, 0: unshaded; 1: fully shaded (removed if no shade is present)","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-340,40},{-300,80}}), iconTransformation(extent \u003d {{-340,40},{-300,80}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityOutflow","name":"JOutUns_b","comment":"Outgoing radiosity that connects to unshaded part of glass at room-side","annotations":{"placement":"Placement(transformation(extent \u003d {{300,10},{320,30}}), iconTransformation(extent \u003d {{300,10},{320,30}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityInflow","name":"JInUns_b","comment":"Incoming radiosity that connects to unshaded part of glass at room-side","annotations":{"placement":"Placement(transformation(extent \u003d {{320,-30},{300,-10}}), iconTransformation(extent \u003d {{320,-30},{300,-10}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityOutflow","name":"JOutSha_b","comment":"Outgoing radiosity that connects to shaded part of glass at room-side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{300,-170},{320,-150}}), iconTransformation(extent \u003d {{300,-170},{320,-150}}))"}},{"className":"HeatTransfer.Interfaces.RadiosityInflow","name":"JInSha_b","comment":"Incoming radiosity that connects to shaded part of glass at room-side","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{320,-210},{300,-190}}), iconTransformation(extent \u003d {{320,-210},{300,-190}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"glaUns_b","comment":"Heat port at unshaded glass of room-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{290,-90},{310,-70}}), iconTransformation(extent \u003d {{290,-90},{310,-70}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"glaSha_b","comment":"Heat port at shaded glass of room-facing surface","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{290,-130},{310,-110}}), iconTransformation(extent \u003d {{290,-130},{310,-110}}))"}},{"className":"Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b","name":"fra_b","comment":"Heat port at frame of room-facing surface","annotations":{"placement":"Placement(transformation(extent \u003d {{292,-270},{312,-250}}), iconTransformation(extent \u003d {{292,-270},{312,-250}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"QAbsUns_flow","comment":"Solar radiation absorbed by unshaded part of glass","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"W\""},{"name":"quantity","qualifiers":["each"],"value":"\"Power\""}],"arraySubscripts":"[size(glaSys.glass,1)]","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-40,-320}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-80,-320}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"QAbsSha_flow","comment":"Solar radiation absorbed by shaded part of glass","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"W\""},{"name":"quantity","qualifiers":["each"],"value":"\"Power\""}],"arraySubscripts":"[size(glaSys.glass,1)]","conditionalClause":" if haveShade","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {100,-320}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {80,-320}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-300,-300},{300,300}}))","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model is used to compute heat transfer through constructions with windows inside the\nroom model.\n\u003c/p\u003e\n\u003cp\u003e\nThe model consists of the following two main submodels:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe instance \u003ccode\u003eopa\u003c/code\u003e, which uses the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Conduction.MultiLayer\\\"\u003e\nBuildings.HeatTransfer.Conduction.MultiLayer\u003c/a\u003e to compute\nthe heat transfer through the opaque part of the construction.\nThis model uses the record \u003ccode\u003elayers\u003c/code\u003e to access the material properties\nof the opaque construction.\n\u003c/li\u003e\n\u003cli\u003e\nThe instance \u003ccode\u003ewin\u003c/code\u003e, which uses the model\n\u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Windows.Window\\\"\u003e\nBuildings.HeatTransfer.Windows.Window\u003c/a\u003e to compute\nthe heat transfer through the glazing system.\nThis model uses the record \u003ccode\u003eglaSys\u003c/code\u003e to access the material properties\nof the glazing system.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003eA\u003c/code\u003e is the area of the opaque construction plus the window.\nThe parameter \u003ccode\u003eAWin\u003c/code\u003e is the area of the glazing system, including the frame.\nThe area of the opaque construction is assigned internally as \u003ccode\u003eAOpa\u003dA-AWin\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-300,-300},{300,300}}), graphics \u003d {Rectangle(),Polygon(),Line(),Polygon(),Polygon(),Line(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Polygon(),Polygon(),Polygon(),Polygon(),Ellipse()})"}},"Buildings.Fluid.Sources.Boundary_ph":{"name":"Buildings.Fluid.Sources.Boundary_ph","comment":"Boundary with prescribed pressure, specific enthalpy, composition and trace substances","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Fluid.Sources.BaseClasses.PartialSource"}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"Get the pressure from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_h_in","comment":"Get the specific enthalpy from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_X_in","comment":"Get the composition from the input connector","value":"false"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_C_in","comment":"Get the trace substances from the input connector","value":"false"},{"className":"Medium.AbsolutePressure","qualifiers":["parameter"],"name":"p","comment":"Fixed value of pressure","value":"Medium.p_default","annotations":{"dialog":"Dialog(enable \u003d not use_p_in)"}},{"className":"Medium.SpecificEnthalpy","qualifiers":["parameter"],"name":"h","comment":"Fixed value of specific enthalpy","value":"Medium.h_default","annotations":{"dialog":"Dialog(enable \u003d not use_h_in)"}},{"className":"Medium.MassFraction","qualifiers":["array","parameter"],"name":"X","comment":"Fixed value of composition","value":"Medium.X_default","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(enable \u003d not use_X_in and Medium.nXi\u003e0)"}},{"className":"Medium.ExtraProperty","qualifiers":["array","parameter"],"name":"C","comment":"Fixed values of trace substances","value":"fill(0,Medium.nC)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","annotations":{"dialog":"Dialog(enable \u003d not use_C_in and Medium.nC\u003e0)"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"p_in","comment":"Prescribed boundary pressure","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"Pa\""}],"conditionalClause":" if use_p_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,60},{-100,100}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"h_in","comment":"Prescribed boundary specific enthalpy","modifications":[{"name":"unit","qualifiers":["final"],"value":"\"J/kg\""}],"conditionalClause":" if use_h_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,20},{-100,60}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"X_in","comment":"Prescribed boundary composition","modifications":[{"name":"unit","qualifiers":["final","each"],"value":"\"kg/kg\""},{"name":"quantity","qualifiers":["final"],"value":"Medium.substanceNames"}],"arraySubscripts":"[Medium.nX]","conditionalClause":" if use_X_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-60},{-100,-20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"C_in","comment":"Prescribed boundary trace substances","modifications":[{"name":"quantity","qualifiers":["final"],"value":"Medium.extraPropertiesNames"}],"arraySubscripts":"[Medium.nC]","conditionalClause":" if use_C_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-100},{-100,-60}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nDefines prescribed values for boundary conditions:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e Prescribed boundary pressure.\u003c/li\u003e\n\u003cli\u003e Prescribed boundary temperature.\u003c/li\u003e\n\u003cli\u003e Boundary composition (only for multi-substance or trace-substance flow).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf \u003ccode\u003euse_p_in\u003c/code\u003e is false (default option), the \u003ccode\u003ep\u003c/code\u003e parameter\nis used as boundary pressure, and the \u003ccode\u003ep_in\u003c/code\u003e input connector is disabled; if \u003ccode\u003euse_p_in\u003c/code\u003e is true, then the \u003ccode\u003ep\u003c/code\u003e parameter is ignored, and the value provided by the input connector is used instead.\u003c/p\u003e\n\u003cp\u003eThe same applies to the temperature, composition and trace substances.\u003c/p\u003e\n\u003cp\u003e\nNote, that boundary temperature,\nmass fractions and trace substances have only an effect if the mass flow\nis from the boundary into the port. If mass is flowing from\nthe port into the boundary, the boundary definitions,\nwith exception of boundary pressure, do not have an effect.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Ellipse(),Text(),Line(),Line(),Line(),Line(),Text(),Text(),Text(),Text()})"}},"Buildings.Controls.Sources.DayType":{"name":"Buildings.Controls.Sources.DayType","comment":"Block that outputs a signal that indicates week-day or week-end","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.DiscreteBlock"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nout","comment":"Number of days to output. Set to two for one day predictions","value":"2"},{"className":"Buildings.Controls.Types.Day","qualifiers":["array","parameter"],"name":"days","comment":"Array where each element is a day indicator","value":"{Buildings.Controls.Types.Day.WorkingDay,Buildings.Controls.Types.Day.WorkingDay,Buildings.Controls.Types.Day.WorkingDay,Buildings.Controls.Types.Day.WorkingDay,Buildings.Controls.Types.Day.WorkingDay,Buildings.Controls.Types.Day.NonWorkingDay,Buildings.Controls.Types.Day.NonWorkingDay}","arraySubscripts":"[:]"},{"className":"Integer","qualifiers":["parameter"],"name":"iStart","comment":"Index of element in days at simulation start","value":"1","modifications":[{"name":"min","value":"1"},{"name":"max","value":"size(days,1)"}]},{"className":"Interfaces.DayTypeOutput","qualifiers":["array"],"name":"y","comment":"Type of the day for the current and the next (nout-1) days","arraySubscripts":"[nout]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis block outputs a periodic signal that indicates the type of the day.\nIt can for example be used to generate a signal that indicates whether\nthe current time is a work day or a non-working day.\nThe output signal is of type\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Types.Day\\\"\u003e\nBuildings.Controls.Types.Day\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003enout\u003c/code\u003e determines how many days should be\nsent to the output. For applications in which only the current day\nis of interest, set \u003ccode\u003enout\u003d1\u003c/code\u003e.\nFor applications in which the load is predicted for the next \u003ci\u003e24\u003c/i\u003e hours,\nset \u003ccode\u003enout\u003d2\u003c/code\u003e in order to output the type of day for today and for\ntomorrow.\n\u003c/p\u003e\n\u003cp\u003e\nThe transition from one day type to another always happens when the simulation time\nis a multiple of \u003ci\u003e1\u003c/i\u003e day. Hence, if the simulation starts for example\nat \u003ci\u003et\u003d-3600\u003c/i\u003e seconds, then the first transition to another day will be\nat \u003ci\u003et\u003d0\u003c/i\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.ClosetAndElectricalDividingWall":{"name":"Buildings.Rooms.FLEXLAB.Data.Constructions.OpaqueConstructions.DividingWalls.ClosetAndElectricalDividingWall","comment":"Wall separating FLEXLAB closets from the adjoining\n      electrical rooms","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.OpaqueConstructions.Generic","modifications":[{"name":"material","qualifiers":["final"],"value":"{Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.InsulationBoard(),Buildings.HeatTransfer.Data.Solids.Plywood(),Buildings.HeatTransfer.Data.Solids.GypsumBoard()}"},{"name":"nLay","qualifiers":["final"],"value":"6"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a dividing wall found in FLEXLAB test cells. It is commonly\n    used to separate the electrical room and closet.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n    \u003cp\u003e\n    This is a dividing wall found in FLEXLAB test cells. It is commonly\n    used to separate the electrical room and closet.\n    \u003c/p\u003e\n    \u003c/html\u003e\""}},"Buildings.Utilities.Time.ModelTime":{"name":"Buildings.Utilities.Time.ModelTime","comment":"Model time","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SO"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eThis component outputs the model time, which starts at the value at which the simulation starts. For example, if a simulation starts at \u003ci\u003et\u003d-1\u003c/i\u003e, then this block outputs first \u003ci\u003et\u003d-1\u003c/i\u003e, and its output is advanced at the same rate as the simulation time. \u003c/p\u003e\n\u003cp\u003eThe model is used to allow the simulation to start from any time without having to set the parameters for the clock, as would be necessary for the model \u003ca href\u003d\\\"modelica://Modelica.Blocks.Sources.Clock\\\"\u003eModelica.Blocks.Sources.Clock\u003c/a\u003e. \u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Ellipse(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.BoundaryConditions.Types.RadiationDataSource":{"name":"Buildings.BoundaryConditions.Types.RadiationDataSource","comment":"Enumeration to define solar radiation data source","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"File","comment":"Use data from file"},{"className":"EnumType","qualifiers":["constant"],"name":"Input_HGloHor_HDifHor","comment":"Global horizontal and diffuse horizontal radiation from connector"},{"className":"EnumType","qualifiers":["constant"],"name":"Input_HDirNor_HDifHor","comment":"Direct normal and diffuse horizontal radiation from connector"},{"className":"EnumType","qualifiers":["constant"],"name":"Input_HDirNor_HGloHor","comment":"Direct normal and global horizontal radiation from connector"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nEnumeration to define the data source used in the weather data reader.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Controls.Predictors.ElectricalLoad":{"name":"Buildings.Controls.Predictors.ElectricalLoad","comment":"Block that predicts an electrical load","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.DiscreteBlock"}],"components":[{"className":"Integer","qualifiers":["parameter"],"name":"nSam","comment":"Number of intervals in a day for which baseline is computed","value":"24","modifications":[{"name":"min","value":"1"}]},{"className":"Integer","qualifiers":["parameter"],"name":"nPre","comment":"Number of intervals for which future load need to be predicted (set to one to only predict current time, or to nSam to predict one day)","value":"1","modifications":[{"name":"min","value":"1"}]},{"className":"Integer","qualifiers":["parameter"],"name":"nHis","comment":"Number of history terms to be stored","value":"10","modifications":[{"name":"min","value":"1"}]},{"className":"Buildings.Controls.Predictors.Types.PredictionModel","qualifiers":["parameter"],"name":"predictionModel","comment":"Load prediction model","value":"Types.PredictionModel.WeatherRegression"},{"className":"Boolean","qualifiers":["parameter"],"name":"use_dayOfAdj","comment":"if true, use the day of adjustment","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Day of adjustment\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"dayOfAdj_start","comment":"Number of hours prior to current time when day of adjustment starts","value":"-14400","modifications":[{"name":"max","value":"0"},{"name":"displayUnit","value":"\"h\""}],"annotations":{"dialog":"Dialog(enable \u003d use_dayOfAdj, group \u003d \"Day of adjustment\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"dayOfAdj_end","comment":"Number of hours prior to current time when day of adjustment ends","value":"-3600","modifications":[{"name":"max","value":"0"},{"name":"displayUnit","value":"\"h\""}],"annotations":{"dialog":"Dialog(enable \u003d use_dayOfAdj, group \u003d \"Day of adjustment\")"}},{"className":"Real","qualifiers":["parameter"],"name":"minAdjFac","comment":"Minimum adjustment factor","value":"0.8","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(enable \u003d use_dayOfAdj, group \u003d \"Day of adjustment\")"}},{"className":"Real","qualifiers":["parameter"],"name":"maxAdjFac","comment":"Maximum adjustment factor","value":"1.2","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(enable \u003d use_dayOfAdj, group \u003d \"Day of adjustment\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TOut","comment":"Outside air temperature","modifications":[{"name":"unit","value":"\"K\""}],"conditionalClause":" if predictionModel\u003d\u003dBuildings.Controls.Predictors.Types.PredictionModel.WeatherRegression","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-80},{-100,-40}}), iconTransformation(extent \u003d {{-140,-80},{-100,-40}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"TOutFut","comment":"Future outside air temperatures","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"K\""}],"arraySubscripts":"[nPre-1]","conditionalClause":" if predictionModel\u003d\u003dBuildings.Controls.Predictors.Types.PredictionModel.WeatherRegression","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-120},{-100,-80}}), iconTransformation(extent \u003d {{-140,-120},{-100,-80}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"ECon","comment":"Consumed electrical energy","modifications":[{"name":"unit","value":"\"J\""},{"name":"nominal","value":"1E5"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}), iconTransformation(extent \u003d {{-140,-20},{-100,20}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array","discrete"],"name":"PPre","comment":"Predicted power consumptions (first element is for current time","modifications":[{"name":"unit","qualifiers":["each"],"value":"\"W\""}],"arraySubscripts":"[nPre]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Buildings.Controls.Interfaces.DayTypeInput","qualifiers":["array"],"name":"typeOfDay","comment":"Type of day for the current and the future days for which a prediction is to be made.\n    Typically, this has dimension 2 for predictions up to and including 24 hours, and 2+n for any additional day","arraySubscripts":"[integer((nPre-1)/(nSam))+2]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,120},{-100,80}}), iconTransformation(extent \u003d {{-140,120},{-100,80}}))"}},{"className":"Modelica.Blocks.Interfaces.BooleanInput","name":"storeHistory","comment":"If false, history terms are no longer stored for the remainder of the day","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,70},{-100,30}}))"}},{"className":"Real","qualifiers":["discrete"],"name":"adj","comment":"Load adjustment factor","modifications":[{"name":"unit","value":"\"1\""}]}],"classes":[{},{},{},{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nData-driven model that predicts the electrical load.\nThis load prediction can for example be used in a demand response client.\n\u003c/p\u003e\n\u003cp\u003e\nThe model computes either an average baseline or\na linear regression with respect to outside temperature.\nFor both, optionally a day-of adjustment can be made.\n\u003c/p\u003e\n\u003ch4\u003eComputation of baseline\u003c/h4\u003e\n\u003cp\u003e\nSeparate loads are computed for any types of days.\nThe type of day is an input signal received from the connector\n\u003ccode\u003etypeOfDay\u003c/code\u003e, and must be equal to any value defined\nin\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Types.Day\\\"\u003e\nBuildings.Controls.Types.Day\u003c/a\u003e.\nThis input is a vector where the first element corresponds to the\ncurrent day, the next element to tomorrow, and so on.\nThe dimension of this input vector is typically \u003ci\u003e2\u003c/i\u003e if\nthe demand is to be predicted for the next \u003ci\u003e24\u003c/i\u003e hours.\nIf it is for the next \u003ci\u003e48\u003c/i\u003e hours, then the dimension is \u003ci\u003e3\u003c/i\u003e.\nUsing a vector is required as the prediction could be\nfrom noon of a workday to noon of a holiday or week-end day.\n\u003c/p\u003e\n\u003cp\u003e\nThe average baseline is the average of the consumed power of the previous\n\u003ci\u003en\u003csub\u003ehis\u003c/sub\u003e\u003c/i\u003e days for the same time interval. The default value is\n\u003ci\u003en\u003csub\u003ehis\u003c/sub\u003e\u003d10\u003c/i\u003e days.\nFor example, if the prediction is mode for 1 hour time windows,\nthen there are 24 baseline values for each day,\neach being the average power consumed in the past 10 days that have the same\n\u003ccode\u003etypeOfDay\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe linear regression model computes the predicted power as a linear function of the\ncurrent outside temperature. The two coefficients for the linear function are\nobtained using a regression of the past \u003ci\u003en\u003csub\u003ehis\u003c/sub\u003e\u003c/i\u003e days.\n\u003c/p\u003e\n\u003cp\u003e\nIf the input signal \u003ccode\u003estoreHistory\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, then\nthe prediction is no longer carried out for this day until midnight.\nFor example, if used for a demand respond client, on an event day,\none may want to set \u003ccode\u003estoreHistory\u003dtrue\u003c/code\u003e when the building operates\nin demand respond mode. Then any time interval after this signal\nis received is excluded from the baseline computation.\nStoring history terms for the baseline resumes automatically at midnight.\n\u003c/p\u003e\n\u003cp\u003e\nIf no history term is present for the current time interval and\nthe current type of day, then the predicted power consumption\n\u003ccode\u003ePPre[:]\u003c/code\u003e will be zero.\n\u003c/p\u003e\n\u003ch4\u003eDay-of adjustment\u003c/h4\u003e\n\u003cp\u003e\nIf the parameter \u003ccode\u003euse_dayOfAdj \u003d true\u003c/code\u003e, then the\nday-of adjustment is computed. (Some literature call this\nmorning-of adjustment, but we call it day-of adjustment because\nthe adjustment can also be in the afternoon if the peak is\nin the late afternoon hours.)\nThe day-of adjustment can be used with any of the above baseline computations.\nThe parameters \u003ccode\u003edayOfAdj_start\u003c/code\u003e and \u003ccode\u003edayOfAdj_end\u003c/code\u003e\ndetermine the time window during which the day-of adjustment is computed.\nBoth need to be negative times, measured in seconds prior to the time\nat which the power consumption is predicted.\nFor example, to use a day-of adjustment for the window of \u003ci\u003e4\u003c/i\u003e to \u003ci\u003e1\u003c/i\u003e\nhours prior to the event time, set\n\u003ccode\u003edayOfAdj_start\u003d-4*3600\u003c/code\u003e and \u003ccode\u003edayOfAdj_end\u003d-3600\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe day-of adjustment is computed as follows: First,\nthe average power \u003ci\u003eP\u003csub\u003eave\u003c/sub\u003e\u003c/i\u003e consumed\nover the day-of time window is computed. Next, the average power\n\u003ci\u003eP\u003csub\u003ehis\u003c/sub\u003e\u003c/i\u003e\nis computed for the past \u003ci\u003en\u003csub\u003ehis\u003c/sub\u003e\u003c/i\u003e days.\nThen, the adjustment factor is computed as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\na \u003d min(a\u003csub\u003emax\u003c/sub\u003e, max(a\u003csub\u003emin\u003c/sub\u003e, P\u003csub\u003eave\u003c/sub\u003e \u0026frasl; P\u003csub\u003ehis\u003c/sub\u003e),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003ea\u003csub\u003emin\u003c/sub\u003e\u003c/i\u003e and \u003ci\u003ea\u003csub\u003emax\u003c/sub\u003e\u003c/i\u003e are the minimum\nand maximum adjustment factors as defined by the parameters\n\u003ccode\u003eadjFacMin\u003c/code\u003e and \u003ccode\u003eadjFacMax\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Media.Specialized.Air.PerfectGas.specificInternalEnergy":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificInternalEnergy","comment":"Specific internal energy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.specificInternalEnergy"},{"nameOfExtendedClass":"Modelica.Icons.Function"}]},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derp_T":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derp_T","comment":"Return the partial derivative of density with respect to pressure at constant temperature","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.density_derp_T"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the partial derivative of density\nwith respect to pressure at constant temperature,\nwhich is zero as the medium is incompressible.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.HeatTransfer.Data.Soil.Generic":{"name":"Buildings.HeatTransfer.Data.Soil.Generic","comment":"Thermal properties of solids with heat storage","superClasses":[{"nameOfExtendedClass":"Buildings.HeatTransfer.Data.BaseClasses.ThermalProperties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nGeneric record for solid materials used as soil.\nThe material is characterized by its\nthermal conductivity, mass density and specific\nheat capacity.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Psychrometrics.Functions.Internal.f_nonlinear":{"name":"Buildings.Utilities.Psychrometrics.Functions.Internal.f_nonlinear","superClasses":[{"nameOfExtendedClass":"Buildings.Utilities.Psychrometrics.Functions.Internal.f_nonlinear"}]},"Buildings.Fluid.HeatExchangers.RadiantSlabs.Types.HeatTransfer":{"name":"Buildings.Fluid.HeatExchangers.RadiantSlabs.Types.HeatTransfer","comment":"Model for the heat transfer along the fluid flow direction","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"EpsilonNTU","comment":"Epsilon-NTU"},{"className":"EnumType","qualifiers":["constant"],"name":"FiniteDifference","comment":"Finite difference"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis type definition is used to determine\nwhether the \u003ci\u003e\u0026epsilon;-NTU\u003c/i\u003e approach\nshould be used to compute the heat transfer\nbetween the fluid and the solid.\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.RadiantSlabs.UsersGuide\\\"\u003e\nuser\u0027s guide\u003c/a\u003e\nfor more information.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.Interfaces.PartialPV":{"name":"Buildings.Electrical.Interfaces.PartialPV","comment":"Base model for a PV system","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialPvBase"}],"components":[{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"110"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"G","comment":"Total solar irradiation per unit area","modifications":[{"name":"unit","value":"\"W/m2\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,70}, extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,120}))"}},{"className":"Buildings.Electrical.Interfaces.Terminal","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized terminal","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package","final"],"value":"PhaseSystem"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"classes":[{"name":"Buildings.Electrical.Interfaces.PartialPV.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nPartial model of a simple photovoltaic array.\n\u003c/p\u003e\n\u003cp\u003e\nThis model computes the power as \u003ci\u003eP\u003dA \u0026nbsp; f\u003csub\u003eact\u003c/sub\u003e \u0026nbsp; \u0026eta; \u0026nbsp; G\u003c/i\u003e,\nwhere \u003ci\u003eA\u003c/i\u003e is the panel area,\n\u003ci\u003ef\u003csub\u003eact\u003c/sub\u003e\u003c/i\u003e is the fraction of the aperture area,\n\u003ci\u003e\u0026eta;\u003c/i\u003e is the panel efficiency and\n\u003ci\u003eG\u003c/i\u003e is the total solar irradiation.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eNote:\u003c/b\u003e This model takes as input the total solar irradiation on the panel.\nThis has to be computed converting the incoming radiation to take tilt and azimuth into account.\n\u003c/p\u003e\n\u003cp\u003e\nThe electrical connector is a general electrical interface.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Line(),Text(),Polygon(),Polygon(),Text(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Text()})"}},"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineResistance":{"name":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineResistance","comment":"Function that computes the resistance of a cable","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic.lineResistance"}],"components":[{"className":"Buildings.Electrical.Transmission.MediumVoltageCables.Generic","qualifiers":["input"],"name":"cable","comment":"Record that contains cable properties"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function computes the overall resistance of a cable.\n\u003c/p\u003e\n\u003cp\u003e\nWhen the voltage level is medium or high, the cables have a DC resistance that needs\nto be corrected to account for the effects cause by the AC voltage.\nThe correction is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nR \u003d l\u003csub\u003eCABLE\u003c/sub\u003e R\u003csub\u003eDC\u003c/sub\u003e f\u003csub\u003eCORR\u003c/sub\u003e(s, m),\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eR\u003csub\u003eDC\u003c/sub\u003e \u003c/i\u003e is the characteristic DC resistance per unit lenght,\n\u003ci\u003el\u003csub\u003eCABLE\u003c/sub\u003e\u003c/i\u003e is the length of the cable, and\n\u003ci\u003ef\u003csub\u003eCORR\u003c/sub\u003e(s, m)\u003c/i\u003e is a function that corrects the DC value and depends on the\nsize of the cable \u003ci\u003es\u003c/i\u003e and its material \u003ci\u003em\u003c/i\u003e. See\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.Transmission.Functions.R_AC_correction\\\"\u003e\nBuildings.Electrical.Transmission.Functions.R_AC_correction\u003c/a\u003e for more details.\n\u003c/p\u003e\n\n\u003c/html\u003e\""}},"Buildings.Controls.SetPoints.OccupancySchedule":{"name":"Buildings.Controls.SetPoints.OccupancySchedule","comment":"Occupancy schedule with look-ahead","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Real","qualifiers":["array","parameter"],"name":"occupancy","comment":"Occupancy table, each entry switching occupancy on or off","value":"3600*{7,19}","arraySubscripts":"[:]"},{"className":"Boolean","qualifiers":["parameter"],"name":"firstEntryOccupied","comment":"Set to true if first entry in occupancy denotes a changed from unoccupied to occupied","value":"true"},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"period","comment":"End time of periodicity","value":"86400"},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"tNexNonOcc","comment":"Time until next non-occupancy","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"tNexOcc","comment":"Time until next occupancy","annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Modelica.Blocks.Interfaces.BooleanOutput","name":"occupied","comment":"Outputs true if occupied at current time","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-70},{120,-50}}))"}}],"classes":[{},{}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs whether the building is currently occupied,\nand how long it will take until the next time when the building\nwill be occupied or non-occupied.\nThe latter may be used, for example, to start a ventilation system\nhalf an hour before occupancy starts in order to ventilate the room.\n\u003c/p\u003e\n\u003cp\u003e\nThe occupancy is defined by a time schedule of the form\n\u003c/p\u003e\n\u003cpre\u003e\n  occupancy \u003d 3600*{7, 12, 14, 19}\n\u003c/pre\u003e\n\u003cp\u003e\nThis indicates that the occupancy is from \u003ci\u003e7:00\u003c/i\u003e until \u003ci\u003e12:00\u003c/i\u003e\nand from \u003ci\u003e14:00\u003c/i\u003e to \u003ci\u003e19:00\u003c/i\u003e. This will be repeated periodically.\nThe parameter \u003ccode\u003eperiodicity\u003c/code\u003e defines the periodicity.\nThe period always starts at \u003ci\u003et\u003d0\u003c/i\u003e seconds.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Line(),Line(),Ellipse(),Line(),Line(),Text(),Text(),Text()})"}},"Buildings.Electrical.DC.Loads.Conductor":{"name":"Buildings.Electrical.DC.Loads.Conductor","comment":"Model of a generic DC load","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.ResistiveLoad","modifications":[{"name":"PhaseSystem","qualifiers":["redeclare","package"],"value":"PhaseSystems.TwoConductor"},{"name":"terminal"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Line(),Line(),Rectangle()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nModel of a generic DC load. The load can be either constant or variable depending on the value of the\nparameter \u003ccode\u003emode\u003c/code\u003e.\nSee the model \u003ca href\u003d\\\"modelica://Buildings.Electrical.Interfaces.Load\\\"\u003eBuildings.Electrical.Interfaces.Load\u003c/a\u003e\nfor more information.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model computes the current drawn from the load as\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nP \u003d V i,\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eP\u003c/i\u003e is the power, \u003ci\u003eV\u003c/i\u003e is the voltage and \u003ci\u003ei\u003c/i\u003e is the current.\u003cbr/\u003e\nIf the component consumes power, then \u003ci\u003eP \u0026lt; 0\u003c/i\u003e.\nIf it feeds power into the electrical grid, then \u003ci\u003eP \u0026gt; 0\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003ch4\u003eLinearization\u003c/h4\u003e\n\u003cp\u003e\nConsider the simple DC circuit shown in the figure below\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/DC/Loads/simpleLoad.png\\\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nwhere \u003ci\u003eV\u003csub\u003eS\u003c/sub\u003e\u003c/i\u003e is a constant voltage source, and \u003ci\u003eR\u003c/i\u003e is the line resistance.\nThe load has a voltage \u003ci\u003eV\u003c/i\u003e across its electrical pins and a current \u003ci\u003ei\u003c/i\u003e is flowing through it.\nIf the power consumption drawn by the load is prescribed by the variable \u003ci\u003eP\u003csub\u003eLOAD\u003c/sub\u003e\u003c/i\u003e,\n the equation that describes the circuit is\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\nV\u003csub\u003eS\u003c/sub\u003e - R i - P\u003csub\u003eLOAD\u003c/sub\u003e/i \u003d 0\n\u003c/p\u003e\n\u003cp\u003e\nThe unknown variable \u003ci\u003ei\u003c/i\u003e appears in a nonlinear equation. This means that in order to compute the current\nthat is drawn by the load, a nonlinear equation has to be solved. If the number of loads increases (as typically\nhappens in real case examples) the number of nonlinear equations to be solved increases too, and the resulting system\nof nonlinear equations can slow down the simulation. It is possible to avoid such a problem by introducing a linearized\nmodel.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe first step to linearize the load model is to define its nominal voltage conditions \u003ci\u003eV\u003csub\u003enom\u003c/sub\u003e\u003c/i\u003e,\naround which the equations will be linearized.\u003cbr/\u003e\nThe constitutive equation of the load can be linearized around the nominal voltage condition \u003ci\u003eV\u003csub\u003enom\u003c/sub\u003e\u003c/i\u003e as\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni \u003d P\u003csub\u003eLOAD\u003c/sub\u003e/V \u003d P\u003csub\u003eLOAD\u003c/sub\u003e/V\u003csub\u003enom\u003c/sub\u003e +\n(V - V\u003csub\u003enom\u003c/sub\u003e)[\u0026part; (P\u003csub\u003eLOAD\u003c/sub\u003e/V)/ \u0026part;V ]\u003csub\u003eV \u003d V\u003csub\u003enom\u003c/sub\u003e\u003c/sub\u003e\n+ \u0026#8338;((V - V\u003csub\u003enom\u003c/sub\u003e)\u003csup\u003e2\u003c/sup\u003e),\n\u003c/p\u003e\n\n\u003cp\u003e\nwhich leads to the linearized formulation\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\" style\u003d\\\"font-style:italic;\\\"\u003e\ni \u0026#8771; P\u003csub\u003eLOAD\u003c/sub\u003e (2/V\u003csub\u003enom\u003c/sub\u003e - V/V\u003csub\u003enom\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e).\n\u003c/p\u003e\n\n\u003cp\u003e\nThe linearized formulation approximates the load power consumption (or production),\nwith the approximation error being proportional to \u003ci\u003e(V - V\u003csub\u003enom\u003c/sub\u003e)\u003csup\u003e2\u003c/sup\u003e\u003c/i\u003e.\nA further approximation has been introduced to improve the\napproximation of the linearized model even if the voltage is far from the nominal condition.\nThis piecewise linearized approximation instead of approximating the model just in the neighborhood of the nominal\nvoltage \u003ci\u003eV\u003csub\u003enom\u003c/sub\u003e\u003c/i\u003e introduces two new points where the model is approximated.\nThe points are at \u003ci\u003e0.8 V\u003csub\u003enom\u003c/sub\u003e\u003c/i\u003e and \u003ci\u003e1.2 V\u003csub\u003enom\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003ctable summary\u003d\\\"equations\\\" border \u003d \\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collape;\\\"\u003e\n\u003ctr\u003e\u003cth\u003eEquation\u003c/th\u003e\u003cth\u003eCondition\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ei \u0026#8771; P\u003csub\u003eLOAD\u003c/sub\u003e (2/(0.8 V\u003csub\u003enom\u003c/sub\u003e) - V/(0.8 V\u003csub\u003enom\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e))\u003c/td\u003e\n\u003ctd\u003eV \u0026lt; 8/9\u0026sdot; V\u003csub\u003enom\u003c/sub\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003ei \u0026#8771; P\u003csub\u003eLOAD\u003c/sub\u003e (2/(1.2  V\u003csub\u003enom\u003c/sub\u003e) - V/(1.2 V\u003csub\u003enom\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e))\u003c/td\u003e\n\u003ctd\u003eV \u0026ge; 12/11\u0026sdot; V\u003csub\u003enom\u003c/sub\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003ei \u0026#8771; P\u003csub\u003eLOAD\u003c/sub\u003e (2/V\u003csub\u003enom\u003c/sub\u003e - V/V\u003csub\u003enom\u003c/sub\u003e\u003csup\u003e2\u003c/sup\u003e)\u003c/td\u003e\n\u003ctd\u003eOtherwise\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100,-100},{100,100}}, grid \u003d {2,2}), graphics \u003d {Rectangle(),Rectangle(),Line(),Text(),Text()})"}},"Buildings.Controls.Continuous.PIDHysteresisTimer":{"name":"Buildings.Controls.Continuous.PIDHysteresisTimer","comment":"PID controller with anti-windup, hysteresis and timer to prevent short cycling","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SVcontrol"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"minOffTime","comment":"Minimum time that devices needs to be off before it can run again","value":"600","annotations":{"dialog":"Dialog(group \u003d \"On/off controller\")"}},{"className":"Real","qualifiers":["parameter"],"name":"eOn","comment":"if off and control error \u003e eOn, switch to set point tracking","value":"1","annotations":{"dialog":"Dialog(group \u003d \"On/off controller\")"}},{"className":"Real","qualifiers":["parameter"],"name":"eOff","comment":"if on and control error \u003c eOff, set y\u003d0","value":"-eOn","annotations":{"dialog":"Dialog(group \u003d \"On/off controller\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"pre_y_start","comment":"Value of hysteresis output at initial time","value":"false","annotations":{"dialog":"Dialog(group \u003d \"On/off controller\")"}},{"className":"Modelica.Blocks.Types.SimpleController","qualifiers":["parameter"],"name":"controllerType","comment":"Type of controller","value":"Modelica.Blocks.Types.SimpleController.PID","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"k","comment":"Gain of controller","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"Ti","comment":"Time constant of Integrator block","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"Td","comment":"Time constant of Derivative block","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"yMax","comment":"Upper limit of modulating output","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"yMin","comment":"Lower limit of modulating output (before switch to 0)","value":"0.3","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"wp","comment":"Set-point weight for Proportional block (0..1)","value":"1","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"wd","comment":"Set-point weight for Derivative block (0..1)","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"Ni","comment":"Ni*Ti is time constant of anti-windup compensation","value":"0.9","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Real","qualifiers":["parameter"],"name":"Nd","comment":"The higher Nd, the more ideal the derivative block","value":"10","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"reverseAction","comment":"Set to true to enable reverse action (such as for a cooling coil controller)","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Set point tracking\")"}},{"className":"Modelica.Blocks.Types.InitPID","qualifiers":["parameter"],"name":"initType","comment":"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)","value":"Modelica.Blocks.Types.InitPID.DoNotUse_InitialIntegratorState","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"limitsAtInit","comment":"\u003d false, if limits are ignored during initializiation","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Real","qualifiers":["parameter"],"name":"xi_start","comment":"Initial or guess value value for integrator output (\u003d integrator state)","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Real","qualifiers":["parameter"],"name":"xd_start","comment":"Initial or guess value for state of derivative block","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Real","qualifiers":["parameter"],"name":"y_start","comment":"Initial value of output","value":"0","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"strict","comment":"\u003d true, if strict limits with noEvent(..)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Advanced\")"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"tOn","comment":"Time since boiler switched on","annotations":{"placement":"Placement(transformation(extent \u003d {{100,70},{120,90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"tOff","comment":"Time since boiler switched off","annotations":{"placement":"Placement(transformation(extent \u003d {{100,30},{120,50}}))"}},{"className":"LimPID","name":"con","comment":"Controller to track setpoint","modifications":[{"name":"controllerType","qualifiers":["final"],"value":"controllerType"},{"name":"k","qualifiers":["final"],"value":"k"},{"name":"Ti","qualifiers":["final"],"value":"Ti"},{"name":"Td","qualifiers":["final"],"value":"Td"},{"name":"wp","qualifiers":["final"],"value":"wp"},{"name":"wd","qualifiers":["final"],"value":"wd"},{"name":"Ni","qualifiers":["final"],"value":"Ni"},{"name":"Nd","qualifiers":["final"],"value":"Nd"},{"name":"initType","qualifiers":["final"],"value":"initType"},{"name":"limitsAtInit","qualifiers":["final"],"value":"limitsAtInit"},{"name":"xi_start","qualifiers":["final"],"value":"xi_start"},{"name":"xd_start","qualifiers":["final"],"value":"xd_start"},{"name":"y_start","qualifiers":["final"],"value":"y_start"},{"name":"yMin","qualifiers":["final"],"value":"yMin"},{"name":"yMax","qualifiers":["final"],"value":"yMax"},{"name":"reverseAction","qualifiers":["final"],"value":"reverseAction"},{"name":"strict","qualifiers":["final"],"value":"strict"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-60},{10,-40}}))"}},{"className":"OffTimer","name":"offHys","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,0},{0,20}}))"}},{"className":"Modelica.Blocks.Logical.Timer","name":"onTimer","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,70},{0,90}}))"}},{"className":"Modelica.Blocks.Logical.Timer","name":"offTimer","annotations":{"placement":"Placement(transformation(extent \u003d {{20,30},{40,50}}))"}},{"className":"Modelica.Blocks.Interfaces.BooleanOutput","name":"on","comment":"Outputs true if boiler is on","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-90},{120,-70}}))"}},{"className":"Modelica.Blocks.Math.Feedback","name":"feeBac","annotations":{"placement":"Placement(transformation(extent \u003d {{-90,-10},{-70,10}}))"}},{"className":"Modelica.Blocks.Logical.Hysteresis","name":"hys","comment":"Hysteresis element to switch controller on and off","modifications":[{"name":"pre_y_start","qualifiers":["final"],"value":"pre_y_start"},{"name":"uLow","qualifiers":["final"],"value":"eOff"},{"name":"uHigh","qualifiers":["final"],"value":"eOn"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-60,-10},{-40,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nBlock of a controller for set point tracking with a hysteresis element that switches the controller on and off, and a timer that prevents the\ncontroller to short cycle.\n\u003c/p\u003e\n\u003cp\u003e\nThe controller is similar to\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Continuous.PIDHysteresis\\\"\u003e\nBuildings.Controls.Continuous.PIDHysteresis\u003c/a\u003e but in addition,\nit has a timer that prevents the controller from switching to on\ntoo fast. When the controller switches off, the timer starts and\navoids the controller from switching on until \u003ccode\u003eminOffTime\u003c/code\u003e seconds elapsed.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Line(),Line(),Line()})"}},"Buildings.Media.Specialized.Air.PerfectGas.specificGibbsEnergy":{"name":"Buildings.Media.Specialized.Air.PerfectGas.specificGibbsEnergy","comment":"Specific Gibbs energy","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Air.PerfectGas.specificGibbsEnergy"},{"nameOfExtendedClass":"Modelica.Icons.Function"}]},"Buildings.Fluid.FMI.TwoPort":{"name":"Buildings.Fluid.FMI.TwoPort","comment":"Container to export a thermofluid flow model with two ports as an FMU","qualifiers":["block","partial"],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"allowFlowReversal","comment":"\u003d true to allow flow reversal, false restricts to design direction (inlet -\u003e outlet)","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Assumptions\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_p_in","comment":"\u003d true to use a pressure from connector, false to output Medium.p_default","value":"true"},{"className":"Interfaces.Inlet","name":"inlet","comment":"Fluid inlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final"],"value":"use_p_in"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-10},{-100,10}}))"}},{"className":"Interfaces.Outlet","name":"outlet","comment":"Fluid outlet","modifications":[{"name":"Medium","qualifiers":["redeclare","package","final"],"value":"Medium"},{"name":"allowFlowReversal","qualifiers":["final"],"value":"allowFlowReversal"},{"name":"use_p_in","qualifiers":["final"],"value":"use_p_in"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-10},{120,10}}), iconTransformation(extent \u003d {{100,-10},{120,10}}))"}}],"classes":[{"name":"Buildings.Fluid.FMI.TwoPort.Medium","comment":"Medium in the component","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Modelica.Media.Interfaces.PartialMedium"}]}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nPartial model that can be used to export thermofluid flow models as an FMU.\nThis model only declares the inlet and outlet ports, the medium and\nwhether flow reversal is allowed.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.FMI.Examples.FMUs.ResistanceVolume\\\"\u003e\nBuildings.Fluid.FMI.Examples.FMUs.ResistanceVolume\u003c/a\u003e\nfor a block that extends this partial block.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Text()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_1_5_build1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_5_build1","comment":"Version 1.5 build 1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.5 build 1 is a major release that contains new packages with models for\nsolar collectors and for the Facility for Low Energy Experiments (FLEXLAB)\nat the Lawrence Berkeley National Laboratory.\n\u003c/p\u003e\n\u003cp\u003e\nThis release also contains a major revision of all info sections to correct invalid html syntax.\nThe package \u003ccode\u003eBuildings.HeatTransfer.Radiosity\u003c/code\u003e has been revised to comply\nwith the Modelica language specification.\nThe package \u003ccode\u003eBuildings.Rooms\u003c/code\u003e has been revised to aid implementation of\nnon-uniformly mixed room air models.\nThis release also contains various corrections that avoid warnings during translation\nwhen used with Modelica 3.2.1.\nVarious models have been revised to increase compatibility with OpenModelica.\nHowever, currently only a subset of the models work with OpenModelica.\n\u003c/p\u003e\n\u003c!-- New libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\"\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.SolarCollectors\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eLibrary with solar collectors.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.FLEXLAB\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003ePackage with models for test cells of LBNL\u0027s FLEXLAB\n                       (Facility for Low Energy Experiments in Buildings).\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.IO.FLEXLAB\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003ePackage that demonstrates two-way data exchange\n                       between Modelica and LBNL\u0027s FLEXLAB (Facility for\n                       Low Energy Experiments in Buildings).\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- New components for existing libraries --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Storage\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.StratifiedEnhancedInternalHex\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a model of a tank with built-in heat exchanger.\n                       This model may be used together with solar thermal plants.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Resources\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Resources.Include\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded an \u003ccode\u003eInclude\u003c/code\u003e folder and the \u003ccode\u003ebcvtb.h\u003c/code\u003e\n    header file to it to fix compilation errors in BCVTB example files.\n    \u003c/td\u003e\n    \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Backward compatible changes --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\u003cbr/\u003e\n                       Buildings.BoundaryConditions.WeatherData.BaseClasses.getAbsolutePath\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved the algorithm that determines the absolute path of the file.\n                       Now weather files are searched in the path specified, and if not found, the urls\n                       \u003ccode\u003efile://\u003c/code\u003e, \u003ccode\u003emodelica://\u003c/code\u003e and \u003ccode\u003emodelica://Buildings\u003c/code\u003e\n                       are added in this order to search for the weather file.\n                       This allows using the data reader without having to specify an absolute path,\n                       as long as the \u003ccode\u003eBuildings\u003c/code\u003e library\n                       is on the \u003ccode\u003eMODELICAPATH\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.StaticTwoPortConservationEquation\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReformulated computation of outlet properties to avoid an event at zero mass flow rate.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eSimplified the implementation for the situation if\n                       \u003ccode\u003eallowReverseFlow\u003dfalse\u003c/code\u003e.\n                       Avoided the use of the conditionally enabled variables \u003ccode\u003esta_a\u003c/code\u003e and\n                       \u003ccode\u003esta_b\u003c/code\u003e as this was not proper use of the Modelica syntax.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.Examples.ReverseFlowHumidifier\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged one instance of \u003ccode\u003eModelica.Fluid.Sources.MassFlowSource_T\u003c/code\u003e,\n                       that was connected to the two fluid streams,\n                       to two instances, each having half the mass flow rate.\n                       This is required for the model to work with Modelica 3.2.1 due to the\n                       change introduced in\n                       ticket \u003ca href\u003d\\\"https://trac.modelica.org/Modelica/ticket/739\\\"\u003e#739\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.EnthalpyFlowRate\u003cbr/\u003e\n                       Buildings.Fluid.Sensors.SensibleEnthalpyFlowRate\u003cbr/\u003e\n                       Buildings.Fluid.Sensors.LatentEnthalpyFlowRate\u003cbr/\u003e\n                       Buildings.Fluid.Sensors.VolumeFlowRate\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved default value \u003ccode\u003etau\u003d0\u003c/code\u003e as the base class\n                       already sets \u003ccode\u003etau\u003d1\u003c/code\u003e.\n                       This change was made so that all sensors use the same default value.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.TraceSubstancesTwoPort\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded default value \u003ccode\u003eC_start\u003d0\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Data.OpaqueConstructions.Generic\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the annotation of the\n                       instance \u003ccode\u003ematerial\u003c/code\u003e from\n                       \u003ccode\u003eEvaluate\u003dtrue\u003c/code\u003e to \u003ccode\u003eEvaluate\u003dfalse\u003c/code\u003e.\n                       This is required to allow changing the\n                       material properties after compilation.\n                       Note, however, that the number of state variables in\n                       \u003ca href\u003d\\\"modelica://Buildings.HeatTransfer.Data.BaseClasses.Material\\\"\u003e\n                       Buildings.HeatTransfer.Data.BaseClasses.Material\u003c/a\u003e\n                       are only computed when the model is translated, because\n                       the number of state variables is fixed\n                       at compilation time.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Diagnostics.AssertEquality\u003cbr/\u003e\n                       Buildings.Utilities.Diagnostics.AssertInequality\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded \u003ccode\u003etime\u003c/code\u003e in print statement as OpenModelica,\n                       in its error message, does not output the time\n                       when the assert is triggered.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Non-backward compatible changes to existing components --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Airflow\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.Orifice\u003cbr/\u003e\n                       Buildings.Airflow.Multizone.EffectiveAirLeakageArea\u003cbr/\u003e\n                       Buildings.Airflow.Multizone.ZonalFlow_ACS\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the parameter \u003ccode\u003euseConstantDensity\u003c/code\u003e to\n                       \u003ccode\u003euseDefaultProperties\u003c/code\u003e to use consistent names\n                       within this package.\n                       A conversion script in \u003ccode\u003eResources/Scripts/Dymola\u003c/code\u003e\n                       can be used to update old models that use this parameter.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.BaseClasses.IndexWater\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed class to\n                       \u003ccode\u003eBuildings.Fluid.BaseClasses.IndexMassFraction\u003c/code\u003e\n                       as it is applicable for all mass fraction sensors.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n                       Buildings.Fluid.HeatExchangers.ConstantEffectiveness\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.DryEffectivenessNTU\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.ConservationEquation\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.StaticTwoPortConservationEquation\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003cbr/\u003e\n                       Buildings.Fluid.MassExchangers.ConstantEffectiveness\u003cbr/\u003e\n                       Buildings.Fluid.MassExchangers.HumidifierPrescribed\u003cbr/\u003e\n                       Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolumeWaterPort\u003cbr/\u003e\n                       Buildings.Fluid.MixingVolumes.MixingVolume\u003cbr/\u003e\n                       Buildings.Fluid.MixingVolumes.MixingVolumeDryAir\u003cbr/\u003e\n                       Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir\u003cbr/\u003e\n                       Buildings.Fluid.Storage.ExpansionVessel\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the input connector \u003ccode\u003emXi_flow\u003c/code\u003e (or \u003ccode\u003emXi1_flow\u003c/code\u003e\n                       and \u003ccode\u003emXi2_flow\u003c/code\u003e) to \u003ccode\u003emWat_flow\u003c/code\u003e (or \u003ccode\u003emWat1_flow\u003c/code\u003e\n                       and \u003ccode\u003emWat2_flow\u003c/code\u003e).\n                       This change has been done as declaring \u003ccode\u003emXi_flow\u003c/code\u003e is ambiguous\n                       because it does not specify what other species are added unless a mass flow rate\n                       \u003ccode\u003em_flow\u003c/code\u003e is also known. To avoid this confusion, the connector variables\n                       have been renamed.\n                       The equations that were used were, however, correct.\n                       This addresses issue \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/165\\\"\u003e#165\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n                       Buildings.Fluid.Storage.BaseClasses.IndirectTankHeatExchanger\u003cbr/\u003e\n                       Buildings.Fluid.BaseClasses.PartialResistance\u003cbr/\u003e\n                       Buildings.Fluid.FixedResistances.BaseClasses.Pipe\u003cbr/\u003e\n                       Buildings.Fluid.FixedResistances.FixedResistanceDpM\u003cbr/\u003e\n                       Buildings.Fluid.FixedResistances.LosslessPipe\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.Boreholes.BaseClasses.BoreholeSegment\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.Boreholes.UTube\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitsSlab\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.FourPortHeatMassExchanger\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.PartialFourPortInterface\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.PartialTwoPortInterface\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003cbr/\u003e\n                       Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\u003cbr/\u003e\n                       Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume\u003cbr/\u003e\n                       Buildings.Fluid.Movers.BaseClasses.FlowControlled\u003cbr/\u003e\n                       Buildings.Fluid.Movers.BaseClasses.IdealSource\u003cbr/\u003e\n                       Buildings.Fluid.Movers.BaseClasses.PrescribedFlowMachine\u003cbr/\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved the computation of \u003ccode\u003eV_flow\u003c/code\u003e and removed the parameter\n                       \u003ccode\u003eshow_V_flow\u003c/code\u003e.\n                       The reason is that the computation of \u003ccode\u003eV_flow\u003c/code\u003e required\n                       the use of \u003ccode\u003esta_a\u003c/code\u003e (to compute the density),\n                       but \u003ccode\u003esta_a\u003c/code\u003e is also a variable that is conditionally\n                       enabled. However, this was not correct Modelica syntax as conditional variables\n                       can only be used in a \u003ccode\u003econnect\u003c/code\u003e\n                       statement, not in an assignment. Dymola 2014 FD01 beta3 is checking\n                       for this incorrect syntax. Hence, \u003ccode\u003eV_flow\u003c/code\u003e was removed as its\n                       conditional implementation would require a rather cumbersome implementation\n                       that uses a new connector that carries the state of the medium.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRemoved \u003ccode\u003eBuildings.Fluid.MixingVolumes.MixingVolumeDryAir\u003c/code\u003e\n                       as this model is no longer used. The model\n                       \u003ccode\u003eBuildings.Fluid.MixingVolumes.MixingVolume\u003c/code\u003e\n                       can be used instead of.\u003cbr/\u003e\n                       Removed base class \u003ccode\u003eBuildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolumeWaterPort\u003c/code\u003e\n                       as this model is no longer used.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.Examples.TraceSubstances\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed example from \u003ccode\u003eExtraProperty\u003c/code\u003e to\n                     \u003ccode\u003eTraceSubstances\u003c/code\u003e in order to use the same name\n                     as the sensor.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sources.PrescribedExtraPropertyFlowRate\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed model to\u003ccode\u003eTraceSubstancesFlowRate\u003c/code\u003e to\n                     use the same terminology than the Modelica Standard Library.\u003cbr/\u003e\n                     The conversion script updates existing models that instantiate\n                     this model.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sources.Examples.PrescribedExtraPropertyFlow\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed example to\u003ccode\u003eTraceSubstancesFlowRate\u003c/code\u003e\n                     in order to use the same name as the source model.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume\u003cbr/\u003e\n                       Buildings.Fluid.FixedResistances.Pipe\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.RadiantSlabs.ParallelCircuitsSlab\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.RadiantSlabs.SingleCircuitSlab\u003cbr/\u003e\n                       Buildings.Fluid.Movers.BaseClasses.FlowControlled\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed \u003ccode\u003eX_nominal\u003c/code\u003e to \u003ccode\u003eX_default\u003c/code\u003e\n                       or \u003ccode\u003eX_start\u003c/code\u003e, where \u003ccode\u003eX\u003c/code\u003e may be\n                       \u003ccode\u003estate\u003c/code\u003e, \u003ccode\u003erho\u003c/code\u003e, or \u003ccode\u003emu\u003c/code\u003e,\n                       depending on whether the medium default values or the start values\n                       are used in the computation of the state\n                       and derived quantities.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003cbr/\u003e\n                         Buildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Interfaces.RadiosityInflow\u003cbr/\u003e\n                       Buildings.HeatTransfer.Interfaces.RadiosityOutflow\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.BaseClasses.ParametersTwoSurfaces\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.Constant\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.Examples.OpaqueSurface\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.Examples.OutdoorRadiosity\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.IndoorRadiosity\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.OpaqueSurface\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.OutdoorRadiosity\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.RadiositySplitter\u003cbr/\u003e\n                       Buildings.HeatTransfer.Radiosity.package\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.Examples.CenterOfGlass\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.Examples.GlassLayer\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.Examples.Shade\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.GlassLayer\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.Shade\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.Examples.BoundaryHeatTransfer\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.ExteriorHeatTransfer\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.InteriorHeatTransfer\u003cbr/\u003e\n                       Buildings.Rooms.BaseClasses.InfraredRadiationExchange\u003cbr/\u003e\n                       Buildings.Rooms.BaseClasses.InfraredRadiationGainDistribution\u003cbr/\u003e\n                       Buildings.Rooms.BaseClasses.MixedAir\u003cbr/\u003e\n                       Buildings.Rooms.BaseClasses.Overhang\u003cbr/\u003e\n                       Buildings.Rooms.BaseClasses.SideFins\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the connectors for the radiosity model.\n                       The previous implemenation declared the radiosity as a\n                       \u003ccode\u003eflow\u003c/code\u003e variables, but the implementation did not use\n                       a potential variable.\u003cbr/\u003e\n                       Therefore, the radiosity was the only variable in the connector,\n                       which is not allowed for \u003ccode\u003eflow\u003c/code\u003e variables.\n                       This change required a reformulation of models because with the new formulation,\n                       the incoming and outcoming radiosity are both non-negative values.\n                       This addresses issue \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/158\\\"\u003e#158\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003cbr/\u003e\n                         Buildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Windows.BaseClasses.PartialConvection\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.PartialWindowBoundaryCondition\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.Shade\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.ShadeConvection\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.BaseClasses.ShadeRadiation\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.InteriorHeatTransfer\u003cbr/\u003e\n                       Buildings.HeatTransfer.Windows.InteriorHeatTransferConvective\u003cbr/\u003e\n                       Buildings.Rooms.ExteriorBoundaryConditionsWithWindow\u003cbr/\u003e\n                       Buildings.Rooms.PartialSurfaceInterface\u003cbr/\u003e\n                       Buildings.Rooms.InfraredRadiationExchange\u003cbr/\u003e\n                       Buildings.Rooms.AirHeatMassBalanceMixed\u003cbr/\u003e\n                       Buildings.Rooms.SolarRadiationExchange\u003cbr/\u003e\n                       Buildings.Rooms.RadiationTemperature\u003cbr/\u003e\n                       Buildings.Rooms.InfraredRadiationGainDistribution\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRedesigned the implementation of the room model and its base classes.\n                       This redesign separates convection from radiation, and it provides\n                       one composite model for the convection and the heat and mass balance in\n                       the room. This change was done to allow an implementation of the room air\n                       heat and mass balance that does not assume uniformly mixed room air.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Convection.Functions.HeatFlux.rayleigh\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed function from \u003ccode\u003eraleigh\u003c/code\u003e to \u003ccode\u003erayleigh\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\n\u003c/table\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.SpecificEntropyTwoPort\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n           Corrected wrong computation of the dynamics used for the sensor signal.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Data.GlazingSystems.DoubleClearAir13Clear\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n           Corrected the glass layer thickness, which was \u003ci\u003e5.7\u003c/i\u003e mm instead of\n           \u003ci\u003e3\u003c/i\u003e mm, as the documentation states.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SkyTemperature.BlackBody\u003cbr/\u003e\n              Buildings.BoundaryConditions.WeatherData.BaseClasses.CheckTemperature\u003cbr/\u003e\n              Buildings.BoundaryConditions.WeatherData.ReaderTMY3\u003cbr/\u003e\n              Buildings.Controls.SetPoints.HotWaterTemperatureReset\u003cbr/\u003e\n              Buildings.Examples.ChillerPlant.BaseClasses.Controls.ChillerSwitch\u003cbr/\u003e\n              Buildings.Examples.ChillerPlant.BaseClasses.Controls.WSEControl\u003cbr/\u003e\n              Buildings.Fluid.Boilers.BoilerPolynomial\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.BaseClasses.HexElement\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.BaseClasses.MassExchange\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.BaseClasses.MassExchangeDummy\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.ApparatusDewPoint\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.ApparatusDryPoint\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.CoolingCapacity\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.DXCooling\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.DryCoil\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.DryWetSelector\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.Evaporation\u003cbr/\u003e\n              Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.WetCoil\u003cbr/\u003e\n              Buildings.Fluid.MixingVolumes.BaseClasses.PartialMixingVolumeWaterPort\u003cbr/\u003e\n              Buildings.Fluid.Sensors.RelativeTemperature\u003cbr/\u003e\n              Buildings.Fluid.Sensors.Temperature\u003cbr/\u003e\n              Buildings.Fluid.Sensors.TemperatureTwoPort\u003cbr/\u003e\n              Buildings.Fluid.Sensors.TemperatureWetBulbTwoPort\u003cbr/\u003e\n              Buildings.Fluid.SolarCollectors.BaseClasses.PartialHeatLoss\u003cbr/\u003e\n              Buildings.Utilities.Comfort.Fanger\u003cbr/\u003e\n              Buildings.Utilities.IO.BCVTB.From_degC\u003cbr/\u003e\n              Buildings.Utilities.IO.BCVTB.To_degC\u003cbr/\u003e\n              Buildings.Utilities.Psychrometrics.TDewPoi_pW\u003cbr/\u003e\n              Buildings.Utilities.Psychrometrics.TWetBul_TDryBulPhi\u003cbr/\u003e\n              Buildings.Utilities.Psychrometrics.TWetBul_TDryBulXi\u003cbr/\u003e\n              Buildings.Utilities.Psychrometrics.WetBul_pTX\u003cbr/\u003e\n              Buildings.Utilities.Psychrometrics.pW_TDewPoi\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eReplaced wrong attribute \u003ccode\u003equantity\u003d\\\"Temperature\\\"\u003c/code\u003e\n                     with \u003ccode\u003equantity\u003d\\\"ThermodynamicTemperature\\\"\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Data.Fuels.Generic\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong type for \u003ccode\u003emCO2\u003c/code\u003e.\n                       It was declared as \u003ccode\u003eModelica.SIunits.MassFraction\u003c/code\u003e,\n                       which is incorrect.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.CoolingTowers.Correlations.BaseClasses.Bounds\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected wrong type for \u003ccode\u003eFRWat_min\u003c/code\u003e, \u003ccode\u003eFRWat_max\u003c/code\u003e\n                       and \u003ccode\u003eliqGasRat_max\u003c/code\u003e.\n                       They were declared as \u003ccode\u003eModelica.SIunits.MassFraction\u003c/code\u003e,\n                       which is incorrect as, for example, \u003ccode\u003eFRWat_max\u003c/code\u003e can be larger than one.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.ConstantEffectiveness\u003cbr/\u003e\n                     Buildings.Fluid.MassExchangers.ConstantEffectiveness\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error in the documentation that was not updated\n                     when the implementation of zero flow rate was revised.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.ConservationEquation\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected the syntax error\n                       \u003ccode\u003eMedium.ExtraProperty C[Medium.nC](each nominal\u003dC_nominal)\u003c/code\u003e\n                       to\n                       \u003ccode\u003eMedium.ExtraProperty C[Medium.nC](nominal\u003dC_nominal)\u003c/code\u003e\n                       because \u003ccode\u003eC_nominal\u003c/code\u003e is a vector.\n                       This syntax error caused a compilation error in OpenModelica.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.SensibleEnthalpyFlowRate\u003cbr/\u003e\n                       Buildings.Fluid.Sensors.LatentEnthalpyFlowRate\u003cbr/\u003e\n                       Buildings.Fluid.Sensors.MassFraction\u003cbr/\u003e\n                       Buildings.Fluid.Sensors.MassFractionTwoPort\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged medium declaration in the \u003ccode\u003eextends\u003c/code\u003e statement\n                       to \u003ccode\u003ereplaceable\u003c/code\u003e to avoid a translation error in\n                       OpenModelica.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.TraceSubstances\u003cbr/\u003e\n                       Buildings.Fluid.Sensors.TraceSubstancesTwoPort\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected syntax errors in setting nominal value for output signal\n                       and for state variable.\n                       This eliminates a compilation error in OpenModelica.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sources.TraceSubstancesFlowSource\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded missing \u003ccode\u003eeach\u003c/code\u003e in declaration of\n                       \u003ccode\u003eC_in_internal\u003c/code\u003e.\n                       This eliminates a compilation error in OpenModelica.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Python27\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.IO.Python27.Functions.exchange\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eCorrected error in C code that lead to message\n                       \u003ccode\u003e\u0027module\u0027 object has no attribute \u0027argv\u0027\u003c/code\u003e\n                       when a python module accessed \u003ccode\u003esys.argv\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\n\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eVerify mass and species balance\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/165\\\"\u003e#165\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis issue has been addressed by renaming the connectors to avoid an ambiguity\n                       in the model equation. The equations were correct.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eRemove flow attribute from radiosity connectors\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/158\\\"\u003e#158\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis issue has been addressed by reformulating the radiosity models.\n                       With the new implementation, incoming and outgoing radiosity are non-negative\n                       quantities.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_1_5_build2":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_5_build2","comment":"Version 1.5 build 2","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.5 build 2 is a maintenance release that corrects an error in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DryCoilDiscretized\\\"\u003e\nBuildings.Fluid.HeatExchangers.DryCoilDiscretized\u003c/a\u003e and in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.WetCoilDiscretized\\\"\u003e\nBuildings.Fluid.HeatExchangers.WetCoilDiscretized\u003c/a\u003e.\nIt is fully compatible with version 1.5 build 1.\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryCoilDiscretized\u003cbr/\u003e\n                       Buildings.Fluid.HeatExchangers.WetCoilDiscretized\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n           Corrected wrong connect statements that caused the last register to have\n           no liquid flow.\n           This closes issue \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/194\\\"\u003e#194\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eDryCoilDiscretized model not using last register, liquid flow path\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/194\\\"\u003e#194\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis issue has been addressed by correcting the connect statements.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_1_5_build3":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_5_build3","comment":"Version 1.5 build 3","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.5 build 3 is a maintenance release that corrects an error in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MassExchangers.HumidifierPrescribed\\\"\u003e\nBuildings.Fluid.MassExchangers.HumidifierPrescribed\u003c/a\u003e.\nIt is fully compatible with version 1.5 build 2.\n\u003c/p\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MassExchangers.HumidifierPrescribed\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n           Corrected the enthalpy balance, which caused the latent heat flow rate to be added\n           twice to the fluid stream.\n           This closes issue \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/197\\\"\u003e#197\u003c/a\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Github issues --\u003e\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eHumidifierPrescribed accounts twice for latent heat gain\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/197\\\"\u003e#197\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis issue has been addressed by correcting the latent heat added to the\n                       fluid stream.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_0_10_0":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_0_10_0","comment":"Version 0.10.0","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cul\u003e\n\u003cli\u003e\nAdded package\n\u003ca href\u003d\\\"modelica://Buildings.Airflow.Multizone\\\"\u003e\nBuildings.Airflow.Multizone\u003c/a\u003e\nwith models for multizone airflow and contaminant transport.\n\u003c/li\u003e\n\u003cli\u003e\nAdded the model\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Comfort.Fanger\\\"\u003e\nBuildings.Utilities.Comfort.Fanger\u003c/a\u003e\nfor thermal comfort calculations.\n\u003c/li\u003e\n\u003cli\u003e\nRewrote\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.BaseClasses.ThirdOrderStratifier\\\"\u003e\nBuildings.Fluid.Storage.BaseClasses.ThirdOrderStratifier\u003c/a\u003e, which is used in\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.StratifiedEnhanced\\\"\u003e\nBuildings.Fluid.Storage.StratifiedEnhanced\u003c/a\u003e,\nto avoid state events when the flow reverses.\nThis leads to faster and more robust simulation.\n\u003c/li\u003e\n\u003cli\u003e\nIn models of package\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.MixingVolumes\\\"\u003e\nBuildings.Fluid.MixingVolumes\u003c/a\u003e,\nadded nominal value for \u003ccode\u003emC\u003c/code\u003e to avoid wrong trajectory\nwhen concentration is around 1E-7.\nSee also \u003ca href\u003d\\\"https://trac.modelica.org/Modelica/ticket/393\\\"\u003e\nhttps://trac.modelica.org/Modelica/ticket/393\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nFixed bug in fan and pump models that led to too small an enthalpy\nincrease across the flow device.\n\u003c/li\u003e\n\u003cli\u003e\nIn model \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.FlowControlled_dp\\\"\u003e\nBuildings.Fluid.Movers.FlowControlled_dp\u003c/a\u003e,\nchanged \u003ccode\u003eassert(dp_in \u003e\u003d 0, ...)\u003c/code\u003e to \u003ccode\u003eassert(dp_in \u003e\u003d -0.1, ...)\u003c/code\u003e.\nThe former implementation triggered the assert if \u003ccode\u003edp_in\u003c/code\u003e was solved for\nin a nonlinear equation since the solution can be slightly negative while still being\nwithin the solver tolerance.\n\u003c/li\u003e\n\u003cli\u003e\nAdded model\n\u003ca href\u003d\\\"modelica://Buildings.Controls.SetPoints.Table\\\"\u003e\nBuildings.Controls.SetPoints.Table\u003c/a\u003e\nthat allows the specification of a floating setpoint using a table of values.\n\u003c/li\u003e\n\u003cli\u003e\nRevised model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.Radiators.RadiatorEN442_2\\\"\u003e\nBuildings.Fluid.HeatExchangers.Radiators.RadiatorEN442_2\u003c/a\u003e.\nThe new version has exactly the same nominal power during the simulation as specified\nby the parameters. This also required a change in the parameters.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.Utilities.Comfort.Fanger":{"name":"Buildings.Utilities.Comfort.Fanger","comment":"Thermal comfort model according to Fanger","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.BaseClasses.BaseIcon"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"PMV","comment":"PMV","annotations":{"placement":"Placement(transformation(extent \u003d {{100,30},{120,50}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"PPD","comment":"PPD [0.05...1]","annotations":{"placement":"Placement(transformation(extent \u003d {{100,-50},{120,-30}}))"}},{"className":"Modelica.SIunits.HeatFlux","qualifiers":["parameter"],"name":"W","comment":"Rate of mechanical work accomplished (must be non-positive, typically equal to 0)","value":"0","modifications":[{"name":"max","value":"0"}]},{"className":"Modelica.SIunits.CoefficientOfHeatTransfer","qualifiers":["parameter"],"name":"hRad","comment":"Radiative heat transfer coefficient","value":"0.8*4.7","modifications":[{"name":"min","value":"0"},{"name":"max","value":"10"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"use_vAir_in","comment":"Get the air velocity from the input connector","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Conditional inputs\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_M_in","comment":"Get the metabolic rate from the input connector","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Conditional inputs\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_ICl_in","comment":"Get the clothing insulation from the input connector","value":"true","annotations":{"dialog":"Dialog(group \u003d \"Conditional inputs\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"use_pAir_in","comment":"Get the air pressure from the input connector","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Conditional inputs\")"}},{"className":"Modelica.SIunits.Velocity","qualifiers":["parameter"],"name":"vAir","comment":"Fixed value for air velocity","value":"0.05","annotations":{"dialog":"Dialog(enable \u003d not use_vAir_in, group \u003d \"Conditional inputs\")"}},{"className":"Modelica.SIunits.HeatFlux","qualifiers":["parameter"],"name":"M","comment":"Fixed value for metabolic rate","value":"60","annotations":{"dialog":"Dialog(enable \u003d not use_M_in, group \u003d \"Conditional inputs\")"}},{"className":"Real","qualifiers":["parameter"],"name":"ICl","comment":"Fixed value for clothing insulation in units of clo (summer\u003d0.5; winter\u003d0.9)","value":"0.7","annotations":{"dialog":"Dialog(enable \u003d not use_ICl_in, group \u003d \"Conditional inputs\")"}},{"className":"Modelica.SIunits.Pressure","qualifiers":["parameter"],"name":"pAir","comment":"Fixed value for air pressure","value":"101325","annotations":{"dialog":"Dialog(enable \u003d not use_pAir_in, group \u003d \"Conditional inputs\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TAir","comment":"Air temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,90},{-100,110}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"TRad","comment":"Radiation temperature","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,50},{-100,70}}), iconTransformation(extent \u003d {{-120,50},{-100,70}}))"}},{"className":"Modelica.SIunits.Temperature","name":"TOpe","comment":"Operative temperature"},{"className":"Modelica.SIunits.Temperature","name":"TClo","comment":"Surface temperature of clothing"},{"className":"Modelica.SIunits.Temperature","name":"TSki","comment":"Skin temperature","modifications":[{"name":"min","value":"273.15+10"},{"name":"max","value":"273.15+42"}]},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"phi","comment":"Relative humidity","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-120,10},{-100,30}}), iconTransformation(extent \u003d {{-120,10},{-100,30}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pAir_in","comment":"Air pressure","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Pressure\""},{"name":"unit","qualifiers":["final"],"value":"\"Pa\""},{"name":"min","value":"0"}],"conditionalClause":" if use_pAir_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-110},{-100,-90}}), iconTransformation(extent \u003d {{-120,-110},{-100,-90}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"ICl_in","comment":"Clothing thermal resistance in clo","conditionalClause":" if use_ICl_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-80},{-100,-60}}), iconTransformation(extent \u003d {{-120,-80},{-100,-60}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"vAir_in","comment":"Air velocity","conditionalClause":" if use_vAir_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-20},{-100,0}}), iconTransformation(extent \u003d {{-120,-20},{-100,0}}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"M_in","comment":"Metabolic heat generation in W/m2 (not in met)","modifications":[{"name":"min","value":"40"},{"name":"max","value":"600"},{"name":"quantity","qualifiers":["final"],"value":"\"HeatFlux\""},{"name":"unit","qualifiers":["final"],"value":"\"W/m2\""}],"conditionalClause":" if use_M_in","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,-50},{-100,-30}}), iconTransformation(extent \u003d {{-120,-50},{-100,-30}}))"}},{"className":"Modelica.SIunits.CoefficientOfHeatTransfer","name":"hCom","comment":"Combined heat transfer coefficient","modifications":[{"name":"min","value":"0"},{"name":"max","value":"10"}]},{"className":"Modelica.SIunits.CoefficientOfHeatTransfer","name":"hCon","comment":"Convective heat transfer coefficient","modifications":[{"name":"min","value":"0"},{"name":"max","value":"10"}]},{"className":"Modelica.SIunits.Pressure","name":"pSte","comment":"Partial pressure of water vapor in ambient air","modifications":[{"name":"min","value":"0"},{"name":"max","value":"3000"}]},{"className":"Modelica.SIunits.HeatFlux","name":"L","comment":"Thermal load of the body"},{"className":"Real","name":"fCl","comment":"Clothing area factor (61)","modifications":[{"name":"min","value":"0"}]},{"className":"Modelica.SIunits.ThermalInsulance","name":"RCl","comment":"Thermal resistance of clothing (10)"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThermal comfort model according to Fanger, as described in\nthe ASHRAE Fundamentals (1997).\n\u003c/p\u003e\n\u003cp\u003e\nThe thermal sensation of a human being is mainly related to the thermal balance of its\nbody as a whole. This balance is influenced by two groups of factors, personal and\nphysical. The activity level and clothing thermal insulation of the subject form the\ngroup of personal factors, while the environmental parameters: air temperature, mean\nradiant temperature, air velocity, and air humidity compose the group of physical\nfactors. When the personal factors have been estimated and the physical factors have\nbeen measured the thermal sensation for the body as a whole (general thermal\ncomfort) can be predicted by calculating the PMV index. The PPD index, obtained\nfrom the PMV index, provides information on thermal discomfort (thermal\ndissatisfaction) by predicting the percentage of people likely to feel too hot or too\ncold in the given thermal environment.\n\u003c/p\u003e\n\u003cp\u003e\nThe Predicted Mean Vote (PMV) model combines four physical variables\n(air temperature, air velocity, mean radiant temperature, and relative humidity),\nand two personal variables (clothing insulation and activity level)\ninto an index that can be used to predict the average thermal sensation\nof a large group of people.\n\u003c/p\u003e\n\u003cp\u003e\nTo determine appropriate thermal conditions, practitioners refer to standards such\nas ASHRAE Standard 55 (ASHRAE, 1992) and ISO Standard 7730 (ISO, 1994).\nThese standards define temperature ranges that should result in thermal satisfaction\nfor at least 80% of occupants in a space.\n\u003c/p\u003e\n\u003ch4\u003e PMV thermal sensation scale\u003c/h4\u003e\n\u003cp\u003e\nThe PMV index predicts the mean value of the votes of a large group of\npeople on the following 7-point thermal sensation scale:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\u003ctd\u003eCold  \u003c/td\u003e\u003ctd\u003e  Cool  \u003c/td\u003e\u003ctd\u003e  Slightly cool  \u003c/td\u003e\u003ctd\u003e  Neutral  \u003c/td\u003e\u003ctd\u003e  Slightly warm  \u003c/td\u003e\u003ctd\u003e  Warm   \u003c/td\u003e\u003ctd\u003e  Hot \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e-3 \u003c/td\u003e\u003ctd\u003e -2 \u003c/td\u003e\u003ctd\u003e -1 \u003c/td\u003e\u003ctd\u003e 0 \u003c/td\u003e\u003ctd\u003e +1 \u003c/td\u003e\u003ctd\u003e +2 \u003c/td\u003e\u003ctd\u003e +3 \u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003ch4\u003eOperative temperature\u003c/h4\u003e\n\u003cp\u003e\nFor a given space there exists an optimum operative temperature corresponding to PMV\u003d0 (neutral).\nThe operative temperature is defined as: The uniform temperature of an imaginary black enclosure\nin which an occupant would exchange the same amount of heat by radiation plus convection\nas in the actual nonuniform environment.\nThe operative temperature is computed as the average of the air temperature\nand the mean radiant temperature, weighted by their respective heat transfer coefficients\n(see ASHRAE Fundamentals, 1997, page 8.3, eq (8)).\n\u003c/p\u003e\n\n\u003ch4\u003eOptimum operative temperatures\u003c/h4\u003e\n\u003cp\u003e\n\u003cb\u003eWinter:\u003c/b\u003e\nactivity \u003ci\u003e1.2\u003c/i\u003e met,\u003cbr/\u003e\nclothing \u003d \u003ci\u003e0.9\u003c/i\u003e clo (sweater, long sleeve shirt, heavy pants),\u003cbr/\u003e\nair flow \u003d \u003ci\u003e30\u003c/i\u003e fpm (\u003ci\u003e0.15\u003c/i\u003e m/sec),\u003cbr/\u003e\nmean radiant temperature equal to air temperature,\u003cbr/\u003e\nOptimum Operative Temperature (top) \u003d \u003ci\u003e22.7\u003c/i\u003e\u0026#176; C (\u003ci\u003e71\u003c/i\u003e\u0026#176; F)\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eSummer:\u003c/b\u003e\nclothing \u003d \u003ci\u003e0.5\u003c/i\u003e clo,\u003cbr/\u003e\nair flow \u003d \u003ci\u003e50\u003c/i\u003e fpm (\u003ci\u003e0.25\u003c/i\u003e m/sec),\u003cbr/\u003e\nOptimum Operative Temperature (top) \u003d \u003ci\u003e24.4\u003c/i\u003e\u0026#176; C (\u003ci\u003e76\u003c/i\u003e\u0026#176; F).\n\u003c/p\u003e\n\u003cp\u003e\nAll equation numbers in the model refer to the ASHRAE Handbook Fundamentals,\nChapter 8, Thermal Comfort, 1997.\u003c/p\u003e\n\n\u003ch4\u003eUsual ranges of variables (ISO)\u003c/h4\u003e\n\u003cp\u003e\nM \u003d \u003ci\u003e46\u003c/i\u003e to \u003ci\u003e232\u003c/i\u003e W/m^2 (\u003ci\u003e0.8\u003c/i\u003e to \u003ci\u003e4\u003c/i\u003e met)\u003cbr/\u003e\nICl \u003d \u003ci\u003e0\u003c/i\u003e to \u003ci\u003e2\u003c/i\u003e clo (\u003ci\u003e0\u003c/i\u003e to \u003ci\u003e0.310\u003c/i\u003e m^2*K/W)\u003cbr/\u003e\nTAir_degC \u003d \u003ci\u003e10\u003c/i\u003e to \u003ci\u003e30\u003c/i\u003e\u0026#176; C\u003cbr/\u003e\nTRad_degC \u003d \u003ci\u003e10\u003c/i\u003e to \u003ci\u003e40\u003c/i\u003e\u0026#176; C\u003cbr/\u003e\nvAir \u003d \u003ci\u003e0\u003c/i\u003e to \u003ci\u003e1\u003c/i\u003e m/s\u003cbr/\u003e\npSte \u003d \u003ci\u003e0\u003c/i\u003e to \u003ci\u003e2700\u003c/i\u003e Pa\n\u003c/p\u003e\n\n\u003ch4\u003eInsulation for clothing ensembles\u003c/h4\u003e\n\u003cp\u003e\nClothing is defined in terms of clo units.  Clo is a unit used to express the thermal insulation provided by garments and clothing ensembles,\nwhere \u003ci\u003e1\u003c/i\u003e clo \u003d \u003ci\u003e0.155\u003c/i\u003e (m^2*K/W) (ASHRAE 55-92).\n\u003c/p\u003e\n\u003cp\u003e\nThe following table is obtained from ASHRAE page 8.8\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\u003cth\u003eClothing ensemble\u003c/th\u003e\u003cth\u003eclo\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eASHRAE Standard 55 Winter\u003c/td\u003e\u003ctd\u003e0.90\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eASHRAE Standard 55 Summer\u003c/td\u003e\u003ctd\u003e0.50\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eWalking shorts, short-sleeve shirt\u003c/td\u003e\u003ctd\u003e  0.36\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTrousers, long-sleeve shirt\u003c/td\u003e\u003ctd\u003e 0.61\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTrousers, long-sleeve shirt, suit jacket\u003c/td\u003e\u003ctd\u003e 0.96\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTrousers, long-sleeve shirt, suit jacket, T-shirt\u003c/td\u003e\u003ctd\u003e 1.14\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTrousers, long-sleeve shirt, long-sleeve sweater, T-shirt\u003c/td\u003e\u003ctd\u003e 1.01\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eSame as above + suit jacket, long underwear bottoms\u003c/td\u003e\u003ctd\u003e 1.30\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eSweat pants, sweat shirt\u003c/td\u003e\u003ctd\u003e 0.74\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eKnee-length skirt, short-sleeve shirt, panty hose, sandals\u003c/td\u003e\u003ctd\u003e 0.54\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eKnee-length skirt, long-sleeve shirt, full slip, panty hose\u003c/td\u003e\u003ctd\u003e 0.67\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eKnee-length skirt, long-sleeve shirt, half slip, panty hose, long sleeve sweater\u003c/td\u003e\u003ctd\u003e 1.10\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eLong-sleeve coveralls, T-shirt\u003c/td\u003e\u003ctd\u003e   0.72\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eInsulated coveralls, long-sleeve, thermal underwear, long underwear bottoms\u003c/td\u003e\u003ctd\u003e 1.37\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\u003cbr/\u003e\n\n\u003ch4\u003e Metabolic rates\u003c/h4\u003e\n\u003cp\u003e\nOne met is defined as \u003ci\u003e58.2\u003c/i\u003e Watts per square meter which is equal to the energy produced\nper unit surface area of a seated person at rest.\u003c/p\u003e\n\u003cp\u003eThe following table is obtained from ASHRAE page 8.6.\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\u003cth\u003eActivity\u003c/th\u003e\u003cth\u003eW/m2 body surface area\u003c/th\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eASHRAE Standard 55\u003c/td\u003e\u003ctd\u003e58.2\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e reclining  \u003c/td\u003e\u003ctd\u003e45\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e seated and quiet \u003c/td\u003e\u003ctd\u003e60\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e sedentary activity (reading, writing) \u003c/td\u003e\u003ctd\u003e60\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e standing, relaxed \u003c/td\u003e\u003ctd\u003e70\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e office (filling while standing)\u003c/td\u003e\u003ctd\u003e80\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e office (walking)\u003c/td\u003e\u003ctd\u003e100\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eSleeping\u003c/td\u003e\u003ctd\u003e         40     \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eSeated quiet\u003c/td\u003e\u003ctd\u003e   60 \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eStanding Relaxed\u003c/td\u003e\u003ctd\u003e  70  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eWalking 3.2 - 6.4km/h\u003c/td\u003e\u003ctd\u003e 115-220   \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eReading\u003c/td\u003e\u003ctd\u003e 55\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eWriting\u003c/td\u003e\u003ctd\u003e 60\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTyping\u003c/td\u003e\u003ctd\u003e 65\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eLifting/packing\u003c/td\u003e\u003ctd\u003e  120\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eDriving Car\u003c/td\u003e\u003ctd\u003e 60-115\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eDriving Heavy vehicle\u003c/td\u003e\u003ctd\u003e 185\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCooking\u003c/td\u003e\u003ctd\u003e 95-115\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eHousecleaning\u003c/td\u003e\u003ctd\u003e 115-200\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eMachine work\u003c/td\u003e\u003ctd\u003e 105-235\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003ePick and shovel work\u003c/td\u003e\u003ctd\u003e 235-280\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eDancing-Social\u003c/td\u003e\u003ctd\u003e 140-225\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCalisthenics\u003c/td\u003e\u003ctd\u003e  175-235\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eBasketball\u003c/td\u003e\u003ctd\u003e  290-440\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eWrestling\u003c/td\u003e\u003ctd\u003e  410-505\u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\u003cbr/\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\n\u003cul\u003e\u003cli\u003e\nASHRAE Handbook, Fundamentals (SI Edition).\n American Society of Heating, Refrigerating and Air-Conditioning Engineers,\nChapter 8, Thermal Comfort; pages 8.1-8.26; Atlanta, USA, 1997.\n\u003c/li\u003e\n\u003cli\u003e\nInternational Standards Organization (ISO).\nModerate Thermal Environments: Determination of the PMV and PPD Indices\nand Specification of the Conditions for Thermal Comfort (ISO 7730).\nGeneva, Switzerland: ISO. 1994.\n\u003c/li\u003e\n\u003cli\u003e\nCharles, K.E. Fanger Thermal Comfort and Draught Models. Institute for Research in Construction\nNational Research Council of Canada, Ottawa, K1A 0R6, Canada.\nIRC Research Report RR-162. October 2003.\n\u003ca href\u003d\\\"http://irc.nrc-cnrc.gc.ca/ircpubs\\\"\u003ehttp://irc.nrc-cnrc.gc.ca/ircpubs\u003c/a\u003e.\n\u003c/li\u003e\n\u003cli\u003e\nData, References and Links at: Thermal Comfort; Dr. Sam C M Hui\nDepartment of Mechanical Engineering\nThe University of Hong Kong MEBS6006 Environmental Services I;\n\u003ca href\u003d\\\"http://me.hku.hk/msc-courses/MEBS6006/index.html\\\"\u003e\nhttp://me.hku.hk/msc-courses/MEBS6006/index.html\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Text(),Text(),Text(),Text(),Text(),Text(),Text(),Text(),Text(),Line(),Line(),Line()})"}},"Buildings.Media.Air.temperature":{"name":"Buildings.Media.Air.temperature","comment":"Return temperature of ideal gas as a function of the thermodynamic state record","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Air.temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nTemperature is returned from the thermodynamic state record input as a simple assignment.\n\u003c/html\u003e\""}},"Buildings.UsersGuide.License":{"name":"Buildings.UsersGuide.License","comment":"Modelica License 2","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Information"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003ch4\u003e\u003cfont color\u003d\\\"#008000\\\" size\u003d\\\"5\\\"\u003eThe Modelica License 2\u003c/font\u003e\u003c/h4\u003e\n\u003cp\u003e\n\u003cstrong\u003ePreamble.\u003c/strong\u003e The goal of this license is that Modelica related model libraries, software, images, documents, data files etc. can be used freely in the original or a modified form, in open source and in commercial environments (as long as the license conditions below are fulfilled, in particular sections 2c) and 2d). The Original Work is provided free of charge and the use is completely at your own risk. Developers of free Modelica packages are encouraged to utilize this license for their work.\n\u003c/p\u003e\n\u003cp\u003e\nThe Modelica License applies to any Original Work that contains the following licensing notice adjacent to the copyright notice(s) for this Original Work:\n\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eNote.\u003c/strong\u003e This is the standard Modelica License 2, except for the following changes: the parenthetical in paragraph 7., paragraph 5., and the addition of paragraph 15.d).\n\u003c/p\u003e\n\u003cp\u003e\n\u003cstrong\u003eLicensed by The Regents of the University of California, through Lawrence Berkeley National Laboratory under the Modelica License 2 \u003c/strong\u003e\n\u003c/p\u003e\n\n\u003ch4\u003e1. Definitions\u003c/h4\u003e\n\u003col type\u003d\\\"a\\\"\u003e\u003cli\u003e\n\\\"License\\\" is this Modelica License.\n\u003c/li\u003e\u003cli\u003e\n\\\"Original Work\\\" is any work of authorship, including software, images, documents, data files, that contains the above licensing notice or that is packed together with a licensing notice referencing it.\n\u003c/li\u003e\u003cli\u003e\n\\\"Licensor\\\" is the provider of the Original Work who has placed this licensing notice adjacent to the copyright notice(s) for the Original Work. The Original Work is either directly provided by the owner of the Original Work, or by a licensee of the owner.\n\u003c/li\u003e\u003cli\u003e\n\\\"Derivative Work\\\" is any modification of the Original Work which represents, as a whole, an original work of authorship. For the matter of clarity and as examples:\n\u003col type\u003d\\\"A\\\"\u003e\n\u003cli\u003e\nDerivative Work shall not include work that remains separable from the Original Work, as well as merely extracting a part of the Original Work without modifying it.\n\u003c/li\u003e\u003cli\u003e\nDerivative Work shall not include (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation.\n\u003c/li\u003e\u003cli\u003e\nDerivative Work shall include classes that are copied from the Original Work where declarations, equations or the documentation are modified.\n\u003c/li\u003e\u003cli\u003e\nDerivative Work shall include executables to simulate the models that are generated by a Modelica translator based on the Original Work (of a Modelica package). \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\\\"Modified Work\\\" is any modification of the Original Work with the following exceptions: (a) fixing of errors and/or (b) adding vendor specific Modelica annotations and/or (c) using a subset of the classes of a Modelica package, and/or (d) using a different representation, e.g., a binary representation.\n\u003c/li\u003e\u003cli\u003e\n\\\"Source Code\\\" means the preferred form of the Original Work for making modifications to it and all available documentation describing how to modify the Original Work.\n\u003c/li\u003e\u003cli\u003e\n\\\"You\\\" means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License.\n\u003c/li\u003e\u003cli\u003e\n\\\"Modelica package\\\" means any Modelica library that is defined with the\n \u003cb\u003epackage\u003c/b\u003e \u0026lt;Name\u0026gt; ... \u003cb\u003eend\u003c/b\u003e \u0026lt;Name\u0026gt;\u003cb\u003e;\u003c/b\u003e Modelica language element.\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003e2. Grant of Copyright License\u003c/h4\u003e\n\u003cp\u003e\nLicensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, for the duration of the copyright, to do the following:\n\u003c/p\u003e\n\u003col type\u003d\\\"a\\\"\u003e\n\u003cli\u003e\nTo reproduce the Original Work in copies, either alone or as part of a collection.\n\u003c/li\u003e\u003cli\u003e\nTo create Derivative Works according to Section 1d) of this License.\n\u003c/li\u003e\u003cli\u003e\nTo distribute or communicate to the public copies of the \u003cu\u003eOriginal Work\u003c/u\u003e or a \u003cu\u003eDerivative Work\u003c/u\u003e under \u003cu\u003ethis License\u003c/u\u003e. No fee, neither as a copyright-license fee, nor as a selling fee for the copy as such may be charged under this License. Furthermore, a verbatim copy of this License must be included in any copy of the Original Work or a Derivative Work under this License.\n\u003cbr/\u003e\nFor the matter of clarity, it is permitted A) to distribute or communicate such copies as part of a (possible commercial) collection where other parts are provided under different licenses and a license fee is charged for the other parts only and B) to charge for mere printing and shipping costs.\n\u003c/li\u003e\u003cli\u003e\nTo distribute or communicate to the public copies of a \u003cu\u003eDerivative Work\u003c/u\u003e, alternatively to Section 2c), under \u003cu\u003eany other license\u003c/u\u003e of your choice, especially also under a license for commercial/proprietary software, as long as You comply with Sections 3, 4 and 8 below.\n\u003cbr/\u003e\nFor the matter of clarity, no restrictions regarding fees, either as to a copyright-license fee or as to a selling fee for the copy as such apply.\n\u003c/li\u003e\u003cli\u003e\nTo perform the Original Work publicly.\n\u003c/li\u003e\u003cli\u003e\nTo display the Original Work publicly.\n\u003c/li\u003e\u003c/ol\u003e\n\n\u003ch4\u003e3. Acceptance\u003c/h4\u003e\n\u003cp\u003e\nAny use of the Original Work or a Derivative Work, or any action according to either Section 2a) to 2f) above constitutes Your acceptance of this License.\n\u003c/p\u003e\n\n\u003ch4\u003e4. Designation of Derivative Works and of Modified Works\u003c/h4\u003e\n\u003cp\u003e\nThe identifying designation of Derivative Work and of Modified Work must be different to the corresponding identifying designation of the Original Work. This means especially that the (root-level) name of a Modelica package under this license must be changed if the package is modified (besides fixing of errors, adding vendor specific Modelica annotations, using a subset of the classes of a Modelica package, or using another representation, e.g. a binary representation).\n\u003c/p\u003e\n\n\u003ch4\u003e5. [reserved]\u003c/h4\u003e\n\u003ch4\u003e6. Provision of Source Code\u003c/h4\u003e\n\u003cp\u003e\nLicensor agrees to provide You with a copy of the Source Code of the Original Work but reserves the right to decide freely on the manner of how the Original Work is provided. For the matter of clarity, Licensor might provide only a binary representation of the Original Work. In that case, You may (a) either reproduce the Source Code from the binary representation if this is possible (e.g., by performing a copy of an encrypted Modelica package, if encryption allows the copy operation) or (b) request the Source Code from the Licensor who will provide it to You.\n\u003c/p\u003e\n\n\u003ch4\u003e7. Exclusions from License Grant\u003c/h4\u003e\n\u003cp\u003e\nNeither the names of Licensor (including, but not limited to, University of California, Lawrence Berkeley National Laboratory, U.S. Dept. of Energy, UC, LBNL, LBL, and DOE), nor the names of any contributors to the Original Work, nor any of their trademarks or service marks, may be used to endorse or promote products derived from this Original Work without express prior permission of the Licensor. Except as otherwise expressly stated in this License and in particular in Sections 2 and 5, nothing in this License grants any license to Licensor\u0027s trademarks, copyrights, patents, trade secrets or any other intellectual property, and no patent license is granted to make, use, sell, offer for sale, have made, or import embodiments of any patent claims.\nNo license is granted to the trademarks of Licensor even if such trademarks are included in the Original Work, except as expressly stated in this License. Nothing in this License shall be interpreted to prohibit Licensor from licensing under terms different from this License any Original Work that Licensor otherwise would have a right to license.\n\u003c/p\u003e\n\n\u003ch4\u003e8. Attribution Rights\u003c/h4\u003e\n\u003cp\u003e\nYou must retain in the Source Code of the Original Work and of any Derivative Works that You create, all author, copyright, patent, or trademark notices, as well as any descriptive text identified therein as an \\\"Attribution Notice\\\". The same applies to the licensing notice of this License in the Original Work. For the matter of clarity, \\\"author notice\\\" means the notice that identifies the original author(s).\n\u003c/p\u003e\n\u003cp\u003e\nYou must cause the Source Code for any Derivative Works that You create to carry a prominent Attribution Notice reasonably calculated to inform recipients that You have modified the Original Work.\n\u003c/p\u003e\n\u003cp\u003e\nIn case the Original Work or Derivative Work is not provided in Source Code, the Attribution Notices shall be appropriately displayed, e.g., in the documentation of the Derivative Work.\n\u003c/p\u003e\n\n\u003ch4\u003e9. Disclaimer of Warranty\u003c/h4\u003e\n\u003cp\u003e\n\u003cu\u003e\u003cstrong\u003eThe Original Work is provided under this License on an \\\"as is\\\" basis and without warranty, either express or implied, including, without limitation, the warranties of non-infringement, merchantability or fitness for a particular purpose. The entire risk as to the quality of the Original Work is with You.\u003c/strong\u003e\u003c/u\u003e This disclaimer of warranty constitutes an essential part of this License. No license to the Original Work is granted by this License except under this disclaimer.\n\u003c/p\u003e\n\n\u003ch4\u003e10. Limitation of Liability\u003c/h4\u003e\n\u003cp\u003e\nUnder no circumstances and under no legal theory, whether in tort (including negligence), contract, or otherwise, shall the Licensor, the owner or a licensee of the Original Work be liable to anyone for any direct, indirect, general, special, incidental, or consequential damages of any character arising as a result of this License or the use of the Original Work including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses. This limitation of liability shall not apply to the extent applicable law prohibits such limitation.\n\u003c/p\u003e\n\n\u003ch4\u003e11. Termination\u003c/h4\u003e\n\u003cp\u003e\nThis License conditions your rights to undertake the activities listed in Section 2 and 5, including your right to create Derivative Works based upon the Original Work, and doing so without observing these terms and conditions is prohibited by copyright law and international treaty. Nothing in this License is intended to affect copyright exceptions and limitations. This License shall terminate immediately and You may no longer exercise any of the rights granted to You by this License upon your failure to observe the conditions of this license.\n\u003c/p\u003e\n\n\u003ch4\u003e12. Termination for Patent Action\u003c/h4\u003e\n\u003cp\u003e\nThis License shall terminate automatically and You may no longer exercise any of the rights granted to You by this License as of the date You commence an action, including a cross-claim or counterclaim, against Licensor, any owners of the Original Work or any licensee alleging that the Original Work infringes a patent. This termination provision shall not apply for an action alleging patent infringement through combinations of the Original Work under combination with other software or hardware.\n\u003c/p\u003e\n\n\u003ch4\u003e13. Jurisdiction\u003c/h4\u003e\n\u003cp\u003e\nAny action or suit relating to this License may be brought only in the courts of a jurisdiction wherein the Licensor resides and under the laws of that jurisdiction excluding its conflict-of-law provisions. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any use of the Original Work outside the scope of this License or after its termination shall be subject to the requirements and penalties of copyright or patent law in the appropriate jurisdiction. This section shall survive the termination of this License.\n\u003c/p\u003e\n\n\u003ch4\u003e14. Attorneys\u0027 Fees\u003c/h4\u003e\n\u003cp\u003e\nIn any action to enforce the terms of this License or seeking damages relating thereto, the prevailing party shall be entitled to recover its costs and expenses, including, without limitation, reasonable attorneys\u0027 fees and costs incurred in connection with such action, including any appeal of such action. This section shall survive the termination of this License.\n\u003c/p\u003e\n\n\u003ch4\u003e15. Miscellaneous\u003c/h4\u003e\n\u003col type\u003d\\\"a\\\"\u003e\n\u003cli\u003eIf any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.\n\u003c/li\u003e\u003cli\u003e\nNo verbal ancillary agreements have been made. Changes and additions to this License must appear in writing to be valid. This also applies to changing the clause pertaining to written form.\n\u003c/li\u003e\u003cli\u003e\nYou may use the Original Work in all ways not otherwise restricted or conditioned by this License or by law, and Licensor promises not to interfere with or be responsible for such uses by You.\n\u003c/li\u003e\u003cli\u003e\nYou are under no obligation whatsoever to provide any bug fixes, patches, or upgrades to the features, functionality or performance of the source code (\\\"Enhancements\\\") to anyone; however, if you choose to make your Enhancements available either publicly, or directly to Lawrence Berkeley National Laboratory, without imposing a separate written license agreement for such Enhancements, then you hereby grant the following license: a non-exclusive, royalty-free perpetual license to install, use, modify, prepare derivative works, incorporate into other computer software, distribute, and sublicense such enhancements or derivative works thereof, in binary and source code form.\n\u003c/li\u003e\u003c/ol\u003e\n\n\u003ch4\u003eHow to Apply the Modelica License 2\u003c/h4\u003e\n\u003cp\u003e\nAt the top level of your Modelica package and at every important subpackage, add the following notices in the info layer of the package:\n\u003c/p\u003e\n\u003cul\u003e\u003cli style\u003d\\\"list-style-type:none\\\"\u003e\nLicensed by The Regents of the University of California, through Lawrence Berkeley National Laboratory under the Modelica License 2 Copyright (c) 2009-2015, The Regents of the University of California, through Lawrence Berkeley National Laboratory.\n\u003c/li\u003e\n\u003cli style\u003d\\\"list-style-type:none\\\"\u003e\u003ci\u003e\nThis Modelica package is \u003cu\u003efree\u003c/u\u003e software and the use is completely at \u003cu\u003eyour own risk\u003c/u\u003e; it can be redistributed and/or modified under the terms of the Modelica license 2, see the license conditions (including the disclaimer of warranty) here or at \u003ca href\u003d\\\"http://www.modelica.org/modelica-legal-documents/ModelicaLicense2.html\\\"\u003ehttp://www.modelica.org/modelica-legal-documents/ModelicaLicense2.html\u003c/a\u003e.\n\u003c/i\u003e\u003c/li\u003e\u003c/ul\u003e\n\n\u003cp\u003e\nInclude a copy of the Modelica License 2 under \u003cstrong\u003e\u0026lt;library\u0026gt;.UsersGuide.ModelicaLicense2\u003c/strong\u003e\n(use \u003ca href\u003d\\\"http://www.modelica.org/modelica-legal-documents/ModelicaLicense2.mo\\\"\u003e\nhttp://www.modelica.org/modelica-legal-documents/ModelicaLicense2.mo\u003c/a\u003e)\nFurthermore, add the list of authors and contributors under\n\u003cstrong\u003e\u0026lt;library\u0026gt;.UsersGuide.Contributors\u003c/strong\u003e or \u003cstrong\u003e\u0026lt;library\u0026gt;.UsersGuide.Contact\u003c/strong\u003e\n\u003c/p\u003e\n\u003cp\u003e\nFor example, sublibrary Modelica.Blocks of the Modelica Standard Library may have the following notices:\u003c/p\u003e\n\u003cul\u003e\u003cli style\u003d\\\"list-style-type:none\\\"\u003e\nLicensed by Modelica Association under the Modelica License 2 Copyright (c) 1998-2008, Modelica Association.\n\u003cli style\u003d\\\"list-style-type:none\\\"\u003e\u003ci\u003e\nThis Modelica package is \u003cu\u003efree\u003c/u\u003e software and the use is completely at \u003cu\u003eyour own risk\u003c/u\u003e; it can be redistributed and/or modified under the terms of the Modelica license 2, see the license conditions (including the disclaimer of warranty) here or at\n\u003ca href\u003d\\\"http://www.modelica.org/modelica-legal-documents/ModelicaLicense2.html\\\"\u003ehttp://www.modelica.org/modelica-legal-documents/ModelicaLicense2.html\u003c/a\u003e.\n\u003c/i\u003e\n\u003c/li\u003e\u003c/ul\u003e\n\n\u003cp\u003eFor C-source code and documents, add similar notices in the corresponding file.\u003c/p\u003e\n\u003cp\u003e\nFor images, add a \\\"readme.txt\\\" file to the directories where the images are stored and include a similar notice in this file.\n\u003c/p\u003e\n\n\u003cp\u003e\nIn these cases, save a copy of the Modelica License 2 in one directory of the distribution, e.g.,\n\u003ca href\u003d\\\"http://www.modelica.org/modelica-legal-documents/ModelicaLicense2-standalone.html\\\"\u003ehttp://www.modelica.org/modelica-legal-documents/ModelicaLicense2-standalone.html\u003c/a\u003e in directory \u003cstrong\u003e\u0026lt;library\u0026gt;/help/documentation/ModelicaLicense2.html\u003c/strong\u003e.\n\u003c/p\u003e\n\n\u003c/html\u003e\""}},"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_phX":{"name":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_phX","comment":"Return the thermodynamic state as function of pressure p, specific enthalpy h and composition X or Xi","superClasses":[{"nameOfExtendedClass":"Buildings.Media.Specialized.Water.TemperatureDependentDensity.setState_phX"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis function returns the thermodynamic state for a given pressure,\nspecific enthalpy and composition.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Controls.Interfaces.DayTypeOutput":{"name":"Buildings.Controls.Interfaces.DayTypeOutput","comment":"Output connector for demand response day","qualifiers":["output"],"superClasses":[{"nameOfExtendedClass":"Buildings.Controls.Types.Day","annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one output signal of type\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Types.Day\\\"\u003e\nBuildings.Controls.Types.Day\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon()})"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one output signal of type\n\u003ca href\u003d\\\"modelica://Buildings.Controls.Types.Day\\\"\u003e\nBuildings.Controls.Types.Day\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d true, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon()})"}},"Buildings.Fluid.Sensors.DensityTwoPort":{"name":"Buildings.Fluid.Sensors.DensityTwoPort","comment":"Ideal two port density sensor","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Sensors.BaseClasses.PartialDynamicFlowSensor"},{"nameOfExtendedClass":"Modelica.Icons.RotationalSensor"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"d","comment":"Density of the passing fluid","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"Density\""},{"name":"unit","qualifiers":["final"],"value":"\"kg/m3\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,110}, extent \u003d {{10,-10},{-10,10}}, rotation \u003d 270))"}},{"className":"Medium.Density","qualifiers":["parameter"],"name":"d_start","comment":"Initial or guess value of output (\u003dstate)","value":"Medium.density()","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Temperature","qualifiers":["parameter"],"name":"T_start","comment":"Temperature used to compute d_start","value":"Medium.T_default","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.Pressure","qualifiers":["parameter"],"name":"p_start","comment":"Pressure used to compute d_start","value":"Medium.p_default","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}},{"className":"Modelica.SIunits.MassFraction","qualifiers":["array","parameter"],"name":"X_start","comment":"Mass fraction used to compute d_start","value":"Medium.X_default","arraySubscripts":"[Medium.nX]","annotations":{"dialog":"Dialog(group \u003d \"Initialization\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model outputs the density of the fluid flowing from\n\u003ccode\u003eport_a\u003c/code\u003e to \u003ccode\u003eport_b\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe sensor is ideal, i.e., it does not influence the fluid.\nIf the parameter \u003ccode\u003etau\u003c/code\u003e is non-zero, then its output\nis computed using a first order differential equation.\nSetting \u003ccode\u003etau\u003d0\u003c/code\u003e is \u003ci\u003enot\u003c/i\u003e recommend. See\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\nBuildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for an explanation.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}, grid \u003d {1,1}), graphics \u003d {Text(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.OnePhase.Storage.Battery":{"name":"Buildings.Electrical.AC.OnePhase.Storage.Battery","comment":"Simple model of a battery","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialAcDcParameters"}],"components":[{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"etaCha","comment":"Efficiency during charging","value":"0.9","modifications":[{"name":"max","value":"1"}]},{"className":"Modelica.SIunits.Efficiency","qualifiers":["parameter"],"name":"etaDis","comment":"Efficiency during discharging","value":"0.9","modifications":[{"name":"max","value":"1"}]},{"className":"Real","qualifiers":["parameter"],"name":"SOC_start","comment":"Initial charge","modifications":[{"name":"start","value":"0.1"}]},{"className":"Modelica.SIunits.Energy","qualifiers":["parameter"],"name":"EMax","comment":"Maximum available charge","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"kWh\""}]},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"start","value":"110"}]},{"className":"Boolean","qualifiers":["parameter"],"name":"linearized","comment":"If \u003dtrue introduce a linearization in the load","value":"false"},{"className":"Buildings.Electrical.Types.InitMode","qualifiers":["parameter"],"name":"initMode","comment":"Initialization mode for homotopy operator","value":"Buildings.Electrical.Types.InitMode.zero_current","modifications":[{"name":"min","value":"Buildings.Electrical.Types.InitMode.zero_current"},{"name":"max","value":"Buildings.Electrical.Types.InitMode.linearized"}],"annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"P","comment":"Power stored in battery (if positive), or extracted from battery (if negative)","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,108}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,100}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"SOC","comment":"State of charge","annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}},{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_p","qualifiers":["replaceable"],"name":"terminal","comment":"Generalized terminal","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}))"}}],"classes":[{"name":"Buildings.Electrical.AC.OnePhase.Storage.Battery.PhaseSystem","qualifiers":["replaceable","package"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.OnePhase"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nSimple model of a battery.\n\u003c/p\u003e\n\u003cp\u003e\nThis model takes as an input the power to be stored in the battery (if \u003ci\u003eP \u0026gt; 0\u003c/i\u003e)\nor to be extracted from the battery. This model has a one phase AC connector\nand takes into account the efficiency of the conversion\nbetween DC and AC \u003ci\u003e\u0026eta;\u003csub\u003eDCAC\u003c/sub\u003e\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nThe output connector \u003ccode\u003eSOC\u003c/code\u003e is the state of charge of the battery.\nThis model does not enforce that the state of charge is between zero and one.\nHowever, each time the state of charge crosses zero or one, a warning will\nbe written to the simulation log file.\nThe model also does not limit the current through the battery. The user should\nprovide a control so that only a reasonable amount of power is exchanged,\nand that the state of charge remains between zero and one.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon(),Polygon(),Text(),Line(),Text(),Text()})"}},"Buildings.Fluid.Types.EfficiencyInput":{"name":"Buildings.Fluid.Types.EfficiencyInput","comment":"Enumeration to define the input for efficiency curves","qualifiers":["primitive"],"components":[{"className":"EnumType","name":"value"},{"className":"StringType","qualifiers":["parameter"],"name":"quantity","value":"\"\""},{"className":"EnumType","qualifiers":["parameter"],"name":"min"},{"className":"EnumType","qualifiers":["parameter"],"name":"max"},{"className":"EnumType","qualifiers":["parameter"],"name":"start"},{"className":"BooleanType","qualifiers":["parameter"],"name":"fixed","value":"false"},{"className":"EnumType","qualifiers":["constant"],"name":"volume","comment":"use state of fluid volume"},{"className":"EnumType","qualifiers":["constant"],"name":"port_a","comment":"use port_a"},{"className":"EnumType","qualifiers":["constant"],"name":"port_b","comment":"use port_b"},{"className":"EnumType","qualifiers":["constant"],"name":"average","comment":"use (port_a+port_b)/2"}]},"Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters":{"name":"Buildings.Fluid.Interfaces.TwoPortFlowResistanceParameters","comment":"Parameters for flow resistance for models with two ports","components":[{"className":"Boolean","qualifiers":["parameter"],"name":"computeFlowResistance","comment":"\u003dtrue, compute flow resistance. Set to false to assume no friction","value":"true","annotations":{"dialog":"Dialog(tab \u003d \"Flow resistance\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"from_dp","comment":"\u003d true, use m_flow \u003d f(dp) else dp \u003d f(m_flow)","value":"false","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance, tab \u003d \"Flow resistance\")"}},{"className":"Modelica.SIunits.PressureDifference","qualifiers":["parameter"],"name":"dp_nominal","comment":"Pressure difference","modifications":[{"name":"min","value":"0"},{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal condition\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"linearizeFlowResistance","comment":"\u003d true, use linear relation between m_flow and dp for any flow rate","value":"false","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance, tab \u003d \"Flow resistance\")"}},{"className":"Real","qualifiers":["parameter"],"name":"deltaM","comment":"Fraction of nominal flow rate where flow transitions to laminar","value":"0.1","annotations":{"dialog":"Dialog(enable \u003d computeFlowResistance, tab \u003d \"Flow resistance\")"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\nThis class contains parameters that are used to\ncompute the pressure drop in models that have one fluid stream.\nNote that the nominal mass flow rate is not declared here because\nthe model\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Interfaces.PartialTwoPortInterface\\\"\u003e\nPartialTwoPortInterface\u003c/a\u003e\nalready declares it.\n\u003c/html\u003e\""}},"Buildings.Electrical.PhaseSystems.TwoConductor.activePower":{"name":"Buildings.Electrical.PhaseSystems.TwoConductor.activePower","comment":"Return total power as function of phase powers","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.PhaseSystems.TwoConductor.activePower"}]},"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortInductance":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Lines.TwoPortInductance","comment":"Model of an inductance with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.OnePhase.Lines.TwoPortInductance","modifications":[{"name":"terminal_n"},{"name":"terminal_p"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nInductance that connects two AC three-phase\nbalanced interfaces. This model can be used to represent a\ncable in a three-phase balanced AC system.\n\u003c/p\u003e\n\u003cp\u003e\nSee model\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Lines.TwoPortInductance\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Lines.TwoPortInductance\u003c/a\u003e for more\ninformation.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.FMI.Interfaces.PressureInput":{"name":"Buildings.Fluid.FMI.Interfaces.PressureInput","comment":"Input pressure as a connector","qualifiers":["input"],"superClasses":[{"nameOfExtendedClass":"Modelica.SIunits.AbsolutePressure","modifications":[{"name":"displayUnit","value":"\"Pa\""}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, initialScale \u003d 0.2, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one input signal of type \u003ccode\u003eModelica.SIunits.AbsolutePressure\u003c/code\u003e.\nThis connector has been implemented to conditionally remove\nthe pressure if no pressure drop calculation is requested.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()}, coordinateSystem(extent \u003d {{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio \u003d true, initialScale \u003d 0.2))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d true, initialScale \u003d 0.2, extent \u003d {{-100.0,-100.0},{100.0,100.0}}), graphics \u003d {Polygon(),Text()})","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConnector with one input signal of type \u003ccode\u003eModelica.SIunits.AbsolutePressure\u003c/code\u003e.\nThis connector has been implemented to conditionally remove\nthe pressure if no pressure drop calculation is requested.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon()}, coordinateSystem(extent \u003d {{-100.0,-100.0},{100.0,100.0}}, preserveAspectRatio \u003d true, initialScale \u003d 0.2))"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos30slash1to8":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos30slash1to8","comment":"Pump data for a Wilo Stratos 30/1-8 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"3040"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{2.66111582909e-06,0.000621486635037,0.000887056469533,0.0011525489114,0.00140859349908,0.00168018209891,0.00191740837085,0.00219831980599}"},{"name":"P","value":"{42.7878285797,72.7712666315,87.0576021552,99.7562542248,108.565085499,117.461493336,123.188074537,128.511579716}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{2.66111582909e-06,0.000621486635037,0.000887056469533,0.0011525489114,0.00140859349908,0.00168018209891,0.00191740837085,0.00219831980599}"},{"name":"dp","value":"{50002.7035151,49603.919395,47783.2940685,44505.1908368,39882.6694921,33688.9797121,27835.1000463,20631.4409942}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000018000029420002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos30slash1to4":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos30slash1to4","comment":"Pump data for a Wilo Stratos 30/1-4 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"1800"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{5.55555555556e-07,0.000402190923318,0.00052269170579,0.000643192488263,0.000752738654147,0.000866979655712,0.000973395931142,0.00108607198748,0.00115962441315}"},{"name":"P","value":"{14.2085618951,21.2596204596,23.3573239437,25.1349149442,26.581943662,27.9121571534,28.8498841148,29.4981726255,29.7520982304}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{5.55555555556e-07,0.000402190923318,0.00052269170579,0.000643192488263,0.000752738654147,0.000866979655712,0.000973395931142,0.00108607198748,0.00115962441315}"},{"name":"dp","value":"{17066.9518717,16997.0053476,16437.4331551,15528.1283422,14408.9839572,13149.9465241,11681.0695187,9932.40641711,8533.47593583}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/0000000e000379ac0002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Utilities.Reports.Printer":{"name":"Buildings.Utilities.Reports.Printer","comment":"Model that prints values to a file","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.DiscreteBlock","modifications":[{"name":"firstTrigger","modifications":[{"name":"start","value":"false"},{"name":"fixed","value":"true"}]}]}],"components":[{"className":"String","qualifiers":["parameter"],"name":"header","comment":"Header to be printed","value":"\"\""},{"className":"String","qualifiers":["parameter"],"name":"fileName","comment":"File name (empty string is the terminal)","value":"\"\""},{"className":"Integer","qualifiers":["parameter"],"name":"nin","comment":"Number of inputs","value":"1"},{"className":"Integer","qualifiers":["parameter"],"name":"configuration","comment":"Index for treating final report (see documentation)","value":"1"},{"className":"Integer","qualifiers":["parameter"],"name":"minimumLength","comment":"Minimum length of result string","value":"1"},{"className":"Integer","qualifiers":["parameter"],"name":"significantDigits","comment":"Number of significant digits","value":"16"},{"className":"Modelica.Blocks.Interfaces.RealInput","qualifiers":["array"],"name":"x","comment":"Value to be printed","arraySubscripts":"[nin]","annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-20},{-100,20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model prints to a file or the terminal at a fixed sample interval.\n\u003c/p\u003e\n\u003cp\u003e\nThe parameter \u003ccode\u003econfiguration\u003c/code\u003e controls the printing as follows:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\"\u003e\n\u003ctr\u003e\u003ctd\u003e\u003ccode\u003econfiguration\u003c/code\u003e\u003c/td\u003e\u003ctd\u003econfiguration\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eprint at sample times only\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eprint at sample times and at end of simulation\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e \u003ctd\u003eprint at end of simulation only\u003c/td\u003e\u003c/tr\u003e\n \u003c/table\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Polygon(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Electrical.Interfaces.PartialWindTurbineBase":{"name":"Buildings.Electrical.Interfaces.PartialWindTurbineBase","comment":"Base class for turbine model that contains basic parameters","qualifiers":["model","partial"],"components":[{"className":"Modelica.SIunits.Velocity","qualifiers":["final","parameter"],"name":"vIn","comment":"Cut-in steady wind speed","value":"table[1,1]"},{"className":"Modelica.SIunits.Velocity","qualifiers":["final","parameter"],"name":"vOut","comment":"Cut-out steady wind speed","value":"table[size(table,1),1]"},{"className":"Real","qualifiers":["parameter"],"name":"scale","comment":"Scaling factor, used to allow adjusting the power output without changing the table","value":"1","modifications":[{"name":"min","value":"0"}]},{"className":"Real","qualifiers":["parameter"],"name":"h","comment":"Height over ground","annotations":{"dialog":"Dialog(group \u003d \"Wind correction\")"}},{"className":"Modelica.SIunits.Height","qualifiers":["parameter"],"name":"hRef","comment":"Reference height for wind measurement","value":"10","annotations":{"dialog":"Dialog(group \u003d \"Wind correction\")"}},{"className":"Real","qualifiers":["parameter"],"name":"nWin","comment":"Height exponent for wind profile calculation","value":"0.4","modifications":[{"name":"min","value":"0"}],"annotations":{"dialog":"Dialog(group \u003d \"Wind correction\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"tableOnFile","comment":"true, if table is defined on file or in function usertab","value":"false"},{"className":"Real","qualifiers":["array","parameter"],"name":"table","comment":"Table of generated power (first column is wind speed, second column is power)","value":"[3.5, 0; 5.5, 0.1; 12, 0.9; 14, 1; 25, 1]","arraySubscripts":"[:,2]"},{"className":"String","qualifiers":["parameter"],"name":"tableName","comment":"Table name on file or in function usertab (see documentation)","value":"\"NoName\""},{"className":"String","qualifiers":["parameter"],"name":"fileName","comment":"File where matrix is stored","value":"\"NoName\""},{"className":"Modelica.SIunits.Voltage","qualifiers":["parameter"],"name":"V_nominal","comment":"Nominal voltage (V_nominal \u003e\u003d 0)","modifications":[{"name":"min","value":"0"},{"name":"start","value":"110"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"vWin","comment":"Steady wind speed","modifications":[{"name":"unit","value":"\"m/s\""}],"annotations":{"placement":"Placement(transformation(origin \u003d {0,120}, extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 270, origin \u003d {0,120}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"P","comment":"Generated power","modifications":[{"name":"unit","value":"\"W\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,50},{120,70}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis partial model contains the minimum set of parameters necessary to describe\na wind turbine.\nThe model defines also an output \u003ccode\u003eP\u003c/code\u003e for the power generated by the wind turbine.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortInductance":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Lines.TwoPortInductance","comment":"Model of an inductance with two electrical ports","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.TwoPort"}],"components":[{"className":"Modelica.SIunits.Inductance","qualifiers":["parameter"],"name":"L","comment":"Inductance"},{"className":"OnePhase.Lines.TwoPortInductance","name":"phase1","comment":"Inductance line 1","modifications":[{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,20},{10,40}}))"}},{"className":"OnePhase.Lines.TwoPortInductance","name":"phase2","comment":"Inductance line 2","modifications":[{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}))"}},{"className":"OnePhase.Lines.TwoPortInductance","name":"phase3","comment":"Inductance line 3","modifications":[{"name":"L","qualifiers":["final"],"value":"L/(3)"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-40},{10,-20}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nInductive model that connects two AC three-phase\nunbalanced interfaces. This model can be used to represent a\ncable in a three-phase unbalanced AC system.\n\u003c/p\u003e\n\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Lines/twoPortL.png\\\"/\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe model represents the lumped inductances as shown in the figure above.\nAssuming that the inductance \u003ci\u003eL\u003c/i\u003e is the overall inductance of the cable,\neach line has an inductance equal to \u003ci\u003eL/3\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Ellipse(),Text(),Line(),Line(),Text(),Line(),Ellipse(),Ellipse(),Rectangle(),Line()})"}},"Buildings.Utilities.IO.BCVTB.From_degC":{"name":"Buildings.Utilities.IO.BCVTB.From_degC","comment":"Converts Celsius to Kelvin","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Icons.Block"}],"components":[{"className":"Modelica.Blocks.Interfaces.RealInput","name":"Celsius","comment":"Temperature in Celsius","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"degC\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"-273.15"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-140,-24},{-100,16}}), iconTransformation(extent \u003d {{-140,-24},{-100,16}}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"Kelvin","comment":"Temperature in Kelvin","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ThermodynamicTemperature\""},{"name":"unit","qualifiers":["final"],"value":"\"K\""},{"name":"displayUnit","value":"\"degC\""},{"name":"min","value":"0"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{100,-12},{120,8}}), iconTransformation(extent \u003d {{100,-12},{120,8}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nConverts the input from Kelvin to degree Celsius.\nNote that inside Modelica, by convention, all models use\nKelvin. This block is provided for convenience since the BCVTB\ninterface may couple Modelica to programs that use Celsius\nas the unit for temperature.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text(),Polygon(),Text(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal4_n":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal4_n","comment":"Terminal N for AC three-phase unbalanced systems (neutral cable)","qualifiers":["connector"],"components":[{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_n","qualifiers":["array"],"name":"phase","arraySubscripts":"[4]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector type n for AC three-phase unbalanced systems\nwith neutral cable connection.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Fluid.Storage.StratifiedEnhanced":{"name":"Buildings.Fluid.Storage.StratifiedEnhanced","comment":"Stratified tank model with enhanced discretization","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Storage.Stratified","modifications":[{"name":"nSeg","value":"4"},{"name":"nPorts","value":"3"},{"name":"vol","modifications":[{"name":"prescribedHeatFlowRate","qualifiers":["each"],"value":"true"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis is a model of a stratified storage tank for thermal energy storage.\n\u003c/p\u003e\n\u003cp\u003e\nSee the\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.Storage.UsersGuide\\\"\u003e\nBuildings.Fluid.Storage.UsersGuide\u003c/a\u003e\nfor more information.\n\u003c/p\u003e\n\u003ch4\u003eLimitations\u003c/h4\u003e\n\u003cp\u003e\nThe model requires at least 4 fluid segments. Hence, set \u003ccode\u003enSeg\u003c/code\u003e to 4 or higher.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Rectangle()})"}},"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos40slash1to8":{"name":"Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos40slash1to8","comment":"Pump data for a Wilo Stratos 40/1-8 pump","superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.Movers.Data.Generic","modifications":[{"name":"speed_rpm_nominal","value":"3830"},{"name":"use_powerCharacteristic","value":"true"},{"name":"power","modifications":[{"name":"V_flow","value":"{4.03163741226e-06,0.00188290448506,0.00245068662086,0.00286231420438,0.00325508173616,0.00357919645424,0.00394696189973}"},{"name":"P","value":"{99.4470603052,175.709481933,197.426392754,209.437047607,213.2290948,215.740841723,218.557203232}"}]},{"name":"pressure","modifications":[{"name":"V_flow","value":"{4.03163741226e-06,0.00188290448506,0.00245068662086,0.00286231420438,0.00325508173616,0.00357919645424,0.00394696189973}"},{"name":"dp","value":"{50361.3292164,50002.6907452,46761.3220062,42267.4693149,36095.691563,30066.6880748,23476.280464}"}]}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n  \u003cp\u003eData from:\n  \u003ca href\u003d\\\"http://productfinder.wilo.com/en/COM/product/00000018000028050002003a/fc_product_datasheet\\\"\u003e\n  http://productfinder.wilo.com/en/COM/product/0000000e000379df0002003a/fc_product_datasheet\n  \u003c/a\u003e\n  \u003c/p\u003e\n  \u003cp\u003eSee\n  \u003ca href\u003d\\\"modelica://Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\\\"\u003e\n  Buildings.Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to6\n  \u003c/a\u003e\n  for more information about how the data is derived.\n  \u003c/p\u003e\n  \u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesBalanced.Sensors.GeneralizedSensor":{"name":"Buildings.Electrical.AC.ThreePhasesBalanced.Sensors.GeneralizedSensor","comment":"Sensor for power, voltage and current","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Icons.GeneralizedSensor"},{"nameOfExtendedClass":"Buildings.Electrical.Interfaces.PartialTwoPort","modifications":[{"name":"PhaseSystem_p","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"PhaseSystem_n","qualifiers":["redeclare","package"],"value":"PhaseSystems.OnePhase"},{"name":"terminal_n"},{"name":"terminal_p"}]}],"components":[{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"V","comment":"Voltage","value":"Buildings.Electrical.PhaseSystems.OnePhase.systemVoltage(terminal_n.v)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ElectricPotential\""},{"name":"unit","qualifiers":["final"],"value":"\"V\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {0,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","name":"I","comment":"Current","value":"Buildings.Electrical.PhaseSystems.OnePhase.systemCurrent(terminal_n.i)","modifications":[{"name":"quantity","qualifiers":["final"],"value":"\"ElectricCurrent\""},{"name":"unit","qualifiers":["final"],"value":"\"A\""}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {60,-90}))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"S","comment":"Phase powers","value":"Buildings.Electrical.PhaseSystems.OnePhase.phasePowers_vi()","modifications":[{"name":"quantity","qualifiers":["final","each"],"value":"\"Power\""},{"name":"unit","qualifiers":["final","each"],"value":"\"W\""}],"arraySubscripts":"[PhaseSystems.OnePhase.n]","annotations":{"placement":"Placement(transformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-50}), iconTransformation(extent \u003d {{-10,-10},{10,10}}, rotation \u003d 270, origin \u003d {-60,-90}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nIdeal sensor that measures power, voltage and current.\nThe two components of the power \u003ci\u003eS\u003c/i\u003e are the active and reactive power.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Text()})"}},"Buildings.Rooms.CFD":{"name":"Buildings.Rooms.CFD","comment":"Model of a room in which the air is computed using Computational Fluid Dynamics (CFD)","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Rooms.BaseClasses.RoomHeatMassBalance","modifications":[{"name":"air"}]}],"components":[{"className":"Modelica.Fluid.Types.Dynamics","qualifiers":["parameter"],"name":"massDynamics","comment":"Formulation of mass balance","value":"Modelica.Fluid.Types.Dynamics.DynamicFreeInitial","annotations":{"dialog":"Dialog(tab \u003d \"Dynamics\", group \u003d \"Equations\")"}},{"className":"Medium.AbsolutePressure","qualifiers":["parameter"],"name":"p_start","comment":"Start value of pressure","value":"Medium.p_default","annotations":{"dialog":"Dialog(tab \u003d \"Initialization\")"}},{"className":"Boolean","qualifiers":["parameter"],"name":"useCFD","comment":"Set to false to deactivate the CFD computation and use instead yFixed as output","value":"true","annotations":{"dialog":"Dialog(group \u003d \"CFD\")"}},{"className":"Modelica.SIunits.Time","qualifiers":["parameter"],"name":"samplePeriod","comment":"Sample period of component","modifications":[{"name":"min","value":"100*Modelica.Constants.eps"}],"annotations":{"dialog":"Dialog(group \u003d \"Sampling\")"}},{"className":"Real","qualifiers":["array","parameter"],"name":"uSha_fixed","comment":"Constant control signal for the shading device (0: unshaded; 1: fully shaded)","value":"zeros(nConExtWin)","arraySubscripts":"[nConExtWin]"},{"className":"String","qualifiers":["array","parameter"],"name":"sensorName","comment":"Names of sensors as declared in the CFD input file","arraySubscripts":"[:]","annotations":{"dialog":"Dialog(group \u003d \"CFD\")"}},{"className":"String","qualifiers":["array","parameter"],"name":"portName","comment":"Names of fluid ports as declared in the CFD input file","value":"{\"port_\"+String(i)i in 1:nPorts}","arraySubscripts":"[nPorts]","annotations":{"dialog":"Dialog(group \u003d \"CFD\")"}},{"className":"String","qualifiers":["parameter"],"name":"cfdFilNam","comment":"CFD input file name","annotations":{"dialog":"Dialog(group \u003d \"CFD\", __Dymola_loadSelector(caption \u003d \"Select CFD input file\"))"}},{"className":"Modelica.Blocks.Interfaces.RealOutput","qualifiers":["array"],"name":"yCFD","comment":"Sensor for output from CFD","arraySubscripts":"[nSen]","conditionalClause":" if haveSensor","annotations":{"placement":"Placement(transformation(extent \u003d {{460,110},{480,130}}), iconTransformation(extent \u003d {{200,110},{220,130}}))"}}],"annotations":{"diagram":"Diagram(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-260,-220},{460,200}}), graphics)","documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nRoom model that computes the room air flow using computational fluid dynamics (CFD). The CFD simulation is coupled to the thermal simulation of the room\nand, through the fluid port, to the air conditioning system.\n\u003c/p\u003e\n\u003cp\u003e\nCurrently, the supported CFD program is the\nFast Fluid Dynamics (FFD) program \u003ca href\u003d\\\"#ZUO2010\\\"\u003e(Zuo 2010)\u003c/a\u003e.\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Rooms.UsersGuide\\\"\u003eBuildings.Rooms.UsersGuide\u003c/a\u003e\nfor detailed explanations.\n\u003c/p\u003e\n\u003ch4\u003eReferences\u003c/h4\u003e\n\u003cp\u003e\n\u003ca NAME\u003d\\\"ZUO2010\\\"/\u003e\nWangda Zuo. \u003ca href\u003d\\\"http://docs.lib.purdue.edu/dissertations/AAI3413824/\\\"\u003e\nAdvanced simulations of air distributions in buildings\u003c/a\u003e.\nPh.D. Thesis, School of Mechanical Engineering, Purdue University, 2010.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-200,-200},{200,200}}), graphics \u003d {Rectangle(),Bitmap(),Text(),Text(),Text(),Text()})"}},"Buildings.Fluid.SolarCollectors.EN12975":{"name":"Buildings.Fluid.SolarCollectors.EN12975","comment":"Model of a concentrating solar collector","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.SolarCollectors.BaseClasses.PartialSolarCollector","modifications":[{"name":"perPar","qualifiers":["final"],"value":"per"}]}],"components":[{"className":"Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector","qualifiers":["parameter"],"name":"per","comment":"Performance data","annotations":{"placement":"Placement(transformation(extent \u003d {{60,-80},{80,-60}}))"}},{"className":"BaseClasses.EN12975SolarGain","name":"solGai","comment":"Identifies heat gained from the sun using standard EN12975 calculations","modifications":[{"name":"A_c","qualifiers":["final"],"value":"TotalArea_internal"},{"name":"nSeg","qualifiers":["final"],"value":"nSeg"},{"name":"y_intercept","qualifiers":["final"],"value":"per.y_intercept"},{"name":"B0","qualifiers":["final"],"value":"per.B0"},{"name":"B1","qualifiers":["final"],"value":"per.B1"},{"name":"shaCoe","qualifiers":["final"],"value":"shaCoe"},{"name":"iamDiff","qualifiers":["final"],"value":"per.IAMDiff"},{"name":"use_shaCoe_in","qualifiers":["final"],"value":"use_shaCoe_in"},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,38},{0,58}}))"}},{"className":"BaseClasses.EN12975HeatLoss","name":"heaLos","comment":"Calculates the heat lost to the surroundings using the EN12975 standard calculations","modifications":[{"name":"A_c","qualifiers":["final"],"value":"TotalArea_internal"},{"name":"nSeg","qualifiers":["final"],"value":"nSeg"},{"name":"y_intercept","qualifiers":["final"],"value":"per.y_intercept"},{"name":"C1","qualifiers":["final"],"value":"per.C1"},{"name":"C2","qualifiers":["final"],"value":"per.C2"},{"name":"Medium","qualifiers":["redeclare","package"],"value":"Medium"},{"name":"G_nominal","qualifiers":["final"],"value":"per.G_nominal"},{"name":"dT_nominal","qualifiers":["final"],"value":"per.dT_nominal"},{"name":"m_flow_nominal","qualifiers":["final"],"value":"per.mperA_flow_nominal*per.A"},{"name":"cp_default","qualifiers":["final"],"value":"cp_default"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-20,6},{0,26}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n      \u003ch4\u003eOverview\u003c/h4\u003e\n        \u003cp\u003e\n          This component models a solar thermal collector according\n          to the EN12975 test standard.\n        \u003c/p\u003e\n      \u003ch4\u003eNotice\u003c/h4\u003e\n        \u003cul\u003e\n          \u003cli\u003e\n            As mentioned in EnergyPlus 7.0.0 Engineering Reference, the SRCC\n            incident angle modifier equation coefficients are only valid for\n            incident angles of 60 degrees or less. Because these curves behave\n            poorly for angles greater than 60 degrees the model does not calculate\n            either direct or diffuse solar radiation gains when the incidence\n            angle is greater than 60 degrees.\n          \u003c/li\u003e\n          \u003cli\u003e\n            By default, the estimated heat capacity of the collector without\n            fluid is calculated based on the dry mass and the specific heat\n            capacity of copper.\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003ch4\u003eReferences\u003c/h4\u003e\n        \u003cp\u003e\n          \u003ca href\u003d\\\"http://www.energyplus.gov\\\"\u003eEnergyPlus 7.0.0 Engineering Reference\u003c/a\u003e, October 13, 2011.\u003cbr/\u003e\n        \u003c/p\u003e\n    \u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Polygon(),Rectangle(),Line(),Ellipse(),Line(),Line(),Line(),Line(),Line(),Line(),Line(),Line()})"}},"Buildings.Utilities.Psychrometrics.Functions.TDewPoi_pW_amb":{"name":"Buildings.Utilities.Psychrometrics.Functions.TDewPoi_pW_amb","comment":"Function to compute the dew point temperature of moist air for a given water vapor partial pressure","superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"Modelica.SIunits.Pressure","qualifiers":["input"],"name":"p_w","comment":"Water vapor partial pressure","modifications":[{"name":"displayUnit","value":"\"Pa\""},{"name":"min","value":"100"}]},{"className":"Modelica.SIunits.Temperature","qualifiers":["output"],"name":"T","comment":"Dew point temperature"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nDew point temperature calculation for moist air between \u003ci\u003e0\u003c/i\u003e\u0026deg;C and \u003ci\u003e30\u003c/i\u003e\u0026deg;C\nwith partial pressure of water vapor as an input.\n\u003c/p\u003e\n\u003cp\u003e\nThe correlation used in this model is valid for dew point temperatures between\n\u003ci\u003e0\u003c/i\u003e\u0026deg;C and \u003ci\u003e30\u003c/i\u003e\u0026deg;C. It is an approximation to the correlation from 2005\nASHRAE Handbook, p. 6.2, which is valid in a wider range of temperatures and implemented\nin\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Psychrometrics.Functions.pW_TDewPoi\\\"\u003e\nBuildings.Utilities.Psychrometrics.Functions.pW_TDewPoi\u003c/a\u003e.\nThe approximation error of this simplified function is below 5% for a\ntemperature of \u003ci\u003e0\u003c/i\u003e\u0026deg;C to \u003ci\u003e30\u003c/i\u003e\u0026deg;C.\nThe benefit of this simpler function is that it can be inverted analytically,\nwhereas the other function requires a numerical solution.\n\u003c/p\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Inductive":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.Inductive","comment":"Model of a three-phase unbalanced inductive load without neutral cable","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl","modifications":[{"name":"load1"},{"name":"load2"},{"name":"load3"}]}],"components":[{"className":"Boolean","qualifiers":["parameter"],"name":"use_pf_in","comment":"If true, the power factor is defined by an input","value":"false","annotations":{"dialog":"Dialog(group \u003d \"Modeling assumption\")"}},{"className":"Real","qualifiers":["parameter"],"name":"pf","comment":"Power factor","value":"0.8","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"}],"annotations":{"dialog":"Dialog(group \u003d \"Nominal conditions\")"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_1","comment":"Power factor of load on phase 1","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase1","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {-60,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_2","comment":"Power factor of load on phase 2","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase2","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {50,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {0,-100}))"}},{"className":"Modelica.Blocks.Interfaces.RealInput","name":"pf_in_3","comment":"Power factor of load on phase 3","modifications":[{"name":"min","value":"0"},{"name":"max","value":"1"},{"name":"unit","value":"\"1\""}],"conditionalClause":" if use_pf_in and plugPhase3","annotations":{"placement":"Placement(transformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {20,-120}), iconTransformation(extent \u003d {{-20,-20},{20,20}}, rotation \u003d 90, origin \u003d {62,-100}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model represents a three-phase unbalanced inductive load.\nThe model extends from\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\u003c/a\u003e\nand uses the load model from the package\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads\u003c/a\u003e.\nThe model computes the voltages, currents and powers on each phase.\n\u003c/p\u003e\n\u003cp\u003e\nFor more information, see \u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\\\"\u003e\nBuildings.Electrical.AC.ThreePhasesUnbalanced.Loads.BaseClasses.LoadCtrl\u003c/a\u003e and\n\u003ca href\u003d\\\"modelica://Buildings.Electrical.AC.OnePhase.Loads.Inductive\\\"\u003e\nBuildings.Electrical.AC.OnePhase.Loads.Inductive\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Rectangle(),Rectangle(),Rectangle(),Line(),Line(),Line(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Line(),Text(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Ellipse(),Ellipse(),Ellipse(),Rectangle(),Line(),Line(),Rectangle(),Line(),Line(),Line(),Line()})"}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal4_p":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.Terminal4_p","comment":"Terminal P for AC three-phase unbalanced systems (neutral cable)","qualifiers":["connector"],"components":[{"className":"Buildings.Electrical.AC.OnePhase.Interfaces.Terminal_p","qualifiers":["array"],"name":"phase","comment":"Terminal with 3 phases and neutral cable","arraySubscripts":"[4]"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003eElectric connector type p for AC three-phase unbalanced systems\nwith neutral cable connection.\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Polygon(),Polygon(),Polygon(),Polygon()})"}},"Buildings.Electrical.Transmission.LowVoltageCables.Cu95":{"name":"Buildings.Electrical.Transmission.LowVoltageCables.Cu95","comment":"Cu cable 95 mm^2","superClasses":[{"nameOfExtendedClass":"Buildings.Electrical.Transmission.LowVoltageCables.Generic","modifications":[{"name":"material","value":"Types.Material.Cu"},{"name":"M","value":"234.5+273.15"},{"name":"Amp","value":"220"},{"name":"RCha","value":"0.191e-003"},{"name":"XCha","value":"0.072e-003"}]}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nCopper cable with a cross-sectional area of 95mm^2.\nThis type of cable has the following properties\n\u003c/p\u003e\n\u003cpre\u003e\nRCha \u003d 0.191e-003 // Characteristic resistance [Ohm/m]\nXCha \u003d 0.072e-003 // Characteristic reactance [Ohm/m]\n\u003c/pre\u003e\n\u003c/html\u003e\""}},"Buildings.Fluid.HeatExchangers.DXCoils.SingleSpeed":{"name":"Buildings.Fluid.HeatExchangers.DXCoils.SingleSpeed","comment":"Single speed DX cooling coil","qualifiers":["model"],"superClasses":[{"nameOfExtendedClass":"Buildings.Fluid.HeatExchangers.DXCoils.BaseClasses.PartialDXCoil","modifications":[{"name":"dxCoo","modifications":[{"name":"variableSpeedCoil","qualifiers":["final"],"value":"false"}]},{"name":"nSta","qualifiers":["final"],"value":"1"}]}],"components":[{"className":"Modelica.Blocks.Sources.Constant","name":"speRat","comment":"Speed ratio","modifications":[{"name":"k","qualifiers":["final"],"value":"1"}],"annotations":{"placement":"Placement(transformation(extent \u003d {{-56,58},{-44,70}}))"}},{"className":"Modelica.Blocks.Interfaces.BooleanInput","name":"on","comment":"Set to true to enable compressor, or false to disable compressor","annotations":{"placement":"Placement(transformation(extent \u003d {{-120,70},{-100,90}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nThis model can be used to simulate a DX cooling coil with single speed compressor.\n\u003c/p\u003e\n\u003cp\u003e\nSee\n\u003ca href\u003d\\\"modelica://Buildings.Fluid.HeatExchangers.DXCoils.UsersGuide\\\"\u003e\nBuildings.Fluid.HeatExchangers.DXCoils.UsersGuide\u003c/a\u003e\nfor an explanation of the model.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.UsersGuide.ReleaseNotes.Version_1_0_build1":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_0_build1","comment":"Version 1.0 build 1","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.0 is the first official release of the \u003ccode\u003eBuildings\u003c/code\u003e\nlibrary.\nCompared to the last pre-release, which is version 0.12, this version contains\nnew models as well as significant improvements to the model formulation\nthat leads to faster and more robust simulation. A detailed list of changes is shown below.\n\u003c/p\u003e\n\u003cp\u003e\nVersion 1.0 is not backward compatible to version 0.12, i.e., models developed with\nversions 0.12 will require some changes in their parameters to\nwork with version 1.0.\nThe conversion script\n\u003ca href\u003d\\\"modelica://Buildings/Resources/Scripts/Dymola/ConvertBuildings_from_0.12_to_1.0.mos\\\"\u003e\nBuildings/Resources/Scripts/Dymola/ConvertBuildings_from_0.12_to_1.0.mos\u003c/a\u003e can help\nin converting old models to this version of the library.\n\u003c/p\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew libraries\u003c/b\u003e have been added:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\"\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.Boreholes\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n    This is a library with a model for a borehole heat exchanger.\n    \u003c/td\u003e\u003c/tr\u003e\n\u003c/table\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003enew components\u003c/b\u003e have been added\nto \u003cb style\u003d\\\"color:blue\\\"\u003eexisting\u003c/b\u003e libraries:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Airflow.Multizone\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.BaseClasses.windPressureLowRise\n                      \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a function that computes wind pressure on the facade of low-rise buildings.\n    \u003c/td\u003e \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Examples\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.ChillerPlant\n                      \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded an example for a chilled water plant model.\n    \u003c/td\u003e \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Interfaces\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.UsersGuide\n                      \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a user\u0027s guide that describes\n                       the main functionality of all base classes.\n    \u003c/td\u003e \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Sources\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sources.Outside_Cp\u003cbr/\u003e\n                       Buildings.Fluid.Sources.Outside_CpLowRise\n                      \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded models to compute wind pressure on building\n                       facades.\n    \u003c/td\u003e \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Conductor\n                      \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded a model for heat conduction in circular coordinates.\n    \u003c/td\u003e \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms.Examples\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.Examples.BESTEST\n                      \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded BESTEST validation models.\n    \u003c/td\u003e \u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Math\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Math.Functions.cubicHermiteLinearExtrapolation\u003cbr/\u003e\n                       Buildings.Utilities.Math.Functions.splineDerivatives.\n                      \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded functions for cubic hermite spline interpolation, with\n                       option for monotone increasing (or decreasing) spline.\n    \u003c/td\u003e \u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Airflow.Multizone\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.BaseClasses.powerLaw\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis function has been reimplemented to handle zero flow rate\n                     in a more robust and more efficient way.\n                     This change improves all components that model flow resistance in\n                     the package Buildings.Airflow.Multizone.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions.WeatherData\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.ReaderTMY3\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis model has now the option of using a constant value,\n                     using the data from the weather file, or from an input connector for 7 variables,\n                     including atmospheric pressure, relative humidity, dry bulb temperature,\n                     global horizontal radiation, diffuse horizontal radiation,\n                     wind direction and wind speed.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n                      Buildings.Fluid.Actuators.BaseClasses.PartialActuator\u003cbr/\u003e\n                      Buildings.Fluid.Actuators.BaseClasses.PartialDamperExponential\u003cbr/\u003e\n                      Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\u003cbr/\u003e\n                      Buildings.Fluid.BaseClasses.PartialResistance\u003cbr/\u003e\n                      Buildings.Fluid.BaseClasses.FlowModels.basicFlowFunction_dp\u003cbr/\u003e\n                      Buildings.Fluid.BaseClasses.FlowModels.basicFlowFunction_m_flow\u003cbr/\u003e\n                      Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe computation of the linearized flow resistance has been moved from\n                     the functions to the model, i.e., into an equation section.\n                     If the linear implementation is in a function body, then a symbolic processor\n                     may not invert the equation. This can lead to systems of coupled equations in\n                     cases where an explicit solution is possible.\n                     In addition, the handling of zero flow rate has been improved for the nonlinear\n                     pressure drop model.\n                     These improvements affect all models in \u003ccode\u003eBuildings.Fluid\u003c/code\u003e that compute\n                     flow resistance.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.HeatExchangers\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.HeaterCoolerPrescribed\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis model can now be configured as a steady-state or dynamic model.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.DryCoilCounterFlow\u003cbr/\u003e\n                     Buildings.Fluid.HeatExchangers.WetCoilCounterFlow\u003cbr/\u003e\n                     Buildings.Fluid.HeatExchangers.DryCoilDiscretized\u003cbr/\u003e\n                     Buildings.Fluid.HeatExchangers.WetCoilDiscretized\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe implementation for handling zero flow rate, if the models\nare used as steady-state models, have been improved.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.BaseClasses.ntu_epsilonZ\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged implementation to use\n                     \u003ccode\u003eModelica.Media.Common.OneNonLinearEquation\u003c/code\u003e instead of\n                     \u003ccode\u003eBuildings.Utilities.Math.BaseClasses.OneNonLinearEquation\u003c/code\u003e,\n                     which was removed for this version of the library.\n                     \u003c/td\u003e\n\u003c/tr\u003e\n\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.HeatExchangers.CoolingTowers\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc\u003cbr/\u003e\n                     Buildings.Fluid.HeatExchangers.CoolingTowers.FixedApproach\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n       These models are now based on a new base class \u003ccode\u003eBuildings.Fluid.HeatExchangers.CoolingTowers.BaseClasses.CoolingTower\u003c/code\u003e.\n       This allows using the models as replaceable models without warning when checking the model.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.HeatExchangers.CoolingTowers.YorkCalc\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n       Changed implementation of performance curve to avoid division by zero.\n    \u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.MassExchangers\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MassExchangers.HumidifierPrescribed\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis model can now be configured as a steady-state or dynamic model.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Sensors\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.*TwoPort\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAll sensors with two ports, except for the mass flow rate sensor,\n                     have been revised to add sensor dynamics.\n                     Adding sensor dynamics avoids numerical problems when mass flow\n                     rates are close to zero and the sensor is configured to allow\n                     flow reversal. See\n                     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.UsersGuide\\\"\u003e\n                     Buildings.Fluid.Sensors.UsersGuide\u003c/a\u003e for details.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Storage\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.Stratified\u003cbr/\u003e\n                     Buildings.Fluid.Storage.StratifiedEnhanced\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the implementation of the model \u003ccode\u003eBuoyancy\u003c/code\u003e\n                     to make it differentiable in the temperatures.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Media\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.Interfaces.PartialSimpleMedium\u003cbr/\u003e\n                     Buildings.Media.Interfaces.PartialSimpleIdealGasMedium\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eMoved the assignment of the \u003ccode\u003estateSelect\u003c/code\u003e attribute for\n                     the \u003ccode\u003eBaseProperties\u003c/code\u003e to the model\n                     \u003ccode\u003eBuildings.Fluid.MixingVolumes.MixingVolume\u003c/code\u003e. This allows\n                     to handle it differently for steady-state and dynamic models.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Psychrometrics\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Psychrometrics.Functions.TDewPoi_pW\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged implementation to use\n                     \u003ccode\u003eModelica.Media.Common.OneNonLinearEquation\u003c/code\u003e instead of\n                     \u003ccode\u003eBuildings.Utilities.Math.BaseClasses.OneNonLinearEquation\u003c/code\u003e,\n                     which was removed for this version of the library.\n                     \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003c/table\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003enon-backward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Airflow.Multizone\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.MediumColumnDynamic\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe implementation has been changed to better handle mass flow rates\nnear zero flow.\nThis required the introduction of a new parameter \u003ccode\u003em_flow_nominal\u003c/code\u003e\nthat is used for the regularization near zero mass flow rate.\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Storage.Examples.Stratified\u003cbr/\u003e\n                     Buildings.Fluid.MixingVolumes\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n                     Removed the parameters \u003ccode\u003euse_T_start\u003c/code\u003e and \u003ccode\u003eh_start\u003c/code\u003e,\n                     as \u003ccode\u003eT_start\u003c/code\u003e is more convenient to use than \u003ccode\u003eh_start\u003c/code\u003e\n                     for building simulation.\n                     \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Boilers\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Boilers.BoilerPolynomial\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe parameter \u003ccode\u003edT_nominal\u003c/code\u003e has been removed\nas it can be computed from the parameter \u003ccode\u003em_flow_nominal\u003c/code\u003e.\nThis change was needed to avoid a non-literal value for the nominal\nattribute for the mass flow rate in the pressure drop model.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.MixingVolumes\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.MixingVolumes.MixingVolume\u003cbr/\u003e\n                     Buildings.Fluid.MixingVolumes.MixingVolumeDryAir\u003cbr/\u003e\n                     Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe implementation has been changed to better handle mass flow rates\nnear zero flow if the components have exactly two fluid ports connected.\nThis required the introduction of a new parameter \u003ccode\u003em_flow_nominal\u003c/code\u003e\nthat is used for the regularization near zero mass flow rate.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Movers\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Movers.SpeedControlled_y\u003cbr/\u003e\n                     Buildings.Fluid.Movers.SpeedControlled_Nrpm\u003cbr/\u003e\n                     Buildings.Fluid.Movers.FlowControlled_dp\u003cbr/\u003e\n                     Buildings.Fluid.Movers.FlowControlled_m_flow\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n                     The performance data are now defined through records and not\n                     through replaceable functions. The performance data now needs to be\n                     declared in the form\u003cpre\u003e\n pressure(V_flow_nominal\u003d{0,V_flow_nominal,2*V_flow_nominal},\n          dp_nominal\u003d{2*dp_nominal,dp_nominal,0})\u003c/pre\u003e\n                     where \u003ccode\u003epressure\u003c/code\u003e is an instance of a record. A similar declaration is\n                     used for power and efficiency.\n                     \u003cbr/\u003e\n                     The parameter m_flow_nominal has been removed from\n                     FlowMachine_y and FlowMachine_Nrpm.\n                                \u003cbr/\u003e\n                     The parameter m_flow_max has been replaced by m_flow_nominal in\n                     FlowMachine_m_flow.\n                                \u003cbr/\u003e\n                     The implementation of the pressure drop computation as a function\n                     of speed and volume flow rate has been revised to avoid a singularity\n                     near zero volume flow rate and zero speed.\u003cbr/\u003e\n                     The implementation has also been simplified to avoid using two different flow paths\n                     if the models are configured for steady-state or dynamic simulation.\u003c/td\u003e\u003c/tr\u003e\n\n\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Interfaces\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.FourPortHeatMassExchanger\u003cbr/\u003e\n                     Buildings.Fluid.Interfaces.PartialDynamicStaticFourPortHeatMassExchanger\u003cbr/\u003e\n                     Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\u003cbr/\u003e\n                     Buildings.Fluid.Interfaces.PartialDynamicStaticTwoPortHeatMassExchanger\u003cbr/\u003e\n                     Buildings.Fluid.Interfaces.ConservationEquation\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe implementation has been changed to better handle mass flow rates\nnear zero flow if the components have exactly two fluid ports connected.\u003c/td\u003e\n\u003c/tr\u003e\n\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Sensors\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Sensors.TemperatureTwoPortDynamic\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis model has been deleted since the sensor\n                     \u003ca href\u003d\\\"modelica://Buildings.Fluid.Sensors.TemperatureTwoPort\\\"\u003e\n                     Buildings.Fluid.Sensors.TemperatureTwoPort\u003c/a\u003e has been revised\n                     and can now also be used as a dynamic model of a sensor.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.Interfaces\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialStaticTwoPortInterface\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed to Buildings.Fluid.Interfaces.PartialTwoPortInterface\u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialStaticStaticTwoPortHeatMassExchanger\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed to Buildings.Fluid.Interfaces.StaticTwoPortHeatMassExchanger\u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialTwoPortHeatMassExchanger\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed to Buildings.Fluid.Interfaces.TwoPortHeatMassExchanger\u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialFourPort\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed to Buildings.Fluid.Interfaces.FourPort\u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialStaticStaticFourPortHeatMassExchanger\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed to Buildings.Fluid.Interfaces.StaticFourPortHeatMassExchanger\u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialStaticFourPortInterface\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed to Buildings.Fluid.Interfaces.PartialFourPortInterface\u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Fluid.Interfaces.PartialFourPortHeatMassExchanger\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eRenamed to Buildings.Fluid.Interfaces.FourPortHeatMassExchanger\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Math\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Math.BaseClasses.OneNonLinearEquation\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThis package has been removed, and all functions have been\n                       revised to use Modelica.Media.Common.OneNonLinearEquation.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Utilities.Reports\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Utilities.Reports.Printer\u003cbr/\u003e\n                     Buildings.Utilities.Reports.printRealArray\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged parameter \u003ccode\u003eprecision\u003c/code\u003e to \u003ccode\u003esignificantDigits\u003c/code\u003e and\n                     \u003ccode\u003eminimumWidth\u003c/code\u003e to \u003ccode\u003eminimumLength\u003c/code\u003e\n                     to use the same terminology as the Modelica Standard Library.\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003c/table\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.SkyTemperature.BlackBody\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed error in \u003ccode\u003eif-then\u003c/code\u003e statement that led to\n                       a selection of the wrong branch to compute the sky temperature.\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Media\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.PartialSimpleMedium\u003cbr/\u003e\n                       Buildings.Media.GasesConstantDensity.SimpleAir\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed error in assignment of \u003ccode\u003esingleState\u003c/code\u003e parameter.\n                       This change can lead to different initial conditions if the density of\n                       water is modeled as a function of pressure, or if the\n                       medium model Buildings.Media.GasesConstantDensity.SimpleAir is used.\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.GasesConstantDensity\u003cbr/\u003e\n                       Buildings.Media.GasesConstantDensity.MoistAir\u003cbr/\u003e\n                       Buildings.Media.GasesConstantDensity.MoistAirUnsaturated\u003cbr/\u003e\n                       Buildings.Media.GasesConstantDensity.SimpleAir\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed error in the function \u003ccode\u003edensity\u003c/code\u003e which returned a non-constant density,\n                     and added a call to \u003ccode\u003eModelicaError(...)\u003c/code\u003e in \u003ccode\u003esetState_dTX\u003c/code\u003e since this\n                     function cannot assign the medium pressure based on the density (as density is a constant\n                     in this model).\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.Interfaces.PartialSimpleIdealGasMedium\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eUpdated package with a new copy from the Modelica Standard Library, since\n                     the Modelica Standard Library fixed a bug in computing the internal energy of the medium.\n                     This bug led to very fast temperature transients at the start of the simulation.\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.Interfaces.PartialSimpleMedium\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug in function density, which always returned \u003ccode\u003ed_const\u003c/code\u003e,\n                       regardless of the value of \u003ccode\u003econstantDensity\u003c/code\u003e.\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.GasesPTDecoupled\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug in \u003ccode\u003eu\u003dh-R*T\u003c/code\u003e, which is only valid for ideal gases.\n                       For this medium, the function is \u003ccode\u003eu\u003dh-pStd/dStp\u003c/code\u003e.\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Media.GasesConstantDensity\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug in \u003ccode\u003eu\u003dh-R*T\u003c/code\u003e, which is only valid for ideal gases.\n                       For this medium, the function is \u003ccode\u003eu\u003dh-p/dStp\u003c/code\u003e.\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\u003cbr/\u003e\n                     Buildings.Rooms.BaseClasses.ExteriorBoundaryConditions\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug (\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/35\\\"\u003eissue 35\u003c/a\u003e)\n                     that leads to the wrong solar heat gain for\n                     roofs and for floors. Prior to this bug fix, the outside facing surface\n                     of a ceiling received solar irradiation as if it were a floor\n                     and vice versa.\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.MixedAir\u003cbr/\u003e\n                     Buildings.Rooms.BaseClasses.ExteriorBoundaryConditionsWithWindow\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug (\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/36\\\"\u003eissue 36\u003c/a\u003e)\n                     that leads to too high a surface temperature of the window frame when\n                     it receives solar radiation. The previous version did not compute\n                     the infrared radiation exchange between the\n                     window frame and the sky.\u003c/td\u003e\u003c/tr\u003e\n\n\u003c/table\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003euncritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat do \u003cb style\u003d\\\"color:red\\\"\u003enot\u003c/b\u003e lead to wrong simulation results, but, e.g.,\nunits are wrong or errors in documentation):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.BoundaryConditions.WeatherData.BaseClasses.ConvertRadiation\u003c/td\u003e\n    \u003ctd\u003eCorrected wrong unit label.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.BoundaryConditions\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/8\\\"\u003e\u0026#35;8\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Add switches for new data.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/19\\\"\u003e\u0026#35;19\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Shift the time for the radiation data 30 min forth and output the local civil time in the data reader.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/41\\\"\u003e\u0026#35;41\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n       Using when-then sentences to reduce CPU time.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/43\\\"\u003e\u0026#35;43\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Add a ConvertRadiation to convert the unit of radiation from TMY3.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/28\\\"\u003e\u0026#35;28\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Move scripts to Buildings\\\\Resources\\\\Scripts\\\\Dymola.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/18\\\"\u003e\u0026#35;18\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Add a smooth interpolation function to avoid the event.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Media\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/30\\\"\u003e\u0026#35;30\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Removed non-required structurally incomplete annotation.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/35\\\"\u003e\u0026#35;35\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         Wrong surface tilt for radiation at exterior surfaces of floors and ceilings.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\n    \u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/36\\\"\u003e\u0026#35;36\u003c/a\u003e\u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003e\n         High window frame temperatures.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\nNote:\n\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\nThe version number scheme has been changed. It is now identical to the one used by the Modelica Standard Library.\nVersions are identified with two numbers \u003ccode\u003ex.y\u003c/code\u003e and a build number. The first official\nrelease of each version has the build number \u003ccode\u003e1\u003c/code\u003e. For each released bug fix,\nthe build number is incremented.\nSee\n\u003ca href\u003d\\\"modelica://Modelica.UsersGuide.ReleaseNotes.VersionManagement\\\"\u003e\nModelica.UsersGuide.ReleaseNotes.VersionManagement\u003c/a\u003e for details.\n\u003c/li\u003e\n\u003cli\u003e\nTo allow adding scripts for multiple simulation environments,\nall scripts have been moved to the directory \u003ccode\u003eBuildings/Resources/Scripts/Dymola\u003c/code\u003e and the annotation that\ngenerates the entry in the \u003ccode\u003eCommand\u003c/code\u003e pull down menu has been changed to\n\u003ccode\u003e__Dymola_Commands(file\u003d...\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/html\u003e\""}},"Buildings.UsersGuide.ReleaseNotes.Version_1_0_build2":{"name":"Buildings.UsersGuide.ReleaseNotes.Version_1_0_build2","comment":"Version 1.0 build 2","qualifiers":["class"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.ReleaseNotes"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nVersion 1.0 build 2 has been released to correct model errors that\nwere present in version 1.0 build 1. Both versions are compatible.\nIn addition, version 1.0 build 2 contains improved documentation\nof various example models.\n\u003c!-- New libraries --\u003e\n\u003c!-- New components for existing libraries --\u003e\n\u003c!-- Backward compatible changes --\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:blue\\\"\u003eexisting components\u003c/b\u003e\nhave been \u003cb style\u003d\\\"color:blue\\\"\u003eimproved\u003c/b\u003e in a\n\u003cb style\u003d\\\"color:blue\\\"\u003ebackward compatible\u003c/b\u003e way:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Controls\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Controls.Continuous\u003cbr/\u003e\n                       Buildings.Controls.Discrete\u003cbr/\u003e\n                       Buildings.Controls.SetPoints\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved documentation of models and of examples.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Airflow.Multizone\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.DoorDiscretizedOpen\u003cbr/\u003e\n                     Buildings.Airflow.Multizone.DoorDiscretizedOperable\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eChanged the computation of the discharge coefficient to use the\n       nominal density instead of the actual density.\n       Computing \u003ccode\u003esqrt(2/rho)\u003c/code\u003e sometimes causes warnings from the solver,\n       as it seems to try negative values for the density during iterative solutions.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Airflow.Multizone.Examples\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved documentation of examples.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Examples.DualFanDualDuct\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Examples.DualFanDualDuct.Controls.RoomMixingBox\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eImproved control of minimum air flow rate to avoid overheating.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\n\u003c!-- Non-backward compatbile changes to existing components --\u003e\n\u003c!-- Errors that have been fixed --\u003e\n\u003cp\u003e\nThe following \u003cb style\u003d\\\"color:red\\\"\u003ecritical errors\u003c/b\u003e have been fixed (i.e., errors\nthat can lead to wrong simulation results):\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.HeatTransfer\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.HeatTransfer.Convection.Exterior\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed error in assignment of wind-based convection coefficient.\n                     The old implementation did not take into account the surface roughness.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.BaseClasses.SolarRadiationExchange\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eIn the previous version, the radiative properties\n     of the long-wave spectrum instead of the solar spectrum have been used\n     to compute the distribution of the solar radiation among the surfaces\n     inside the room.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.BaseClasses.MixedAir\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eAdded missing connect statement between window frame\n     surface and window frame convection model. Prior to this bug fix,\n     no convective heat transfer was computed between window frame and\n     room air.\n    \u003c/td\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003eBuildings.Rooms.BaseClasses.HeatGain\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eFixed bug that caused convective heat gains\n     to be removed from the room instead of added to the room.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- Uncritical errors --\u003e\n\u003c!-- Github issues --\u003e\n\n\u003cp\u003e\nThe following\n\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues\\\"\u003eissues\u003c/a\u003e\nhave been fixed:\n\u003c/p\u003e\n\u003ctable class\u003d\\\"releaseTable\\\" summary\u003d\\\"summary\\\" border\u003d\\\"1\\\" cellspacing\u003d\\\"0\\\" cellpadding\u003d\\\"2\\\" style\u003d\\\"border-collapse:collapse;\\\"\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Fluid.HeatExchangers.Boreholes\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/45\\\"\u003e\u0026#35;45\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eDymola 2012 FD01 hangs when simulating a borehole heat exchanger.\n    This was caused by a wrong release of memory in \u003ccode\u003efreeArray.c\u003c/code\u003e.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd colspan\u003d\\\"2\\\"\u003e\u003cb\u003eBuildings.Rooms\u003c/b\u003e\n    \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd valign\u003d\\\"top\\\"\u003e\u003ca href\u003d\\\"https://github.com/lbl-srg/modelica-buildings/issues/46\\\"\u003e\u0026#35;46\u003c/a\u003e\n    \u003c/td\u003e\n    \u003ctd valign\u003d\\\"top\\\"\u003eThe convective internal heat gain has the wrong sign.\n    \u003c/td\u003e\n\u003c/tr\u003e\n\n\u003c/table\u003e\n\u003c/html\u003e\""}},"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.WyeToDelta":{"name":"Buildings.Electrical.AC.ThreePhasesUnbalanced.Interfaces.WyeToDelta","comment":"This model represent a connection between wye to delta","qualifiers":["model"],"components":[{"className":"Terminal_n","name":"wye","comment":"Terminal Y","annotations":{"placement":"Placement(transformation(extent \u003d {{-110,-10},{-90,10}}), iconTransformation(extent \u003d {{-110,-10},{-90,10}}))"}},{"className":"Terminal_n","name":"delta","comment":"Terminal D","annotations":{"placement":"Placement(transformation(extent \u003d {{90,-10},{110,10}}), iconTransformation(extent \u003d {{90,-10},{110,10}}))"}}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nAdapter from Wye (Y) to Delta (D) connector.\nA three-phase unbalanced connector has three AC single phase\nconnectors. Each AC single phase connector contains the phase voltage,\nwhich is measured between the phase and the neutral.\nThis model converts the phase voltage to the line voltage, measured between\nthe phases.\n\u003c/p\u003e\n\u003cp\u003e\nThe image below show how the phasors are computed when converting from Y to D.\n\u003c/p\u003e\n\u003cp align\u003d\\\"center\\\"\u003e\n\u003cimg alt\u003d\\\"image\\\" src\u003d\\\"modelica://Buildings/Resources/Images/Electrical/AC/ThreePhasesUnbalanced/Interfaces/YtoD.png\\\"/\u003e\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(coordinateSystem(preserveAspectRatio \u003d false, extent \u003d {{-100,-100},{100,100}}), graphics \u003d {Line()})"}},"Buildings.Utilities.Math.SmoothLimit":{"name":"Buildings.Utilities.Math.SmoothLimit","comment":"Once continuously differentiable approximation to the limit function","qualifiers":["block"],"superClasses":[{"nameOfExtendedClass":"Modelica.Blocks.Interfaces.SISO"}],"components":[{"className":"Real","qualifiers":["parameter"],"name":"deltaX","comment":"Width of transition interval"},{"className":"Real","qualifiers":["parameter"],"name":"upper","comment":"Upper limit"},{"className":"Real","qualifiers":["parameter"],"name":"lower","comment":"Lower limit"}],"annotations":{"documentationInfo":"info \u003d \"\u003chtml\u003e\n\u003cp\u003e\nOnce continuously differentiable approximation to the \u003ci\u003elimit(.,.)\u003c/i\u003e function.\nThe output is bounded to be in \u003ci\u003e[lower, upper]\u003c/i\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nNote that the limit need not be respected, such as illustrated in\n\u003ca href\u003d\\\"modelica://Buildings.Utilities.Math.Examples.SmoothMin\\\"\u003e\nBuildings.Utilities.Math.Examples.SmoothMin\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/html\u003e\"","icon":"Icon(graphics \u003d {Text()})"}},"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.activePower":{"name":"Buildings.Electrical.PhaseSystems.PartialPhaseSystem.activePower","comment":"Return total power as function of phase powers","qualifiers":["replaceable","partial"],"superClasses":[{"nameOfExtendedClass":"Modelica.Icons.Function"}],"components":[{"className":"SI.Voltage","qualifiers":["array","input"],"name":"v","comment":"phase voltages","arraySubscripts":"[n]"},{"className":"SI.Current","qualifiers":["array","input"],"name":"i","comment":"phase currents","arraySubscripts":"[n]"},{"className":"SI.ActivePower","qualifiers":["output"],"name":"P","comment":"active system power"}]}}